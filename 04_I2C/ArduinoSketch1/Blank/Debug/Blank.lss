
Blank.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000010  00800100  000006b6  0000074a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000006b6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000d4  00800110  00800110  0000075a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000075a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000078c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000210  00000000  00000000  000007cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00003cab  00000000  00000000  000009dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000130c  00000000  00000000  00004687  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001218  00000000  00000000  00005993  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000004f4  00000000  00000000  00006bac  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001e47  00000000  00000000  000070a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000124a  00000000  00000000  00008ee7  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001c0  00000000  00000000  0000a131  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	47 c0       	rjmp	.+142    	; 0x90 <__ctors_end>
   2:	00 00       	nop
   4:	6c c0       	rjmp	.+216    	; 0xde <__bad_interrupt>
   6:	00 00       	nop
   8:	6a c0       	rjmp	.+212    	; 0xde <__bad_interrupt>
   a:	00 00       	nop
   c:	68 c0       	rjmp	.+208    	; 0xde <__bad_interrupt>
   e:	00 00       	nop
  10:	66 c0       	rjmp	.+204    	; 0xde <__bad_interrupt>
  12:	00 00       	nop
  14:	64 c0       	rjmp	.+200    	; 0xde <__bad_interrupt>
  16:	00 00       	nop
  18:	62 c0       	rjmp	.+196    	; 0xde <__bad_interrupt>
  1a:	00 00       	nop
  1c:	60 c0       	rjmp	.+192    	; 0xde <__bad_interrupt>
  1e:	00 00       	nop
  20:	5e c0       	rjmp	.+188    	; 0xde <__bad_interrupt>
  22:	00 00       	nop
  24:	5c c0       	rjmp	.+184    	; 0xde <__bad_interrupt>
  26:	00 00       	nop
  28:	5a c0       	rjmp	.+180    	; 0xde <__bad_interrupt>
  2a:	00 00       	nop
  2c:	58 c0       	rjmp	.+176    	; 0xde <__bad_interrupt>
  2e:	00 00       	nop
  30:	56 c0       	rjmp	.+172    	; 0xde <__bad_interrupt>
  32:	00 00       	nop
  34:	54 c0       	rjmp	.+168    	; 0xde <__bad_interrupt>
  36:	00 00       	nop
  38:	52 c0       	rjmp	.+164    	; 0xde <__bad_interrupt>
  3a:	00 00       	nop
  3c:	50 c0       	rjmp	.+160    	; 0xde <__bad_interrupt>
  3e:	00 00       	nop
  40:	4e c0       	rjmp	.+156    	; 0xde <__bad_interrupt>
  42:	00 00       	nop
  44:	4c c0       	rjmp	.+152    	; 0xde <__bad_interrupt>
  46:	00 00       	nop
  48:	77 c2       	rjmp	.+1262   	; 0x538 <__vector_18>
  4a:	00 00       	nop
  4c:	48 c0       	rjmp	.+144    	; 0xde <__bad_interrupt>
  4e:	00 00       	nop
  50:	46 c0       	rjmp	.+140    	; 0xde <__bad_interrupt>
  52:	00 00       	nop
  54:	44 c0       	rjmp	.+136    	; 0xde <__bad_interrupt>
  56:	00 00       	nop
  58:	42 c0       	rjmp	.+132    	; 0xde <__bad_interrupt>
  5a:	00 00       	nop
  5c:	40 c0       	rjmp	.+128    	; 0xde <__bad_interrupt>
  5e:	00 00       	nop
  60:	3e c0       	rjmp	.+124    	; 0xde <__bad_interrupt>
  62:	00 00       	nop
  64:	3c c0       	rjmp	.+120    	; 0xde <__bad_interrupt>
  66:	00 00       	nop
  68:	91 c0       	rjmp	.+290    	; 0x18c <__vector_26>
  6a:	00 00       	nop
  6c:	38 c0       	rjmp	.+112    	; 0xde <__bad_interrupt>
  6e:	00 00       	nop
  70:	36 c0       	rjmp	.+108    	; 0xde <__bad_interrupt>
  72:	00 00       	nop
  74:	34 c0       	rjmp	.+104    	; 0xde <__bad_interrupt>
  76:	00 00       	nop
  78:	32 c0       	rjmp	.+100    	; 0xde <__bad_interrupt>
  7a:	00 00       	nop
  7c:	30 c0       	rjmp	.+96     	; 0xde <__bad_interrupt>
  7e:	00 00       	nop
  80:	2e c0       	rjmp	.+92     	; 0xde <__bad_interrupt>
  82:	00 00       	nop
  84:	2c c0       	rjmp	.+88     	; 0xde <__bad_interrupt>
  86:	00 00       	nop
  88:	2a c0       	rjmp	.+84     	; 0xde <__bad_interrupt>
	...

0000008c <__ctors_start>:
  8c:	78 00       	.word	0x0078	; ????
  8e:	8d 02       	muls	r24, r29

00000090 <__ctors_end>:
  90:	11 24       	eor	r1, r1
  92:	1f be       	out	0x3f, r1	; 63
  94:	cf ef       	ldi	r28, 0xFF	; 255
  96:	d0 e4       	ldi	r29, 0x40	; 64
  98:	de bf       	out	0x3e, r29	; 62
  9a:	cd bf       	out	0x3d, r28	; 61

0000009c <__do_copy_data>:
  9c:	11 e0       	ldi	r17, 0x01	; 1
  9e:	a0 e0       	ldi	r26, 0x00	; 0
  a0:	b1 e0       	ldi	r27, 0x01	; 1
  a2:	e6 eb       	ldi	r30, 0xB6	; 182
  a4:	f6 e0       	ldi	r31, 0x06	; 6
  a6:	00 e0       	ldi	r16, 0x00	; 0
  a8:	0b bf       	out	0x3b, r16	; 59
  aa:	02 c0       	rjmp	.+4      	; 0xb0 <__do_copy_data+0x14>
  ac:	07 90       	elpm	r0, Z+
  ae:	0d 92       	st	X+, r0
  b0:	a0 31       	cpi	r26, 0x10	; 16
  b2:	b1 07       	cpc	r27, r17
  b4:	d9 f7       	brne	.-10     	; 0xac <__do_copy_data+0x10>

000000b6 <__do_clear_bss>:
  b6:	21 e0       	ldi	r18, 0x01	; 1
  b8:	a0 e1       	ldi	r26, 0x10	; 16
  ba:	b1 e0       	ldi	r27, 0x01	; 1
  bc:	01 c0       	rjmp	.+2      	; 0xc0 <.do_clear_bss_start>

000000be <.do_clear_bss_loop>:
  be:	1d 92       	st	X+, r1

000000c0 <.do_clear_bss_start>:
  c0:	a4 3e       	cpi	r26, 0xE4	; 228
  c2:	b2 07       	cpc	r27, r18
  c4:	e1 f7       	brne	.-8      	; 0xbe <.do_clear_bss_loop>

000000c6 <__do_global_ctors>:
  c6:	10 e0       	ldi	r17, 0x00	; 0
  c8:	c8 e4       	ldi	r28, 0x48	; 72
  ca:	d0 e0       	ldi	r29, 0x00	; 0
  cc:	03 c0       	rjmp	.+6      	; 0xd4 <__do_global_ctors+0xe>
  ce:	21 97       	sbiw	r28, 0x01	; 1
  d0:	fe 01       	movw	r30, r28
  d2:	e6 d2       	rcall	.+1484   	; 0x6a0 <__tablejump2__>
  d4:	c6 34       	cpi	r28, 0x46	; 70
  d6:	d1 07       	cpc	r29, r17
  d8:	d1 f7       	brne	.-12     	; 0xce <__do_global_ctors+0x8>
  da:	23 d2       	rcall	.+1094   	; 0x522 <main>
  dc:	ea c2       	rjmp	.+1492   	; 0x6b2 <_exit>

000000de <__bad_interrupt>:
  de:	90 cf       	rjmp	.-224    	; 0x0 <__vectors>

000000e0 <setup>:

TwoWire exteeprom;

void setup() {
	// put your setup code here, to run once:
	exteeprom.setClock(400000);
  e0:	40 e8       	ldi	r20, 0x80	; 128
  e2:	5a e1       	ldi	r21, 0x1A	; 26
  e4:	66 e0       	ldi	r22, 0x06	; 6
  e6:	70 e0       	ldi	r23, 0x00	; 0
  e8:	80 e1       	ldi	r24, 0x10	; 16
  ea:	91 e0       	ldi	r25, 0x01	; 1
  ec:	13 c2       	rjmp	.+1062   	; 0x514 <_ZN7TwoWire8setClockEm>

000000ee <loop>:
}

void loop() {
  ee:	08 95       	ret

000000f0 <_GLOBAL__sub_I_exteeprom>:
#define eepromaddr eeddr(0)

//Beginning of Auto generated function prototypes by Atmel Studio
//End of Auto generated function prototypes by Atmel Studio

TwoWire exteeprom;
  f0:	80 e1       	ldi	r24, 0x10	; 16
  f2:	91 e0       	ldi	r25, 0x01	; 1
  f4:	ff c1       	rjmp	.+1022   	; 0x4f4 <_ZN7TwoWireC1Ev>

000000f6 <twi_setFrequency>:
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
  f6:	9b 01       	movw	r18, r22
  f8:	ac 01       	movw	r20, r24
  fa:	60 e0       	ldi	r22, 0x00	; 0
  fc:	74 e2       	ldi	r23, 0x24	; 36
  fe:	84 ef       	ldi	r24, 0xF4	; 244
 100:	90 e0       	ldi	r25, 0x00	; 0
 102:	ac d2       	rcall	.+1368   	; 0x65c <__udivmodsi4>
 104:	da 01       	movw	r26, r20
 106:	c9 01       	movw	r24, r18
 108:	40 97       	sbiw	r24, 0x10	; 16
 10a:	a1 09       	sbc	r26, r1
 10c:	b1 09       	sbc	r27, r1
 10e:	b6 95       	lsr	r27
 110:	a7 95       	ror	r26
 112:	97 95       	ror	r25
 114:	87 95       	ror	r24
 116:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>
 11a:	08 95       	ret

0000011c <twi_transmit>:
 11c:	40 91 3e 01 	lds	r20, 0x013E	; 0x80013e <twi_txBufferLength>
 120:	26 2f       	mov	r18, r22
 122:	30 e0       	ldi	r19, 0x00	; 0
 124:	24 0f       	add	r18, r20
 126:	31 1d       	adc	r19, r1
 128:	21 32       	cpi	r18, 0x21	; 33
 12a:	31 05       	cpc	r19, r1
 12c:	dc f4       	brge	.+54     	; 0x164 <twi_transmit+0x48>
 12e:	20 91 89 01 	lds	r18, 0x0189	; 0x800189 <twi_state>
 132:	24 30       	cpi	r18, 0x04	; 4
 134:	c9 f4       	brne	.+50     	; 0x168 <twi_transmit+0x4c>
 136:	fc 01       	movw	r30, r24
 138:	80 e0       	ldi	r24, 0x00	; 0
 13a:	90 e0       	ldi	r25, 0x00	; 0
 13c:	86 17       	cp	r24, r22
 13e:	58 f4       	brcc	.+22     	; 0x156 <twi_transmit+0x3a>
 140:	30 91 3e 01 	lds	r19, 0x013E	; 0x80013e <twi_txBufferLength>
 144:	21 91       	ld	r18, Z+
 146:	dc 01       	movw	r26, r24
 148:	a0 5c       	subi	r26, 0xC0	; 192
 14a:	be 4f       	sbci	r27, 0xFE	; 254
 14c:	a3 0f       	add	r26, r19
 14e:	b1 1d       	adc	r27, r1
 150:	2c 93       	st	X, r18
 152:	01 96       	adiw	r24, 0x01	; 1
 154:	f3 cf       	rjmp	.-26     	; 0x13c <twi_transmit+0x20>
 156:	80 91 3e 01 	lds	r24, 0x013E	; 0x80013e <twi_txBufferLength>
 15a:	68 0f       	add	r22, r24
 15c:	60 93 3e 01 	sts	0x013E, r22	; 0x80013e <twi_txBufferLength>
 160:	80 e0       	ldi	r24, 0x00	; 0
 162:	08 95       	ret
 164:	81 e0       	ldi	r24, 0x01	; 1
 166:	08 95       	ret
 168:	82 e0       	ldi	r24, 0x02	; 2
 16a:	08 95       	ret

0000016c <twi_stop>:
 * Output   none
 */
void twi_stop(void)
{
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
 16c:	85 ed       	ldi	r24, 0xD5	; 213
 16e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>

  // wait for stop condition to be exectued on bus
  // TWINT is not set after a stop condition!
  while(TWCR & _BV(TWSTO)){
 172:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
 176:	84 fd       	sbrc	r24, 4
 178:	fc cf       	rjmp	.-8      	; 0x172 <twi_stop+0x6>
    continue;
  }

  // update twi state
  twi_state = TWI_READY;
 17a:	10 92 89 01 	sts	0x0189, r1	; 0x800189 <twi_state>
 17e:	08 95       	ret

00000180 <twi_releaseBus>:
 * Output   none
 */
void twi_releaseBus(void)
{
  // release bus
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT);
 180:	85 ec       	ldi	r24, 0xC5	; 197
 182:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>

  // update twi state
  twi_state = TWI_READY;
 186:	10 92 89 01 	sts	0x0189, r1	; 0x800189 <twi_state>
 18a:	08 95       	ret

0000018c <__vector_26>:
}

ISR(TWI_vect)
{
 18c:	1f 92       	push	r1
 18e:	0f 92       	push	r0
 190:	0f b6       	in	r0, 0x3f	; 63
 192:	0f 92       	push	r0
 194:	11 24       	eor	r1, r1
 196:	0b b6       	in	r0, 0x3b	; 59
 198:	0f 92       	push	r0
 19a:	2f 93       	push	r18
 19c:	3f 93       	push	r19
 19e:	4f 93       	push	r20
 1a0:	5f 93       	push	r21
 1a2:	6f 93       	push	r22
 1a4:	7f 93       	push	r23
 1a6:	8f 93       	push	r24
 1a8:	9f 93       	push	r25
 1aa:	af 93       	push	r26
 1ac:	bf 93       	push	r27
 1ae:	ef 93       	push	r30
 1b0:	ff 93       	push	r31
  switch(TW_STATUS){
 1b2:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
 1b6:	88 7f       	andi	r24, 0xF8	; 248
 1b8:	80 36       	cpi	r24, 0x60	; 96
 1ba:	09 f4       	brne	.+2      	; 0x1be <__vector_26+0x32>
 1bc:	9d c0       	rjmp	.+314    	; 0x2f8 <__vector_26+0x16c>
 1be:	70 f5       	brcc	.+92     	; 0x21c <__vector_26+0x90>
 1c0:	88 32       	cpi	r24, 0x28	; 40
 1c2:	09 f4       	brne	.+2      	; 0x1c6 <__vector_26+0x3a>
 1c4:	5c c0       	rjmp	.+184    	; 0x27e <__vector_26+0xf2>
 1c6:	90 f4       	brcc	.+36     	; 0x1ec <__vector_26+0x60>
 1c8:	80 31       	cpi	r24, 0x10	; 16
 1ca:	09 f4       	brne	.+2      	; 0x1ce <__vector_26+0x42>
 1cc:	55 c0       	rjmp	.+170    	; 0x278 <__vector_26+0xec>
 1ce:	38 f4       	brcc	.+14     	; 0x1de <__vector_26+0x52>
 1d0:	88 23       	and	r24, r24
 1d2:	09 f4       	brne	.+2      	; 0x1d6 <__vector_26+0x4a>
 1d4:	f3 c0       	rjmp	.+486    	; 0x3bc <__vector_26+0x230>
 1d6:	88 30       	cpi	r24, 0x08	; 8
 1d8:	09 f4       	brne	.+2      	; 0x1dc <__vector_26+0x50>
 1da:	4e c0       	rjmp	.+156    	; 0x278 <__vector_26+0xec>
 1dc:	f2 c0       	rjmp	.+484    	; 0x3c2 <__vector_26+0x236>
 1de:	88 31       	cpi	r24, 0x18	; 24
 1e0:	09 f4       	brne	.+2      	; 0x1e4 <__vector_26+0x58>
 1e2:	4d c0       	rjmp	.+154    	; 0x27e <__vector_26+0xf2>
 1e4:	80 32       	cpi	r24, 0x20	; 32
 1e6:	09 f4       	brne	.+2      	; 0x1ea <__vector_26+0x5e>
 1e8:	5e c0       	rjmp	.+188    	; 0x2a6 <__vector_26+0x11a>
 1ea:	eb c0       	rjmp	.+470    	; 0x3c2 <__vector_26+0x236>
 1ec:	80 34       	cpi	r24, 0x40	; 64
 1ee:	09 f4       	brne	.+2      	; 0x1f2 <__vector_26+0x66>
 1f0:	69 c0       	rjmp	.+210    	; 0x2c4 <__vector_26+0x138>
 1f2:	50 f4       	brcc	.+20     	; 0x208 <__vector_26+0x7c>
 1f4:	80 33       	cpi	r24, 0x30	; 48
 1f6:	09 f4       	brne	.+2      	; 0x1fa <__vector_26+0x6e>
 1f8:	56 c0       	rjmp	.+172    	; 0x2a6 <__vector_26+0x11a>
 1fa:	88 33       	cpi	r24, 0x38	; 56
 1fc:	09 f0       	breq	.+2      	; 0x200 <__vector_26+0x74>
 1fe:	e1 c0       	rjmp	.+450    	; 0x3c2 <__vector_26+0x236>
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
      twi_stop();
      break;
    case TW_MT_ARB_LOST: // lost bus arbitration
      twi_error = TW_MT_ARB_LOST;
 200:	80 93 1c 01 	sts	0x011C, r24	; 0x80011c <twi_error>
      twi_releaseBus();
 204:	bd df       	rcall	.-134    	; 0x180 <twi_releaseBus>
      break;
 206:	dd c0       	rjmp	.+442    	; 0x3c2 <__vector_26+0x236>
  twi_state = TWI_READY;
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
 208:	80 35       	cpi	r24, 0x50	; 80
 20a:	09 f4       	brne	.+2      	; 0x20e <__vector_26+0x82>
 20c:	4f c0       	rjmp	.+158    	; 0x2ac <__vector_26+0x120>
 20e:	88 35       	cpi	r24, 0x58	; 88
 210:	09 f4       	brne	.+2      	; 0x214 <__vector_26+0x88>
 212:	5d c0       	rjmp	.+186    	; 0x2ce <__vector_26+0x142>
 214:	88 34       	cpi	r24, 0x48	; 72
 216:	09 f0       	breq	.+2      	; 0x21a <__vector_26+0x8e>
 218:	d4 c0       	rjmp	.+424    	; 0x3c2 <__vector_26+0x236>
 21a:	d2 c0       	rjmp	.+420    	; 0x3c0 <__vector_26+0x234>
 21c:	88 39       	cpi	r24, 0x98	; 152
 21e:	09 f4       	brne	.+2      	; 0x222 <__vector_26+0x96>
 220:	c3 c0       	rjmp	.+390    	; 0x3a8 <__vector_26+0x21c>
 222:	a8 f4       	brcc	.+42     	; 0x24e <__vector_26+0xc2>
 224:	88 37       	cpi	r24, 0x78	; 120
 226:	09 f4       	brne	.+2      	; 0x22a <__vector_26+0x9e>
 228:	67 c0       	rjmp	.+206    	; 0x2f8 <__vector_26+0x16c>
 22a:	38 f4       	brcc	.+14     	; 0x23a <__vector_26+0xae>
 22c:	88 36       	cpi	r24, 0x68	; 104
 22e:	09 f4       	brne	.+2      	; 0x232 <__vector_26+0xa6>
 230:	63 c0       	rjmp	.+198    	; 0x2f8 <__vector_26+0x16c>
 232:	80 37       	cpi	r24, 0x70	; 112
 234:	09 f4       	brne	.+2      	; 0x238 <__vector_26+0xac>
 236:	60 c0       	rjmp	.+192    	; 0x2f8 <__vector_26+0x16c>
 238:	c4 c0       	rjmp	.+392    	; 0x3c2 <__vector_26+0x236>
 23a:	88 38       	cpi	r24, 0x88	; 136
 23c:	09 f4       	brne	.+2      	; 0x240 <__vector_26+0xb4>
 23e:	b4 c0       	rjmp	.+360    	; 0x3a8 <__vector_26+0x21c>
 240:	80 39       	cpi	r24, 0x90	; 144
 242:	09 f4       	brne	.+2      	; 0x246 <__vector_26+0xba>
 244:	5f c0       	rjmp	.+190    	; 0x304 <__vector_26+0x178>
 246:	80 38       	cpi	r24, 0x80	; 128
 248:	09 f0       	breq	.+2      	; 0x24c <__vector_26+0xc0>
 24a:	bb c0       	rjmp	.+374    	; 0x3c2 <__vector_26+0x236>
 24c:	5b c0       	rjmp	.+182    	; 0x304 <__vector_26+0x178>
 24e:	80 3b       	cpi	r24, 0xB0	; 176
 250:	09 f4       	brne	.+2      	; 0x254 <__vector_26+0xc8>
 252:	82 c0       	rjmp	.+260    	; 0x358 <__vector_26+0x1cc>
 254:	38 f4       	brcc	.+14     	; 0x264 <__vector_26+0xd8>
 256:	80 3a       	cpi	r24, 0xA0	; 160
 258:	09 f4       	brne	.+2      	; 0x25c <__vector_26+0xd0>
 25a:	66 c0       	rjmp	.+204    	; 0x328 <__vector_26+0x19c>
 25c:	88 3a       	cpi	r24, 0xA8	; 168
 25e:	09 f4       	brne	.+2      	; 0x262 <__vector_26+0xd6>
 260:	7b c0       	rjmp	.+246    	; 0x358 <__vector_26+0x1cc>
 262:	af c0       	rjmp	.+350    	; 0x3c2 <__vector_26+0x236>
 264:	80 3c       	cpi	r24, 0xC0	; 192
 266:	09 f4       	brne	.+2      	; 0x26a <__vector_26+0xde>
 268:	a3 c0       	rjmp	.+326    	; 0x3b0 <__vector_26+0x224>
 26a:	88 3c       	cpi	r24, 0xC8	; 200
 26c:	09 f4       	brne	.+2      	; 0x270 <__vector_26+0xe4>
 26e:	a0 c0       	rjmp	.+320    	; 0x3b0 <__vector_26+0x224>
 270:	88 3b       	cpi	r24, 0xB8	; 184
 272:	09 f4       	brne	.+2      	; 0x276 <__vector_26+0xea>
 274:	86 c0       	rjmp	.+268    	; 0x382 <__vector_26+0x1f6>
 276:	a5 c0       	rjmp	.+330    	; 0x3c2 <__vector_26+0x236>
    // All Master
    case TW_START:     // sent start condition
    case TW_REP_START: // sent repeated start condition
      // copy device address and r/w bit to output register and ack
      TWDR = twi_slarw;
 278:	80 91 88 01 	lds	r24, 0x0188	; 0x800188 <twi_slarw>
 27c:	10 c0       	rjmp	.+32     	; 0x29e <__vector_26+0x112>

    // Master Transmitter
    case TW_MT_SLA_ACK:  // slave receiver acked address
    case TW_MT_DATA_ACK: // slave receiver acked data
      // if there is data to send, send it, otherwise stop 
      if(twi_masterBufferIndex < twi_masterBufferLength){
 27e:	90 91 61 01 	lds	r25, 0x0161	; 0x800161 <twi_masterBufferIndex>
 282:	80 91 60 01 	lds	r24, 0x0160	; 0x800160 <twi_masterBufferLength>
 286:	98 17       	cp	r25, r24
 288:	70 f5       	brcc	.+92     	; 0x2e6 <__vector_26+0x15a>
        // copy data to output register and ack
        TWDR = twi_masterBuffer[twi_masterBufferIndex++];
 28a:	e0 91 61 01 	lds	r30, 0x0161	; 0x800161 <twi_masterBufferIndex>
 28e:	81 e0       	ldi	r24, 0x01	; 1
 290:	8e 0f       	add	r24, r30
 292:	80 93 61 01 	sts	0x0161, r24	; 0x800161 <twi_masterBufferIndex>
 296:	f0 e0       	ldi	r31, 0x00	; 0
 298:	ee 59       	subi	r30, 0x9E	; 158
 29a:	fe 4f       	sbci	r31, 0xFE	; 254
 29c:	80 81       	ld	r24, Z
 29e:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
 2a2:	85 ec       	ldi	r24, 0xC5	; 197
 2a4:	82 c0       	rjmp	.+260    	; 0x3aa <__vector_26+0x21e>
    case TW_MT_SLA_NACK:  // address sent, nack received
      twi_error = TW_MT_SLA_NACK;
      twi_stop();
      break;
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
 2a6:	80 93 1c 01 	sts	0x011C, r24	; 0x80011c <twi_error>
 2aa:	8a c0       	rjmp	.+276    	; 0x3c0 <__vector_26+0x234>
      break;

    // Master Receiver
    case TW_MR_DATA_ACK: // data received, ack sent
      // put byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
 2ac:	e0 91 61 01 	lds	r30, 0x0161	; 0x800161 <twi_masterBufferIndex>
 2b0:	81 e0       	ldi	r24, 0x01	; 1
 2b2:	8e 0f       	add	r24, r30
 2b4:	80 93 61 01 	sts	0x0161, r24	; 0x800161 <twi_masterBufferIndex>
 2b8:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
 2bc:	f0 e0       	ldi	r31, 0x00	; 0
 2be:	ee 59       	subi	r30, 0x9E	; 158
 2c0:	fe 4f       	sbci	r31, 0xFE	; 254
 2c2:	80 83       	st	Z, r24
    case TW_MR_SLA_ACK:  // address sent, ack received
      // ack if more bytes are expected, otherwise nack
      if(twi_masterBufferIndex < twi_masterBufferLength){
 2c4:	90 91 61 01 	lds	r25, 0x0161	; 0x800161 <twi_masterBufferIndex>
 2c8:	80 91 60 01 	lds	r24, 0x0160	; 0x800160 <twi_masterBufferLength>
 2cc:	6a c0       	rjmp	.+212    	; 0x3a2 <__vector_26+0x216>
        twi_reply(0);
      }
      break;
    case TW_MR_DATA_NACK: // data received, nack sent
      // put final byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
 2ce:	e0 91 61 01 	lds	r30, 0x0161	; 0x800161 <twi_masterBufferIndex>
 2d2:	81 e0       	ldi	r24, 0x01	; 1
 2d4:	8e 0f       	add	r24, r30
 2d6:	80 93 61 01 	sts	0x0161, r24	; 0x800161 <twi_masterBufferIndex>
 2da:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
 2de:	f0 e0       	ldi	r31, 0x00	; 0
 2e0:	ee 59       	subi	r30, 0x9E	; 158
 2e2:	fe 4f       	sbci	r31, 0xFE	; 254
 2e4:	80 83       	st	Z, r24
	if (twi_sendStop)
 2e6:	80 91 87 01 	lds	r24, 0x0187	; 0x800187 <twi_sendStop>
 2ea:	81 11       	cpse	r24, r1
 2ec:	69 c0       	rjmp	.+210    	; 0x3c0 <__vector_26+0x234>
          twi_stop();
	else {
	  twi_inRepStart = true;	// we're gonna send the START
 2ee:	81 e0       	ldi	r24, 0x01	; 1
 2f0:	80 93 86 01 	sts	0x0186, r24	; 0x800186 <twi_inRepStart>
	  // don't enable the interrupt. We'll generate the start, but we 
	  // avoid handling the interrupt until we're in the next transaction,
	  // at the point where we would normally issue the start.
	  TWCR = _BV(TWINT) | _BV(TWSTA)| _BV(TWEN) ;
 2f4:	84 ea       	ldi	r24, 0xA4	; 164
 2f6:	5d c0       	rjmp	.+186    	; 0x3b2 <__vector_26+0x226>
    case TW_SR_SLA_ACK:   // addressed, returned ack
    case TW_SR_GCALL_ACK: // addressed generally, returned ack
    case TW_SR_ARB_LOST_SLA_ACK:   // lost arbitration, returned ack
    case TW_SR_ARB_LOST_GCALL_ACK: // lost arbitration, returned ack
      // enter slave receiver mode
      twi_state = TWI_SRX;
 2f8:	83 e0       	ldi	r24, 0x03	; 3
 2fa:	80 93 89 01 	sts	0x0189, r24	; 0x800189 <twi_state>
      // indicate that rx buffer can be overwritten and ack
      twi_rxBufferIndex = 0;
 2fe:	10 92 1d 01 	sts	0x011D, r1	; 0x80011d <twi_rxBufferIndex>
 302:	cf cf       	rjmp	.-98     	; 0x2a2 <__vector_26+0x116>
      twi_reply(1);
      break;
    case TW_SR_DATA_ACK:       // data received, returned ack
    case TW_SR_GCALL_DATA_ACK: // data received generally, returned ack
      // if there is still room in the rx buffer
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
 304:	80 91 1d 01 	lds	r24, 0x011D	; 0x80011d <twi_rxBufferIndex>
 308:	80 32       	cpi	r24, 0x20	; 32
 30a:	08 f0       	brcs	.+2      	; 0x30e <__vector_26+0x182>
 30c:	4d c0       	rjmp	.+154    	; 0x3a8 <__vector_26+0x21c>
        // put byte in buffer and ack
        twi_rxBuffer[twi_rxBufferIndex++] = TWDR;
 30e:	e0 91 1d 01 	lds	r30, 0x011D	; 0x80011d <twi_rxBufferIndex>
 312:	81 e0       	ldi	r24, 0x01	; 1
 314:	8e 0f       	add	r24, r30
 316:	80 93 1d 01 	sts	0x011D, r24	; 0x80011d <twi_rxBufferIndex>
 31a:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
 31e:	f0 e0       	ldi	r31, 0x00	; 0
 320:	e2 5e       	subi	r30, 0xE2	; 226
 322:	fe 4f       	sbci	r31, 0xFE	; 254
 324:	80 83       	st	Z, r24
        twi_reply(0);
      }
      break;
    case TW_SR_STOP: // stop or repeated start condition received
      // ack future responses and leave slave receiver state
      twi_releaseBus();
 326:	bd cf       	rjmp	.-134    	; 0x2a2 <__vector_26+0x116>
 328:	2b df       	rcall	.-426    	; 0x180 <twi_releaseBus>
      // put a null char after data if there's room
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
 32a:	80 91 1d 01 	lds	r24, 0x011D	; 0x80011d <twi_rxBufferIndex>
 32e:	80 32       	cpi	r24, 0x20	; 32
 330:	30 f4       	brcc	.+12     	; 0x33e <__vector_26+0x1b2>
        twi_rxBuffer[twi_rxBufferIndex] = '\0';
 332:	e0 91 1d 01 	lds	r30, 0x011D	; 0x80011d <twi_rxBufferIndex>
 336:	f0 e0       	ldi	r31, 0x00	; 0
 338:	e2 5e       	subi	r30, 0xE2	; 226
 33a:	fe 4f       	sbci	r31, 0xFE	; 254
 33c:	10 82       	st	Z, r1
      }
      // callback to user defined callback
      twi_onSlaveReceive(twi_rxBuffer, twi_rxBufferIndex);
 33e:	60 91 1d 01 	lds	r22, 0x011D	; 0x80011d <twi_rxBufferIndex>
 342:	70 e0       	ldi	r23, 0x00	; 0
 344:	e0 91 82 01 	lds	r30, 0x0182	; 0x800182 <twi_onSlaveReceive>
 348:	f0 91 83 01 	lds	r31, 0x0183	; 0x800183 <twi_onSlaveReceive+0x1>
 34c:	8e e1       	ldi	r24, 0x1E	; 30
 34e:	91 e0       	ldi	r25, 0x01	; 1
 350:	09 95       	icall
      // since we submit rx buffer to "wire" library, we can reset it
      twi_rxBufferIndex = 0;
 352:	10 92 1d 01 	sts	0x011D, r1	; 0x80011d <twi_rxBufferIndex>
      break;
 356:	35 c0       	rjmp	.+106    	; 0x3c2 <__vector_26+0x236>
    
    // Slave Transmitter
    case TW_ST_SLA_ACK:          // addressed, returned ack
    case TW_ST_ARB_LOST_SLA_ACK: // arbitration lost, returned ack
      // enter slave transmitter mode
      twi_state = TWI_STX;
 358:	84 e0       	ldi	r24, 0x04	; 4
 35a:	80 93 89 01 	sts	0x0189, r24	; 0x800189 <twi_state>
      // ready the tx buffer index for iteration
      twi_txBufferIndex = 0;
 35e:	10 92 3f 01 	sts	0x013F, r1	; 0x80013f <twi_txBufferIndex>
      // set tx buffer length to be zero, to verify if user changes it
      twi_txBufferLength = 0;
 362:	10 92 3e 01 	sts	0x013E, r1	; 0x80013e <twi_txBufferLength>
      // request for txBuffer to be filled and length to be set
      // note: user must call twi_transmit(bytes, length) to do this
      twi_onSlaveTransmit();
 366:	e0 91 84 01 	lds	r30, 0x0184	; 0x800184 <twi_onSlaveTransmit>
 36a:	f0 91 85 01 	lds	r31, 0x0185	; 0x800185 <twi_onSlaveTransmit+0x1>
 36e:	09 95       	icall
      // if they didn't change buffer & length, initialize it
      if(0 == twi_txBufferLength){
 370:	80 91 3e 01 	lds	r24, 0x013E	; 0x80013e <twi_txBufferLength>
 374:	81 11       	cpse	r24, r1
 376:	05 c0       	rjmp	.+10     	; 0x382 <__vector_26+0x1f6>
        twi_txBufferLength = 1;
 378:	81 e0       	ldi	r24, 0x01	; 1
 37a:	80 93 3e 01 	sts	0x013E, r24	; 0x80013e <twi_txBufferLength>
        twi_txBuffer[0] = 0x00;
 37e:	10 92 40 01 	sts	0x0140, r1	; 0x800140 <twi_txBuffer>
      }
      // transmit first byte from buffer, fall
    case TW_ST_DATA_ACK: // byte sent, ack returned
      // copy data to output register
      TWDR = twi_txBuffer[twi_txBufferIndex++];
 382:	e0 91 3f 01 	lds	r30, 0x013F	; 0x80013f <twi_txBufferIndex>
 386:	81 e0       	ldi	r24, 0x01	; 1
 388:	8e 0f       	add	r24, r30
 38a:	80 93 3f 01 	sts	0x013F, r24	; 0x80013f <twi_txBufferIndex>
 38e:	f0 e0       	ldi	r31, 0x00	; 0
 390:	e0 5c       	subi	r30, 0xC0	; 192
 392:	fe 4f       	sbci	r31, 0xFE	; 254
 394:	80 81       	ld	r24, Z
 396:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
      // if there is more to send, ack, otherwise nack
      if(twi_txBufferIndex < twi_txBufferLength){
 39a:	90 91 3f 01 	lds	r25, 0x013F	; 0x80013f <twi_txBufferIndex>
 39e:	80 91 3e 01 	lds	r24, 0x013E	; 0x80013e <twi_txBufferLength>
 3a2:	98 17       	cp	r25, r24
 3a4:	08 f4       	brcc	.+2      	; 0x3a8 <__vector_26+0x21c>
 3a6:	7d cf       	rjmp	.-262    	; 0x2a2 <__vector_26+0x116>
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
 3a8:	85 e8       	ldi	r24, 0x85	; 133
 3aa:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
 3ae:	09 c0       	rjmp	.+18     	; 0x3c2 <__vector_26+0x236>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
 3b0:	85 ec       	ldi	r24, 0xC5	; 197
 3b2:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    case TW_ST_DATA_NACK: // received nack, we are done 
    case TW_ST_LAST_DATA: // received ack, but we are done already!
      // ack future responses
      twi_reply(1);
      // leave slave receiver state
      twi_state = TWI_READY;
 3b6:	10 92 89 01 	sts	0x0189, r1	; 0x800189 <twi_state>
      break;
 3ba:	03 c0       	rjmp	.+6      	; 0x3c2 <__vector_26+0x236>

    // All
    case TW_NO_INFO:   // no state information
      break;
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
 3bc:	10 92 1c 01 	sts	0x011C, r1	; 0x80011c <twi_error>
      twi_stop();
 3c0:	d5 de       	rcall	.-598    	; 0x16c <twi_stop>
      break;
  }
}
 3c2:	ff 91       	pop	r31
 3c4:	ef 91       	pop	r30
 3c6:	bf 91       	pop	r27
 3c8:	af 91       	pop	r26
 3ca:	9f 91       	pop	r25
 3cc:	8f 91       	pop	r24
 3ce:	7f 91       	pop	r23
 3d0:	6f 91       	pop	r22
 3d2:	5f 91       	pop	r21
 3d4:	4f 91       	pop	r20
 3d6:	3f 91       	pop	r19
 3d8:	2f 91       	pop	r18
 3da:	0f 90       	pop	r0
 3dc:	0b be       	out	0x3b, r0	; 59
 3de:	0f 90       	pop	r0
 3e0:	0f be       	out	0x3f, r0	; 63
 3e2:	0f 90       	pop	r0
 3e4:	1f 90       	pop	r1
 3e6:	18 95       	reti

000003e8 <_ZN7TwoWire9availableEv>:
}

// sets function called on slave read
void TwoWire::onRequest( void (*function)(void) )
{
  user_onRequest = function;
 3e8:	80 91 b9 01 	lds	r24, 0x01B9	; 0x8001b9 <_ZN7TwoWire14rxBufferLengthE>
 3ec:	90 e0       	ldi	r25, 0x00	; 0
 3ee:	20 91 ba 01 	lds	r18, 0x01BA	; 0x8001ba <_ZN7TwoWire13rxBufferIndexE>
 3f2:	82 1b       	sub	r24, r18
 3f4:	91 09       	sbc	r25, r1
 3f6:	08 95       	ret

000003f8 <_ZN7TwoWire4readEv>:
 3f8:	90 91 ba 01 	lds	r25, 0x01BA	; 0x8001ba <_ZN7TwoWire13rxBufferIndexE>
 3fc:	80 91 b9 01 	lds	r24, 0x01B9	; 0x8001b9 <_ZN7TwoWire14rxBufferLengthE>
 400:	98 17       	cp	r25, r24
 402:	50 f4       	brcc	.+20     	; 0x418 <__LOCK_REGION_LENGTH__+0x18>
 404:	e9 2f       	mov	r30, r25
 406:	f0 e0       	ldi	r31, 0x00	; 0
 408:	e5 54       	subi	r30, 0x45	; 69
 40a:	fe 4f       	sbci	r31, 0xFE	; 254
 40c:	20 81       	ld	r18, Z
 40e:	30 e0       	ldi	r19, 0x00	; 0
 410:	9f 5f       	subi	r25, 0xFF	; 255
 412:	90 93 ba 01 	sts	0x01BA, r25	; 0x8001ba <_ZN7TwoWire13rxBufferIndexE>
 416:	02 c0       	rjmp	.+4      	; 0x41c <__LOCK_REGION_LENGTH__+0x1c>
 418:	2f ef       	ldi	r18, 0xFF	; 255
 41a:	3f ef       	ldi	r19, 0xFF	; 255
 41c:	c9 01       	movw	r24, r18
 41e:	08 95       	ret

00000420 <_ZN7TwoWire4peekEv>:
 420:	e0 91 ba 01 	lds	r30, 0x01BA	; 0x8001ba <_ZN7TwoWire13rxBufferIndexE>
 424:	80 91 b9 01 	lds	r24, 0x01B9	; 0x8001b9 <_ZN7TwoWire14rxBufferLengthE>
 428:	e8 17       	cp	r30, r24
 42a:	30 f4       	brcc	.+12     	; 0x438 <_ZN7TwoWire4peekEv+0x18>
 42c:	f0 e0       	ldi	r31, 0x00	; 0
 42e:	e5 54       	subi	r30, 0x45	; 69
 430:	fe 4f       	sbci	r31, 0xFE	; 254
 432:	80 81       	ld	r24, Z
 434:	90 e0       	ldi	r25, 0x00	; 0
 436:	08 95       	ret
 438:	8f ef       	ldi	r24, 0xFF	; 255
 43a:	9f ef       	ldi	r25, 0xFF	; 255
 43c:	08 95       	ret

0000043e <_ZN7TwoWire5flushEv>:
 43e:	08 95       	ret

00000440 <_ZN7TwoWire5writeEPKhj>:
 440:	cf 92       	push	r12
 442:	df 92       	push	r13
 444:	ef 92       	push	r14
 446:	ff 92       	push	r15
 448:	0f 93       	push	r16
 44a:	1f 93       	push	r17
 44c:	cf 93       	push	r28
 44e:	df 93       	push	r29
 450:	7c 01       	movw	r14, r24
 452:	cb 01       	movw	r24, r22
 454:	8a 01       	movw	r16, r20
 456:	20 91 96 01 	lds	r18, 0x0196	; 0x800196 <_ZN7TwoWire12transmittingE>
 45a:	22 23       	and	r18, r18
 45c:	89 f0       	breq	.+34     	; 0x480 <_ZN7TwoWire5writeEPKhj+0x40>
 45e:	eb 01       	movw	r28, r22
 460:	6b 01       	movw	r12, r22
 462:	c4 0e       	add	r12, r20
 464:	d5 1e       	adc	r13, r21
 466:	cc 15       	cp	r28, r12
 468:	dd 05       	cpc	r29, r13
 46a:	61 f0       	breq	.+24     	; 0x484 <_ZN7TwoWire5writeEPKhj+0x44>
 46c:	69 91       	ld	r22, Y+
 46e:	d7 01       	movw	r26, r14
 470:	ed 91       	ld	r30, X+
 472:	fc 91       	ld	r31, X
 474:	01 90       	ld	r0, Z+
 476:	f0 81       	ld	r31, Z
 478:	e0 2d       	mov	r30, r0
 47a:	c7 01       	movw	r24, r14
 47c:	09 95       	icall
 47e:	f3 cf       	rjmp	.-26     	; 0x466 <_ZN7TwoWire5writeEPKhj+0x26>
 480:	64 2f       	mov	r22, r20
 482:	4c de       	rcall	.-872    	; 0x11c <twi_transmit>
 484:	c8 01       	movw	r24, r16
 486:	df 91       	pop	r29
 488:	cf 91       	pop	r28
 48a:	1f 91       	pop	r17
 48c:	0f 91       	pop	r16
 48e:	ff 90       	pop	r15
 490:	ef 90       	pop	r14
 492:	df 90       	pop	r13
 494:	cf 90       	pop	r12
 496:	08 95       	ret

00000498 <_ZN7TwoWire5writeEh>:
 498:	cf 93       	push	r28
 49a:	df 93       	push	r29
 49c:	1f 92       	push	r1
 49e:	cd b7       	in	r28, 0x3d	; 61
 4a0:	de b7       	in	r29, 0x3e	; 62
 4a2:	69 83       	std	Y+1, r22	; 0x01
 4a4:	20 91 96 01 	lds	r18, 0x0196	; 0x800196 <_ZN7TwoWire12transmittingE>
 4a8:	22 23       	and	r18, r18
 4aa:	d1 f0       	breq	.+52     	; 0x4e0 <_ZN7TwoWire5writeEh+0x48>
 4ac:	20 91 97 01 	lds	r18, 0x0197	; 0x800197 <_ZN7TwoWire14txBufferLengthE>
 4b0:	20 32       	cpi	r18, 0x20	; 32
 4b2:	40 f0       	brcs	.+16     	; 0x4c4 <_ZN7TwoWire5writeEh+0x2c>
 4b4:	21 e0       	ldi	r18, 0x01	; 1
 4b6:	30 e0       	ldi	r19, 0x00	; 0
 4b8:	fc 01       	movw	r30, r24
 4ba:	33 83       	std	Z+3, r19	; 0x03
 4bc:	22 83       	std	Z+2, r18	; 0x02
 4be:	80 e0       	ldi	r24, 0x00	; 0
 4c0:	90 e0       	ldi	r25, 0x00	; 0
 4c2:	14 c0       	rjmp	.+40     	; 0x4ec <_ZN7TwoWire5writeEh+0x54>
 4c4:	80 91 98 01 	lds	r24, 0x0198	; 0x800198 <_ZN7TwoWire13txBufferIndexE>
 4c8:	e8 2f       	mov	r30, r24
 4ca:	f0 e0       	ldi	r31, 0x00	; 0
 4cc:	e7 56       	subi	r30, 0x67	; 103
 4ce:	fe 4f       	sbci	r31, 0xFE	; 254
 4d0:	99 81       	ldd	r25, Y+1	; 0x01
 4d2:	90 83       	st	Z, r25
 4d4:	8f 5f       	subi	r24, 0xFF	; 255
 4d6:	80 93 98 01 	sts	0x0198, r24	; 0x800198 <_ZN7TwoWire13txBufferIndexE>
 4da:	80 93 97 01 	sts	0x0197, r24	; 0x800197 <_ZN7TwoWire14txBufferLengthE>
 4de:	04 c0       	rjmp	.+8      	; 0x4e8 <_ZN7TwoWire5writeEh+0x50>
 4e0:	61 e0       	ldi	r22, 0x01	; 1
 4e2:	ce 01       	movw	r24, r28
 4e4:	01 96       	adiw	r24, 0x01	; 1
 4e6:	1a de       	rcall	.-972    	; 0x11c <twi_transmit>
 4e8:	81 e0       	ldi	r24, 0x01	; 1
 4ea:	90 e0       	ldi	r25, 0x00	; 0
 4ec:	0f 90       	pop	r0
 4ee:	df 91       	pop	r29
 4f0:	cf 91       	pop	r28
 4f2:	08 95       	ret

000004f4 <_ZN7TwoWireC1Ev>:
 4f4:	fc 01       	movw	r30, r24
 4f6:	13 82       	std	Z+3, r1	; 0x03
 4f8:	12 82       	std	Z+2, r1	; 0x02
 4fa:	88 ee       	ldi	r24, 0xE8	; 232
 4fc:	93 e0       	ldi	r25, 0x03	; 3
 4fe:	a0 e0       	ldi	r26, 0x00	; 0
 500:	b0 e0       	ldi	r27, 0x00	; 0
 502:	84 83       	std	Z+4, r24	; 0x04
 504:	95 83       	std	Z+5, r25	; 0x05
 506:	a6 83       	std	Z+6, r26	; 0x06
 508:	b7 83       	std	Z+7, r27	; 0x07
 50a:	84 e0       	ldi	r24, 0x04	; 4
 50c:	91 e0       	ldi	r25, 0x01	; 1
 50e:	91 83       	std	Z+1, r25	; 0x01
 510:	80 83       	st	Z, r24
 512:	08 95       	ret

00000514 <_ZN7TwoWire8setClockEm>:
 514:	cb 01       	movw	r24, r22
 516:	ba 01       	movw	r22, r20
 518:	ee cd       	rjmp	.-1060   	; 0xf6 <twi_setFrequency>

0000051a <_GLOBAL__sub_I__ZN7TwoWire8rxBufferE>:
}

// Preinstantiate Objects //////////////////////////////////////////////////////

TwoWire Wire = TwoWire();
 51a:	8a e8       	ldi	r24, 0x8A	; 138
 51c:	91 e0       	ldi	r25, 0x01	; 1
 51e:	ea cf       	rjmp	.-44     	; 0x4f4 <_ZN7TwoWireC1Ev>

00000520 <initVariant>:
 520:	08 95       	ret

00000522 <main>:
void setupUSB() __attribute__((weak));
void setupUSB() { }

int main(void)
{
	init();
 522:	54 d0       	rcall	.+168    	; 0x5cc <init>

	initVariant();
 524:	fd df       	rcall	.-6      	; 0x520 <initVariant>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
 526:	dc dd       	rcall	.-1096   	; 0xe0 <setup>
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
 528:	c0 e0       	ldi	r28, 0x00	; 0
 52a:	d0 e0       	ldi	r29, 0x00	; 0
#endif
	
	setup();
    
	for (;;) {
		loop();
 52c:	e0 dd       	rcall	.-1088   	; 0xee <loop>
 52e:	20 97       	sbiw	r28, 0x00	; 0
		if (serialEventRun) serialEventRun();
 530:	e9 f3       	breq	.-6      	; 0x52c <main+0xa>
 532:	0e 94 00 00 	call	0	; 0x0 <__vectors>
 536:	fa cf       	rjmp	.-12     	; 0x52c <main+0xa>

00000538 <__vector_18>:
 538:	1f 92       	push	r1
	

#endif

	// busy wait
	__asm__ __volatile__ (
 53a:	0f 92       	push	r0
 53c:	0f b6       	in	r0, 0x3f	; 63
 53e:	0f 92       	push	r0
 540:	11 24       	eor	r1, r1
 542:	2f 93       	push	r18
 544:	3f 93       	push	r19
 546:	8f 93       	push	r24
 548:	9f 93       	push	r25
 54a:	af 93       	push	r26
 54c:	bf 93       	push	r27
 54e:	80 91 dc 01 	lds	r24, 0x01DC	; 0x8001dc <timer0_millis>
 552:	90 91 dd 01 	lds	r25, 0x01DD	; 0x8001dd <timer0_millis+0x1>
 556:	a0 91 de 01 	lds	r26, 0x01DE	; 0x8001de <timer0_millis+0x2>
 55a:	b0 91 df 01 	lds	r27, 0x01DF	; 0x8001df <timer0_millis+0x3>
 55e:	30 91 db 01 	lds	r19, 0x01DB	; 0x8001db <timer0_fract>
 562:	23 e0       	ldi	r18, 0x03	; 3
 564:	23 0f       	add	r18, r19
 566:	2d 37       	cpi	r18, 0x7D	; 125
 568:	20 f4       	brcc	.+8      	; 0x572 <__vector_18+0x3a>
 56a:	01 96       	adiw	r24, 0x01	; 1
 56c:	a1 1d       	adc	r26, r1
 56e:	b1 1d       	adc	r27, r1
 570:	05 c0       	rjmp	.+10     	; 0x57c <__vector_18+0x44>
 572:	26 e8       	ldi	r18, 0x86	; 134
 574:	23 0f       	add	r18, r19
 576:	02 96       	adiw	r24, 0x02	; 2
 578:	a1 1d       	adc	r26, r1
 57a:	b1 1d       	adc	r27, r1
 57c:	20 93 db 01 	sts	0x01DB, r18	; 0x8001db <timer0_fract>
 580:	80 93 dc 01 	sts	0x01DC, r24	; 0x8001dc <timer0_millis>
 584:	90 93 dd 01 	sts	0x01DD, r25	; 0x8001dd <timer0_millis+0x1>
 588:	a0 93 de 01 	sts	0x01DE, r26	; 0x8001de <timer0_millis+0x2>
 58c:	b0 93 df 01 	sts	0x01DF, r27	; 0x8001df <timer0_millis+0x3>
 590:	80 91 e0 01 	lds	r24, 0x01E0	; 0x8001e0 <timer0_overflow_count>
 594:	90 91 e1 01 	lds	r25, 0x01E1	; 0x8001e1 <timer0_overflow_count+0x1>
 598:	a0 91 e2 01 	lds	r26, 0x01E2	; 0x8001e2 <timer0_overflow_count+0x2>
 59c:	b0 91 e3 01 	lds	r27, 0x01E3	; 0x8001e3 <timer0_overflow_count+0x3>
 5a0:	01 96       	adiw	r24, 0x01	; 1
 5a2:	a1 1d       	adc	r26, r1
 5a4:	b1 1d       	adc	r27, r1
 5a6:	80 93 e0 01 	sts	0x01E0, r24	; 0x8001e0 <timer0_overflow_count>
 5aa:	90 93 e1 01 	sts	0x01E1, r25	; 0x8001e1 <timer0_overflow_count+0x1>
 5ae:	a0 93 e2 01 	sts	0x01E2, r26	; 0x8001e2 <timer0_overflow_count+0x2>
 5b2:	b0 93 e3 01 	sts	0x01E3, r27	; 0x8001e3 <timer0_overflow_count+0x3>
 5b6:	bf 91       	pop	r27
 5b8:	af 91       	pop	r26
 5ba:	9f 91       	pop	r25
 5bc:	8f 91       	pop	r24
 5be:	3f 91       	pop	r19
 5c0:	2f 91       	pop	r18
 5c2:	0f 90       	pop	r0
 5c4:	0f be       	out	0x3f, r0	; 63
 5c6:	0f 90       	pop	r0
 5c8:	1f 90       	pop	r1
 5ca:	18 95       	reti

000005cc <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
 5cc:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
 5ce:	84 b5       	in	r24, 0x24	; 36
 5d0:	82 60       	ori	r24, 0x02	; 2
 5d2:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
 5d4:	84 b5       	in	r24, 0x24	; 36
 5d6:	81 60       	ori	r24, 0x01	; 1
 5d8:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
 5da:	85 b5       	in	r24, 0x25	; 37
 5dc:	82 60       	ori	r24, 0x02	; 2
 5de:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
 5e0:	85 b5       	in	r24, 0x25	; 37
 5e2:	81 60       	ori	r24, 0x01	; 1
 5e4:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
 5e6:	ee e6       	ldi	r30, 0x6E	; 110
 5e8:	f0 e0       	ldi	r31, 0x00	; 0
 5ea:	80 81       	ld	r24, Z
 5ec:	81 60       	ori	r24, 0x01	; 1
 5ee:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
 5f0:	e1 e8       	ldi	r30, 0x81	; 129
 5f2:	f0 e0       	ldi	r31, 0x00	; 0
 5f4:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
 5f6:	80 81       	ld	r24, Z
 5f8:	82 60       	ori	r24, 0x02	; 2
 5fa:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
 5fc:	80 81       	ld	r24, Z
 5fe:	81 60       	ori	r24, 0x01	; 1
 600:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
 602:	e0 e8       	ldi	r30, 0x80	; 128
 604:	f0 e0       	ldi	r31, 0x00	; 0
 606:	80 81       	ld	r24, Z
 608:	81 60       	ori	r24, 0x01	; 1
 60a:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
 60c:	e1 eb       	ldi	r30, 0xB1	; 177
 60e:	f0 e0       	ldi	r31, 0x00	; 0
 610:	80 81       	ld	r24, Z
 612:	84 60       	ori	r24, 0x04	; 4
 614:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
 616:	e0 eb       	ldi	r30, 0xB0	; 176
 618:	f0 e0       	ldi	r31, 0x00	; 0
 61a:	80 81       	ld	r24, Z
 61c:	81 60       	ori	r24, 0x01	; 1
 61e:	80 83       	st	Z, r24
//#else
	// Timer 2 not finished (may not be present on this CPU)
#endif

#if defined(TCCR3B) && defined(CS31) && defined(WGM30)
	sbi(TCCR3B, CS31);		// set timer 3 prescale factor to 64
 620:	e1 e9       	ldi	r30, 0x91	; 145
 622:	f0 e0       	ldi	r31, 0x00	; 0
 624:	80 81       	ld	r24, Z
 626:	82 60       	ori	r24, 0x02	; 2
 628:	80 83       	st	Z, r24
	sbi(TCCR3B, CS30);
 62a:	80 81       	ld	r24, Z
 62c:	81 60       	ori	r24, 0x01	; 1
 62e:	80 83       	st	Z, r24
	sbi(TCCR3A, WGM30);		// put timer 3 in 8-bit phase correct pwm mode
 630:	e0 e9       	ldi	r30, 0x90	; 144
 632:	f0 e0       	ldi	r31, 0x00	; 0
 634:	80 81       	ld	r24, Z
 636:	81 60       	ori	r24, 0x01	; 1
 638:	80 83       	st	Z, r24
#endif

#if defined(ADCSRA)
	// set a2d prescaler so we are inside the desired 50-200 KHz range.
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
 63a:	ea e7       	ldi	r30, 0x7A	; 122
 63c:	f0 e0       	ldi	r31, 0x00	; 0
 63e:	80 81       	ld	r24, Z
 640:	84 60       	ori	r24, 0x04	; 4
 642:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS1);
 644:	80 81       	ld	r24, Z
 646:	82 60       	ori	r24, 0x02	; 2
 648:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS0);
 64a:	80 81       	ld	r24, Z
 64c:	81 60       	ori	r24, 0x01	; 1
 64e:	80 83       	st	Z, r24
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
 650:	80 81       	ld	r24, Z
 652:	80 68       	ori	r24, 0x80	; 128
 654:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
 656:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
 65a:	08 95       	ret

0000065c <__udivmodsi4>:
 65c:	a1 e2       	ldi	r26, 0x21	; 33
 65e:	1a 2e       	mov	r1, r26
 660:	aa 1b       	sub	r26, r26
 662:	bb 1b       	sub	r27, r27
 664:	fd 01       	movw	r30, r26
 666:	0d c0       	rjmp	.+26     	; 0x682 <__udivmodsi4_ep>

00000668 <__udivmodsi4_loop>:
 668:	aa 1f       	adc	r26, r26
 66a:	bb 1f       	adc	r27, r27
 66c:	ee 1f       	adc	r30, r30
 66e:	ff 1f       	adc	r31, r31
 670:	a2 17       	cp	r26, r18
 672:	b3 07       	cpc	r27, r19
 674:	e4 07       	cpc	r30, r20
 676:	f5 07       	cpc	r31, r21
 678:	20 f0       	brcs	.+8      	; 0x682 <__udivmodsi4_ep>
 67a:	a2 1b       	sub	r26, r18
 67c:	b3 0b       	sbc	r27, r19
 67e:	e4 0b       	sbc	r30, r20
 680:	f5 0b       	sbc	r31, r21

00000682 <__udivmodsi4_ep>:
 682:	66 1f       	adc	r22, r22
 684:	77 1f       	adc	r23, r23
 686:	88 1f       	adc	r24, r24
 688:	99 1f       	adc	r25, r25
 68a:	1a 94       	dec	r1
 68c:	69 f7       	brne	.-38     	; 0x668 <__udivmodsi4_loop>
 68e:	60 95       	com	r22
 690:	70 95       	com	r23
 692:	80 95       	com	r24
 694:	90 95       	com	r25
 696:	9b 01       	movw	r18, r22
 698:	ac 01       	movw	r20, r24
 69a:	bd 01       	movw	r22, r26
 69c:	cf 01       	movw	r24, r30
 69e:	08 95       	ret

000006a0 <__tablejump2__>:
 6a0:	ee 0f       	add	r30, r30
 6a2:	ff 1f       	adc	r31, r31
 6a4:	00 24       	eor	r0, r0
 6a6:	00 1c       	adc	r0, r0
 6a8:	0b be       	out	0x3b, r0	; 59
 6aa:	07 90       	elpm	r0, Z+
 6ac:	f6 91       	elpm	r31, Z
 6ae:	e0 2d       	mov	r30, r0
 6b0:	09 94       	ijmp

000006b2 <_exit>:
 6b2:	f8 94       	cli

000006b4 <__stop_program>:
 6b4:	ff cf       	rjmp	.-2      	; 0x6b4 <__stop_program>

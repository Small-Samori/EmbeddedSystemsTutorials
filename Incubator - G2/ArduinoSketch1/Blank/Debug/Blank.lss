
Blank.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000005e  00800100  00001fd6  0000206a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001fd6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000001ae  0080015e  0080015e  000020c8  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000020c8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000020f8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000008d8  00000000  00000000  00002138  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000153ed  00000000  00000000  00002a10  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00003acd  00000000  00000000  00017dfd  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000049e5  00000000  00000000  0001b8ca  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000019a8  00000000  00000000  000202b0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000048a1  00000000  00000000  00021c58  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00007b0f  00000000  00000000  000264f9  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000830  00000000  00000000  0002e008  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	b2 c0       	rjmp	.+356    	; 0x166 <__dtors_end>
       2:	00 00       	nop
       4:	da c0       	rjmp	.+436    	; 0x1ba <__bad_interrupt>
       6:	00 00       	nop
       8:	d8 c0       	rjmp	.+432    	; 0x1ba <__bad_interrupt>
       a:	00 00       	nop
       c:	d6 c0       	rjmp	.+428    	; 0x1ba <__bad_interrupt>
       e:	00 00       	nop
      10:	d4 c0       	rjmp	.+424    	; 0x1ba <__bad_interrupt>
      12:	00 00       	nop
      14:	d2 c0       	rjmp	.+420    	; 0x1ba <__bad_interrupt>
      16:	00 00       	nop
      18:	d0 c0       	rjmp	.+416    	; 0x1ba <__bad_interrupt>
      1a:	00 00       	nop
      1c:	ce c0       	rjmp	.+412    	; 0x1ba <__bad_interrupt>
      1e:	00 00       	nop
      20:	cc c0       	rjmp	.+408    	; 0x1ba <__bad_interrupt>
      22:	00 00       	nop
      24:	ca c0       	rjmp	.+404    	; 0x1ba <__bad_interrupt>
      26:	00 00       	nop
      28:	c8 c0       	rjmp	.+400    	; 0x1ba <__bad_interrupt>
      2a:	00 00       	nop
      2c:	c6 c0       	rjmp	.+396    	; 0x1ba <__bad_interrupt>
      2e:	00 00       	nop
      30:	c4 c0       	rjmp	.+392    	; 0x1ba <__bad_interrupt>
      32:	00 00       	nop
      34:	c2 c0       	rjmp	.+388    	; 0x1ba <__bad_interrupt>
      36:	00 00       	nop
      38:	c0 c0       	rjmp	.+384    	; 0x1ba <__bad_interrupt>
      3a:	00 00       	nop
      3c:	be c0       	rjmp	.+380    	; 0x1ba <__bad_interrupt>
      3e:	00 00       	nop
      40:	bc c0       	rjmp	.+376    	; 0x1ba <__bad_interrupt>
      42:	00 00       	nop
      44:	ba c0       	rjmp	.+372    	; 0x1ba <__bad_interrupt>
      46:	00 00       	nop
      48:	0c 94 fd 0b 	jmp	0x17fa	; 0x17fa <__vector_18>
      4c:	b6 c0       	rjmp	.+364    	; 0x1ba <__bad_interrupt>
      4e:	00 00       	nop
      50:	0c 94 f5 0a 	jmp	0x15ea	; 0x15ea <__vector_20>
      54:	0c 94 2b 0b 	jmp	0x1656	; 0x1656 <__vector_21>
      58:	b0 c0       	rjmp	.+352    	; 0x1ba <__bad_interrupt>
      5a:	00 00       	nop
      5c:	ae c0       	rjmp	.+348    	; 0x1ba <__bad_interrupt>
      5e:	00 00       	nop
      60:	ac c0       	rjmp	.+344    	; 0x1ba <__bad_interrupt>
      62:	00 00       	nop
      64:	aa c0       	rjmp	.+340    	; 0x1ba <__bad_interrupt>
      66:	00 00       	nop
      68:	40 c6       	rjmp	.+3200   	; 0xcea <__vector_26>
      6a:	00 00       	nop
      6c:	a6 c0       	rjmp	.+332    	; 0x1ba <__bad_interrupt>
      6e:	00 00       	nop
      70:	a4 c0       	rjmp	.+328    	; 0x1ba <__bad_interrupt>
      72:	00 00       	nop
      74:	a2 c0       	rjmp	.+324    	; 0x1ba <__bad_interrupt>
      76:	00 00       	nop
      78:	a0 c0       	rjmp	.+320    	; 0x1ba <__bad_interrupt>
      7a:	00 00       	nop
      7c:	9e c0       	rjmp	.+316    	; 0x1ba <__bad_interrupt>
      7e:	00 00       	nop
      80:	9c c0       	rjmp	.+312    	; 0x1ba <__bad_interrupt>
      82:	00 00       	nop
      84:	9a c0       	rjmp	.+308    	; 0x1ba <__bad_interrupt>
      86:	00 00       	nop
      88:	98 c0       	rjmp	.+304    	; 0x1ba <__bad_interrupt>
      8a:	00 00       	nop
      8c:	4b 0d       	add	r20, r11
      8e:	50 0d       	add	r21, r0
      90:	55 0d       	add	r21, r5
      92:	5f 0d       	add	r21, r15
      94:	8d 0d       	add	r24, r13
      96:	8d 0d       	add	r24, r13
      98:	69 0d       	add	r22, r9
      9a:	71 0d       	add	r23, r1
      9c:	79 0d       	add	r23, r9
      9e:	83 0d       	add	r24, r3
      a0:	a9 0d       	add	r26, r9
      a2:	ac 0d       	add	r26, r12
      a4:	9f 0d       	add	r25, r15
      a6:	a3 0d       	add	r26, r3
      a8:	c3 0d       	add	r28, r3
      aa:	c3 0d       	add	r28, r3
      ac:	b0 0d       	add	r27, r0
      ae:	b4 0d       	add	r27, r4
      b0:	ba 0d       	add	r27, r10
      b2:	be 0d       	add	r27, r14

000000b4 <__trampolines_end>:
      b4:	49 6e       	ori	r20, 0xE9	; 233
      b6:	74 65       	ori	r23, 0x54	; 84
      b8:	72 72       	andi	r23, 0x22	; 34
      ba:	75 70       	andi	r23, 0x05	; 5
      bc:	74 73       	andi	r23, 0x34	; 52
      be:	20 6e       	ori	r18, 0xE0	; 224
      c0:	6f 74       	andi	r22, 0x4F	; 79
      c2:	20 73       	andi	r18, 0x30	; 48
      c4:	75 70       	andi	r23, 0x05	; 5
      c6:	70 6f       	ori	r23, 0xF0	; 240
      c8:	72 74       	andi	r23, 0x42	; 66
      ca:	65 64       	ori	r22, 0x45	; 69
      cc:	20 6f       	ori	r18, 0xF0	; 240
      ce:	6e 20       	and	r6, r14
      d0:	74 68       	ori	r23, 0x84	; 132
      d2:	69 73       	andi	r22, 0x39	; 57
      d4:	20 70       	andi	r18, 0x00	; 0
      d6:	6c 61       	ori	r22, 0x1C	; 28
      d8:	74 66       	ori	r23, 0x64	; 100
      da:	6f 72       	andi	r22, 0x2F	; 47
      dc:	6d 0a       	sbc	r6, r29
	...

000000df <digital_pin_to_timer_PGM>:
      df:	00 00 00 01 02 00 09 0a 00 00 00 00 04 03 08 07     ................
	...

000000ff <digital_pin_to_bit_mask_PGM>:
      ff:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 40 80     ..... @...... @.
     10f:	01 02 04 08 10 20 40 80 80 40 20 10 08 04 02 01     ..... @..@ .....

0000011f <digital_pin_to_port_PGM>:
     11f:	02 02 02 02 02 02 02 02 04 04 04 04 04 04 04 04     ................
     12f:	03 03 03 03 03 03 03 03 01 01 01 01 01 01 01 01     ................

0000013f <port_to_input_PGM>:
     13f:	00 00 20 00 23 00 26 00 29 00                       .. .#.&.).

00000149 <port_to_output_PGM>:
     149:	00 00 22 00 25 00 28 00 2b 00                       ..".%.(.+.

00000153 <port_to_mode_PGM>:
     153:	00 00 21 00 24 00 27 00 2a 00 00                    ..!.$.'.*..

0000015e <__ctors_start>:
     15e:	a3 02       	muls	r26, r19
     160:	60 08       	sbc	r6, r0
     162:	5d 0b       	sbc	r21, r29

00000164 <__ctors_end>:
     164:	b1 02       	muls	r27, r17

00000166 <__dtors_end>:
     166:	11 24       	eor	r1, r1
     168:	1f be       	out	0x3f, r1	; 63
     16a:	cf ef       	ldi	r28, 0xFF	; 255
     16c:	d0 e4       	ldi	r29, 0x40	; 64
     16e:	de bf       	out	0x3e, r29	; 62
     170:	cd bf       	out	0x3d, r28	; 61

00000172 <__do_copy_data>:
     172:	11 e0       	ldi	r17, 0x01	; 1
     174:	a0 e0       	ldi	r26, 0x00	; 0
     176:	b1 e0       	ldi	r27, 0x01	; 1
     178:	e6 ed       	ldi	r30, 0xD6	; 214
     17a:	ff e1       	ldi	r31, 0x1F	; 31
     17c:	00 e0       	ldi	r16, 0x00	; 0
     17e:	0b bf       	out	0x3b, r16	; 59
     180:	02 c0       	rjmp	.+4      	; 0x186 <__do_copy_data+0x14>
     182:	07 90       	elpm	r0, Z+
     184:	0d 92       	st	X+, r0
     186:	ae 35       	cpi	r26, 0x5E	; 94
     188:	b1 07       	cpc	r27, r17
     18a:	d9 f7       	brne	.-10     	; 0x182 <__do_copy_data+0x10>

0000018c <__do_clear_bss>:
     18c:	23 e0       	ldi	r18, 0x03	; 3
     18e:	ae e5       	ldi	r26, 0x5E	; 94
     190:	b1 e0       	ldi	r27, 0x01	; 1
     192:	01 c0       	rjmp	.+2      	; 0x196 <.do_clear_bss_start>

00000194 <.do_clear_bss_loop>:
     194:	1d 92       	st	X+, r1

00000196 <.do_clear_bss_start>:
     196:	ac 30       	cpi	r26, 0x0C	; 12
     198:	b2 07       	cpc	r27, r18
     19a:	e1 f7       	brne	.-8      	; 0x194 <.do_clear_bss_loop>

0000019c <__do_global_ctors>:
     19c:	10 e0       	ldi	r17, 0x00	; 0
     19e:	c2 eb       	ldi	r28, 0xB2	; 178
     1a0:	d0 e0       	ldi	r29, 0x00	; 0
     1a2:	04 c0       	rjmp	.+8      	; 0x1ac <__do_global_ctors+0x10>
     1a4:	21 97       	sbiw	r28, 0x01	; 1
     1a6:	fe 01       	movw	r30, r28
     1a8:	0e 94 b5 0e 	call	0x1d6a	; 0x1d6a <__tablejump2__>
     1ac:	cf 3a       	cpi	r28, 0xAF	; 175
     1ae:	d1 07       	cpc	r29, r17
     1b0:	c9 f7       	brne	.-14     	; 0x1a4 <__do_global_ctors+0x8>
     1b2:	0e 94 8b 0b 	call	0x1716	; 0x1716 <main>
     1b6:	0c 94 df 0f 	jmp	0x1fbe	; 0x1fbe <__do_global_dtors>

000001ba <__bad_interrupt>:
     1ba:	22 cf       	rjmp	.-444    	; 0x0 <__vectors>

000001bc <_Z35PulseSensorPlaygroundSetupInterruptv>:
     1bc:	80 e0       	ldi	r24, 0x00	; 0
     1be:	08 95       	ret

000001c0 <_Z23MQResistanceCalculationi>:
void monitorBloodPressure(HardwareSerial ser) {
	char InByte = 0x00;
	if(ser.available()) {
		InByte = ser.read();
	}
}
     1c0:	cf 92       	push	r12
     1c2:	df 92       	push	r13
     1c4:	ef 92       	push	r14
     1c6:	ff 92       	push	r15
     1c8:	bc 01       	movw	r22, r24
     1ca:	8f ef       	ldi	r24, 0xFF	; 255
     1cc:	93 e0       	ldi	r25, 0x03	; 3
     1ce:	0e 94 a2 0e 	call	0x1d44	; 0x1d44 <__divmodhi4>
     1d2:	07 2e       	mov	r0, r23
     1d4:	00 0c       	add	r0, r0
     1d6:	88 0b       	sbc	r24, r24
     1d8:	99 0b       	sbc	r25, r25
     1da:	0e 94 32 09 	call	0x1264	; 0x1264 <__floatsisf>
     1de:	20 e0       	ldi	r18, 0x00	; 0
     1e0:	30 e0       	ldi	r19, 0x00	; 0
     1e2:	40 e8       	ldi	r20, 0x80	; 128
     1e4:	5f e3       	ldi	r21, 0x3F	; 63
     1e6:	6f d7       	rcall	.+3806   	; 0x10c6 <__subsf3>
     1e8:	6b 01       	movw	r12, r22
     1ea:	7c 01       	movw	r14, r24
     1ec:	60 91 10 01 	lds	r22, 0x0110	; 0x800110 <RL_VALUE>
     1f0:	70 91 11 01 	lds	r23, 0x0111	; 0x800111 <RL_VALUE+0x1>
     1f4:	07 2e       	mov	r0, r23
     1f6:	00 0c       	add	r0, r0
     1f8:	88 0b       	sbc	r24, r24
     1fa:	99 0b       	sbc	r25, r25
     1fc:	0e 94 32 09 	call	0x1264	; 0x1264 <__floatsisf>
     200:	a7 01       	movw	r20, r14
     202:	96 01       	movw	r18, r12
     204:	0e 94 be 09 	call	0x137c	; 0x137c <__mulsf3>
     208:	ff 90       	pop	r15
     20a:	ef 90       	pop	r14
     20c:	df 90       	pop	r13
     20e:	cf 90       	pop	r12
     210:	08 95       	ret

00000212 <_Z13MQCalibrationhh>:
     212:	cf 92       	push	r12
     214:	df 92       	push	r13
     216:	ef 92       	push	r14
     218:	ff 92       	push	r15
     21a:	0f 93       	push	r16
     21c:	1f 93       	push	r17
     21e:	cf 93       	push	r28
     220:	df 93       	push	r29
     222:	d8 2f       	mov	r29, r24
     224:	c6 2f       	mov	r28, r22
     226:	00 e0       	ldi	r16, 0x00	; 0
     228:	10 e0       	ldi	r17, 0x00	; 0
     22a:	c1 2c       	mov	r12, r1
     22c:	d1 2c       	mov	r13, r1
     22e:	76 01       	movw	r14, r12
     230:	60 91 08 01 	lds	r22, 0x0108	; 0x800108 <CALIBARAION_SAMPLE_TIMES>
     234:	70 91 09 01 	lds	r23, 0x0109	; 0x800109 <CALIBARAION_SAMPLE_TIMES+0x1>
     238:	06 17       	cp	r16, r22
     23a:	17 07       	cpc	r17, r23
     23c:	c4 f4       	brge	.+48     	; 0x26e <_Z13MQCalibrationhh+0x5c>
     23e:	8d 2f       	mov	r24, r29
     240:	0e 94 04 0d 	call	0x1a08	; 0x1a08 <analogRead>
     244:	bd df       	rcall	.-134    	; 0x1c0 <_Z23MQResistanceCalculationi>
     246:	9b 01       	movw	r18, r22
     248:	ac 01       	movw	r20, r24
     24a:	c7 01       	movw	r24, r14
     24c:	b6 01       	movw	r22, r12
     24e:	3c d7       	rcall	.+3704   	; 0x10c8 <__addsf3>
     250:	6b 01       	movw	r12, r22
     252:	7c 01       	movw	r14, r24
     254:	60 91 06 01 	lds	r22, 0x0106	; 0x800106 <CALIBRATION_SAMPLE_INTERVAL>
     258:	70 91 07 01 	lds	r23, 0x0107	; 0x800107 <CALIBRATION_SAMPLE_INTERVAL+0x1>
     25c:	07 2e       	mov	r0, r23
     25e:	00 0c       	add	r0, r0
     260:	88 0b       	sbc	r24, r24
     262:	99 0b       	sbc	r25, r25
     264:	0e 94 78 0c 	call	0x18f0	; 0x18f0 <delay>
     268:	0f 5f       	subi	r16, 0xFF	; 255
     26a:	1f 4f       	sbci	r17, 0xFF	; 255
     26c:	e1 cf       	rjmp	.-62     	; 0x230 <_Z13MQCalibrationhh+0x1e>
     26e:	07 2e       	mov	r0, r23
     270:	00 0c       	add	r0, r0
     272:	88 0b       	sbc	r24, r24
     274:	99 0b       	sbc	r25, r25
     276:	f6 d7       	rcall	.+4076   	; 0x1264 <__floatsisf>
     278:	9b 01       	movw	r18, r22
     27a:	ac 01       	movw	r20, r24
     27c:	c7 01       	movw	r24, r14
     27e:	b6 01       	movw	r22, r12
     280:	87 d7       	rcall	.+3854   	; 0x1190 <__divsf3>
     282:	6b 01       	movw	r12, r22
     284:	7c 01       	movw	r14, r24
     286:	c1 30       	cpi	r28, 0x01	; 1
     288:	69 f0       	breq	.+26     	; 0x2a4 <_Z13MQCalibrationhh+0x92>
     28a:	38 f0       	brcs	.+14     	; 0x29a <_Z13MQCalibrationhh+0x88>
     28c:	c2 30       	cpi	r28, 0x02	; 2
     28e:	d1 f4       	brne	.+52     	; 0x2c4 <_Z13MQCalibrationhh+0xb2>
     290:	60 91 0a 01 	lds	r22, 0x010A	; 0x80010a <MQ135_RO_CLEAN_AIR_FACTOR>
     294:	70 91 0b 01 	lds	r23, 0x010B	; 0x80010b <MQ135_RO_CLEAN_AIR_FACTOR+0x1>
     298:	09 c0       	rjmp	.+18     	; 0x2ac <_Z13MQCalibrationhh+0x9a>
     29a:	60 91 0e 01 	lds	r22, 0x010E	; 0x80010e <MQ2_RO_CLEAN_AIR_FACTOR>
     29e:	70 91 0f 01 	lds	r23, 0x010F	; 0x80010f <MQ2_RO_CLEAN_AIR_FACTOR+0x1>
     2a2:	04 c0       	rjmp	.+8      	; 0x2ac <_Z13MQCalibrationhh+0x9a>
     2a4:	60 91 0c 01 	lds	r22, 0x010C	; 0x80010c <MQ131_RO_CLEAN_AIR_FACTOR>
     2a8:	70 91 0d 01 	lds	r23, 0x010D	; 0x80010d <MQ131_RO_CLEAN_AIR_FACTOR+0x1>
     2ac:	07 2e       	mov	r0, r23
     2ae:	00 0c       	add	r0, r0
     2b0:	88 0b       	sbc	r24, r24
     2b2:	99 0b       	sbc	r25, r25
     2b4:	d7 d7       	rcall	.+4014   	; 0x1264 <__floatsisf>
     2b6:	9b 01       	movw	r18, r22
     2b8:	ac 01       	movw	r20, r24
     2ba:	c7 01       	movw	r24, r14
     2bc:	b6 01       	movw	r22, r12
     2be:	68 d7       	rcall	.+3792   	; 0x1190 <__divsf3>
     2c0:	6b 01       	movw	r12, r22
     2c2:	7c 01       	movw	r14, r24
     2c4:	c7 01       	movw	r24, r14
     2c6:	b6 01       	movw	r22, r12
     2c8:	df 91       	pop	r29
     2ca:	cf 91       	pop	r28
     2cc:	1f 91       	pop	r17
     2ce:	0f 91       	pop	r16
     2d0:	ff 90       	pop	r15
     2d2:	ef 90       	pop	r14
     2d4:	df 90       	pop	r13
     2d6:	cf 90       	pop	r12
     2d8:	08 95       	ret

000002da <setup>:
     2da:	cf 93       	push	r28
     2dc:	df 93       	push	r29
     2de:	20 e8       	ldi	r18, 0x80	; 128
     2e0:	43 e0       	ldi	r20, 0x03	; 3
     2e2:	62 e0       	ldi	r22, 0x02	; 2
     2e4:	83 e9       	ldi	r24, 0x93	; 147
     2e6:	91 e0       	ldi	r25, 0x01	; 1
     2e8:	ea d1       	rcall	.+980    	; 0x6be <_ZN5HX7115beginEhhh>
     2ea:	60 e0       	ldi	r22, 0x00	; 0
     2ec:	80 e0       	ldi	r24, 0x00	; 0
     2ee:	91 df       	rcall	.-222    	; 0x212 <_Z13MQCalibrationhh>
     2f0:	60 93 87 01 	sts	0x0187, r22	; 0x800187 <Ro>
     2f4:	70 93 88 01 	sts	0x0188, r23	; 0x800188 <Ro+0x1>
     2f8:	80 93 89 01 	sts	0x0189, r24	; 0x800189 <Ro+0x2>
     2fc:	90 93 8a 01 	sts	0x018A, r25	; 0x80018a <Ro+0x3>
     300:	40 e0       	ldi	r20, 0x00	; 0
     302:	50 e0       	ldi	r21, 0x00	; 0
     304:	6f e1       	ldi	r22, 0x1F	; 31
     306:	70 e0       	ldi	r23, 0x00	; 0
     308:	8a e7       	ldi	r24, 0x7A	; 122
     30a:	91 e0       	ldi	r25, 0x01	; 1
     30c:	63 d3       	rcall	.+1734   	; 0x9d4 <_ZN21PulseSensorPlayground11analogInputEii>
     30e:	40 e0       	ldi	r20, 0x00	; 0
     310:	50 e0       	ldi	r21, 0x00	; 0
     312:	6d e0       	ldi	r22, 0x0D	; 13
     314:	70 e0       	ldi	r23, 0x00	; 0
     316:	8a e7       	ldi	r24, 0x7A	; 122
     318:	91 e0       	ldi	r25, 0x01	; 1
     31a:	74 d3       	rcall	.+1768   	; 0xa04 <_ZN21PulseSensorPlayground12blinkOnPulseEii>
     31c:	40 e0       	ldi	r20, 0x00	; 0
     31e:	50 e0       	ldi	r21, 0x00	; 0
     320:	65 e0       	ldi	r22, 0x05	; 5
     322:	70 e0       	ldi	r23, 0x00	; 0
     324:	8a e7       	ldi	r24, 0x7A	; 122
     326:	91 e0       	ldi	r25, 0x01	; 1
     328:	85 d3       	rcall	.+1802   	; 0xa34 <_ZN21PulseSensorPlayground11fadeOnPulseEii>
     32a:	62 e6       	ldi	r22, 0x62	; 98
     32c:	72 e0       	ldi	r23, 0x02	; 2
     32e:	8a e7       	ldi	r24, 0x7A	; 122
     330:	91 e0       	ldi	r25, 0x01	; 1
     332:	98 d3       	rcall	.+1840   	; 0xa64 <_ZN21PulseSensorPlayground9setSerialER6Stream>
     334:	62 e0       	ldi	r22, 0x02	; 2
     336:	8a e7       	ldi	r24, 0x7A	; 122
     338:	91 e0       	ldi	r25, 0x01	; 1
     33a:	96 d3       	rcall	.+1836   	; 0xa68 <_ZN21PulseSensorPlayground13setOutputTypeEh>
     33c:	40 e0       	ldi	r20, 0x00	; 0
     33e:	50 e0       	ldi	r21, 0x00	; 0
     340:	66 e2       	ldi	r22, 0x26	; 38
     342:	72 e0       	ldi	r23, 0x02	; 2
     344:	8a e7       	ldi	r24, 0x7A	; 122
     346:	91 e0       	ldi	r25, 0x01	; 1
     348:	91 d3       	rcall	.+1826   	; 0xa6c <_ZN21PulseSensorPlayground12setThresholdEii>
     34a:	8a e7       	ldi	r24, 0x7A	; 122
     34c:	91 e0       	ldi	r25, 0x01	; 1
     34e:	fe d2       	rcall	.+1532   	; 0x94c <_ZN21PulseSensorPlayground5beginEv>
     350:	81 11       	cpse	r24, r1
     352:	1c c0       	rjmp	.+56     	; 0x38c <setup+0xb2>
     354:	c4 e1       	ldi	r28, 0x14	; 20
     356:	d0 e0       	ldi	r29, 0x00	; 0
     358:	60 e0       	ldi	r22, 0x00	; 0
     35a:	8d e0       	ldi	r24, 0x0D	; 13
     35c:	0e 94 00 0e 	call	0x1c00	; 0x1c00 <digitalWrite>
     360:	64 e6       	ldi	r22, 0x64	; 100
     362:	70 e0       	ldi	r23, 0x00	; 0
     364:	80 e0       	ldi	r24, 0x00	; 0
     366:	90 e0       	ldi	r25, 0x00	; 0
     368:	0e 94 78 0c 	call	0x18f0	; 0x18f0 <delay>
     36c:	61 e0       	ldi	r22, 0x01	; 1
     36e:	8d e0       	ldi	r24, 0x0D	; 13
     370:	0e 94 00 0e 	call	0x1c00	; 0x1c00 <digitalWrite>
     374:	64 e6       	ldi	r22, 0x64	; 100
     376:	70 e0       	ldi	r23, 0x00	; 0
     378:	80 e0       	ldi	r24, 0x00	; 0
     37a:	90 e0       	ldi	r25, 0x00	; 0
     37c:	0e 94 78 0c 	call	0x18f0	; 0x18f0 <delay>
     380:	21 97       	sbiw	r28, 0x01	; 1
     382:	51 f7       	brne	.-44     	; 0x358 <setup+0x7e>
     384:	61 e0       	ldi	r22, 0x01	; 1
     386:	8d e0       	ldi	r24, 0x0D	; 13
     388:	0e 94 00 0e 	call	0x1c00	; 0x1c00 <digitalWrite>
     38c:	8e e6       	ldi	r24, 0x6E	; 110
     38e:	91 e0       	ldi	r25, 0x01	; 1
     390:	a6 d2       	rcall	.+1356   	; 0x8de <_ZN17LiquidCrystal_I2C4initEv>
     392:	8e e6       	ldi	r24, 0x6E	; 110
     394:	91 e0       	ldi	r25, 0x01	; 1
     396:	c8 d1       	rcall	.+912    	; 0x728 <_ZN17LiquidCrystal_I2C9backlightEv>
     398:	8e e6       	ldi	r24, 0x6E	; 110
     39a:	91 e0       	ldi	r25, 0x01	; 1
     39c:	03 d2       	rcall	.+1030   	; 0x7a4 <_ZN17LiquidCrystal_I2C5clearEv>
     39e:	40 e0       	ldi	r20, 0x00	; 0
     3a0:	60 e0       	ldi	r22, 0x00	; 0
     3a2:	8e e6       	ldi	r24, 0x6E	; 110
     3a4:	91 e0       	ldi	r25, 0x01	; 1
     3a6:	0a d2       	rcall	.+1044   	; 0x7bc <_ZN17LiquidCrystal_I2C9setCursorEhh>
     3a8:	6c e1       	ldi	r22, 0x1C	; 28
     3aa:	71 e0       	ldi	r23, 0x01	; 1
     3ac:	8e e6       	ldi	r24, 0x6E	; 110
     3ae:	91 e0       	ldi	r25, 0x01	; 1
     3b0:	0e 94 fc 0b 	call	0x17f8	; 0x17f8 <_ZN5Print5printEPKc>
     3b4:	68 eb       	ldi	r22, 0xB8	; 184
     3b6:	7b e0       	ldi	r23, 0x0B	; 11
     3b8:	80 e0       	ldi	r24, 0x00	; 0
     3ba:	90 e0       	ldi	r25, 0x00	; 0
     3bc:	0e 94 78 0c 	call	0x18f0	; 0x18f0 <delay>
     3c0:	8e e6       	ldi	r24, 0x6E	; 110
     3c2:	91 e0       	ldi	r25, 0x01	; 1
     3c4:	ef d1       	rcall	.+990    	; 0x7a4 <_ZN17LiquidCrystal_I2C5clearEv>
     3c6:	40 e0       	ldi	r20, 0x00	; 0
     3c8:	60 e0       	ldi	r22, 0x00	; 0
     3ca:	8e e6       	ldi	r24, 0x6E	; 110
     3cc:	91 e0       	ldi	r25, 0x01	; 1
     3ce:	df 91       	pop	r29
     3d0:	cf 91       	pop	r28
     3d2:	f4 c1       	rjmp	.+1000   	; 0x7bc <_ZN17LiquidCrystal_I2C9setCursorEhh>

000003d4 <loop>:
     3d4:	0e 94 47 0c 	call	0x188e	; 0x188e <millis>
     3d8:	20 91 6c 01 	lds	r18, 0x016C	; 0x80016c <motor_t>
     3dc:	30 91 6d 01 	lds	r19, 0x016D	; 0x80016d <motor_t+0x1>
     3e0:	dc 01       	movw	r26, r24
     3e2:	cb 01       	movw	r24, r22
     3e4:	82 1b       	sub	r24, r18
     3e6:	93 0b       	sbc	r25, r19
     3e8:	a1 09       	sbc	r26, r1
     3ea:	b1 09       	sbc	r27, r1
     3ec:	89 3e       	cpi	r24, 0xE9	; 233
     3ee:	93 40       	sbci	r25, 0x03	; 3
     3f0:	a1 05       	cpc	r26, r1
     3f2:	b1 05       	cpc	r27, r1
     3f4:	30 f0       	brcs	.+12     	; 0x402 <__LOCK_REGION_LENGTH__+0x2>
     3f6:	0e 94 47 0c 	call	0x188e	; 0x188e <millis>
     3fa:	70 93 6d 01 	sts	0x016D, r23	; 0x80016d <motor_t+0x1>
     3fe:	60 93 6c 01 	sts	0x016C, r22	; 0x80016c <motor_t>
     402:	0e 94 47 0c 	call	0x188e	; 0x188e <millis>
     406:	20 91 6a 01 	lds	r18, 0x016A	; 0x80016a <temperatureelement_t>
     40a:	30 91 6b 01 	lds	r19, 0x016B	; 0x80016b <temperatureelement_t+0x1>
     40e:	dc 01       	movw	r26, r24
     410:	cb 01       	movw	r24, r22
     412:	82 1b       	sub	r24, r18
     414:	93 0b       	sbc	r25, r19
     416:	a1 09       	sbc	r26, r1
     418:	b1 09       	sbc	r27, r1
     41a:	89 3e       	cpi	r24, 0xE9	; 233
     41c:	93 40       	sbci	r25, 0x03	; 3
     41e:	a1 05       	cpc	r26, r1
     420:	b1 05       	cpc	r27, r1
     422:	30 f0       	brcs	.+12     	; 0x430 <__LOCK_REGION_LENGTH__+0x30>
     424:	0e 94 47 0c 	call	0x188e	; 0x188e <millis>
     428:	70 93 6b 01 	sts	0x016B, r23	; 0x80016b <temperatureelement_t+0x1>
     42c:	60 93 6a 01 	sts	0x016A, r22	; 0x80016a <temperatureelement_t>
     430:	0e 94 47 0c 	call	0x188e	; 0x188e <millis>
     434:	20 91 68 01 	lds	r18, 0x0168	; 0x800168 <temphumidity_t>
     438:	30 91 69 01 	lds	r19, 0x0169	; 0x800169 <temphumidity_t+0x1>
     43c:	dc 01       	movw	r26, r24
     43e:	cb 01       	movw	r24, r22
     440:	82 1b       	sub	r24, r18
     442:	93 0b       	sbc	r25, r19
     444:	a1 09       	sbc	r26, r1
     446:	b1 09       	sbc	r27, r1
     448:	89 3e       	cpi	r24, 0xE9	; 233
     44a:	93 40       	sbci	r25, 0x03	; 3
     44c:	a1 05       	cpc	r26, r1
     44e:	b1 05       	cpc	r27, r1
     450:	30 f0       	brcs	.+12     	; 0x45e <__LOCK_REGION_LENGTH__+0x5e>
     452:	0e 94 47 0c 	call	0x188e	; 0x188e <millis>
     456:	70 93 69 01 	sts	0x0169, r23	; 0x800169 <temphumidity_t+0x1>
     45a:	60 93 68 01 	sts	0x0168, r22	; 0x800168 <temphumidity_t>
     45e:	0e 94 47 0c 	call	0x188e	; 0x188e <millis>
     462:	20 91 66 01 	lds	r18, 0x0166	; 0x800166 <light_t>
     466:	30 91 67 01 	lds	r19, 0x0167	; 0x800167 <light_t+0x1>
     46a:	dc 01       	movw	r26, r24
     46c:	cb 01       	movw	r24, r22
     46e:	82 1b       	sub	r24, r18
     470:	93 0b       	sbc	r25, r19
     472:	a1 09       	sbc	r26, r1
     474:	b1 09       	sbc	r27, r1
     476:	89 3e       	cpi	r24, 0xE9	; 233
     478:	93 40       	sbci	r25, 0x03	; 3
     47a:	a1 05       	cpc	r26, r1
     47c:	b1 05       	cpc	r27, r1
     47e:	30 f0       	brcs	.+12     	; 0x48c <__LOCK_REGION_LENGTH__+0x8c>
     480:	0e 94 47 0c 	call	0x188e	; 0x188e <millis>
     484:	70 93 67 01 	sts	0x0167, r23	; 0x800167 <light_t+0x1>
     488:	60 93 66 01 	sts	0x0166, r22	; 0x800166 <light_t>
     48c:	0e 94 47 0c 	call	0x188e	; 0x188e <millis>
     490:	20 91 64 01 	lds	r18, 0x0164	; 0x800164 <pulse_t>
     494:	30 91 65 01 	lds	r19, 0x0165	; 0x800165 <pulse_t+0x1>
     498:	dc 01       	movw	r26, r24
     49a:	cb 01       	movw	r24, r22
     49c:	82 1b       	sub	r24, r18
     49e:	93 0b       	sbc	r25, r19
     4a0:	a1 09       	sbc	r26, r1
     4a2:	b1 09       	sbc	r27, r1
     4a4:	89 3e       	cpi	r24, 0xE9	; 233
     4a6:	93 40       	sbci	r25, 0x03	; 3
     4a8:	a1 05       	cpc	r26, r1
     4aa:	b1 05       	cpc	r27, r1
     4ac:	30 f0       	brcs	.+12     	; 0x4ba <__LOCK_REGION_LENGTH__+0xba>
     4ae:	0e 94 47 0c 	call	0x188e	; 0x188e <millis>
     4b2:	70 93 65 01 	sts	0x0165, r23	; 0x800165 <pulse_t+0x1>
     4b6:	60 93 64 01 	sts	0x0164, r22	; 0x800164 <pulse_t>
     4ba:	0e 94 47 0c 	call	0x188e	; 0x188e <millis>
     4be:	20 91 62 01 	lds	r18, 0x0162	; 0x800162 <weight_t>
     4c2:	30 91 63 01 	lds	r19, 0x0163	; 0x800163 <weight_t+0x1>
     4c6:	dc 01       	movw	r26, r24
     4c8:	cb 01       	movw	r24, r22
     4ca:	82 1b       	sub	r24, r18
     4cc:	93 0b       	sbc	r25, r19
     4ce:	a1 09       	sbc	r26, r1
     4d0:	b1 09       	sbc	r27, r1
     4d2:	89 3e       	cpi	r24, 0xE9	; 233
     4d4:	93 40       	sbci	r25, 0x03	; 3
     4d6:	a1 05       	cpc	r26, r1
     4d8:	b1 05       	cpc	r27, r1
     4da:	30 f0       	brcs	.+12     	; 0x4e8 <__LOCK_REGION_LENGTH__+0xe8>
     4dc:	0e 94 47 0c 	call	0x188e	; 0x188e <millis>
     4e0:	70 93 63 01 	sts	0x0163, r23	; 0x800163 <weight_t+0x1>
     4e4:	60 93 62 01 	sts	0x0162, r22	; 0x800162 <weight_t>
     4e8:	0e 94 47 0c 	call	0x188e	; 0x188e <millis>
     4ec:	20 91 60 01 	lds	r18, 0x0160	; 0x800160 <oxygen_t>
     4f0:	30 91 61 01 	lds	r19, 0x0161	; 0x800161 <oxygen_t+0x1>
     4f4:	dc 01       	movw	r26, r24
     4f6:	cb 01       	movw	r24, r22
     4f8:	82 1b       	sub	r24, r18
     4fa:	93 0b       	sbc	r25, r19
     4fc:	a1 09       	sbc	r26, r1
     4fe:	b1 09       	sbc	r27, r1
     500:	89 3e       	cpi	r24, 0xE9	; 233
     502:	93 40       	sbci	r25, 0x03	; 3
     504:	a1 05       	cpc	r26, r1
     506:	b1 05       	cpc	r27, r1
     508:	30 f0       	brcs	.+12     	; 0x516 <__LOCK_REGION_LENGTH__+0x116>
     50a:	0e 94 47 0c 	call	0x188e	; 0x188e <millis>
     50e:	70 93 61 01 	sts	0x0161, r23	; 0x800161 <oxygen_t+0x1>
     512:	60 93 60 01 	sts	0x0160, r22	; 0x800160 <oxygen_t>
     516:	0e 94 47 0c 	call	0x188e	; 0x188e <millis>
     51a:	20 91 5e 01 	lds	r18, 0x015E	; 0x80015e <__data_end>
     51e:	30 91 5f 01 	lds	r19, 0x015F	; 0x80015f <__data_end+0x1>
     522:	dc 01       	movw	r26, r24
     524:	cb 01       	movw	r24, r22
     526:	82 1b       	sub	r24, r18
     528:	93 0b       	sbc	r25, r19
     52a:	a1 09       	sbc	r26, r1
     52c:	b1 09       	sbc	r27, r1
     52e:	89 3e       	cpi	r24, 0xE9	; 233
     530:	93 40       	sbci	r25, 0x03	; 3
     532:	a1 05       	cpc	r26, r1
     534:	b1 05       	cpc	r27, r1
     536:	30 f0       	brcs	.+12     	; 0x544 <__LOCK_REGION_LENGTH__+0x144>
     538:	0e 94 47 0c 	call	0x188e	; 0x188e <millis>
     53c:	70 93 5f 01 	sts	0x015F, r23	; 0x80015f <__data_end+0x1>
     540:	60 93 5e 01 	sts	0x015E, r22	; 0x80015e <__data_end>
     544:	08 95       	ret

00000546 <_GLOBAL__sub_I__ZN21PulseSensorPlayground15UsingInterruptsE>:
     546:	83 e9       	ldi	r24, 0x93	; 147
     548:	91 e0       	ldi	r25, 0x01	; 1
     54a:	11 d0       	rcall	.+34     	; 0x56e <_ZN5HX711C1Ev>
     54c:	61 e0       	ldi	r22, 0x01	; 1
     54e:	70 e0       	ldi	r23, 0x00	; 0
     550:	8a e7       	ldi	r24, 0x7A	; 122
     552:	91 e0       	ldi	r25, 0x01	; 1
     554:	c5 d1       	rcall	.+906    	; 0x8e0 <_ZN21PulseSensorPlaygroundC1Ei>
     556:	22 e0       	ldi	r18, 0x02	; 2
     558:	40 e1       	ldi	r20, 0x10	; 16
     55a:	67 e2       	ldi	r22, 0x27	; 39
     55c:	8e e6       	ldi	r24, 0x6E	; 110
     55e:	91 e0       	ldi	r25, 0x01	; 1
     560:	c3 c0       	rjmp	.+390    	; 0x6e8 <_ZN17LiquidCrystal_I2CC1Ehhh>

00000562 <_GLOBAL__sub_D__ZN21PulseSensorPlayground15UsingInterruptsE>:
//      GND: GND
//      DATA: 2
int pinDHT11 = 2;

SimpleDHT11 myDHT;
HX711 scale;
     562:	83 e9       	ldi	r24, 0x93	; 147
     564:	91 e0       	ldi	r25, 0x01	; 1
     566:	00 c0       	rjmp	.+0      	; 0x568 <_ZN5HX711D1Ev>

00000568 <_ZN5HX711D1Ev>:


HX711::HX711() {
}

HX711::~HX711() {
     568:	08 95       	ret

0000056a <_ZN5HX711D0Ev>:
}
     56a:	0c 94 98 0b 	jmp	0x1730	; 0x1730 <_ZdlPv>

0000056e <_ZN5HX711C1Ev>:
#else
#define SHIFTIN_WITH_SPEED_SUPPORT(data,clock,order) shiftIn(data,clock,order)
#endif


HX711::HX711() {
     56e:	fc 01       	movw	r30, r24
     570:	81 e3       	ldi	r24, 0x31	; 49
     572:	91 e0       	ldi	r25, 0x01	; 1
     574:	91 83       	std	Z+1, r25	; 0x01
     576:	80 83       	st	Z, r24
     578:	15 82       	std	Z+5, r1	; 0x05
     57a:	16 82       	std	Z+6, r1	; 0x06
     57c:	17 82       	std	Z+7, r1	; 0x07
     57e:	10 86       	std	Z+8, r1	; 0x08
     580:	80 e0       	ldi	r24, 0x00	; 0
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	a0 e8       	ldi	r26, 0x80	; 128
     586:	bf e3       	ldi	r27, 0x3F	; 63
     588:	81 87       	std	Z+9, r24	; 0x09
     58a:	92 87       	std	Z+10, r25	; 0x0a
     58c:	a3 87       	std	Z+11, r26	; 0x0b
     58e:	b4 87       	std	Z+12, r27	; 0x0c
     590:	08 95       	ret

00000592 <_ZN5HX7118is_readyEv>:

	set_gain(gain);
}

bool HX711::is_ready() {
	return digitalRead(DOUT) == LOW;
     592:	fc 01       	movw	r30, r24
     594:	83 81       	ldd	r24, Z+3	; 0x03
     596:	0e 94 2e 0e 	call	0x1c5c	; 0x1c5c <digitalRead>
     59a:	21 e0       	ldi	r18, 0x01	; 1
     59c:	89 2b       	or	r24, r25
     59e:	09 f0       	breq	.+2      	; 0x5a2 <_ZN5HX7118is_readyEv+0x10>
     5a0:	20 e0       	ldi	r18, 0x00	; 0
}
     5a2:	82 2f       	mov	r24, r18
     5a4:	08 95       	ret

000005a6 <_ZN5HX71110wait_readyEm>:
			| static_cast<unsigned long>(data[0]) );

	return static_cast<long>(value);
}

void HX711::wait_ready(unsigned long delay_ms) {
     5a6:	cf 92       	push	r12
     5a8:	df 92       	push	r13
     5aa:	ef 92       	push	r14
     5ac:	ff 92       	push	r15
     5ae:	cf 93       	push	r28
     5b0:	df 93       	push	r29
     5b2:	ec 01       	movw	r28, r24
     5b4:	6a 01       	movw	r12, r20
     5b6:	7b 01       	movw	r14, r22
	// Wait for the chip to become ready.
	// This is a blocking implementation and will
	// halt the sketch until a load cell is connected.
	while (!is_ready()) {
     5b8:	ce 01       	movw	r24, r28
     5ba:	eb df       	rcall	.-42     	; 0x592 <_ZN5HX7118is_readyEv>
     5bc:	81 11       	cpse	r24, r1
     5be:	05 c0       	rjmp	.+10     	; 0x5ca <_ZN5HX71110wait_readyEm+0x24>
		// Probably will do no harm on AVR but will feed the Watchdog Timer (WDT) on ESP.
		// https://github.com/bogde/HX711/issues/73
		delay(delay_ms);
     5c0:	c7 01       	movw	r24, r14
     5c2:	b6 01       	movw	r22, r12
     5c4:	0e 94 78 0c 	call	0x18f0	; 0x18f0 <delay>

void HX711::wait_ready(unsigned long delay_ms) {
	// Wait for the chip to become ready.
	// This is a blocking implementation and will
	// halt the sketch until a load cell is connected.
	while (!is_ready()) {
     5c8:	f7 cf       	rjmp	.-18     	; 0x5b8 <_ZN5HX71110wait_readyEm+0x12>
		// Probably will do no harm on AVR but will feed the Watchdog Timer (WDT) on ESP.
		// https://github.com/bogde/HX711/issues/73
		delay(delay_ms);
	}
}
     5ca:	df 91       	pop	r29
     5cc:	cf 91       	pop	r28
     5ce:	ff 90       	pop	r15
     5d0:	ef 90       	pop	r14
     5d2:	df 90       	pop	r13
     5d4:	cf 90       	pop	r12
     5d6:	08 95       	ret

000005d8 <_ZN5HX7114readEv>:

	digitalWrite(PD_SCK, LOW);
	read();
}

long HX711::read() {
     5d8:	cf 92       	push	r12
     5da:	df 92       	push	r13
     5dc:	ef 92       	push	r14
     5de:	ff 92       	push	r15
     5e0:	0f 93       	push	r16
     5e2:	1f 93       	push	r17
     5e4:	cf 93       	push	r28
     5e6:	df 93       	push	r29
     5e8:	ec 01       	movw	r28, r24

	// Wait for the chip to become ready.
	wait_ready();
     5ea:	40 e0       	ldi	r20, 0x00	; 0
     5ec:	50 e0       	ldi	r21, 0x00	; 0
     5ee:	ba 01       	movw	r22, r20
     5f0:	da df       	rcall	.-76     	; 0x5a6 <_ZN5HX71110wait_readyEm>
	// interrupts during the sequence and then restores the interrupt mask to its previous
	// state after the sequence completes, insuring that the entire read-and-gain-set
	// sequence is not interrupted.  The macro has a few minor advantages over bracketing
	// the sequence between `noInterrupts()` and `interrupts()` calls.
	#if HAS_ATOMIC_BLOCK
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
     5f2:	ef b6       	in	r14, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     5f4:	f8 94       	cli
	// Disable interrupts.
	noInterrupts();
	#endif

	// Pulse the clock pin 24 times to read the data.
	data[2] = SHIFTIN_WITH_SPEED_SUPPORT(DOUT, PD_SCK, MSBFIRST);
     5f6:	41 e0       	ldi	r20, 0x01	; 1
     5f8:	6a 81       	ldd	r22, Y+2	; 0x02
     5fa:	8b 81       	ldd	r24, Y+3	; 0x03
     5fc:	0e 94 56 0e 	call	0x1cac	; 0x1cac <shiftIn>
     600:	08 2f       	mov	r16, r24
	data[1] = SHIFTIN_WITH_SPEED_SUPPORT(DOUT, PD_SCK, MSBFIRST);
     602:	41 e0       	ldi	r20, 0x01	; 1
     604:	6a 81       	ldd	r22, Y+2	; 0x02
     606:	8b 81       	ldd	r24, Y+3	; 0x03
     608:	0e 94 56 0e 	call	0x1cac	; 0x1cac <shiftIn>
     60c:	18 2f       	mov	r17, r24
	data[0] = SHIFTIN_WITH_SPEED_SUPPORT(DOUT, PD_SCK, MSBFIRST);
     60e:	41 e0       	ldi	r20, 0x01	; 1
     610:	6a 81       	ldd	r22, Y+2	; 0x02
     612:	8b 81       	ldd	r24, Y+3	; 0x03
     614:	0e 94 56 0e 	call	0x1cac	; 0x1cac <shiftIn>
     618:	f8 2e       	mov	r15, r24

	// Set the channel and the gain factor for the next reading using the clock pin.
	for (unsigned int i = 0; i < GAIN; i++) {
     61a:	c1 2c       	mov	r12, r1
     61c:	d1 2c       	mov	r13, r1
     61e:	8c 81       	ldd	r24, Y+4	; 0x04
     620:	90 e0       	ldi	r25, 0x00	; 0
     622:	c8 16       	cp	r12, r24
     624:	d9 06       	cpc	r13, r25
     626:	60 f4       	brcc	.+24     	; 0x640 <_ZN5HX7114readEv+0x68>
		digitalWrite(PD_SCK, HIGH);
     628:	61 e0       	ldi	r22, 0x01	; 1
     62a:	8a 81       	ldd	r24, Y+2	; 0x02
     62c:	0e 94 00 0e 	call	0x1c00	; 0x1c00 <digitalWrite>
		#if ARCH_ESPRESSIF
		delayMicroseconds(1);
		#endif
		digitalWrite(PD_SCK, LOW);
     630:	60 e0       	ldi	r22, 0x00	; 0
     632:	8a 81       	ldd	r24, Y+2	; 0x02
     634:	0e 94 00 0e 	call	0x1c00	; 0x1c00 <digitalWrite>
	data[2] = SHIFTIN_WITH_SPEED_SUPPORT(DOUT, PD_SCK, MSBFIRST);
	data[1] = SHIFTIN_WITH_SPEED_SUPPORT(DOUT, PD_SCK, MSBFIRST);
	data[0] = SHIFTIN_WITH_SPEED_SUPPORT(DOUT, PD_SCK, MSBFIRST);

	// Set the channel and the gain factor for the next reading using the clock pin.
	for (unsigned int i = 0; i < GAIN; i++) {
     638:	2f ef       	ldi	r18, 0xFF	; 255
     63a:	c2 1a       	sub	r12, r18
     63c:	d2 0a       	sbc	r13, r18
     63e:	ef cf       	rjmp	.-34     	; 0x61e <_ZN5HX7114readEv+0x46>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     640:	ef be       	out	0x3f, r14	; 63
	value = ( static_cast<unsigned long>(filler) << 24
			| static_cast<unsigned long>(data[2]) << 16
			| static_cast<unsigned long>(data[1]) << 8
			| static_cast<unsigned long>(data[0]) );

	return static_cast<long>(value);
     642:	81 2f       	mov	r24, r17
     644:	90 e0       	ldi	r25, 0x00	; 0
     646:	a0 e0       	ldi	r26, 0x00	; 0
     648:	b0 e0       	ldi	r27, 0x00	; 0
     64a:	ba 2f       	mov	r27, r26
     64c:	a9 2f       	mov	r26, r25
     64e:	98 2f       	mov	r25, r24
     650:	88 27       	eor	r24, r24
     652:	a0 2b       	or	r26, r16
     654:	ac 01       	movw	r20, r24
     656:	bd 01       	movw	r22, r26
     658:	4f 29       	or	r20, r15
     65a:	80 2f       	mov	r24, r16
     65c:	88 0f       	add	r24, r24
     65e:	88 0b       	sbc	r24, r24
     660:	90 e0       	ldi	r25, 0x00	; 0
     662:	a0 e0       	ldi	r26, 0x00	; 0
     664:	b0 e0       	ldi	r27, 0x00	; 0
     666:	b8 2f       	mov	r27, r24
     668:	aa 27       	eor	r26, r26
     66a:	99 27       	eor	r25, r25
     66c:	88 27       	eor	r24, r24
     66e:	8a 01       	movw	r16, r20
     670:	9b 01       	movw	r18, r22
     672:	08 2b       	or	r16, r24
     674:	19 2b       	or	r17, r25
     676:	2a 2b       	or	r18, r26
     678:	3b 2b       	or	r19, r27
     67a:	c9 01       	movw	r24, r18
     67c:	b8 01       	movw	r22, r16
}
     67e:	df 91       	pop	r29
     680:	cf 91       	pop	r28
     682:	1f 91       	pop	r17
     684:	0f 91       	pop	r16
     686:	ff 90       	pop	r15
     688:	ef 90       	pop	r14
     68a:	df 90       	pop	r13
     68c:	cf 90       	pop	r12
     68e:	08 95       	ret

00000690 <_ZN5HX7118set_gainEh>:

bool HX711::is_ready() {
	return digitalRead(DOUT) == LOW;
}

void HX711::set_gain(byte gain) {
     690:	cf 93       	push	r28
     692:	df 93       	push	r29
     694:	ec 01       	movw	r28, r24
	switch (gain) {
     696:	60 34       	cpi	r22, 0x40	; 64
     698:	41 f0       	breq	.+16     	; 0x6aa <_ZN5HX7118set_gainEh+0x1a>
     69a:	60 38       	cpi	r22, 0x80	; 128
     69c:	21 f0       	breq	.+8      	; 0x6a6 <_ZN5HX7118set_gainEh+0x16>
     69e:	60 32       	cpi	r22, 0x20	; 32
     6a0:	31 f4       	brne	.+12     	; 0x6ae <_ZN5HX7118set_gainEh+0x1e>
			break;
		case 64:		// channel A, gain factor 64
			GAIN = 3;
			break;
		case 32:		// channel B, gain factor 32
			GAIN = 2;
     6a2:	82 e0       	ldi	r24, 0x02	; 2
     6a4:	03 c0       	rjmp	.+6      	; 0x6ac <_ZN5HX7118set_gainEh+0x1c>
}

void HX711::set_gain(byte gain) {
	switch (gain) {
		case 128:		// channel A, gain factor 128
			GAIN = 1;
     6a6:	81 e0       	ldi	r24, 0x01	; 1
     6a8:	01 c0       	rjmp	.+2      	; 0x6ac <_ZN5HX7118set_gainEh+0x1c>
			break;
		case 64:		// channel A, gain factor 64
			GAIN = 3;
     6aa:	83 e0       	ldi	r24, 0x03	; 3
			break;
		case 32:		// channel B, gain factor 32
			GAIN = 2;
     6ac:	8c 83       	std	Y+4, r24	; 0x04
			break;
	}

	digitalWrite(PD_SCK, LOW);
     6ae:	60 e0       	ldi	r22, 0x00	; 0
     6b0:	8a 81       	ldd	r24, Y+2	; 0x02
     6b2:	0e 94 00 0e 	call	0x1c00	; 0x1c00 <digitalWrite>
	read();
     6b6:	ce 01       	movw	r24, r28
}
     6b8:	df 91       	pop	r29
     6ba:	cf 91       	pop	r28
			GAIN = 2;
			break;
	}

	digitalWrite(PD_SCK, LOW);
	read();
     6bc:	8d cf       	rjmp	.-230    	; 0x5d8 <_ZN5HX7114readEv>

000006be <_ZN5HX7115beginEhhh>:
}

HX711::~HX711() {
}

void HX711::begin(byte dout, byte pd_sck, byte gain) {
     6be:	1f 93       	push	r17
     6c0:	cf 93       	push	r28
     6c2:	df 93       	push	r29
     6c4:	ec 01       	movw	r28, r24
     6c6:	84 2f       	mov	r24, r20
     6c8:	12 2f       	mov	r17, r18
	PD_SCK = pd_sck;
     6ca:	4a 83       	std	Y+2, r20	; 0x02
	DOUT = dout;
     6cc:	6b 83       	std	Y+3, r22	; 0x03

	pinMode(PD_SCK, OUTPUT);
     6ce:	61 e0       	ldi	r22, 0x01	; 1
     6d0:	0e 94 c4 0d 	call	0x1b88	; 0x1b88 <pinMode>
	pinMode(DOUT, INPUT);
     6d4:	60 e0       	ldi	r22, 0x00	; 0
     6d6:	8b 81       	ldd	r24, Y+3	; 0x03
     6d8:	0e 94 c4 0d 	call	0x1b88	; 0x1b88 <pinMode>

	set_gain(gain);
     6dc:	61 2f       	mov	r22, r17
     6de:	ce 01       	movw	r24, r28
}
     6e0:	df 91       	pop	r29
     6e2:	cf 91       	pop	r28
     6e4:	1f 91       	pop	r17
	DOUT = dout;

	pinMode(PD_SCK, OUTPUT);
	pinMode(DOUT, INPUT);

	set_gain(gain);
     6e6:	d4 cf       	rjmp	.-88     	; 0x690 <_ZN5HX7118set_gainEh>

000006e8 <_ZN17LiquidCrystal_I2CC1Ehhh>:
void LiquidCrystal_I2C::blink_off(){
	noBlink();
}

void LiquidCrystal_I2C::load_custom_character(uint8_t char_num, uint8_t *rows){
		createChar(char_num, rows);
     6e8:	fc 01       	movw	r30, r24
     6ea:	13 82       	std	Z+3, r1	; 0x03
     6ec:	12 82       	std	Z+2, r1	; 0x02
     6ee:	89 e3       	ldi	r24, 0x39	; 57
     6f0:	91 e0       	ldi	r25, 0x01	; 1
     6f2:	91 83       	std	Z+1, r25	; 0x01
     6f4:	80 83       	st	Z, r24
     6f6:	64 83       	std	Z+4, r22	; 0x04
     6f8:	41 87       	std	Z+9, r20	; 0x09
     6fa:	22 87       	std	Z+10, r18	; 0x0a
     6fc:	13 86       	std	Z+11, r1	; 0x0b
     6fe:	08 95       	ret

00000700 <_ZN17LiquidCrystal_I2C13expanderWriteEh>:
     700:	1f 93       	push	r17
     702:	cf 93       	push	r28
     704:	df 93       	push	r29
     706:	ec 01       	movw	r28, r24
     708:	16 2f       	mov	r17, r22
     70a:	6c 81       	ldd	r22, Y+4	; 0x04
     70c:	80 e1       	ldi	r24, 0x10	; 16
     70e:	92 e0       	ldi	r25, 0x02	; 2
     710:	b9 d4       	rcall	.+2418   	; 0x1084 <_ZN7TwoWire17beginTransmissionEh>
     712:	6b 85       	ldd	r22, Y+11	; 0x0b
     714:	61 2b       	or	r22, r17
     716:	80 e1       	ldi	r24, 0x10	; 16
     718:	92 e0       	ldi	r25, 0x02	; 2
     71a:	6d d4       	rcall	.+2266   	; 0xff6 <_ZN7TwoWire5writeEh>
     71c:	80 e1       	ldi	r24, 0x10	; 16
     71e:	92 e0       	ldi	r25, 0x02	; 2
     720:	df 91       	pop	r29
     722:	cf 91       	pop	r28
     724:	1f 91       	pop	r17
     726:	ca c4       	rjmp	.+2452   	; 0x10bc <_ZN7TwoWire15endTransmissionEv>

00000728 <_ZN17LiquidCrystal_I2C9backlightEv>:
     728:	28 e0       	ldi	r18, 0x08	; 8
     72a:	fc 01       	movw	r30, r24
     72c:	23 87       	std	Z+11, r18	; 0x0b
     72e:	60 e0       	ldi	r22, 0x00	; 0
     730:	e7 cf       	rjmp	.-50     	; 0x700 <_ZN17LiquidCrystal_I2C13expanderWriteEh>

00000732 <_ZN17LiquidCrystal_I2C11pulseEnableEh>:
     732:	0f 93       	push	r16
     734:	1f 93       	push	r17
     736:	cf 93       	push	r28
     738:	8c 01       	movw	r16, r24
     73a:	c6 2f       	mov	r28, r22
     73c:	64 60       	ori	r22, 0x04	; 4
     73e:	e0 df       	rcall	.-64     	; 0x700 <_ZN17LiquidCrystal_I2C13expanderWriteEh>
     740:	81 e0       	ldi	r24, 0x01	; 1
     742:	90 e0       	ldi	r25, 0x00	; 0
     744:	0e 94 b1 0c 	call	0x1962	; 0x1962 <delayMicroseconds>
     748:	6c 2f       	mov	r22, r28
     74a:	6b 7f       	andi	r22, 0xFB	; 251
     74c:	c8 01       	movw	r24, r16
     74e:	d8 df       	rcall	.-80     	; 0x700 <_ZN17LiquidCrystal_I2C13expanderWriteEh>
     750:	82 e3       	ldi	r24, 0x32	; 50
     752:	90 e0       	ldi	r25, 0x00	; 0
     754:	cf 91       	pop	r28
     756:	1f 91       	pop	r17
     758:	0f 91       	pop	r16
     75a:	0c 94 b1 0c 	jmp	0x1962	; 0x1962 <delayMicroseconds>

0000075e <_ZN17LiquidCrystal_I2C10write4bitsEh>:
     75e:	1f 93       	push	r17
     760:	cf 93       	push	r28
     762:	df 93       	push	r29
     764:	ec 01       	movw	r28, r24
     766:	16 2f       	mov	r17, r22
     768:	cb df       	rcall	.-106    	; 0x700 <_ZN17LiquidCrystal_I2C13expanderWriteEh>
     76a:	61 2f       	mov	r22, r17
     76c:	ce 01       	movw	r24, r28
     76e:	df 91       	pop	r29
     770:	cf 91       	pop	r28
     772:	1f 91       	pop	r17
     774:	de cf       	rjmp	.-68     	; 0x732 <_ZN17LiquidCrystal_I2C11pulseEnableEh>

00000776 <_ZN17LiquidCrystal_I2C4sendEhh>:
     776:	0f 93       	push	r16
     778:	1f 93       	push	r17
     77a:	cf 93       	push	r28
     77c:	df 93       	push	r29
     77e:	8c 01       	movw	r16, r24
     780:	c6 2f       	mov	r28, r22
     782:	d4 2f       	mov	r29, r20
     784:	60 7f       	andi	r22, 0xF0	; 240
     786:	64 2b       	or	r22, r20
     788:	ea df       	rcall	.-44     	; 0x75e <_ZN17LiquidCrystal_I2C10write4bitsEh>
     78a:	80 e1       	ldi	r24, 0x10	; 16
     78c:	c8 9f       	mul	r28, r24
     78e:	b0 01       	movw	r22, r0
     790:	11 24       	eor	r1, r1
     792:	6d 2b       	or	r22, r29
     794:	c8 01       	movw	r24, r16
     796:	df 91       	pop	r29
     798:	cf 91       	pop	r28
     79a:	1f 91       	pop	r17
     79c:	0f 91       	pop	r16
     79e:	df cf       	rjmp	.-66     	; 0x75e <_ZN17LiquidCrystal_I2C10write4bitsEh>

000007a0 <_ZN17LiquidCrystal_I2C7commandEh>:
     7a0:	40 e0       	ldi	r20, 0x00	; 0
     7a2:	e9 cf       	rjmp	.-46     	; 0x776 <_ZN17LiquidCrystal_I2C4sendEhh>

000007a4 <_ZN17LiquidCrystal_I2C5clearEv>:
     7a4:	61 e0       	ldi	r22, 0x01	; 1
     7a6:	fc df       	rcall	.-8      	; 0x7a0 <_ZN17LiquidCrystal_I2C7commandEh>
     7a8:	80 ed       	ldi	r24, 0xD0	; 208
     7aa:	97 e0       	ldi	r25, 0x07	; 7
     7ac:	0c 94 b1 0c 	jmp	0x1962	; 0x1962 <delayMicroseconds>

000007b0 <_ZN17LiquidCrystal_I2C4homeEv>:
     7b0:	62 e0       	ldi	r22, 0x02	; 2
     7b2:	f6 df       	rcall	.-20     	; 0x7a0 <_ZN17LiquidCrystal_I2C7commandEh>
     7b4:	80 ed       	ldi	r24, 0xD0	; 208
     7b6:	97 e0       	ldi	r25, 0x07	; 7
     7b8:	0c 94 b1 0c 	jmp	0x1962	; 0x1962 <delayMicroseconds>

000007bc <_ZN17LiquidCrystal_I2C9setCursorEhh>:
     7bc:	cf 93       	push	r28
     7be:	df 93       	push	r29
     7c0:	cd b7       	in	r28, 0x3d	; 61
     7c2:	de b7       	in	r29, 0x3e	; 62
     7c4:	28 97       	sbiw	r28, 0x08	; 8
     7c6:	0f b6       	in	r0, 0x3f	; 63
     7c8:	f8 94       	cli
     7ca:	de bf       	out	0x3e, r29	; 62
     7cc:	0f be       	out	0x3f, r0	; 63
     7ce:	cd bf       	out	0x3d, r28	; 61
     7d0:	9c 01       	movw	r18, r24
     7d2:	88 e0       	ldi	r24, 0x08	; 8
     7d4:	e4 e1       	ldi	r30, 0x14	; 20
     7d6:	f1 e0       	ldi	r31, 0x01	; 1
     7d8:	de 01       	movw	r26, r28
     7da:	11 96       	adiw	r26, 0x01	; 1
     7dc:	01 90       	ld	r0, Z+
     7de:	0d 92       	st	X+, r0
     7e0:	8a 95       	dec	r24
     7e2:	e1 f7       	brne	.-8      	; 0x7dc <_ZN17LiquidCrystal_I2C9setCursorEhh+0x20>
     7e4:	f9 01       	movw	r30, r18
     7e6:	80 85       	ldd	r24, Z+8	; 0x08
     7e8:	84 17       	cp	r24, r20
     7ea:	10 f4       	brcc	.+4      	; 0x7f0 <_ZN17LiquidCrystal_I2C9setCursorEhh+0x34>
     7ec:	4f ef       	ldi	r20, 0xFF	; 255
     7ee:	48 0f       	add	r20, r24
     7f0:	fe 01       	movw	r30, r28
     7f2:	31 96       	adiw	r30, 0x01	; 1
     7f4:	e4 0f       	add	r30, r20
     7f6:	f1 1d       	adc	r31, r1
     7f8:	e4 0f       	add	r30, r20
     7fa:	f1 1d       	adc	r31, r1
     7fc:	90 81       	ld	r25, Z
     7fe:	69 0f       	add	r22, r25
     800:	60 68       	ori	r22, 0x80	; 128
     802:	c9 01       	movw	r24, r18
     804:	28 96       	adiw	r28, 0x08	; 8
     806:	0f b6       	in	r0, 0x3f	; 63
     808:	f8 94       	cli
     80a:	de bf       	out	0x3e, r29	; 62
     80c:	0f be       	out	0x3f, r0	; 63
     80e:	cd bf       	out	0x3d, r28	; 61
     810:	df 91       	pop	r29
     812:	cf 91       	pop	r28
     814:	c5 cf       	rjmp	.-118    	; 0x7a0 <_ZN17LiquidCrystal_I2C7commandEh>

00000816 <_ZN17LiquidCrystal_I2C7displayEv>:
     816:	fc 01       	movw	r30, r24
     818:	66 81       	ldd	r22, Z+6	; 0x06
     81a:	26 2f       	mov	r18, r22
     81c:	24 60       	ori	r18, 0x04	; 4
     81e:	26 83       	std	Z+6, r18	; 0x06
     820:	6c 60       	ori	r22, 0x0C	; 12
     822:	be cf       	rjmp	.-132    	; 0x7a0 <_ZN17LiquidCrystal_I2C7commandEh>

00000824 <_ZN17LiquidCrystal_I2C5writeEh>:

#include "Arduino.h"

#define printIIC(args)	Wire.write(args)
inline size_t LiquidCrystal_I2C::write(uint8_t value) {
	send(value, Rs);
     824:	41 e0       	ldi	r20, 0x01	; 1
     826:	a7 df       	rcall	.-178    	; 0x776 <_ZN17LiquidCrystal_I2C4sendEhh>
	return 1;
}
     828:	81 e0       	ldi	r24, 0x01	; 1
     82a:	90 e0       	ldi	r25, 0x00	; 0
     82c:	08 95       	ret

0000082e <_ZN17LiquidCrystal_I2C5beginEhhh>:
	Wire.begin();
	_displayfunction = LCD_4BITMODE | LCD_1LINE | LCD_5x8DOTS;
	begin(_cols, _rows);  
}

void LiquidCrystal_I2C::begin(uint8_t cols, uint8_t lines, uint8_t dotsize) {
     82e:	cf 93       	push	r28
     830:	df 93       	push	r29
     832:	ec 01       	movw	r28, r24
	if (lines > 1) {
     834:	42 30       	cpi	r20, 0x02	; 2
     836:	18 f0       	brcs	.+6      	; 0x83e <_ZN17LiquidCrystal_I2C5beginEhhh+0x10>
		_displayfunction |= LCD_2LINE;
     838:	8d 81       	ldd	r24, Y+5	; 0x05
     83a:	88 60       	ori	r24, 0x08	; 8
     83c:	8d 83       	std	Y+5, r24	; 0x05
	}
	_numlines = lines;
     83e:	48 87       	std	Y+8, r20	; 0x08

	// for some 1 line displays you can select a 10 pixel high font
	if ((dotsize != 0) && (lines == 1)) {
     840:	22 23       	and	r18, r18
     842:	29 f0       	breq	.+10     	; 0x84e <_ZN17LiquidCrystal_I2C5beginEhhh+0x20>
     844:	41 30       	cpi	r20, 0x01	; 1
     846:	19 f4       	brne	.+6      	; 0x84e <_ZN17LiquidCrystal_I2C5beginEhhh+0x20>
		_displayfunction |= LCD_5x10DOTS;
     848:	8d 81       	ldd	r24, Y+5	; 0x05
     84a:	84 60       	ori	r24, 0x04	; 4
     84c:	8d 83       	std	Y+5, r24	; 0x05
	}

	// SEE PAGE 45/46 FOR INITIALIZATION SPECIFICATION!
	// according to datasheet, we need at least 40ms after power rises above 2.7V
	// before sending commands. Arduino can turn on way befer 4.5V so we'll wait 50
	delay(50); 
     84e:	62 e3       	ldi	r22, 0x32	; 50
     850:	70 e0       	ldi	r23, 0x00	; 0
     852:	80 e0       	ldi	r24, 0x00	; 0
     854:	90 e0       	ldi	r25, 0x00	; 0
     856:	0e 94 78 0c 	call	0x18f0	; 0x18f0 <delay>
  
	// Now we pull both RS and R/W low to begin commands
	expanderWrite(_backlightval);	// reset expanderand turn backlight off (Bit 8 =1)
     85a:	6b 85       	ldd	r22, Y+11	; 0x0b
     85c:	ce 01       	movw	r24, r28
     85e:	50 df       	rcall	.-352    	; 0x700 <_ZN17LiquidCrystal_I2C13expanderWriteEh>
	delay(1000);
     860:	68 ee       	ldi	r22, 0xE8	; 232
     862:	73 e0       	ldi	r23, 0x03	; 3
     864:	80 e0       	ldi	r24, 0x00	; 0
     866:	90 e0       	ldi	r25, 0x00	; 0
     868:	0e 94 78 0c 	call	0x18f0	; 0x18f0 <delay>
  	//put the LCD into 4 bit mode
	// this is according to the hitachi HD44780 datasheet
	// figure 24, pg 46
	
	  // we start in 8bit mode, try to set 4 bit mode
   write4bits(0x03 << 4);
     86c:	60 e3       	ldi	r22, 0x30	; 48
     86e:	ce 01       	movw	r24, r28
     870:	76 df       	rcall	.-276    	; 0x75e <_ZN17LiquidCrystal_I2C10write4bitsEh>
   delayMicroseconds(4500); // wait min 4.1ms
     872:	84 e9       	ldi	r24, 0x94	; 148
     874:	91 e1       	ldi	r25, 0x11	; 17
     876:	0e 94 b1 0c 	call	0x1962	; 0x1962 <delayMicroseconds>
   
   // second try
   write4bits(0x03 << 4);
     87a:	60 e3       	ldi	r22, 0x30	; 48
     87c:	ce 01       	movw	r24, r28
     87e:	6f df       	rcall	.-290    	; 0x75e <_ZN17LiquidCrystal_I2C10write4bitsEh>
   delayMicroseconds(4500); // wait min 4.1ms
     880:	84 e9       	ldi	r24, 0x94	; 148
     882:	91 e1       	ldi	r25, 0x11	; 17
     884:	0e 94 b1 0c 	call	0x1962	; 0x1962 <delayMicroseconds>
   
   // third go!
   write4bits(0x03 << 4); 
     888:	60 e3       	ldi	r22, 0x30	; 48
     88a:	ce 01       	movw	r24, r28
     88c:	68 df       	rcall	.-304    	; 0x75e <_ZN17LiquidCrystal_I2C10write4bitsEh>
   delayMicroseconds(150);
     88e:	86 e9       	ldi	r24, 0x96	; 150
     890:	90 e0       	ldi	r25, 0x00	; 0
     892:	0e 94 b1 0c 	call	0x1962	; 0x1962 <delayMicroseconds>
   
   // finally, set to 4-bit interface
   write4bits(0x02 << 4); 
     896:	60 e2       	ldi	r22, 0x20	; 32
     898:	ce 01       	movw	r24, r28


	// set # lines, font size, etc.
	command(LCD_FUNCTIONSET | _displayfunction);  
     89a:	61 df       	rcall	.-318    	; 0x75e <_ZN17LiquidCrystal_I2C10write4bitsEh>
     89c:	6d 81       	ldd	r22, Y+5	; 0x05
     89e:	60 62       	ori	r22, 0x20	; 32
     8a0:	ce 01       	movw	r24, r28
	
	// turn the display on with no cursor or blinking default
	_displaycontrol = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;
     8a2:	7e df       	rcall	.-260    	; 0x7a0 <_ZN17LiquidCrystal_I2C7commandEh>
     8a4:	84 e0       	ldi	r24, 0x04	; 4
	display();
     8a6:	8e 83       	std	Y+6, r24	; 0x06
     8a8:	ce 01       	movw	r24, r28
	
	// clear it off
	clear();
     8aa:	b5 df       	rcall	.-150    	; 0x816 <_ZN17LiquidCrystal_I2C7displayEv>
     8ac:	ce 01       	movw	r24, r28
     8ae:	7a df       	rcall	.-268    	; 0x7a4 <_ZN17LiquidCrystal_I2C5clearEv>
	
	// Initialize to default text direction (for roman languages)
	_displaymode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
     8b0:	82 e0       	ldi	r24, 0x02	; 2
	
	// set the entry mode
	command(LCD_ENTRYMODESET | _displaymode);
     8b2:	8f 83       	std	Y+7, r24	; 0x07
     8b4:	66 e0       	ldi	r22, 0x06	; 6
     8b6:	ce 01       	movw	r24, r28
     8b8:	73 df       	rcall	.-282    	; 0x7a0 <_ZN17LiquidCrystal_I2C7commandEh>
	
	home();
     8ba:	ce 01       	movw	r24, r28
  
}
     8bc:	df 91       	pop	r29
     8be:	cf 91       	pop	r28
	_displaymode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
	
	// set the entry mode
	command(LCD_ENTRYMODESET | _displaymode);
	
	home();
     8c0:	77 cf       	rjmp	.-274    	; 0x7b0 <_ZN17LiquidCrystal_I2C4homeEv>

000008c2 <_ZN17LiquidCrystal_I2C9init_privEv>:
     8c2:	cf 93       	push	r28
void LiquidCrystal_I2C::init(){
	init_priv();
}

void LiquidCrystal_I2C::init_priv()
{
     8c4:	df 93       	push	r29
     8c6:	ec 01       	movw	r28, r24
	Wire.begin();
     8c8:	80 e1       	ldi	r24, 0x10	; 16
     8ca:	92 e0       	ldi	r25, 0x02	; 2
     8cc:	d2 d3       	rcall	.+1956   	; 0x1072 <_ZN7TwoWire5beginEv>
	_displayfunction = LCD_4BITMODE | LCD_1LINE | LCD_5x8DOTS;
     8ce:	1d 82       	std	Y+5, r1	; 0x05
	begin(_cols, _rows);  
     8d0:	20 e0       	ldi	r18, 0x00	; 0
     8d2:	4a 85       	ldd	r20, Y+10	; 0x0a
     8d4:	69 85       	ldd	r22, Y+9	; 0x09
     8d6:	ce 01       	movw	r24, r28
}
     8d8:	df 91       	pop	r29

void LiquidCrystal_I2C::init_priv()
{
	Wire.begin();
	_displayfunction = LCD_4BITMODE | LCD_1LINE | LCD_5x8DOTS;
	begin(_cols, _rows);  
     8da:	cf 91       	pop	r28
     8dc:	a8 cf       	rjmp	.-176    	; 0x82e <_ZN17LiquidCrystal_I2C5beginEhhh>

000008de <_ZN17LiquidCrystal_I2C4initEv>:
  _rows = lcd_rows;
  _backlightval = LCD_NOBACKLIGHT;
}

void LiquidCrystal_I2C::init(){
	init_priv();
     8de:	f1 cf       	rjmp	.-30     	; 0x8c2 <_ZN17LiquidCrystal_I2C9init_privEv>

000008e0 <_ZN21PulseSensorPlaygroundC1Ei>:
boolean PulseSensorPlayground::isInsideBeat(int sensorIndex) {
  if (sensorIndex != constrain(sensorIndex, 0, SensorCount)) {
    return false; // out of range.
  }
  return Sensors[sensorIndex].isInsideBeat();
}
     8e0:	af 92       	push	r10
     8e2:	bf 92       	push	r11
     8e4:	cf 92       	push	r12
     8e6:	df 92       	push	r13
     8e8:	ef 92       	push	r14
     8ea:	ff 92       	push	r15
     8ec:	0f 93       	push	r16
     8ee:	1f 93       	push	r17
     8f0:	cf 93       	push	r28
     8f2:	df 93       	push	r29
     8f4:	ec 01       	movw	r28, r24
     8f6:	8b 01       	movw	r16, r22
     8f8:	09 96       	adiw	r24, 0x09	; 9
     8fa:	45 d1       	rcall	.+650    	; 0xb86 <_ZN23PulseSensorSerialOutputC1Ev>
     8fc:	d0 93 a1 01 	sts	0x01A1, r29	; 0x8001a1 <_ZN21PulseSensorPlayground7OurThisE+0x1>
     900:	c0 93 a0 01 	sts	0x01A0, r28	; 0x8001a0 <_ZN21PulseSensorPlayground7OurThisE>
     904:	09 83       	std	Y+1, r16	; 0x01
     906:	58 01       	movw	r10, r16
     908:	bb 24       	eor	r11, r11
     90a:	2c e3       	ldi	r18, 0x3C	; 60
     90c:	02 9f       	mul	r16, r18
     90e:	c0 01       	movw	r24, r0
     910:	11 24       	eor	r1, r1
     912:	0d d7       	rcall	.+3610   	; 0x172e <_Znaj>
     914:	6c 01       	movw	r12, r24
     916:	8c 01       	movw	r16, r24
     918:	e1 2c       	mov	r14, r1
     91a:	f1 2c       	mov	r15, r1
     91c:	ea 14       	cp	r14, r10
     91e:	fb 04       	cpc	r15, r11
     920:	41 f0       	breq	.+16     	; 0x932 <_ZN21PulseSensorPlaygroundC1Ei+0x52>
     922:	c8 01       	movw	r24, r16
     924:	ea d0       	rcall	.+468    	; 0xafa <_ZN11PulseSensorC1Ev>
     926:	04 5c       	subi	r16, 0xC4	; 196
     928:	1f 4f       	sbci	r17, 0xFF	; 255
     92a:	8f ef       	ldi	r24, 0xFF	; 255
     92c:	e8 1a       	sub	r14, r24
     92e:	f8 0a       	sbc	r15, r24
     930:	f5 cf       	rjmp	.-22     	; 0x91c <_ZN21PulseSensorPlaygroundC1Ei+0x3c>
     932:	ca 82       	std	Y+2, r12	; 0x02
     934:	db 82       	std	Y+3, r13	; 0x03
     936:	df 91       	pop	r29
     938:	cf 91       	pop	r28
     93a:	1f 91       	pop	r17
     93c:	0f 91       	pop	r16
     93e:	ff 90       	pop	r15
     940:	ef 90       	pop	r14
     942:	df 90       	pop	r13
     944:	cf 90       	pop	r12
     946:	bf 90       	pop	r11
     948:	af 90       	pop	r10
     94a:	08 95       	ret

0000094c <_ZN21PulseSensorPlayground5beginEv>:
     94c:	ef 92       	push	r14
     94e:	ff 92       	push	r15
     950:	0f 93       	push	r16
     952:	1f 93       	push	r17
     954:	cf 93       	push	r28
     956:	df 93       	push	r29
     958:	ec 01       	movw	r28, r24
     95a:	00 e0       	ldi	r16, 0x00	; 0
     95c:	10 e0       	ldi	r17, 0x00	; 0
     95e:	e1 2c       	mov	r14, r1
     960:	f1 2c       	mov	r15, r1
     962:	89 81       	ldd	r24, Y+1	; 0x01
     964:	90 e0       	ldi	r25, 0x00	; 0
     966:	e8 16       	cp	r14, r24
     968:	f9 06       	cpc	r15, r25
     96a:	5c f4       	brge	.+22     	; 0x982 <_ZN21PulseSensorPlayground5beginEv+0x36>
     96c:	8a 81       	ldd	r24, Y+2	; 0x02
     96e:	9b 81       	ldd	r25, Y+3	; 0x03
     970:	80 0f       	add	r24, r16
     972:	91 1f       	adc	r25, r17
     974:	ea d0       	rcall	.+468    	; 0xb4a <_ZN11PulseSensor14initializeLEDsEv>
     976:	8f ef       	ldi	r24, 0xFF	; 255
     978:	e8 1a       	sub	r14, r24
     97a:	f8 0a       	sbc	r15, r24
     97c:	04 5c       	subi	r16, 0xC4	; 196
     97e:	1f 4f       	sbci	r17, 0xFF	; 255
     980:	f0 cf       	rjmp	.-32     	; 0x962 <_ZN21PulseSensorPlayground5beginEv+0x16>
     982:	91 d7       	rcall	.+3874   	; 0x18a6 <micros>
     984:	dc 01       	movw	r26, r24
     986:	cb 01       	movw	r24, r22
     988:	80 53       	subi	r24, 0x30	; 48
     98a:	98 4f       	sbci	r25, 0xF8	; 248
     98c:	af 4f       	sbci	r26, 0xFF	; 255
     98e:	bf 4f       	sbci	r27, 0xFF	; 255
     990:	8c 83       	std	Y+4, r24	; 0x04
     992:	9d 83       	std	Y+5, r25	; 0x05
     994:	ae 83       	std	Y+6, r26	; 0x06
     996:	bf 83       	std	Y+7, r27	; 0x07
     998:	18 86       	std	Y+8, r1	; 0x08
     99a:	18 82       	st	Y, r1
     99c:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <_ZN21PulseSensorPlayground15UsingInterruptsE>
     9a0:	81 11       	cpse	r24, r1
     9a2:	02 c0       	rjmp	.+4      	; 0x9a8 <_ZN21PulseSensorPlayground5beginEv+0x5c>
     9a4:	11 e0       	ldi	r17, 0x01	; 1
     9a6:	0e c0       	rjmp	.+28     	; 0x9c4 <_ZN21PulseSensorPlayground5beginEv+0x78>
     9a8:	09 dc       	rcall	.-2030   	; 0x1bc <_Z35PulseSensorPlaygroundSetupInterruptv>
     9aa:	18 2f       	mov	r17, r24
     9ac:	81 11       	cpse	r24, r1
     9ae:	fa cf       	rjmp	.-12     	; 0x9a4 <_ZN21PulseSensorPlayground5beginEv+0x58>
     9b0:	ce 01       	movw	r24, r28
     9b2:	09 96       	adiw	r24, 0x09	; 9
     9b4:	f4 d0       	rcall	.+488    	; 0xb9e <_ZN23PulseSensorSerialOutput9getSerialEv>
     9b6:	00 97       	sbiw	r24, 0x00	; 0
     9b8:	19 f0       	breq	.+6      	; 0x9c0 <_ZN21PulseSensorPlayground5beginEv+0x74>
     9ba:	64 eb       	ldi	r22, 0xB4	; 180
     9bc:	70 e0       	ldi	r23, 0x00	; 0
     9be:	f8 d6       	rcall	.+3568   	; 0x17b0 <_ZN5Print5printEPK19__FlashStringHelper>
     9c0:	81 e0       	ldi	r24, 0x01	; 1
     9c2:	88 83       	st	Y, r24
     9c4:	81 2f       	mov	r24, r17
     9c6:	df 91       	pop	r29
     9c8:	cf 91       	pop	r28
     9ca:	1f 91       	pop	r17
     9cc:	0f 91       	pop	r16
     9ce:	ff 90       	pop	r15
     9d0:	ef 90       	pop	r14
     9d2:	08 95       	ret

000009d4 <_ZN21PulseSensorPlayground11analogInputEii>:
     9d4:	fc 01       	movw	r30, r24
     9d6:	57 fd       	sbrc	r21, 7
     9d8:	14 c0       	rjmp	.+40     	; 0xa02 <_ZN21PulseSensorPlayground11analogInputEii+0x2e>
     9da:	21 81       	ldd	r18, Z+1	; 0x01
     9dc:	30 e0       	ldi	r19, 0x00	; 0
     9de:	42 17       	cp	r20, r18
     9e0:	53 07       	cpc	r21, r19
     9e2:	0c f4       	brge	.+2      	; 0x9e6 <_ZN21PulseSensorPlayground11analogInputEii+0x12>
     9e4:	9a 01       	movw	r18, r20
     9e6:	42 17       	cp	r20, r18
     9e8:	53 07       	cpc	r21, r19
     9ea:	59 f4       	brne	.+22     	; 0xa02 <_ZN21PulseSensorPlayground11analogInputEii+0x2e>
     9ec:	2c e3       	ldi	r18, 0x3C	; 60
     9ee:	24 9f       	mul	r18, r20
     9f0:	c0 01       	movw	r24, r0
     9f2:	25 9f       	mul	r18, r21
     9f4:	90 0d       	add	r25, r0
     9f6:	11 24       	eor	r1, r1
     9f8:	22 81       	ldd	r18, Z+2	; 0x02
     9fa:	33 81       	ldd	r19, Z+3	; 0x03
     9fc:	82 0f       	add	r24, r18
     9fe:	93 1f       	adc	r25, r19
     a00:	90 c0       	rjmp	.+288    	; 0xb22 <_ZN11PulseSensor11analogInputEi>
     a02:	08 95       	ret

00000a04 <_ZN21PulseSensorPlayground12blinkOnPulseEii>:
     a04:	fc 01       	movw	r30, r24
     a06:	57 fd       	sbrc	r21, 7
     a08:	14 c0       	rjmp	.+40     	; 0xa32 <_ZN21PulseSensorPlayground12blinkOnPulseEii+0x2e>
     a0a:	21 81       	ldd	r18, Z+1	; 0x01
     a0c:	30 e0       	ldi	r19, 0x00	; 0
     a0e:	42 17       	cp	r20, r18
     a10:	53 07       	cpc	r21, r19
     a12:	0c f4       	brge	.+2      	; 0xa16 <_ZN21PulseSensorPlayground12blinkOnPulseEii+0x12>
     a14:	9a 01       	movw	r18, r20
     a16:	42 17       	cp	r20, r18
     a18:	53 07       	cpc	r21, r19
     a1a:	59 f4       	brne	.+22     	; 0xa32 <_ZN21PulseSensorPlayground12blinkOnPulseEii+0x2e>
     a1c:	2c e3       	ldi	r18, 0x3C	; 60
     a1e:	24 9f       	mul	r18, r20
     a20:	c0 01       	movw	r24, r0
     a22:	25 9f       	mul	r18, r21
     a24:	90 0d       	add	r25, r0
     a26:	11 24       	eor	r1, r1
     a28:	22 81       	ldd	r18, Z+2	; 0x02
     a2a:	33 81       	ldd	r19, Z+3	; 0x03
     a2c:	82 0f       	add	r24, r18
     a2e:	93 1f       	adc	r25, r19
     a30:	7c c0       	rjmp	.+248    	; 0xb2a <_ZN11PulseSensor12blinkOnPulseEi>
     a32:	08 95       	ret

00000a34 <_ZN21PulseSensorPlayground11fadeOnPulseEii>:
     a34:	fc 01       	movw	r30, r24
     a36:	57 fd       	sbrc	r21, 7
     a38:	14 c0       	rjmp	.+40     	; 0xa62 <_ZN21PulseSensorPlayground11fadeOnPulseEii+0x2e>
     a3a:	21 81       	ldd	r18, Z+1	; 0x01
     a3c:	30 e0       	ldi	r19, 0x00	; 0
     a3e:	42 17       	cp	r20, r18
     a40:	53 07       	cpc	r21, r19
     a42:	0c f4       	brge	.+2      	; 0xa46 <_ZN21PulseSensorPlayground11fadeOnPulseEii+0x12>
     a44:	9a 01       	movw	r18, r20
     a46:	42 17       	cp	r20, r18
     a48:	53 07       	cpc	r21, r19
     a4a:	59 f4       	brne	.+22     	; 0xa62 <_ZN21PulseSensorPlayground11fadeOnPulseEii+0x2e>
     a4c:	2c e3       	ldi	r18, 0x3C	; 60
     a4e:	24 9f       	mul	r18, r20
     a50:	c0 01       	movw	r24, r0
     a52:	25 9f       	mul	r18, r21
     a54:	90 0d       	add	r25, r0
     a56:	11 24       	eor	r1, r1
     a58:	22 81       	ldd	r18, Z+2	; 0x02
     a5a:	33 81       	ldd	r19, Z+3	; 0x03
     a5c:	82 0f       	add	r24, r18
     a5e:	93 1f       	adc	r25, r19
     a60:	68 c0       	rjmp	.+208    	; 0xb32 <_ZN11PulseSensor11fadeOnPulseEi>
     a62:	08 95       	ret

00000a64 <_ZN21PulseSensorPlayground9setSerialER6Stream>:

void PulseSensorPlayground::setSerial(Stream &output) {
  SerialOutput.setSerial(output);
     a64:	09 96       	adiw	r24, 0x09	; 9
     a66:	97 c0       	rjmp	.+302    	; 0xb96 <_ZN23PulseSensorSerialOutput9setSerialER6Stream>

00000a68 <_ZN21PulseSensorPlayground13setOutputTypeEh>:
}

void PulseSensorPlayground::setOutputType(byte outputType) {
  SerialOutput.setOutputType(outputType);
     a68:	09 96       	adiw	r24, 0x09	; 9
     a6a:	9d c0       	rjmp	.+314    	; 0xba6 <_ZN23PulseSensorSerialOutput13setOutputTypeEh>

00000a6c <_ZN21PulseSensorPlayground12setThresholdEii>:
}

void PulseSensorPlayground::setThreshold(int threshold, int sensorIndex) {
     a6c:	fc 01       	movw	r30, r24
  if (sensorIndex != constrain(sensorIndex, 0, SensorCount)) {
     a6e:	57 fd       	sbrc	r21, 7
     a70:	14 c0       	rjmp	.+40     	; 0xa9a <_ZN21PulseSensorPlayground12setThresholdEii+0x2e>
     a72:	21 81       	ldd	r18, Z+1	; 0x01
     a74:	30 e0       	ldi	r19, 0x00	; 0
     a76:	42 17       	cp	r20, r18
     a78:	53 07       	cpc	r21, r19
     a7a:	0c f4       	brge	.+2      	; 0xa7e <_ZN21PulseSensorPlayground12setThresholdEii+0x12>
     a7c:	9a 01       	movw	r18, r20
     a7e:	42 17       	cp	r20, r18
     a80:	53 07       	cpc	r21, r19
     a82:	59 f4       	brne	.+22     	; 0xa9a <_ZN21PulseSensorPlayground12setThresholdEii+0x2e>
    return; // out of range.
  }
  Sensors[sensorIndex].setThreshold(threshold);
     a84:	2c e3       	ldi	r18, 0x3C	; 60
     a86:	24 9f       	mul	r18, r20
     a88:	c0 01       	movw	r24, r0
     a8a:	25 9f       	mul	r18, r21
     a8c:	90 0d       	add	r25, r0
     a8e:	11 24       	eor	r1, r1
     a90:	22 81       	ldd	r18, Z+2	; 0x02
     a92:	33 81       	ldd	r19, Z+3	; 0x03
     a94:	82 0f       	add	r24, r18
     a96:	93 1f       	adc	r25, r19
     a98:	50 c0       	rjmp	.+160    	; 0xb3a <_ZN11PulseSensor12setThresholdEi>
     a9a:	08 95       	ret

00000a9c <_ZN11PulseSensor14resetVariablesEv>:
    IBI = 600;                  // 600ms per beat = 100 Beats Per Minute (BPM)
    Pulse = false;
    amp = 100;                  // beat amplitude 1/10 of input range.

  }
}
     a9c:	fc 01       	movw	r30, r24
     a9e:	dc 01       	movw	r26, r24
     aa0:	5c 96       	adiw	r26, 0x1c	; 28
     aa2:	c0 96       	adiw	r24, 0x30	; 48
     aa4:	1d 92       	st	X+, r1
     aa6:	1d 92       	st	X+, r1
     aa8:	a8 17       	cp	r26, r24
     aaa:	b9 07       	cpc	r27, r25
     aac:	d9 f7       	brne	.-10     	; 0xaa4 <_ZN11PulseSensor14resetVariablesEv+0x8>
     aae:	15 86       	std	Z+13, r1	; 0x0d
     ab0:	17 82       	std	Z+7, r1	; 0x07
     ab2:	16 82       	std	Z+6, r1	; 0x06
     ab4:	8e ee       	ldi	r24, 0xEE	; 238
     ab6:	92 e0       	ldi	r25, 0x02	; 2
     ab8:	93 87       	std	Z+11, r25	; 0x0b
     aba:	82 87       	std	Z+10, r24	; 0x0a
     abc:	14 86       	std	Z+12, r1	; 0x0c
     abe:	10 aa       	std	Z+48, r1	; 0x30
     ac0:	11 aa       	std	Z+49, r1	; 0x31
     ac2:	12 aa       	std	Z+50, r1	; 0x32
     ac4:	13 aa       	std	Z+51, r1	; 0x33
     ac6:	14 8a       	std	Z+20, r1	; 0x14
     ac8:	15 8a       	std	Z+21, r1	; 0x15
     aca:	16 8a       	std	Z+22, r1	; 0x16
     acc:	17 8a       	std	Z+23, r1	; 0x17
     ace:	80 e0       	ldi	r24, 0x00	; 0
     ad0:	92 e0       	ldi	r25, 0x02	; 2
     ad2:	95 ab       	std	Z+53, r25	; 0x35
     ad4:	84 ab       	std	Z+52, r24	; 0x34
     ad6:	97 ab       	std	Z+55, r25	; 0x37
     ad8:	86 ab       	std	Z+54, r24	; 0x36
     ada:	86 e2       	ldi	r24, 0x26	; 38
     adc:	92 e0       	ldi	r25, 0x02	; 2
     ade:	91 8b       	std	Z+17, r25	; 0x11
     ae0:	80 8b       	std	Z+16, r24	; 0x10
     ae2:	91 af       	std	Z+57, r25	; 0x39
     ae4:	80 af       	std	Z+56, r24	; 0x38
     ae6:	84 e6       	ldi	r24, 0x64	; 100
     ae8:	90 e0       	ldi	r25, 0x00	; 0
     aea:	93 8b       	std	Z+19, r25	; 0x13
     aec:	82 8b       	std	Z+18, r24	; 0x12
     aee:	81 e0       	ldi	r24, 0x01	; 1
     af0:	82 af       	std	Z+58, r24	; 0x3a
     af2:	13 ae       	std	Z+59, r1	; 0x3b
     af4:	17 86       	std	Z+15, r1	; 0x0f
     af6:	16 86       	std	Z+14, r1	; 0x0e
     af8:	08 95       	ret

00000afa <_ZN11PulseSensorC1Ev>:
     afa:	2f e1       	ldi	r18, 0x1F	; 31
     afc:	30 e0       	ldi	r19, 0x00	; 0
     afe:	fc 01       	movw	r30, r24
     b00:	31 83       	std	Z+1, r19	; 0x01
     b02:	20 83       	st	Z, r18
     b04:	2f ef       	ldi	r18, 0xFF	; 255
     b06:	3f ef       	ldi	r19, 0xFF	; 255
     b08:	33 83       	std	Z+3, r19	; 0x03
     b0a:	22 83       	std	Z+2, r18	; 0x02
     b0c:	35 83       	std	Z+5, r19	; 0x05
     b0e:	24 83       	std	Z+4, r18	; 0x04
     b10:	42 e0       	ldi	r20, 0x02	; 2
     b12:	50 e0       	ldi	r21, 0x00	; 0
     b14:	60 e0       	ldi	r22, 0x00	; 0
     b16:	70 e0       	ldi	r23, 0x00	; 0
     b18:	40 8f       	std	Z+24, r20	; 0x18
     b1a:	51 8f       	std	Z+25, r21	; 0x19
     b1c:	62 8f       	std	Z+26, r22	; 0x1a
     b1e:	73 8f       	std	Z+27, r23	; 0x1b
     b20:	bd cf       	rjmp	.-134    	; 0xa9c <_ZN11PulseSensor14resetVariablesEv>

00000b22 <_ZN11PulseSensor11analogInputEi>:
     b22:	fc 01       	movw	r30, r24
     b24:	71 83       	std	Z+1, r23	; 0x01
     b26:	60 83       	st	Z, r22
     b28:	08 95       	ret

00000b2a <_ZN11PulseSensor12blinkOnPulseEi>:
     b2a:	fc 01       	movw	r30, r24
     b2c:	73 83       	std	Z+3, r23	; 0x03
     b2e:	62 83       	std	Z+2, r22	; 0x02
     b30:	08 95       	ret

00000b32 <_ZN11PulseSensor11fadeOnPulseEi>:
     b32:	fc 01       	movw	r30, r24
     b34:	75 83       	std	Z+5, r23	; 0x05
     b36:	64 83       	std	Z+4, r22	; 0x04
     b38:	08 95       	ret

00000b3a <_ZN11PulseSensor12setThresholdEi>:
     b3a:	f8 94       	cli
     b3c:	fc 01       	movw	r30, r24
     b3e:	71 8b       	std	Z+17, r23	; 0x11
     b40:	60 8b       	std	Z+16, r22	; 0x10
     b42:	71 af       	std	Z+57, r23	; 0x39
     b44:	60 af       	std	Z+56, r22	; 0x38
     b46:	78 94       	sei
     b48:	08 95       	ret

00000b4a <_ZN11PulseSensor14initializeLEDsEv>:

void PulseSensor::initializeLEDs() {
     b4a:	cf 93       	push	r28
     b4c:	df 93       	push	r29
     b4e:	ec 01       	movw	r28, r24
  if (BlinkPin >= 0) {
     b50:	8a 81       	ldd	r24, Y+2	; 0x02
     b52:	9b 81       	ldd	r25, Y+3	; 0x03
     b54:	97 fd       	sbrc	r25, 7
     b56:	07 c0       	rjmp	.+14     	; 0xb66 <_ZN11PulseSensor14initializeLEDsEv+0x1c>
    pinMode(BlinkPin, OUTPUT);
     b58:	61 e0       	ldi	r22, 0x01	; 1
     b5a:	0e 94 c4 0d 	call	0x1b88	; 0x1b88 <pinMode>
    digitalWrite(BlinkPin, LOW);
     b5e:	60 e0       	ldi	r22, 0x00	; 0
     b60:	8a 81       	ldd	r24, Y+2	; 0x02
     b62:	0e 94 00 0e 	call	0x1c00	; 0x1c00 <digitalWrite>
  }
  if (FadePin >= 0) {
     b66:	8c 81       	ldd	r24, Y+4	; 0x04
     b68:	9d 81       	ldd	r25, Y+5	; 0x05
     b6a:	97 fd       	sbrc	r25, 7
     b6c:	09 c0       	rjmp	.+18     	; 0xb80 <_ZN11PulseSensor14initializeLEDsEv+0x36>
	#ifndef NO_ANALOG_WRITE
    pinMode(FadePin, OUTPUT);
     b6e:	61 e0       	ldi	r22, 0x01	; 1
     b70:	0e 94 c4 0d 	call	0x1b88	; 0x1b88 <pinMode>
    analogWrite(FadePin, 0); // turn off the LED.
     b74:	60 e0       	ldi	r22, 0x00	; 0
     b76:	70 e0       	ldi	r23, 0x00	; 0
     b78:	8c 81       	ldd	r24, Y+4	; 0x04
	#endif
  }
}
     b7a:	df 91       	pop	r29
     b7c:	cf 91       	pop	r28
    digitalWrite(BlinkPin, LOW);
  }
  if (FadePin >= 0) {
	#ifndef NO_ANALOG_WRITE
    pinMode(FadePin, OUTPUT);
    analogWrite(FadePin, 0); // turn off the LED.
     b7e:	67 c7       	rjmp	.+3790   	; 0x1a4e <analogWrite>
	#endif
  }
}
     b80:	df 91       	pop	r29
     b82:	cf 91       	pop	r28
     b84:	08 95       	ret

00000b86 <_ZN23PulseSensorSerialOutputC1Ev>:
   This software is not intended for medical use.
*/
#include "PulseSensorSerialOutput.h"

PulseSensorSerialOutput::PulseSensorSerialOutput() {
  pOutput = NULL;
     b86:	fc 01       	movw	r30, r24
     b88:	11 82       	std	Z+1, r1	; 0x01
     b8a:	10 82       	st	Z, r1
  OutputType = SERIAL_PLOTTER;
     b8c:	22 e0       	ldi	r18, 0x02	; 2
     b8e:	30 e0       	ldi	r19, 0x00	; 0
     b90:	33 83       	std	Z+3, r19	; 0x03
     b92:	22 83       	std	Z+2, r18	; 0x02
     b94:	08 95       	ret

00000b96 <_ZN23PulseSensorSerialOutput9setSerialER6Stream>:
}

void PulseSensorSerialOutput::setSerial(Stream &output) {
  pOutput = &output;
     b96:	fc 01       	movw	r30, r24
     b98:	71 83       	std	Z+1, r23	; 0x01
     b9a:	60 83       	st	Z, r22
     b9c:	08 95       	ret

00000b9e <_ZN23PulseSensorSerialOutput9getSerialEv>:
}

Stream *PulseSensorSerialOutput::getSerial() {
  return pOutput;
}
     b9e:	fc 01       	movw	r30, r24
     ba0:	80 81       	ld	r24, Z
     ba2:	91 81       	ldd	r25, Z+1	; 0x01
     ba4:	08 95       	ret

00000ba6 <_ZN23PulseSensorSerialOutput13setOutputTypeEh>:

void PulseSensorSerialOutput::setOutputType(byte outputType) {
  OutputType = outputType;
     ba6:	70 e0       	ldi	r23, 0x00	; 0
     ba8:	fc 01       	movw	r30, r24
     baa:	73 83       	std	Z+3, r23	; 0x03
     bac:	62 83       	std	Z+2, r22	; 0x02
     bae:	08 95       	ret

00000bb0 <twi_init>:
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
     bb0:	10 92 0f 02 	sts	0x020F, r1	; 0x80020f <twi_state>
     bb4:	81 e0       	ldi	r24, 0x01	; 1
     bb6:	80 93 0d 02 	sts	0x020D, r24	; 0x80020d <twi_sendStop>
     bba:	10 92 0c 02 	sts	0x020C, r1	; 0x80020c <twi_inRepStart>
     bbe:	61 e0       	ldi	r22, 0x01	; 1
     bc0:	81 e1       	ldi	r24, 0x11	; 17
     bc2:	0e 94 00 0e 	call	0x1c00	; 0x1c00 <digitalWrite>
     bc6:	61 e0       	ldi	r22, 0x01	; 1
     bc8:	80 e1       	ldi	r24, 0x10	; 16
     bca:	0e 94 00 0e 	call	0x1c00	; 0x1c00 <digitalWrite>
     bce:	e9 eb       	ldi	r30, 0xB9	; 185
     bd0:	f0 e0       	ldi	r31, 0x00	; 0
     bd2:	80 81       	ld	r24, Z
     bd4:	8e 7f       	andi	r24, 0xFE	; 254
     bd6:	80 83       	st	Z, r24
     bd8:	80 81       	ld	r24, Z
     bda:	8d 7f       	andi	r24, 0xFD	; 253
     bdc:	80 83       	st	Z, r24
     bde:	88 e4       	ldi	r24, 0x48	; 72
     be0:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>
     be4:	85 e4       	ldi	r24, 0x45	; 69
     be6:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
     bea:	08 95       	ret

00000bec <twi_writeTo>:
     bec:	0f 93       	push	r16
     bee:	41 32       	cpi	r20, 0x21	; 33
     bf0:	08 f0       	brcs	.+2      	; 0xbf4 <twi_writeTo+0x8>
     bf2:	4a c0       	rjmp	.+148    	; 0xc88 <twi_writeTo+0x9c>
     bf4:	90 91 0f 02 	lds	r25, 0x020F	; 0x80020f <twi_state>
     bf8:	91 11       	cpse	r25, r1
     bfa:	fc cf       	rjmp	.-8      	; 0xbf4 <twi_writeTo+0x8>
     bfc:	32 e0       	ldi	r19, 0x02	; 2
     bfe:	30 93 0f 02 	sts	0x020F, r19	; 0x80020f <twi_state>
     c02:	00 93 0d 02 	sts	0x020D, r16	; 0x80020d <twi_sendStop>
     c06:	3f ef       	ldi	r19, 0xFF	; 255
     c08:	30 93 a2 01 	sts	0x01A2, r19	; 0x8001a2 <twi_error>
     c0c:	10 92 e7 01 	sts	0x01E7, r1	; 0x8001e7 <twi_masterBufferIndex>
     c10:	40 93 e6 01 	sts	0x01E6, r20	; 0x8001e6 <twi_masterBufferLength>
     c14:	56 2f       	mov	r21, r22
     c16:	a8 ee       	ldi	r26, 0xE8	; 232
     c18:	b1 e0       	ldi	r27, 0x01	; 1
     c1a:	fb 01       	movw	r30, r22
     c1c:	3e 2f       	mov	r19, r30
     c1e:	35 1b       	sub	r19, r21
     c20:	34 17       	cp	r19, r20
     c22:	18 f4       	brcc	.+6      	; 0xc2a <twi_writeTo+0x3e>
     c24:	31 91       	ld	r19, Z+
     c26:	3d 93       	st	X+, r19
     c28:	f9 cf       	rjmp	.-14     	; 0xc1c <twi_writeTo+0x30>
     c2a:	10 92 0e 02 	sts	0x020E, r1	; 0x80020e <twi_slarw>
     c2e:	30 91 0e 02 	lds	r19, 0x020E	; 0x80020e <twi_slarw>
     c32:	88 0f       	add	r24, r24
     c34:	83 2b       	or	r24, r19
     c36:	80 93 0e 02 	sts	0x020E, r24	; 0x80020e <twi_slarw>
     c3a:	80 91 0c 02 	lds	r24, 0x020C	; 0x80020c <twi_inRepStart>
     c3e:	81 30       	cpi	r24, 0x01	; 1
     c40:	61 f4       	brne	.+24     	; 0xc5a <twi_writeTo+0x6e>
     c42:	10 92 0c 02 	sts	0x020C, r1	; 0x80020c <twi_inRepStart>
     c46:	80 91 0e 02 	lds	r24, 0x020E	; 0x80020e <twi_slarw>
     c4a:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
     c4e:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
     c52:	83 fd       	sbrc	r24, 3
     c54:	f8 cf       	rjmp	.-16     	; 0xc46 <twi_writeTo+0x5a>
     c56:	85 ec       	ldi	r24, 0xC5	; 197
     c58:	01 c0       	rjmp	.+2      	; 0xc5c <twi_writeTo+0x70>
     c5a:	85 ee       	ldi	r24, 0xE5	; 229
     c5c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
     c60:	22 23       	and	r18, r18
     c62:	21 f0       	breq	.+8      	; 0xc6c <twi_writeTo+0x80>
     c64:	80 91 0f 02 	lds	r24, 0x020F	; 0x80020f <twi_state>
     c68:	82 30       	cpi	r24, 0x02	; 2
     c6a:	d1 f3       	breq	.-12     	; 0xc60 <twi_writeTo+0x74>
     c6c:	80 91 a2 01 	lds	r24, 0x01A2	; 0x8001a2 <twi_error>
     c70:	8f 3f       	cpi	r24, 0xFF	; 255
     c72:	79 f0       	breq	.+30     	; 0xc92 <twi_writeTo+0xa6>
     c74:	80 91 a2 01 	lds	r24, 0x01A2	; 0x8001a2 <twi_error>
     c78:	80 32       	cpi	r24, 0x20	; 32
     c7a:	41 f0       	breq	.+16     	; 0xc8c <twi_writeTo+0xa0>
     c7c:	80 91 a2 01 	lds	r24, 0x01A2	; 0x8001a2 <twi_error>
     c80:	80 33       	cpi	r24, 0x30	; 48
     c82:	31 f0       	breq	.+12     	; 0xc90 <twi_writeTo+0xa4>
     c84:	94 e0       	ldi	r25, 0x04	; 4
     c86:	05 c0       	rjmp	.+10     	; 0xc92 <twi_writeTo+0xa6>
     c88:	91 e0       	ldi	r25, 0x01	; 1
     c8a:	03 c0       	rjmp	.+6      	; 0xc92 <twi_writeTo+0xa6>
     c8c:	92 e0       	ldi	r25, 0x02	; 2
     c8e:	01 c0       	rjmp	.+2      	; 0xc92 <twi_writeTo+0xa6>
     c90:	93 e0       	ldi	r25, 0x03	; 3
     c92:	89 2f       	mov	r24, r25
     c94:	0f 91       	pop	r16
     c96:	08 95       	ret

00000c98 <twi_transmit>:
     c98:	61 32       	cpi	r22, 0x21	; 33
     c9a:	98 f4       	brcc	.+38     	; 0xcc2 <twi_transmit+0x2a>
     c9c:	20 91 0f 02 	lds	r18, 0x020F	; 0x80020f <twi_state>
     ca0:	24 30       	cpi	r18, 0x04	; 4
     ca2:	89 f4       	brne	.+34     	; 0xcc6 <twi_transmit+0x2e>
     ca4:	60 93 c4 01 	sts	0x01C4, r22	; 0x8001c4 <twi_txBufferLength>
     ca8:	28 2f       	mov	r18, r24
     caa:	a6 ec       	ldi	r26, 0xC6	; 198
     cac:	b1 e0       	ldi	r27, 0x01	; 1
     cae:	fc 01       	movw	r30, r24
     cb0:	8e 2f       	mov	r24, r30
     cb2:	82 1b       	sub	r24, r18
     cb4:	86 17       	cp	r24, r22
     cb6:	18 f4       	brcc	.+6      	; 0xcbe <twi_transmit+0x26>
     cb8:	81 91       	ld	r24, Z+
     cba:	8d 93       	st	X+, r24
     cbc:	f9 cf       	rjmp	.-14     	; 0xcb0 <twi_transmit+0x18>
     cbe:	80 e0       	ldi	r24, 0x00	; 0
     cc0:	08 95       	ret
     cc2:	81 e0       	ldi	r24, 0x01	; 1
     cc4:	08 95       	ret
     cc6:	82 e0       	ldi	r24, 0x02	; 2
     cc8:	08 95       	ret

00000cca <twi_stop>:
 * Output   none
 */
void twi_stop(void)
{
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
     cca:	85 ed       	ldi	r24, 0xD5	; 213
     ccc:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>

  // wait for stop condition to be exectued on bus
  // TWINT is not set after a stop condition!
  while(TWCR & _BV(TWSTO)){
     cd0:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
     cd4:	84 fd       	sbrc	r24, 4
     cd6:	fc cf       	rjmp	.-8      	; 0xcd0 <twi_stop+0x6>
    continue;
  }

  // update twi state
  twi_state = TWI_READY;
     cd8:	10 92 0f 02 	sts	0x020F, r1	; 0x80020f <twi_state>
     cdc:	08 95       	ret

00000cde <twi_releaseBus>:
 * Output   none
 */
void twi_releaseBus(void)
{
  // release bus
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT);
     cde:	85 ec       	ldi	r24, 0xC5	; 197
     ce0:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>

  // update twi state
  twi_state = TWI_READY;
     ce4:	10 92 0f 02 	sts	0x020F, r1	; 0x80020f <twi_state>
     ce8:	08 95       	ret

00000cea <__vector_26>:
}

ISR(TWI_vect)
{
     cea:	1f 92       	push	r1
     cec:	0f 92       	push	r0
     cee:	0f b6       	in	r0, 0x3f	; 63
     cf0:	0f 92       	push	r0
     cf2:	11 24       	eor	r1, r1
     cf4:	0b b6       	in	r0, 0x3b	; 59
     cf6:	0f 92       	push	r0
     cf8:	2f 93       	push	r18
     cfa:	3f 93       	push	r19
     cfc:	4f 93       	push	r20
     cfe:	5f 93       	push	r21
     d00:	6f 93       	push	r22
     d02:	7f 93       	push	r23
     d04:	8f 93       	push	r24
     d06:	9f 93       	push	r25
     d08:	af 93       	push	r26
     d0a:	bf 93       	push	r27
     d0c:	ef 93       	push	r30
     d0e:	ff 93       	push	r31
  switch(TW_STATUS){
     d10:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
     d14:	88 7f       	andi	r24, 0xF8	; 248
     d16:	80 36       	cpi	r24, 0x60	; 96
     d18:	09 f4       	brne	.+2      	; 0xd1c <__vector_26+0x32>
     d1a:	9d c0       	rjmp	.+314    	; 0xe56 <__vector_26+0x16c>
     d1c:	70 f5       	brcc	.+92     	; 0xd7a <__vector_26+0x90>
     d1e:	88 32       	cpi	r24, 0x28	; 40
     d20:	09 f4       	brne	.+2      	; 0xd24 <__vector_26+0x3a>
     d22:	5c c0       	rjmp	.+184    	; 0xddc <__vector_26+0xf2>
     d24:	90 f4       	brcc	.+36     	; 0xd4a <__vector_26+0x60>
     d26:	80 31       	cpi	r24, 0x10	; 16
     d28:	09 f4       	brne	.+2      	; 0xd2c <__vector_26+0x42>
     d2a:	55 c0       	rjmp	.+170    	; 0xdd6 <__vector_26+0xec>
     d2c:	38 f4       	brcc	.+14     	; 0xd3c <__vector_26+0x52>
     d2e:	88 23       	and	r24, r24
     d30:	09 f4       	brne	.+2      	; 0xd34 <__vector_26+0x4a>
     d32:	f3 c0       	rjmp	.+486    	; 0xf1a <__vector_26+0x230>
     d34:	88 30       	cpi	r24, 0x08	; 8
     d36:	09 f4       	brne	.+2      	; 0xd3a <__vector_26+0x50>
     d38:	4e c0       	rjmp	.+156    	; 0xdd6 <__vector_26+0xec>
     d3a:	f2 c0       	rjmp	.+484    	; 0xf20 <__vector_26+0x236>
     d3c:	88 31       	cpi	r24, 0x18	; 24
     d3e:	09 f4       	brne	.+2      	; 0xd42 <__vector_26+0x58>
     d40:	4d c0       	rjmp	.+154    	; 0xddc <__vector_26+0xf2>
     d42:	80 32       	cpi	r24, 0x20	; 32
     d44:	09 f4       	brne	.+2      	; 0xd48 <__vector_26+0x5e>
     d46:	5e c0       	rjmp	.+188    	; 0xe04 <__vector_26+0x11a>
     d48:	eb c0       	rjmp	.+470    	; 0xf20 <__vector_26+0x236>
     d4a:	80 34       	cpi	r24, 0x40	; 64
     d4c:	09 f4       	brne	.+2      	; 0xd50 <__vector_26+0x66>
     d4e:	69 c0       	rjmp	.+210    	; 0xe22 <__vector_26+0x138>
     d50:	50 f4       	brcc	.+20     	; 0xd66 <__vector_26+0x7c>
     d52:	80 33       	cpi	r24, 0x30	; 48
     d54:	09 f4       	brne	.+2      	; 0xd58 <__vector_26+0x6e>
     d56:	56 c0       	rjmp	.+172    	; 0xe04 <__vector_26+0x11a>
     d58:	88 33       	cpi	r24, 0x38	; 56
     d5a:	09 f0       	breq	.+2      	; 0xd5e <__vector_26+0x74>
     d5c:	e1 c0       	rjmp	.+450    	; 0xf20 <__vector_26+0x236>
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
      twi_stop();
      break;
    case TW_MT_ARB_LOST: // lost bus arbitration
      twi_error = TW_MT_ARB_LOST;
     d5e:	80 93 a2 01 	sts	0x01A2, r24	; 0x8001a2 <twi_error>
      twi_releaseBus();
     d62:	bd df       	rcall	.-134    	; 0xcde <twi_releaseBus>
      break;
     d64:	dd c0       	rjmp	.+442    	; 0xf20 <__vector_26+0x236>
  twi_state = TWI_READY;
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
     d66:	80 35       	cpi	r24, 0x50	; 80
     d68:	09 f4       	brne	.+2      	; 0xd6c <__vector_26+0x82>
     d6a:	4f c0       	rjmp	.+158    	; 0xe0a <__vector_26+0x120>
     d6c:	88 35       	cpi	r24, 0x58	; 88
     d6e:	09 f4       	brne	.+2      	; 0xd72 <__vector_26+0x88>
     d70:	5d c0       	rjmp	.+186    	; 0xe2c <__vector_26+0x142>
     d72:	88 34       	cpi	r24, 0x48	; 72
     d74:	09 f0       	breq	.+2      	; 0xd78 <__vector_26+0x8e>
     d76:	d4 c0       	rjmp	.+424    	; 0xf20 <__vector_26+0x236>
     d78:	d2 c0       	rjmp	.+420    	; 0xf1e <__vector_26+0x234>
     d7a:	88 39       	cpi	r24, 0x98	; 152
     d7c:	09 f4       	brne	.+2      	; 0xd80 <__vector_26+0x96>
     d7e:	c3 c0       	rjmp	.+390    	; 0xf06 <__vector_26+0x21c>
     d80:	a8 f4       	brcc	.+42     	; 0xdac <__vector_26+0xc2>
     d82:	88 37       	cpi	r24, 0x78	; 120
     d84:	09 f4       	brne	.+2      	; 0xd88 <__vector_26+0x9e>
     d86:	67 c0       	rjmp	.+206    	; 0xe56 <__vector_26+0x16c>
     d88:	38 f4       	brcc	.+14     	; 0xd98 <__vector_26+0xae>
     d8a:	88 36       	cpi	r24, 0x68	; 104
     d8c:	09 f4       	brne	.+2      	; 0xd90 <__vector_26+0xa6>
     d8e:	63 c0       	rjmp	.+198    	; 0xe56 <__vector_26+0x16c>
     d90:	80 37       	cpi	r24, 0x70	; 112
     d92:	09 f4       	brne	.+2      	; 0xd96 <__vector_26+0xac>
     d94:	60 c0       	rjmp	.+192    	; 0xe56 <__vector_26+0x16c>
     d96:	c4 c0       	rjmp	.+392    	; 0xf20 <__vector_26+0x236>
     d98:	88 38       	cpi	r24, 0x88	; 136
     d9a:	09 f4       	brne	.+2      	; 0xd9e <__vector_26+0xb4>
     d9c:	b4 c0       	rjmp	.+360    	; 0xf06 <__vector_26+0x21c>
     d9e:	80 39       	cpi	r24, 0x90	; 144
     da0:	09 f4       	brne	.+2      	; 0xda4 <__vector_26+0xba>
     da2:	5f c0       	rjmp	.+190    	; 0xe62 <__vector_26+0x178>
     da4:	80 38       	cpi	r24, 0x80	; 128
     da6:	09 f0       	breq	.+2      	; 0xdaa <__vector_26+0xc0>
     da8:	bb c0       	rjmp	.+374    	; 0xf20 <__vector_26+0x236>
     daa:	5b c0       	rjmp	.+182    	; 0xe62 <__vector_26+0x178>
     dac:	80 3b       	cpi	r24, 0xB0	; 176
     dae:	09 f4       	brne	.+2      	; 0xdb2 <__vector_26+0xc8>
     db0:	82 c0       	rjmp	.+260    	; 0xeb6 <__vector_26+0x1cc>
     db2:	38 f4       	brcc	.+14     	; 0xdc2 <__vector_26+0xd8>
     db4:	80 3a       	cpi	r24, 0xA0	; 160
     db6:	09 f4       	brne	.+2      	; 0xdba <__vector_26+0xd0>
     db8:	66 c0       	rjmp	.+204    	; 0xe86 <__vector_26+0x19c>
     dba:	88 3a       	cpi	r24, 0xA8	; 168
     dbc:	09 f4       	brne	.+2      	; 0xdc0 <__vector_26+0xd6>
     dbe:	7b c0       	rjmp	.+246    	; 0xeb6 <__vector_26+0x1cc>
     dc0:	af c0       	rjmp	.+350    	; 0xf20 <__vector_26+0x236>
     dc2:	80 3c       	cpi	r24, 0xC0	; 192
     dc4:	09 f4       	brne	.+2      	; 0xdc8 <__vector_26+0xde>
     dc6:	a3 c0       	rjmp	.+326    	; 0xf0e <__vector_26+0x224>
     dc8:	88 3c       	cpi	r24, 0xC8	; 200
     dca:	09 f4       	brne	.+2      	; 0xdce <__vector_26+0xe4>
     dcc:	a0 c0       	rjmp	.+320    	; 0xf0e <__vector_26+0x224>
     dce:	88 3b       	cpi	r24, 0xB8	; 184
     dd0:	09 f4       	brne	.+2      	; 0xdd4 <__vector_26+0xea>
     dd2:	86 c0       	rjmp	.+268    	; 0xee0 <__vector_26+0x1f6>
     dd4:	a5 c0       	rjmp	.+330    	; 0xf20 <__vector_26+0x236>
    // All Master
    case TW_START:     // sent start condition
    case TW_REP_START: // sent repeated start condition
      // copy device address and r/w bit to output register and ack
      TWDR = twi_slarw;
     dd6:	80 91 0e 02 	lds	r24, 0x020E	; 0x80020e <twi_slarw>
     dda:	10 c0       	rjmp	.+32     	; 0xdfc <__vector_26+0x112>

    // Master Transmitter
    case TW_MT_SLA_ACK:  // slave receiver acked address
    case TW_MT_DATA_ACK: // slave receiver acked data
      // if there is data to send, send it, otherwise stop 
      if(twi_masterBufferIndex < twi_masterBufferLength){
     ddc:	90 91 e7 01 	lds	r25, 0x01E7	; 0x8001e7 <twi_masterBufferIndex>
     de0:	80 91 e6 01 	lds	r24, 0x01E6	; 0x8001e6 <twi_masterBufferLength>
     de4:	98 17       	cp	r25, r24
     de6:	70 f5       	brcc	.+92     	; 0xe44 <__vector_26+0x15a>
        // copy data to output register and ack
        TWDR = twi_masterBuffer[twi_masterBufferIndex++];
     de8:	e0 91 e7 01 	lds	r30, 0x01E7	; 0x8001e7 <twi_masterBufferIndex>
     dec:	81 e0       	ldi	r24, 0x01	; 1
     dee:	8e 0f       	add	r24, r30
     df0:	80 93 e7 01 	sts	0x01E7, r24	; 0x8001e7 <twi_masterBufferIndex>
     df4:	f0 e0       	ldi	r31, 0x00	; 0
     df6:	e8 51       	subi	r30, 0x18	; 24
     df8:	fe 4f       	sbci	r31, 0xFE	; 254
     dfa:	80 81       	ld	r24, Z
     dfc:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
     e00:	85 ec       	ldi	r24, 0xC5	; 197
     e02:	82 c0       	rjmp	.+260    	; 0xf08 <__vector_26+0x21e>
    case TW_MT_SLA_NACK:  // address sent, nack received
      twi_error = TW_MT_SLA_NACK;
      twi_stop();
      break;
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
     e04:	80 93 a2 01 	sts	0x01A2, r24	; 0x8001a2 <twi_error>
     e08:	8a c0       	rjmp	.+276    	; 0xf1e <__vector_26+0x234>
      break;

    // Master Receiver
    case TW_MR_DATA_ACK: // data received, ack sent
      // put byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
     e0a:	e0 91 e7 01 	lds	r30, 0x01E7	; 0x8001e7 <twi_masterBufferIndex>
     e0e:	81 e0       	ldi	r24, 0x01	; 1
     e10:	8e 0f       	add	r24, r30
     e12:	80 93 e7 01 	sts	0x01E7, r24	; 0x8001e7 <twi_masterBufferIndex>
     e16:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
     e1a:	f0 e0       	ldi	r31, 0x00	; 0
     e1c:	e8 51       	subi	r30, 0x18	; 24
     e1e:	fe 4f       	sbci	r31, 0xFE	; 254
     e20:	80 83       	st	Z, r24
    case TW_MR_SLA_ACK:  // address sent, ack received
      // ack if more bytes are expected, otherwise nack
      if(twi_masterBufferIndex < twi_masterBufferLength){
     e22:	90 91 e7 01 	lds	r25, 0x01E7	; 0x8001e7 <twi_masterBufferIndex>
     e26:	80 91 e6 01 	lds	r24, 0x01E6	; 0x8001e6 <twi_masterBufferLength>
     e2a:	6a c0       	rjmp	.+212    	; 0xf00 <__vector_26+0x216>
        twi_reply(0);
      }
      break;
    case TW_MR_DATA_NACK: // data received, nack sent
      // put final byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
     e2c:	e0 91 e7 01 	lds	r30, 0x01E7	; 0x8001e7 <twi_masterBufferIndex>
     e30:	81 e0       	ldi	r24, 0x01	; 1
     e32:	8e 0f       	add	r24, r30
     e34:	80 93 e7 01 	sts	0x01E7, r24	; 0x8001e7 <twi_masterBufferIndex>
     e38:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
     e3c:	f0 e0       	ldi	r31, 0x00	; 0
     e3e:	e8 51       	subi	r30, 0x18	; 24
     e40:	fe 4f       	sbci	r31, 0xFE	; 254
     e42:	80 83       	st	Z, r24
	if (twi_sendStop)
     e44:	80 91 0d 02 	lds	r24, 0x020D	; 0x80020d <twi_sendStop>
     e48:	81 11       	cpse	r24, r1
     e4a:	69 c0       	rjmp	.+210    	; 0xf1e <__vector_26+0x234>
          twi_stop();
	else {
	  twi_inRepStart = true;	// we're gonna send the START
     e4c:	81 e0       	ldi	r24, 0x01	; 1
     e4e:	80 93 0c 02 	sts	0x020C, r24	; 0x80020c <twi_inRepStart>
	  // don't enable the interrupt. We'll generate the start, but we 
	  // avoid handling the interrupt until we're in the next transaction,
	  // at the point where we would normally issue the start.
	  TWCR = _BV(TWINT) | _BV(TWSTA)| _BV(TWEN) ;
     e52:	84 ea       	ldi	r24, 0xA4	; 164
     e54:	5d c0       	rjmp	.+186    	; 0xf10 <__vector_26+0x226>
    case TW_SR_SLA_ACK:   // addressed, returned ack
    case TW_SR_GCALL_ACK: // addressed generally, returned ack
    case TW_SR_ARB_LOST_SLA_ACK:   // lost arbitration, returned ack
    case TW_SR_ARB_LOST_GCALL_ACK: // lost arbitration, returned ack
      // enter slave receiver mode
      twi_state = TWI_SRX;
     e56:	83 e0       	ldi	r24, 0x03	; 3
     e58:	80 93 0f 02 	sts	0x020F, r24	; 0x80020f <twi_state>
      // indicate that rx buffer can be overwritten and ack
      twi_rxBufferIndex = 0;
     e5c:	10 92 a3 01 	sts	0x01A3, r1	; 0x8001a3 <twi_rxBufferIndex>
     e60:	cf cf       	rjmp	.-98     	; 0xe00 <__vector_26+0x116>
      twi_reply(1);
      break;
    case TW_SR_DATA_ACK:       // data received, returned ack
    case TW_SR_GCALL_DATA_ACK: // data received generally, returned ack
      // if there is still room in the rx buffer
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
     e62:	80 91 a3 01 	lds	r24, 0x01A3	; 0x8001a3 <twi_rxBufferIndex>
     e66:	80 32       	cpi	r24, 0x20	; 32
     e68:	08 f0       	brcs	.+2      	; 0xe6c <__vector_26+0x182>
     e6a:	4d c0       	rjmp	.+154    	; 0xf06 <__vector_26+0x21c>
        // put byte in buffer and ack
        twi_rxBuffer[twi_rxBufferIndex++] = TWDR;
     e6c:	e0 91 a3 01 	lds	r30, 0x01A3	; 0x8001a3 <twi_rxBufferIndex>
     e70:	81 e0       	ldi	r24, 0x01	; 1
     e72:	8e 0f       	add	r24, r30
     e74:	80 93 a3 01 	sts	0x01A3, r24	; 0x8001a3 <twi_rxBufferIndex>
     e78:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
     e7c:	f0 e0       	ldi	r31, 0x00	; 0
     e7e:	ec 55       	subi	r30, 0x5C	; 92
     e80:	fe 4f       	sbci	r31, 0xFE	; 254
     e82:	80 83       	st	Z, r24
        twi_reply(0);
      }
      break;
    case TW_SR_STOP: // stop or repeated start condition received
      // ack future responses and leave slave receiver state
      twi_releaseBus();
     e84:	bd cf       	rjmp	.-134    	; 0xe00 <__vector_26+0x116>
     e86:	2b df       	rcall	.-426    	; 0xcde <twi_releaseBus>
      // put a null char after data if there's room
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
     e88:	80 91 a3 01 	lds	r24, 0x01A3	; 0x8001a3 <twi_rxBufferIndex>
     e8c:	80 32       	cpi	r24, 0x20	; 32
     e8e:	30 f4       	brcc	.+12     	; 0xe9c <__vector_26+0x1b2>
        twi_rxBuffer[twi_rxBufferIndex] = '\0';
     e90:	e0 91 a3 01 	lds	r30, 0x01A3	; 0x8001a3 <twi_rxBufferIndex>
     e94:	f0 e0       	ldi	r31, 0x00	; 0
     e96:	ec 55       	subi	r30, 0x5C	; 92
     e98:	fe 4f       	sbci	r31, 0xFE	; 254
     e9a:	10 82       	st	Z, r1
      }
      // callback to user defined callback
      twi_onSlaveReceive(twi_rxBuffer, twi_rxBufferIndex);
     e9c:	60 91 a3 01 	lds	r22, 0x01A3	; 0x8001a3 <twi_rxBufferIndex>
     ea0:	70 e0       	ldi	r23, 0x00	; 0
     ea2:	e0 91 08 02 	lds	r30, 0x0208	; 0x800208 <twi_onSlaveReceive>
     ea6:	f0 91 09 02 	lds	r31, 0x0209	; 0x800209 <twi_onSlaveReceive+0x1>
     eaa:	84 ea       	ldi	r24, 0xA4	; 164
     eac:	91 e0       	ldi	r25, 0x01	; 1
     eae:	09 95       	icall
      // since we submit rx buffer to "wire" library, we can reset it
      twi_rxBufferIndex = 0;
     eb0:	10 92 a3 01 	sts	0x01A3, r1	; 0x8001a3 <twi_rxBufferIndex>
      break;
     eb4:	35 c0       	rjmp	.+106    	; 0xf20 <__vector_26+0x236>
    
    // Slave Transmitter
    case TW_ST_SLA_ACK:          // addressed, returned ack
    case TW_ST_ARB_LOST_SLA_ACK: // arbitration lost, returned ack
      // enter slave transmitter mode
      twi_state = TWI_STX;
     eb6:	84 e0       	ldi	r24, 0x04	; 4
     eb8:	80 93 0f 02 	sts	0x020F, r24	; 0x80020f <twi_state>
      // ready the tx buffer index for iteration
      twi_txBufferIndex = 0;
     ebc:	10 92 c5 01 	sts	0x01C5, r1	; 0x8001c5 <twi_txBufferIndex>
      // set tx buffer length to be zero, to verify if user changes it
      twi_txBufferLength = 0;
     ec0:	10 92 c4 01 	sts	0x01C4, r1	; 0x8001c4 <twi_txBufferLength>
      // request for txBuffer to be filled and length to be set
      // note: user must call twi_transmit(bytes, length) to do this
      twi_onSlaveTransmit();
     ec4:	e0 91 0a 02 	lds	r30, 0x020A	; 0x80020a <twi_onSlaveTransmit>
     ec8:	f0 91 0b 02 	lds	r31, 0x020B	; 0x80020b <twi_onSlaveTransmit+0x1>
     ecc:	09 95       	icall
      // if they didn't change buffer & length, initialize it
      if(0 == twi_txBufferLength){
     ece:	80 91 c4 01 	lds	r24, 0x01C4	; 0x8001c4 <twi_txBufferLength>
     ed2:	81 11       	cpse	r24, r1
     ed4:	05 c0       	rjmp	.+10     	; 0xee0 <__vector_26+0x1f6>
        twi_txBufferLength = 1;
     ed6:	81 e0       	ldi	r24, 0x01	; 1
     ed8:	80 93 c4 01 	sts	0x01C4, r24	; 0x8001c4 <twi_txBufferLength>
        twi_txBuffer[0] = 0x00;
     edc:	10 92 c6 01 	sts	0x01C6, r1	; 0x8001c6 <twi_txBuffer>
      }
      // transmit first byte from buffer, fall
    case TW_ST_DATA_ACK: // byte sent, ack returned
      // copy data to output register
      TWDR = twi_txBuffer[twi_txBufferIndex++];
     ee0:	e0 91 c5 01 	lds	r30, 0x01C5	; 0x8001c5 <twi_txBufferIndex>
     ee4:	81 e0       	ldi	r24, 0x01	; 1
     ee6:	8e 0f       	add	r24, r30
     ee8:	80 93 c5 01 	sts	0x01C5, r24	; 0x8001c5 <twi_txBufferIndex>
     eec:	f0 e0       	ldi	r31, 0x00	; 0
     eee:	ea 53       	subi	r30, 0x3A	; 58
     ef0:	fe 4f       	sbci	r31, 0xFE	; 254
     ef2:	80 81       	ld	r24, Z
     ef4:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
      // if there is more to send, ack, otherwise nack
      if(twi_txBufferIndex < twi_txBufferLength){
     ef8:	90 91 c5 01 	lds	r25, 0x01C5	; 0x8001c5 <twi_txBufferIndex>
     efc:	80 91 c4 01 	lds	r24, 0x01C4	; 0x8001c4 <twi_txBufferLength>
     f00:	98 17       	cp	r25, r24
     f02:	08 f4       	brcc	.+2      	; 0xf06 <__vector_26+0x21c>
     f04:	7d cf       	rjmp	.-262    	; 0xe00 <__vector_26+0x116>
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
     f06:	85 e8       	ldi	r24, 0x85	; 133
     f08:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
     f0c:	09 c0       	rjmp	.+18     	; 0xf20 <__vector_26+0x236>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
     f0e:	85 ec       	ldi	r24, 0xC5	; 197
     f10:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    case TW_ST_DATA_NACK: // received nack, we are done 
    case TW_ST_LAST_DATA: // received ack, but we are done already!
      // ack future responses
      twi_reply(1);
      // leave slave receiver state
      twi_state = TWI_READY;
     f14:	10 92 0f 02 	sts	0x020F, r1	; 0x80020f <twi_state>
      break;
     f18:	03 c0       	rjmp	.+6      	; 0xf20 <__vector_26+0x236>

    // All
    case TW_NO_INFO:   // no state information
      break;
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
     f1a:	10 92 a2 01 	sts	0x01A2, r1	; 0x8001a2 <twi_error>
      twi_stop();
     f1e:	d5 de       	rcall	.-598    	; 0xcca <twi_stop>
      break;
  }
}
     f20:	ff 91       	pop	r31
     f22:	ef 91       	pop	r30
     f24:	bf 91       	pop	r27
     f26:	af 91       	pop	r26
     f28:	9f 91       	pop	r25
     f2a:	8f 91       	pop	r24
     f2c:	7f 91       	pop	r23
     f2e:	6f 91       	pop	r22
     f30:	5f 91       	pop	r21
     f32:	4f 91       	pop	r20
     f34:	3f 91       	pop	r19
     f36:	2f 91       	pop	r18
     f38:	0f 90       	pop	r0
     f3a:	0b be       	out	0x3b, r0	; 59
     f3c:	0f 90       	pop	r0
     f3e:	0f be       	out	0x3f, r0	; 63
     f40:	0f 90       	pop	r0
     f42:	1f 90       	pop	r1
     f44:	18 95       	reti

00000f46 <_ZN7TwoWire9availableEv>:
}

// sets function called on slave read
void TwoWire::onRequest( void (*function)(void) )
{
  user_onRequest = function;
     f46:	80 91 40 02 	lds	r24, 0x0240	; 0x800240 <_ZN7TwoWire14rxBufferLengthE>
     f4a:	90 e0       	ldi	r25, 0x00	; 0
     f4c:	20 91 41 02 	lds	r18, 0x0241	; 0x800241 <_ZN7TwoWire13rxBufferIndexE>
     f50:	82 1b       	sub	r24, r18
     f52:	91 09       	sbc	r25, r1
     f54:	08 95       	ret

00000f56 <_ZN7TwoWire4readEv>:
     f56:	90 91 41 02 	lds	r25, 0x0241	; 0x800241 <_ZN7TwoWire13rxBufferIndexE>
     f5a:	80 91 40 02 	lds	r24, 0x0240	; 0x800240 <_ZN7TwoWire14rxBufferLengthE>
     f5e:	98 17       	cp	r25, r24
     f60:	50 f4       	brcc	.+20     	; 0xf76 <_ZN7TwoWire4readEv+0x20>
     f62:	e9 2f       	mov	r30, r25
     f64:	f0 e0       	ldi	r31, 0x00	; 0
     f66:	ee 5b       	subi	r30, 0xBE	; 190
     f68:	fd 4f       	sbci	r31, 0xFD	; 253
     f6a:	20 81       	ld	r18, Z
     f6c:	30 e0       	ldi	r19, 0x00	; 0
     f6e:	9f 5f       	subi	r25, 0xFF	; 255
     f70:	90 93 41 02 	sts	0x0241, r25	; 0x800241 <_ZN7TwoWire13rxBufferIndexE>
     f74:	02 c0       	rjmp	.+4      	; 0xf7a <_ZN7TwoWire4readEv+0x24>
     f76:	2f ef       	ldi	r18, 0xFF	; 255
     f78:	3f ef       	ldi	r19, 0xFF	; 255
     f7a:	c9 01       	movw	r24, r18
     f7c:	08 95       	ret

00000f7e <_ZN7TwoWire4peekEv>:
     f7e:	e0 91 41 02 	lds	r30, 0x0241	; 0x800241 <_ZN7TwoWire13rxBufferIndexE>
     f82:	80 91 40 02 	lds	r24, 0x0240	; 0x800240 <_ZN7TwoWire14rxBufferLengthE>
     f86:	e8 17       	cp	r30, r24
     f88:	30 f4       	brcc	.+12     	; 0xf96 <_ZN7TwoWire4peekEv+0x18>
     f8a:	f0 e0       	ldi	r31, 0x00	; 0
     f8c:	ee 5b       	subi	r30, 0xBE	; 190
     f8e:	fd 4f       	sbci	r31, 0xFD	; 253
     f90:	80 81       	ld	r24, Z
     f92:	90 e0       	ldi	r25, 0x00	; 0
     f94:	08 95       	ret
     f96:	8f ef       	ldi	r24, 0xFF	; 255
     f98:	9f ef       	ldi	r25, 0xFF	; 255
     f9a:	08 95       	ret

00000f9c <_ZN7TwoWire5flushEv>:
     f9c:	08 95       	ret

00000f9e <_ZN7TwoWire5writeEPKhj>:
     f9e:	cf 92       	push	r12
     fa0:	df 92       	push	r13
     fa2:	ef 92       	push	r14
     fa4:	ff 92       	push	r15
     fa6:	0f 93       	push	r16
     fa8:	1f 93       	push	r17
     faa:	cf 93       	push	r28
     fac:	df 93       	push	r29
     fae:	7c 01       	movw	r14, r24
     fb0:	cb 01       	movw	r24, r22
     fb2:	8a 01       	movw	r16, r20
     fb4:	20 91 1c 02 	lds	r18, 0x021C	; 0x80021c <_ZN7TwoWire12transmittingE>
     fb8:	22 23       	and	r18, r18
     fba:	89 f0       	breq	.+34     	; 0xfde <_ZN7TwoWire5writeEPKhj+0x40>
     fbc:	eb 01       	movw	r28, r22
     fbe:	6b 01       	movw	r12, r22
     fc0:	c4 0e       	add	r12, r20
     fc2:	d5 1e       	adc	r13, r21
     fc4:	cc 15       	cp	r28, r12
     fc6:	dd 05       	cpc	r29, r13
     fc8:	61 f0       	breq	.+24     	; 0xfe2 <_ZN7TwoWire5writeEPKhj+0x44>
     fca:	69 91       	ld	r22, Y+
     fcc:	d7 01       	movw	r26, r14
     fce:	ed 91       	ld	r30, X+
     fd0:	fc 91       	ld	r31, X
     fd2:	01 90       	ld	r0, Z+
     fd4:	f0 81       	ld	r31, Z
     fd6:	e0 2d       	mov	r30, r0
     fd8:	c7 01       	movw	r24, r14
     fda:	09 95       	icall
     fdc:	f3 cf       	rjmp	.-26     	; 0xfc4 <_ZN7TwoWire5writeEPKhj+0x26>
     fde:	64 2f       	mov	r22, r20
     fe0:	5b de       	rcall	.-842    	; 0xc98 <twi_transmit>
     fe2:	c8 01       	movw	r24, r16
     fe4:	df 91       	pop	r29
     fe6:	cf 91       	pop	r28
     fe8:	1f 91       	pop	r17
     fea:	0f 91       	pop	r16
     fec:	ff 90       	pop	r15
     fee:	ef 90       	pop	r14
     ff0:	df 90       	pop	r13
     ff2:	cf 90       	pop	r12
     ff4:	08 95       	ret

00000ff6 <_ZN7TwoWire5writeEh>:
     ff6:	cf 93       	push	r28
     ff8:	df 93       	push	r29
     ffa:	1f 92       	push	r1
     ffc:	cd b7       	in	r28, 0x3d	; 61
     ffe:	de b7       	in	r29, 0x3e	; 62
    1000:	69 83       	std	Y+1, r22	; 0x01
    1002:	20 91 1c 02 	lds	r18, 0x021C	; 0x80021c <_ZN7TwoWire12transmittingE>
    1006:	22 23       	and	r18, r18
    1008:	d1 f0       	breq	.+52     	; 0x103e <_ZN7TwoWire5writeEh+0x48>
    100a:	20 91 1d 02 	lds	r18, 0x021D	; 0x80021d <_ZN7TwoWire14txBufferLengthE>
    100e:	20 32       	cpi	r18, 0x20	; 32
    1010:	40 f0       	brcs	.+16     	; 0x1022 <_ZN7TwoWire5writeEh+0x2c>
    1012:	21 e0       	ldi	r18, 0x01	; 1
    1014:	30 e0       	ldi	r19, 0x00	; 0
    1016:	fc 01       	movw	r30, r24
    1018:	33 83       	std	Z+3, r19	; 0x03
    101a:	22 83       	std	Z+2, r18	; 0x02
    101c:	80 e0       	ldi	r24, 0x00	; 0
    101e:	90 e0       	ldi	r25, 0x00	; 0
    1020:	14 c0       	rjmp	.+40     	; 0x104a <_ZN7TwoWire5writeEh+0x54>
    1022:	80 91 1e 02 	lds	r24, 0x021E	; 0x80021e <_ZN7TwoWire13txBufferIndexE>
    1026:	e8 2f       	mov	r30, r24
    1028:	f0 e0       	ldi	r31, 0x00	; 0
    102a:	e1 5e       	subi	r30, 0xE1	; 225
    102c:	fd 4f       	sbci	r31, 0xFD	; 253
    102e:	99 81       	ldd	r25, Y+1	; 0x01
    1030:	90 83       	st	Z, r25
    1032:	8f 5f       	subi	r24, 0xFF	; 255
    1034:	80 93 1e 02 	sts	0x021E, r24	; 0x80021e <_ZN7TwoWire13txBufferIndexE>
    1038:	80 93 1d 02 	sts	0x021D, r24	; 0x80021d <_ZN7TwoWire14txBufferLengthE>
    103c:	04 c0       	rjmp	.+8      	; 0x1046 <_ZN7TwoWire5writeEh+0x50>
    103e:	61 e0       	ldi	r22, 0x01	; 1
    1040:	ce 01       	movw	r24, r28
    1042:	01 96       	adiw	r24, 0x01	; 1
    1044:	29 de       	rcall	.-942    	; 0xc98 <twi_transmit>
    1046:	81 e0       	ldi	r24, 0x01	; 1
    1048:	90 e0       	ldi	r25, 0x00	; 0
    104a:	0f 90       	pop	r0
    104c:	df 91       	pop	r29
    104e:	cf 91       	pop	r28
    1050:	08 95       	ret

00001052 <_ZN7TwoWireC1Ev>:
    1052:	fc 01       	movw	r30, r24
    1054:	13 82       	std	Z+3, r1	; 0x03
    1056:	12 82       	std	Z+2, r1	; 0x02
    1058:	88 ee       	ldi	r24, 0xE8	; 232
    105a:	93 e0       	ldi	r25, 0x03	; 3
    105c:	a0 e0       	ldi	r26, 0x00	; 0
    105e:	b0 e0       	ldi	r27, 0x00	; 0
    1060:	84 83       	std	Z+4, r24	; 0x04
    1062:	95 83       	std	Z+5, r25	; 0x05
    1064:	a6 83       	std	Z+6, r26	; 0x06
    1066:	b7 83       	std	Z+7, r27	; 0x07
    1068:	81 e4       	ldi	r24, 0x41	; 65
    106a:	91 e0       	ldi	r25, 0x01	; 1
    106c:	91 83       	std	Z+1, r25	; 0x01
    106e:	80 83       	st	Z, r24
    1070:	08 95       	ret

00001072 <_ZN7TwoWire5beginEv>:
    1072:	10 92 41 02 	sts	0x0241, r1	; 0x800241 <_ZN7TwoWire13rxBufferIndexE>
    1076:	10 92 40 02 	sts	0x0240, r1	; 0x800240 <_ZN7TwoWire14rxBufferLengthE>
    107a:	10 92 1e 02 	sts	0x021E, r1	; 0x80021e <_ZN7TwoWire13txBufferIndexE>
    107e:	10 92 1d 02 	sts	0x021D, r1	; 0x80021d <_ZN7TwoWire14txBufferLengthE>
    1082:	96 cd       	rjmp	.-1236   	; 0xbb0 <twi_init>

00001084 <_ZN7TwoWire17beginTransmissionEh>:
    1084:	81 e0       	ldi	r24, 0x01	; 1
    1086:	80 93 1c 02 	sts	0x021C, r24	; 0x80021c <_ZN7TwoWire12transmittingE>
    108a:	60 93 3f 02 	sts	0x023F, r22	; 0x80023f <_ZN7TwoWire9txAddressE>
    108e:	10 92 1e 02 	sts	0x021E, r1	; 0x80021e <_ZN7TwoWire13txBufferIndexE>
    1092:	10 92 1d 02 	sts	0x021D, r1	; 0x80021d <_ZN7TwoWire14txBufferLengthE>
    1096:	08 95       	ret

00001098 <_ZN7TwoWire15endTransmissionEh>:
    1098:	0f 93       	push	r16
    109a:	06 2f       	mov	r16, r22
    109c:	21 e0       	ldi	r18, 0x01	; 1
    109e:	40 91 1d 02 	lds	r20, 0x021D	; 0x80021d <_ZN7TwoWire14txBufferLengthE>
    10a2:	6f e1       	ldi	r22, 0x1F	; 31
    10a4:	72 e0       	ldi	r23, 0x02	; 2
    10a6:	80 91 3f 02 	lds	r24, 0x023F	; 0x80023f <_ZN7TwoWire9txAddressE>
    10aa:	a0 dd       	rcall	.-1216   	; 0xbec <twi_writeTo>
    10ac:	10 92 1e 02 	sts	0x021E, r1	; 0x80021e <_ZN7TwoWire13txBufferIndexE>
    10b0:	10 92 1d 02 	sts	0x021D, r1	; 0x80021d <_ZN7TwoWire14txBufferLengthE>
    10b4:	10 92 1c 02 	sts	0x021C, r1	; 0x80021c <_ZN7TwoWire12transmittingE>
    10b8:	0f 91       	pop	r16
    10ba:	08 95       	ret

000010bc <_ZN7TwoWire15endTransmissionEv>:
    10bc:	61 e0       	ldi	r22, 0x01	; 1
    10be:	ec cf       	rjmp	.-40     	; 0x1098 <_ZN7TwoWire15endTransmissionEh>

000010c0 <_GLOBAL__sub_I__ZN7TwoWire8rxBufferE>:
}

// Preinstantiate Objects //////////////////////////////////////////////////////

TwoWire Wire = TwoWire();
    10c0:	80 e1       	ldi	r24, 0x10	; 16
    10c2:	92 e0       	ldi	r25, 0x02	; 2
    10c4:	c6 cf       	rjmp	.-116    	; 0x1052 <_ZN7TwoWireC1Ev>

000010c6 <__subsf3>:
    10c6:	50 58       	subi	r21, 0x80	; 128

000010c8 <__addsf3>:
    10c8:	bb 27       	eor	r27, r27
    10ca:	aa 27       	eor	r26, r26
    10cc:	0e d0       	rcall	.+28     	; 0x10ea <__addsf3x>
    10ce:	1c c1       	rjmp	.+568    	; 0x1308 <__fp_round>
    10d0:	0d d1       	rcall	.+538    	; 0x12ec <__fp_pscA>
    10d2:	30 f0       	brcs	.+12     	; 0x10e0 <__addsf3+0x18>
    10d4:	12 d1       	rcall	.+548    	; 0x12fa <__fp_pscB>
    10d6:	20 f0       	brcs	.+8      	; 0x10e0 <__addsf3+0x18>
    10d8:	31 f4       	brne	.+12     	; 0x10e6 <__addsf3+0x1e>
    10da:	9f 3f       	cpi	r25, 0xFF	; 255
    10dc:	11 f4       	brne	.+4      	; 0x10e2 <__addsf3+0x1a>
    10de:	1e f4       	brtc	.+6      	; 0x10e6 <__addsf3+0x1e>
    10e0:	02 c1       	rjmp	.+516    	; 0x12e6 <__fp_nan>
    10e2:	0e f4       	brtc	.+2      	; 0x10e6 <__addsf3+0x1e>
    10e4:	e0 95       	com	r30
    10e6:	e7 fb       	bst	r30, 7
    10e8:	f8 c0       	rjmp	.+496    	; 0x12da <__fp_inf>

000010ea <__addsf3x>:
    10ea:	e9 2f       	mov	r30, r25
    10ec:	1e d1       	rcall	.+572    	; 0x132a <__fp_split3>
    10ee:	80 f3       	brcs	.-32     	; 0x10d0 <__addsf3+0x8>
    10f0:	ba 17       	cp	r27, r26
    10f2:	62 07       	cpc	r22, r18
    10f4:	73 07       	cpc	r23, r19
    10f6:	84 07       	cpc	r24, r20
    10f8:	95 07       	cpc	r25, r21
    10fa:	18 f0       	brcs	.+6      	; 0x1102 <__addsf3x+0x18>
    10fc:	71 f4       	brne	.+28     	; 0x111a <__addsf3x+0x30>
    10fe:	9e f5       	brtc	.+102    	; 0x1166 <__addsf3x+0x7c>
    1100:	36 c1       	rjmp	.+620    	; 0x136e <__fp_zero>
    1102:	0e f4       	brtc	.+2      	; 0x1106 <__addsf3x+0x1c>
    1104:	e0 95       	com	r30
    1106:	0b 2e       	mov	r0, r27
    1108:	ba 2f       	mov	r27, r26
    110a:	a0 2d       	mov	r26, r0
    110c:	0b 01       	movw	r0, r22
    110e:	b9 01       	movw	r22, r18
    1110:	90 01       	movw	r18, r0
    1112:	0c 01       	movw	r0, r24
    1114:	ca 01       	movw	r24, r20
    1116:	a0 01       	movw	r20, r0
    1118:	11 24       	eor	r1, r1
    111a:	ff 27       	eor	r31, r31
    111c:	59 1b       	sub	r21, r25
    111e:	99 f0       	breq	.+38     	; 0x1146 <__addsf3x+0x5c>
    1120:	59 3f       	cpi	r21, 0xF9	; 249
    1122:	50 f4       	brcc	.+20     	; 0x1138 <__addsf3x+0x4e>
    1124:	50 3e       	cpi	r21, 0xE0	; 224
    1126:	68 f1       	brcs	.+90     	; 0x1182 <__addsf3x+0x98>
    1128:	1a 16       	cp	r1, r26
    112a:	f0 40       	sbci	r31, 0x00	; 0
    112c:	a2 2f       	mov	r26, r18
    112e:	23 2f       	mov	r18, r19
    1130:	34 2f       	mov	r19, r20
    1132:	44 27       	eor	r20, r20
    1134:	58 5f       	subi	r21, 0xF8	; 248
    1136:	f3 cf       	rjmp	.-26     	; 0x111e <__addsf3x+0x34>
    1138:	46 95       	lsr	r20
    113a:	37 95       	ror	r19
    113c:	27 95       	ror	r18
    113e:	a7 95       	ror	r26
    1140:	f0 40       	sbci	r31, 0x00	; 0
    1142:	53 95       	inc	r21
    1144:	c9 f7       	brne	.-14     	; 0x1138 <__addsf3x+0x4e>
    1146:	7e f4       	brtc	.+30     	; 0x1166 <__addsf3x+0x7c>
    1148:	1f 16       	cp	r1, r31
    114a:	ba 0b       	sbc	r27, r26
    114c:	62 0b       	sbc	r22, r18
    114e:	73 0b       	sbc	r23, r19
    1150:	84 0b       	sbc	r24, r20
    1152:	ba f0       	brmi	.+46     	; 0x1182 <__addsf3x+0x98>
    1154:	91 50       	subi	r25, 0x01	; 1
    1156:	a1 f0       	breq	.+40     	; 0x1180 <__addsf3x+0x96>
    1158:	ff 0f       	add	r31, r31
    115a:	bb 1f       	adc	r27, r27
    115c:	66 1f       	adc	r22, r22
    115e:	77 1f       	adc	r23, r23
    1160:	88 1f       	adc	r24, r24
    1162:	c2 f7       	brpl	.-16     	; 0x1154 <__addsf3x+0x6a>
    1164:	0e c0       	rjmp	.+28     	; 0x1182 <__addsf3x+0x98>
    1166:	ba 0f       	add	r27, r26
    1168:	62 1f       	adc	r22, r18
    116a:	73 1f       	adc	r23, r19
    116c:	84 1f       	adc	r24, r20
    116e:	48 f4       	brcc	.+18     	; 0x1182 <__addsf3x+0x98>
    1170:	87 95       	ror	r24
    1172:	77 95       	ror	r23
    1174:	67 95       	ror	r22
    1176:	b7 95       	ror	r27
    1178:	f7 95       	ror	r31
    117a:	9e 3f       	cpi	r25, 0xFE	; 254
    117c:	08 f0       	brcs	.+2      	; 0x1180 <__addsf3x+0x96>
    117e:	b3 cf       	rjmp	.-154    	; 0x10e6 <__addsf3+0x1e>
    1180:	93 95       	inc	r25
    1182:	88 0f       	add	r24, r24
    1184:	08 f0       	brcs	.+2      	; 0x1188 <__addsf3x+0x9e>
    1186:	99 27       	eor	r25, r25
    1188:	ee 0f       	add	r30, r30
    118a:	97 95       	ror	r25
    118c:	87 95       	ror	r24
    118e:	08 95       	ret

00001190 <__divsf3>:
    1190:	0c d0       	rcall	.+24     	; 0x11aa <__divsf3x>
    1192:	ba c0       	rjmp	.+372    	; 0x1308 <__fp_round>
    1194:	b2 d0       	rcall	.+356    	; 0x12fa <__fp_pscB>
    1196:	40 f0       	brcs	.+16     	; 0x11a8 <__divsf3+0x18>
    1198:	a9 d0       	rcall	.+338    	; 0x12ec <__fp_pscA>
    119a:	30 f0       	brcs	.+12     	; 0x11a8 <__divsf3+0x18>
    119c:	21 f4       	brne	.+8      	; 0x11a6 <__divsf3+0x16>
    119e:	5f 3f       	cpi	r21, 0xFF	; 255
    11a0:	19 f0       	breq	.+6      	; 0x11a8 <__divsf3+0x18>
    11a2:	9b c0       	rjmp	.+310    	; 0x12da <__fp_inf>
    11a4:	51 11       	cpse	r21, r1
    11a6:	e4 c0       	rjmp	.+456    	; 0x1370 <__fp_szero>
    11a8:	9e c0       	rjmp	.+316    	; 0x12e6 <__fp_nan>

000011aa <__divsf3x>:
    11aa:	bf d0       	rcall	.+382    	; 0x132a <__fp_split3>
    11ac:	98 f3       	brcs	.-26     	; 0x1194 <__divsf3+0x4>

000011ae <__divsf3_pse>:
    11ae:	99 23       	and	r25, r25
    11b0:	c9 f3       	breq	.-14     	; 0x11a4 <__divsf3+0x14>
    11b2:	55 23       	and	r21, r21
    11b4:	b1 f3       	breq	.-20     	; 0x11a2 <__divsf3+0x12>
    11b6:	95 1b       	sub	r25, r21
    11b8:	55 0b       	sbc	r21, r21
    11ba:	bb 27       	eor	r27, r27
    11bc:	aa 27       	eor	r26, r26
    11be:	62 17       	cp	r22, r18
    11c0:	73 07       	cpc	r23, r19
    11c2:	84 07       	cpc	r24, r20
    11c4:	38 f0       	brcs	.+14     	; 0x11d4 <__divsf3_pse+0x26>
    11c6:	9f 5f       	subi	r25, 0xFF	; 255
    11c8:	5f 4f       	sbci	r21, 0xFF	; 255
    11ca:	22 0f       	add	r18, r18
    11cc:	33 1f       	adc	r19, r19
    11ce:	44 1f       	adc	r20, r20
    11d0:	aa 1f       	adc	r26, r26
    11d2:	a9 f3       	breq	.-22     	; 0x11be <__divsf3_pse+0x10>
    11d4:	33 d0       	rcall	.+102    	; 0x123c <__divsf3_pse+0x8e>
    11d6:	0e 2e       	mov	r0, r30
    11d8:	3a f0       	brmi	.+14     	; 0x11e8 <__divsf3_pse+0x3a>
    11da:	e0 e8       	ldi	r30, 0x80	; 128
    11dc:	30 d0       	rcall	.+96     	; 0x123e <__divsf3_pse+0x90>
    11de:	91 50       	subi	r25, 0x01	; 1
    11e0:	50 40       	sbci	r21, 0x00	; 0
    11e2:	e6 95       	lsr	r30
    11e4:	00 1c       	adc	r0, r0
    11e6:	ca f7       	brpl	.-14     	; 0x11da <__divsf3_pse+0x2c>
    11e8:	29 d0       	rcall	.+82     	; 0x123c <__divsf3_pse+0x8e>
    11ea:	fe 2f       	mov	r31, r30
    11ec:	27 d0       	rcall	.+78     	; 0x123c <__divsf3_pse+0x8e>
    11ee:	66 0f       	add	r22, r22
    11f0:	77 1f       	adc	r23, r23
    11f2:	88 1f       	adc	r24, r24
    11f4:	bb 1f       	adc	r27, r27
    11f6:	26 17       	cp	r18, r22
    11f8:	37 07       	cpc	r19, r23
    11fa:	48 07       	cpc	r20, r24
    11fc:	ab 07       	cpc	r26, r27
    11fe:	b0 e8       	ldi	r27, 0x80	; 128
    1200:	09 f0       	breq	.+2      	; 0x1204 <__divsf3_pse+0x56>
    1202:	bb 0b       	sbc	r27, r27
    1204:	80 2d       	mov	r24, r0
    1206:	bf 01       	movw	r22, r30
    1208:	ff 27       	eor	r31, r31
    120a:	93 58       	subi	r25, 0x83	; 131
    120c:	5f 4f       	sbci	r21, 0xFF	; 255
    120e:	2a f0       	brmi	.+10     	; 0x121a <__divsf3_pse+0x6c>
    1210:	9e 3f       	cpi	r25, 0xFE	; 254
    1212:	51 05       	cpc	r21, r1
    1214:	68 f0       	brcs	.+26     	; 0x1230 <__divsf3_pse+0x82>
    1216:	61 c0       	rjmp	.+194    	; 0x12da <__fp_inf>
    1218:	ab c0       	rjmp	.+342    	; 0x1370 <__fp_szero>
    121a:	5f 3f       	cpi	r21, 0xFF	; 255
    121c:	ec f3       	brlt	.-6      	; 0x1218 <__divsf3_pse+0x6a>
    121e:	98 3e       	cpi	r25, 0xE8	; 232
    1220:	dc f3       	brlt	.-10     	; 0x1218 <__divsf3_pse+0x6a>
    1222:	86 95       	lsr	r24
    1224:	77 95       	ror	r23
    1226:	67 95       	ror	r22
    1228:	b7 95       	ror	r27
    122a:	f7 95       	ror	r31
    122c:	9f 5f       	subi	r25, 0xFF	; 255
    122e:	c9 f7       	brne	.-14     	; 0x1222 <__divsf3_pse+0x74>
    1230:	88 0f       	add	r24, r24
    1232:	91 1d       	adc	r25, r1
    1234:	96 95       	lsr	r25
    1236:	87 95       	ror	r24
    1238:	97 f9       	bld	r25, 7
    123a:	08 95       	ret
    123c:	e1 e0       	ldi	r30, 0x01	; 1
    123e:	66 0f       	add	r22, r22
    1240:	77 1f       	adc	r23, r23
    1242:	88 1f       	adc	r24, r24
    1244:	bb 1f       	adc	r27, r27
    1246:	62 17       	cp	r22, r18
    1248:	73 07       	cpc	r23, r19
    124a:	84 07       	cpc	r24, r20
    124c:	ba 07       	cpc	r27, r26
    124e:	20 f0       	brcs	.+8      	; 0x1258 <__divsf3_pse+0xaa>
    1250:	62 1b       	sub	r22, r18
    1252:	73 0b       	sbc	r23, r19
    1254:	84 0b       	sbc	r24, r20
    1256:	ba 0b       	sbc	r27, r26
    1258:	ee 1f       	adc	r30, r30
    125a:	88 f7       	brcc	.-30     	; 0x123e <__divsf3_pse+0x90>
    125c:	e0 95       	com	r30
    125e:	08 95       	ret

00001260 <__floatunsisf>:
    1260:	e8 94       	clt
    1262:	09 c0       	rjmp	.+18     	; 0x1276 <__floatsisf+0x12>

00001264 <__floatsisf>:
    1264:	97 fb       	bst	r25, 7
    1266:	3e f4       	brtc	.+14     	; 0x1276 <__floatsisf+0x12>
    1268:	90 95       	com	r25
    126a:	80 95       	com	r24
    126c:	70 95       	com	r23
    126e:	61 95       	neg	r22
    1270:	7f 4f       	sbci	r23, 0xFF	; 255
    1272:	8f 4f       	sbci	r24, 0xFF	; 255
    1274:	9f 4f       	sbci	r25, 0xFF	; 255
    1276:	99 23       	and	r25, r25
    1278:	a9 f0       	breq	.+42     	; 0x12a4 <__floatsisf+0x40>
    127a:	f9 2f       	mov	r31, r25
    127c:	96 e9       	ldi	r25, 0x96	; 150
    127e:	bb 27       	eor	r27, r27
    1280:	93 95       	inc	r25
    1282:	f6 95       	lsr	r31
    1284:	87 95       	ror	r24
    1286:	77 95       	ror	r23
    1288:	67 95       	ror	r22
    128a:	b7 95       	ror	r27
    128c:	f1 11       	cpse	r31, r1
    128e:	f8 cf       	rjmp	.-16     	; 0x1280 <__floatsisf+0x1c>
    1290:	fa f4       	brpl	.+62     	; 0x12d0 <__floatsisf+0x6c>
    1292:	bb 0f       	add	r27, r27
    1294:	11 f4       	brne	.+4      	; 0x129a <__floatsisf+0x36>
    1296:	60 ff       	sbrs	r22, 0
    1298:	1b c0       	rjmp	.+54     	; 0x12d0 <__floatsisf+0x6c>
    129a:	6f 5f       	subi	r22, 0xFF	; 255
    129c:	7f 4f       	sbci	r23, 0xFF	; 255
    129e:	8f 4f       	sbci	r24, 0xFF	; 255
    12a0:	9f 4f       	sbci	r25, 0xFF	; 255
    12a2:	16 c0       	rjmp	.+44     	; 0x12d0 <__floatsisf+0x6c>
    12a4:	88 23       	and	r24, r24
    12a6:	11 f0       	breq	.+4      	; 0x12ac <__floatsisf+0x48>
    12a8:	96 e9       	ldi	r25, 0x96	; 150
    12aa:	11 c0       	rjmp	.+34     	; 0x12ce <__floatsisf+0x6a>
    12ac:	77 23       	and	r23, r23
    12ae:	21 f0       	breq	.+8      	; 0x12b8 <__floatsisf+0x54>
    12b0:	9e e8       	ldi	r25, 0x8E	; 142
    12b2:	87 2f       	mov	r24, r23
    12b4:	76 2f       	mov	r23, r22
    12b6:	05 c0       	rjmp	.+10     	; 0x12c2 <__floatsisf+0x5e>
    12b8:	66 23       	and	r22, r22
    12ba:	71 f0       	breq	.+28     	; 0x12d8 <__floatsisf+0x74>
    12bc:	96 e8       	ldi	r25, 0x86	; 134
    12be:	86 2f       	mov	r24, r22
    12c0:	70 e0       	ldi	r23, 0x00	; 0
    12c2:	60 e0       	ldi	r22, 0x00	; 0
    12c4:	2a f0       	brmi	.+10     	; 0x12d0 <__floatsisf+0x6c>
    12c6:	9a 95       	dec	r25
    12c8:	66 0f       	add	r22, r22
    12ca:	77 1f       	adc	r23, r23
    12cc:	88 1f       	adc	r24, r24
    12ce:	da f7       	brpl	.-10     	; 0x12c6 <__floatsisf+0x62>
    12d0:	88 0f       	add	r24, r24
    12d2:	96 95       	lsr	r25
    12d4:	87 95       	ror	r24
    12d6:	97 f9       	bld	r25, 7
    12d8:	08 95       	ret

000012da <__fp_inf>:
    12da:	97 f9       	bld	r25, 7
    12dc:	9f 67       	ori	r25, 0x7F	; 127
    12de:	80 e8       	ldi	r24, 0x80	; 128
    12e0:	70 e0       	ldi	r23, 0x00	; 0
    12e2:	60 e0       	ldi	r22, 0x00	; 0
    12e4:	08 95       	ret

000012e6 <__fp_nan>:
    12e6:	9f ef       	ldi	r25, 0xFF	; 255
    12e8:	80 ec       	ldi	r24, 0xC0	; 192
    12ea:	08 95       	ret

000012ec <__fp_pscA>:
    12ec:	00 24       	eor	r0, r0
    12ee:	0a 94       	dec	r0
    12f0:	16 16       	cp	r1, r22
    12f2:	17 06       	cpc	r1, r23
    12f4:	18 06       	cpc	r1, r24
    12f6:	09 06       	cpc	r0, r25
    12f8:	08 95       	ret

000012fa <__fp_pscB>:
    12fa:	00 24       	eor	r0, r0
    12fc:	0a 94       	dec	r0
    12fe:	12 16       	cp	r1, r18
    1300:	13 06       	cpc	r1, r19
    1302:	14 06       	cpc	r1, r20
    1304:	05 06       	cpc	r0, r21
    1306:	08 95       	ret

00001308 <__fp_round>:
    1308:	09 2e       	mov	r0, r25
    130a:	03 94       	inc	r0
    130c:	00 0c       	add	r0, r0
    130e:	11 f4       	brne	.+4      	; 0x1314 <__fp_round+0xc>
    1310:	88 23       	and	r24, r24
    1312:	52 f0       	brmi	.+20     	; 0x1328 <__fp_round+0x20>
    1314:	bb 0f       	add	r27, r27
    1316:	40 f4       	brcc	.+16     	; 0x1328 <__fp_round+0x20>
    1318:	bf 2b       	or	r27, r31
    131a:	11 f4       	brne	.+4      	; 0x1320 <__fp_round+0x18>
    131c:	60 ff       	sbrs	r22, 0
    131e:	04 c0       	rjmp	.+8      	; 0x1328 <__fp_round+0x20>
    1320:	6f 5f       	subi	r22, 0xFF	; 255
    1322:	7f 4f       	sbci	r23, 0xFF	; 255
    1324:	8f 4f       	sbci	r24, 0xFF	; 255
    1326:	9f 4f       	sbci	r25, 0xFF	; 255
    1328:	08 95       	ret

0000132a <__fp_split3>:
    132a:	57 fd       	sbrc	r21, 7
    132c:	90 58       	subi	r25, 0x80	; 128
    132e:	44 0f       	add	r20, r20
    1330:	55 1f       	adc	r21, r21
    1332:	59 f0       	breq	.+22     	; 0x134a <__fp_splitA+0x10>
    1334:	5f 3f       	cpi	r21, 0xFF	; 255
    1336:	71 f0       	breq	.+28     	; 0x1354 <__fp_splitA+0x1a>
    1338:	47 95       	ror	r20

0000133a <__fp_splitA>:
    133a:	88 0f       	add	r24, r24
    133c:	97 fb       	bst	r25, 7
    133e:	99 1f       	adc	r25, r25
    1340:	61 f0       	breq	.+24     	; 0x135a <__fp_splitA+0x20>
    1342:	9f 3f       	cpi	r25, 0xFF	; 255
    1344:	79 f0       	breq	.+30     	; 0x1364 <__fp_splitA+0x2a>
    1346:	87 95       	ror	r24
    1348:	08 95       	ret
    134a:	12 16       	cp	r1, r18
    134c:	13 06       	cpc	r1, r19
    134e:	14 06       	cpc	r1, r20
    1350:	55 1f       	adc	r21, r21
    1352:	f2 cf       	rjmp	.-28     	; 0x1338 <__fp_split3+0xe>
    1354:	46 95       	lsr	r20
    1356:	f1 df       	rcall	.-30     	; 0x133a <__fp_splitA>
    1358:	08 c0       	rjmp	.+16     	; 0x136a <__fp_splitA+0x30>
    135a:	16 16       	cp	r1, r22
    135c:	17 06       	cpc	r1, r23
    135e:	18 06       	cpc	r1, r24
    1360:	99 1f       	adc	r25, r25
    1362:	f1 cf       	rjmp	.-30     	; 0x1346 <__fp_splitA+0xc>
    1364:	86 95       	lsr	r24
    1366:	71 05       	cpc	r23, r1
    1368:	61 05       	cpc	r22, r1
    136a:	08 94       	sec
    136c:	08 95       	ret

0000136e <__fp_zero>:
    136e:	e8 94       	clt

00001370 <__fp_szero>:
    1370:	bb 27       	eor	r27, r27
    1372:	66 27       	eor	r22, r22
    1374:	77 27       	eor	r23, r23
    1376:	cb 01       	movw	r24, r22
    1378:	97 f9       	bld	r25, 7
    137a:	08 95       	ret

0000137c <__mulsf3>:
    137c:	0b d0       	rcall	.+22     	; 0x1394 <__mulsf3x>
    137e:	c4 cf       	rjmp	.-120    	; 0x1308 <__fp_round>
    1380:	b5 df       	rcall	.-150    	; 0x12ec <__fp_pscA>
    1382:	28 f0       	brcs	.+10     	; 0x138e <__mulsf3+0x12>
    1384:	ba df       	rcall	.-140    	; 0x12fa <__fp_pscB>
    1386:	18 f0       	brcs	.+6      	; 0x138e <__mulsf3+0x12>
    1388:	95 23       	and	r25, r21
    138a:	09 f0       	breq	.+2      	; 0x138e <__mulsf3+0x12>
    138c:	a6 cf       	rjmp	.-180    	; 0x12da <__fp_inf>
    138e:	ab cf       	rjmp	.-170    	; 0x12e6 <__fp_nan>
    1390:	11 24       	eor	r1, r1
    1392:	ee cf       	rjmp	.-36     	; 0x1370 <__fp_szero>

00001394 <__mulsf3x>:
    1394:	ca df       	rcall	.-108    	; 0x132a <__fp_split3>
    1396:	a0 f3       	brcs	.-24     	; 0x1380 <__mulsf3+0x4>

00001398 <__mulsf3_pse>:
    1398:	95 9f       	mul	r25, r21
    139a:	d1 f3       	breq	.-12     	; 0x1390 <__mulsf3+0x14>
    139c:	95 0f       	add	r25, r21
    139e:	50 e0       	ldi	r21, 0x00	; 0
    13a0:	55 1f       	adc	r21, r21
    13a2:	62 9f       	mul	r22, r18
    13a4:	f0 01       	movw	r30, r0
    13a6:	72 9f       	mul	r23, r18
    13a8:	bb 27       	eor	r27, r27
    13aa:	f0 0d       	add	r31, r0
    13ac:	b1 1d       	adc	r27, r1
    13ae:	63 9f       	mul	r22, r19
    13b0:	aa 27       	eor	r26, r26
    13b2:	f0 0d       	add	r31, r0
    13b4:	b1 1d       	adc	r27, r1
    13b6:	aa 1f       	adc	r26, r26
    13b8:	64 9f       	mul	r22, r20
    13ba:	66 27       	eor	r22, r22
    13bc:	b0 0d       	add	r27, r0
    13be:	a1 1d       	adc	r26, r1
    13c0:	66 1f       	adc	r22, r22
    13c2:	82 9f       	mul	r24, r18
    13c4:	22 27       	eor	r18, r18
    13c6:	b0 0d       	add	r27, r0
    13c8:	a1 1d       	adc	r26, r1
    13ca:	62 1f       	adc	r22, r18
    13cc:	73 9f       	mul	r23, r19
    13ce:	b0 0d       	add	r27, r0
    13d0:	a1 1d       	adc	r26, r1
    13d2:	62 1f       	adc	r22, r18
    13d4:	83 9f       	mul	r24, r19
    13d6:	a0 0d       	add	r26, r0
    13d8:	61 1d       	adc	r22, r1
    13da:	22 1f       	adc	r18, r18
    13dc:	74 9f       	mul	r23, r20
    13de:	33 27       	eor	r19, r19
    13e0:	a0 0d       	add	r26, r0
    13e2:	61 1d       	adc	r22, r1
    13e4:	23 1f       	adc	r18, r19
    13e6:	84 9f       	mul	r24, r20
    13e8:	60 0d       	add	r22, r0
    13ea:	21 1d       	adc	r18, r1
    13ec:	82 2f       	mov	r24, r18
    13ee:	76 2f       	mov	r23, r22
    13f0:	6a 2f       	mov	r22, r26
    13f2:	11 24       	eor	r1, r1
    13f4:	9f 57       	subi	r25, 0x7F	; 127
    13f6:	50 40       	sbci	r21, 0x00	; 0
    13f8:	8a f0       	brmi	.+34     	; 0x141c <__mulsf3_pse+0x84>
    13fa:	e1 f0       	breq	.+56     	; 0x1434 <__mulsf3_pse+0x9c>
    13fc:	88 23       	and	r24, r24
    13fe:	4a f0       	brmi	.+18     	; 0x1412 <__mulsf3_pse+0x7a>
    1400:	ee 0f       	add	r30, r30
    1402:	ff 1f       	adc	r31, r31
    1404:	bb 1f       	adc	r27, r27
    1406:	66 1f       	adc	r22, r22
    1408:	77 1f       	adc	r23, r23
    140a:	88 1f       	adc	r24, r24
    140c:	91 50       	subi	r25, 0x01	; 1
    140e:	50 40       	sbci	r21, 0x00	; 0
    1410:	a9 f7       	brne	.-22     	; 0x13fc <__mulsf3_pse+0x64>
    1412:	9e 3f       	cpi	r25, 0xFE	; 254
    1414:	51 05       	cpc	r21, r1
    1416:	70 f0       	brcs	.+28     	; 0x1434 <__mulsf3_pse+0x9c>
    1418:	60 cf       	rjmp	.-320    	; 0x12da <__fp_inf>
    141a:	aa cf       	rjmp	.-172    	; 0x1370 <__fp_szero>
    141c:	5f 3f       	cpi	r21, 0xFF	; 255
    141e:	ec f3       	brlt	.-6      	; 0x141a <__mulsf3_pse+0x82>
    1420:	98 3e       	cpi	r25, 0xE8	; 232
    1422:	dc f3       	brlt	.-10     	; 0x141a <__mulsf3_pse+0x82>
    1424:	86 95       	lsr	r24
    1426:	77 95       	ror	r23
    1428:	67 95       	ror	r22
    142a:	b7 95       	ror	r27
    142c:	f7 95       	ror	r31
    142e:	e7 95       	ror	r30
    1430:	9f 5f       	subi	r25, 0xFF	; 255
    1432:	c1 f7       	brne	.-16     	; 0x1424 <__mulsf3_pse+0x8c>
    1434:	fe 2b       	or	r31, r30
    1436:	88 0f       	add	r24, r24
    1438:	91 1d       	adc	r25, r1
    143a:	96 95       	lsr	r25
    143c:	87 95       	ror	r24
    143e:	97 f9       	bld	r25, 7
    1440:	08 95       	ret

00001442 <_ZN14HardwareSerial9availableEv>:
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
}

int HardwareSerial::available(void)
{
    1442:	fc 01       	movw	r30, r24
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
    1444:	91 8d       	ldd	r25, Z+25	; 0x19
    1446:	22 8d       	ldd	r18, Z+26	; 0x1a
    1448:	89 2f       	mov	r24, r25
    144a:	90 e0       	ldi	r25, 0x00	; 0
    144c:	80 5c       	subi	r24, 0xC0	; 192
    144e:	9f 4f       	sbci	r25, 0xFF	; 255
    1450:	82 1b       	sub	r24, r18
    1452:	91 09       	sbc	r25, r1
}
    1454:	8f 73       	andi	r24, 0x3F	; 63
    1456:	99 27       	eor	r25, r25
    1458:	08 95       	ret

0000145a <_ZN14HardwareSerial4peekEv>:

int HardwareSerial::peek(void)
{
    145a:	fc 01       	movw	r30, r24
  if (_rx_buffer_head == _rx_buffer_tail) {
    145c:	91 8d       	ldd	r25, Z+25	; 0x19
    145e:	82 8d       	ldd	r24, Z+26	; 0x1a
    1460:	98 17       	cp	r25, r24
    1462:	31 f0       	breq	.+12     	; 0x1470 <_ZN14HardwareSerial4peekEv+0x16>
    return -1;
  } else {
    return _rx_buffer[_rx_buffer_tail];
    1464:	82 8d       	ldd	r24, Z+26	; 0x1a
    1466:	e8 0f       	add	r30, r24
    1468:	f1 1d       	adc	r31, r1
    146a:	85 8d       	ldd	r24, Z+29	; 0x1d
    146c:	90 e0       	ldi	r25, 0x00	; 0
    146e:	08 95       	ret
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    1470:	8f ef       	ldi	r24, 0xFF	; 255
    1472:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    return _rx_buffer[_rx_buffer_tail];
  }
}
    1474:	08 95       	ret

00001476 <_ZN14HardwareSerial4readEv>:

int HardwareSerial::read(void)
{
    1476:	fc 01       	movw	r30, r24
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    1478:	91 8d       	ldd	r25, Z+25	; 0x19
    147a:	82 8d       	ldd	r24, Z+26	; 0x1a
    147c:	98 17       	cp	r25, r24
    147e:	61 f0       	breq	.+24     	; 0x1498 <_ZN14HardwareSerial4readEv+0x22>
    return -1;
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    1480:	82 8d       	ldd	r24, Z+26	; 0x1a
    1482:	df 01       	movw	r26, r30
    1484:	a8 0f       	add	r26, r24
    1486:	b1 1d       	adc	r27, r1
    1488:	5d 96       	adiw	r26, 0x1d	; 29
    148a:	8c 91       	ld	r24, X
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    148c:	92 8d       	ldd	r25, Z+26	; 0x1a
    148e:	9f 5f       	subi	r25, 0xFF	; 255
    1490:	9f 73       	andi	r25, 0x3F	; 63
    1492:	92 8f       	std	Z+26, r25	; 0x1a
    return c;
    1494:	90 e0       	ldi	r25, 0x00	; 0
    1496:	08 95       	ret

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    1498:	8f ef       	ldi	r24, 0xFF	; 255
    149a:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    return c;
  }
}
    149c:	08 95       	ret

0000149e <_Z14serialEventRunv>:
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
    149e:	84 e5       	ldi	r24, 0x54	; 84
    14a0:	9b e0       	ldi	r25, 0x0B	; 11
    14a2:	89 2b       	or	r24, r25
    14a4:	39 f0       	breq	.+14     	; 0x14b4 <_Z14serialEventRunv+0x16>
    14a6:	80 e0       	ldi	r24, 0x00	; 0
    14a8:	90 e0       	ldi	r25, 0x00	; 0
    14aa:	89 2b       	or	r24, r25
    14ac:	19 f0       	breq	.+6      	; 0x14b4 <_Z14serialEventRunv+0x16>
    14ae:	fc d0       	rcall	.+504    	; 0x16a8 <_Z17Serial0_availablev>
    14b0:	81 11       	cpse	r24, r1
    14b2:	0d c0       	rjmp	.+26     	; 0x14ce <_Z14serialEventRunv+0x30>
#endif
#if defined(HAVE_HWSERIAL1)
  if (Serial1_available && serialEvent1 && Serial1_available()) serialEvent1();
    14b4:	80 e0       	ldi	r24, 0x00	; 0
    14b6:	90 e0       	ldi	r25, 0x00	; 0
    14b8:	89 2b       	or	r24, r25
    14ba:	71 f0       	breq	.+28     	; 0x14d8 <_Z14serialEventRunv+0x3a>
    14bc:	80 e0       	ldi	r24, 0x00	; 0
    14be:	90 e0       	ldi	r25, 0x00	; 0
    14c0:	89 2b       	or	r24, r25
    14c2:	51 f0       	breq	.+20     	; 0x14d8 <_Z14serialEventRunv+0x3a>
    14c4:	0e 94 00 00 	call	0	; 0x0 <__vectors>
    14c8:	81 11       	cpse	r24, r1
    14ca:	04 c0       	rjmp	.+8      	; 0x14d4 <_Z14serialEventRunv+0x36>
    14cc:	08 95       	ret
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
    14ce:	0e 94 00 00 	call	0	; 0x0 <__vectors>
    14d2:	f0 cf       	rjmp	.-32     	; 0x14b4 <_Z14serialEventRunv+0x16>
#endif
#if defined(HAVE_HWSERIAL1)
  if (Serial1_available && serialEvent1 && Serial1_available()) serialEvent1();
    14d4:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
    14d8:	08 95       	ret

000014da <_ZN14HardwareSerial17_tx_udr_empty_irqEv>:
}

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
    14da:	fc 01       	movw	r30, r24
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
    14dc:	84 8d       	ldd	r24, Z+28	; 0x1c
    14de:	df 01       	movw	r26, r30
    14e0:	a8 0f       	add	r26, r24
    14e2:	b1 1d       	adc	r27, r1
    14e4:	a3 5a       	subi	r26, 0xA3	; 163
    14e6:	bf 4f       	sbci	r27, 0xFF	; 255
    14e8:	2c 91       	ld	r18, X
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
    14ea:	84 8d       	ldd	r24, Z+28	; 0x1c
    14ec:	90 e0       	ldi	r25, 0x00	; 0
    14ee:	01 96       	adiw	r24, 0x01	; 1
    14f0:	8f 73       	andi	r24, 0x3F	; 63
    14f2:	99 27       	eor	r25, r25
    14f4:	84 8f       	std	Z+28, r24	; 0x1c

  *_udr = c;
    14f6:	a6 89       	ldd	r26, Z+22	; 0x16
    14f8:	b7 89       	ldd	r27, Z+23	; 0x17
    14fa:	2c 93       	st	X, r18

  // clear the TXC bit -- "can be cleared by writing a one to its bit
  // location". This makes sure flush() won't return until the bytes
  // actually got written
  sbi(*_ucsra, TXC0);
    14fc:	a0 89       	ldd	r26, Z+16	; 0x10
    14fe:	b1 89       	ldd	r27, Z+17	; 0x11
    1500:	8c 91       	ld	r24, X
    1502:	80 64       	ori	r24, 0x40	; 64
    1504:	8c 93       	st	X, r24

  if (_tx_buffer_head == _tx_buffer_tail) {
    1506:	93 8d       	ldd	r25, Z+27	; 0x1b
    1508:	84 8d       	ldd	r24, Z+28	; 0x1c
    150a:	98 13       	cpse	r25, r24
    150c:	06 c0       	rjmp	.+12     	; 0x151a <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x40>
    // Buffer empty, so disable interrupts
    cbi(*_ucsrb, UDRIE0);
    150e:	02 88       	ldd	r0, Z+18	; 0x12
    1510:	f3 89       	ldd	r31, Z+19	; 0x13
    1512:	e0 2d       	mov	r30, r0
    1514:	80 81       	ld	r24, Z
    1516:	8f 7d       	andi	r24, 0xDF	; 223
    1518:	80 83       	st	Z, r24
    151a:	08 95       	ret

0000151c <_ZN14HardwareSerial5writeEh>:
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}

size_t HardwareSerial::write(uint8_t c)
{
    151c:	ef 92       	push	r14
    151e:	ff 92       	push	r15
    1520:	0f 93       	push	r16
    1522:	1f 93       	push	r17
    1524:	cf 93       	push	r28
    1526:	df 93       	push	r29
    1528:	ec 01       	movw	r28, r24
  _written = true;
    152a:	81 e0       	ldi	r24, 0x01	; 1
    152c:	88 8f       	std	Y+24, r24	; 0x18
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    152e:	9b 8d       	ldd	r25, Y+27	; 0x1b
    1530:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1532:	98 13       	cpse	r25, r24
    1534:	05 c0       	rjmp	.+10     	; 0x1540 <_ZN14HardwareSerial5writeEh+0x24>
    1536:	e8 89       	ldd	r30, Y+16	; 0x10
    1538:	f9 89       	ldd	r31, Y+17	; 0x11
    153a:	80 81       	ld	r24, Z
    153c:	85 fd       	sbrc	r24, 5
    153e:	23 c0       	rjmp	.+70     	; 0x1586 <_ZN14HardwareSerial5writeEh+0x6a>
    1540:	f6 2e       	mov	r15, r22
    *_udr = c;
    sbi(*_ucsra, TXC0);
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
    1542:	0b 8d       	ldd	r16, Y+27	; 0x1b
    1544:	10 e0       	ldi	r17, 0x00	; 0
    1546:	0f 5f       	subi	r16, 0xFF	; 255
    1548:	1f 4f       	sbci	r17, 0xFF	; 255
    154a:	0f 73       	andi	r16, 0x3F	; 63
    154c:	11 27       	eor	r17, r17
    154e:	e0 2e       	mov	r14, r16
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
    1550:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1552:	e8 12       	cpse	r14, r24
    1554:	0b c0       	rjmp	.+22     	; 0x156c <_ZN14HardwareSerial5writeEh+0x50>
    if (bit_is_clear(SREG, SREG_I)) {
    1556:	0f b6       	in	r0, 0x3f	; 63
    1558:	07 fc       	sbrc	r0, 7
    155a:	fa cf       	rjmp	.-12     	; 0x1550 <_ZN14HardwareSerial5writeEh+0x34>
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
    155c:	e8 89       	ldd	r30, Y+16	; 0x10
    155e:	f9 89       	ldd	r31, Y+17	; 0x11
    1560:	80 81       	ld	r24, Z
    1562:	85 ff       	sbrs	r24, 5
    1564:	f5 cf       	rjmp	.-22     	; 0x1550 <_ZN14HardwareSerial5writeEh+0x34>
	_tx_udr_empty_irq();
    1566:	ce 01       	movw	r24, r28
    1568:	b8 df       	rcall	.-144    	; 0x14da <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    156a:	f2 cf       	rjmp	.-28     	; 0x1550 <_ZN14HardwareSerial5writeEh+0x34>
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
    156c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    156e:	fe 01       	movw	r30, r28
    1570:	e8 0f       	add	r30, r24
    1572:	f1 1d       	adc	r31, r1
    1574:	e3 5a       	subi	r30, 0xA3	; 163
    1576:	ff 4f       	sbci	r31, 0xFF	; 255
    1578:	f0 82       	st	Z, r15
  _tx_buffer_head = i;
    157a:	0b 8f       	std	Y+27, r16	; 0x1b
	
  sbi(*_ucsrb, UDRIE0);
    157c:	ea 89       	ldd	r30, Y+18	; 0x12
    157e:	fb 89       	ldd	r31, Y+19	; 0x13
    1580:	80 81       	ld	r24, Z
    1582:	80 62       	ori	r24, 0x20	; 32
    1584:	07 c0       	rjmp	.+14     	; 0x1594 <_ZN14HardwareSerial5writeEh+0x78>
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    *_udr = c;
    1586:	ee 89       	ldd	r30, Y+22	; 0x16
    1588:	ff 89       	ldd	r31, Y+23	; 0x17
    158a:	60 83       	st	Z, r22
    sbi(*_ucsra, TXC0);
    158c:	e8 89       	ldd	r30, Y+16	; 0x10
    158e:	f9 89       	ldd	r31, Y+17	; 0x11
    1590:	80 81       	ld	r24, Z
    1592:	80 64       	ori	r24, 0x40	; 64
    1594:	80 83       	st	Z, r24
  _tx_buffer_head = i;
	
  sbi(*_ucsrb, UDRIE0);
  
  return 1;
}
    1596:	81 e0       	ldi	r24, 0x01	; 1
    1598:	90 e0       	ldi	r25, 0x00	; 0
    159a:	df 91       	pop	r29
    159c:	cf 91       	pop	r28
    159e:	1f 91       	pop	r17
    15a0:	0f 91       	pop	r16
    15a2:	ff 90       	pop	r15
    15a4:	ef 90       	pop	r14
    15a6:	08 95       	ret

000015a8 <_ZN14HardwareSerial5flushEv>:
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
    15a8:	cf 93       	push	r28
    15aa:	df 93       	push	r29
    15ac:	ec 01       	movw	r28, r24
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
    15ae:	88 8d       	ldd	r24, Y+24	; 0x18
    15b0:	88 23       	and	r24, r24
    15b2:	c1 f0       	breq	.+48     	; 0x15e4 <_ZN14HardwareSerial5flushEv+0x3c>
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
    15b4:	ea 89       	ldd	r30, Y+18	; 0x12
    15b6:	fb 89       	ldd	r31, Y+19	; 0x13
    15b8:	80 81       	ld	r24, Z
    15ba:	85 fd       	sbrc	r24, 5
    15bc:	05 c0       	rjmp	.+10     	; 0x15c8 <_ZN14HardwareSerial5flushEv+0x20>
    15be:	a8 89       	ldd	r26, Y+16	; 0x10
    15c0:	b9 89       	ldd	r27, Y+17	; 0x11
    15c2:	8c 91       	ld	r24, X
    15c4:	86 fd       	sbrc	r24, 6
    15c6:	0e c0       	rjmp	.+28     	; 0x15e4 <_ZN14HardwareSerial5flushEv+0x3c>
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
    15c8:	0f b6       	in	r0, 0x3f	; 63
    15ca:	07 fc       	sbrc	r0, 7
    15cc:	f5 cf       	rjmp	.-22     	; 0x15b8 <_ZN14HardwareSerial5flushEv+0x10>
    15ce:	80 81       	ld	r24, Z
    15d0:	85 ff       	sbrs	r24, 5
    15d2:	f2 cf       	rjmp	.-28     	; 0x15b8 <_ZN14HardwareSerial5flushEv+0x10>
	// Interrupts are globally disabled, but the DR empty
	// interrupt should be enabled, so poll the DR empty flag to
	// prevent deadlock
	if (bit_is_set(*_ucsra, UDRE0))
    15d4:	a8 89       	ldd	r26, Y+16	; 0x10
    15d6:	b9 89       	ldd	r27, Y+17	; 0x11
    15d8:	8c 91       	ld	r24, X
    15da:	85 ff       	sbrs	r24, 5
    15dc:	ed cf       	rjmp	.-38     	; 0x15b8 <_ZN14HardwareSerial5flushEv+0x10>
	  _tx_udr_empty_irq();
    15de:	ce 01       	movw	r24, r28
    15e0:	7c df       	rcall	.-264    	; 0x14da <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    15e2:	e8 cf       	rjmp	.-48     	; 0x15b4 <_ZN14HardwareSerial5flushEv+0xc>
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
    15e4:	df 91       	pop	r29
    15e6:	cf 91       	pop	r28
    15e8:	08 95       	ret

000015ea <__vector_20>:
#elif defined(USART_RXC_vect)
  ISR(USART_RXC_vect) // ATmega8
#else
  #error "Don't know what the Data Received vector is called for Serial"
#endif
  {
    15ea:	1f 92       	push	r1
    15ec:	0f 92       	push	r0
    15ee:	0f b6       	in	r0, 0x3f	; 63
    15f0:	0f 92       	push	r0
    15f2:	11 24       	eor	r1, r1
    15f4:	0b b6       	in	r0, 0x3b	; 59
    15f6:	0f 92       	push	r0
    15f8:	2f 93       	push	r18
    15fa:	8f 93       	push	r24
    15fc:	9f 93       	push	r25
    15fe:	ef 93       	push	r30
    1600:	ff 93       	push	r31

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
    1602:	e0 91 72 02 	lds	r30, 0x0272	; 0x800272 <Serial+0x10>
    1606:	f0 91 73 02 	lds	r31, 0x0273	; 0x800273 <Serial+0x11>
    160a:	80 81       	ld	r24, Z
    160c:	e0 91 78 02 	lds	r30, 0x0278	; 0x800278 <Serial+0x16>
    1610:	f0 91 79 02 	lds	r31, 0x0279	; 0x800279 <Serial+0x17>
    1614:	82 fd       	sbrc	r24, 2
    1616:	12 c0       	rjmp	.+36     	; 0x163c <__vector_20+0x52>
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
    1618:	90 81       	ld	r25, Z
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
    161a:	80 91 7b 02 	lds	r24, 0x027B	; 0x80027b <Serial+0x19>
    161e:	8f 5f       	subi	r24, 0xFF	; 255
    1620:	8f 73       	andi	r24, 0x3F	; 63

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
    1622:	20 91 7c 02 	lds	r18, 0x027C	; 0x80027c <Serial+0x1a>
    1626:	82 17       	cp	r24, r18
    1628:	51 f0       	breq	.+20     	; 0x163e <__vector_20+0x54>
      _rx_buffer[_rx_buffer_head] = c;
    162a:	e0 91 7b 02 	lds	r30, 0x027B	; 0x80027b <Serial+0x19>
    162e:	f0 e0       	ldi	r31, 0x00	; 0
    1630:	ee 59       	subi	r30, 0x9E	; 158
    1632:	fd 4f       	sbci	r31, 0xFD	; 253
    1634:	95 8f       	std	Z+29, r25	; 0x1d
      _rx_buffer_head = i;
    1636:	80 93 7b 02 	sts	0x027B, r24	; 0x80027b <Serial+0x19>
    163a:	01 c0       	rjmp	.+2      	; 0x163e <__vector_20+0x54>
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
    163c:	80 81       	ld	r24, Z
    Serial._rx_complete_irq();
  }
    163e:	ff 91       	pop	r31
    1640:	ef 91       	pop	r30
    1642:	9f 91       	pop	r25
    1644:	8f 91       	pop	r24
    1646:	2f 91       	pop	r18
    1648:	0f 90       	pop	r0
    164a:	0b be       	out	0x3b, r0	; 59
    164c:	0f 90       	pop	r0
    164e:	0f be       	out	0x3f, r0	; 63
    1650:	0f 90       	pop	r0
    1652:	1f 90       	pop	r1
    1654:	18 95       	reti

00001656 <__vector_21>:
#elif defined(USART_UDRE_vect)
ISR(USART_UDRE_vect)
#else
  #error "Don't know what the Data Register Empty vector is called for Serial"
#endif
{
    1656:	1f 92       	push	r1
    1658:	0f 92       	push	r0
    165a:	0f b6       	in	r0, 0x3f	; 63
    165c:	0f 92       	push	r0
    165e:	11 24       	eor	r1, r1
    1660:	0b b6       	in	r0, 0x3b	; 59
    1662:	0f 92       	push	r0
    1664:	2f 93       	push	r18
    1666:	3f 93       	push	r19
    1668:	4f 93       	push	r20
    166a:	5f 93       	push	r21
    166c:	6f 93       	push	r22
    166e:	7f 93       	push	r23
    1670:	8f 93       	push	r24
    1672:	9f 93       	push	r25
    1674:	af 93       	push	r26
    1676:	bf 93       	push	r27
    1678:	ef 93       	push	r30
    167a:	ff 93       	push	r31
  Serial._tx_udr_empty_irq();
    167c:	82 e6       	ldi	r24, 0x62	; 98
    167e:	92 e0       	ldi	r25, 0x02	; 2
    1680:	2c df       	rcall	.-424    	; 0x14da <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
}
    1682:	ff 91       	pop	r31
    1684:	ef 91       	pop	r30
    1686:	bf 91       	pop	r27
    1688:	af 91       	pop	r26
    168a:	9f 91       	pop	r25
    168c:	8f 91       	pop	r24
    168e:	7f 91       	pop	r23
    1690:	6f 91       	pop	r22
    1692:	5f 91       	pop	r21
    1694:	4f 91       	pop	r20
    1696:	3f 91       	pop	r19
    1698:	2f 91       	pop	r18
    169a:	0f 90       	pop	r0
    169c:	0b be       	out	0x3b, r0	; 59
    169e:	0f 90       	pop	r0
    16a0:	0f be       	out	0x3f, r0	; 63
    16a2:	0f 90       	pop	r0
    16a4:	1f 90       	pop	r1
    16a6:	18 95       	reti

000016a8 <_Z17Serial0_availablev>:
#endif

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
    16a8:	82 e6       	ldi	r24, 0x62	; 98
    16aa:	92 e0       	ldi	r25, 0x02	; 2
    16ac:	ca de       	rcall	.-620    	; 0x1442 <_ZN14HardwareSerial9availableEv>
    16ae:	21 e0       	ldi	r18, 0x01	; 1
    16b0:	89 2b       	or	r24, r25
    16b2:	09 f4       	brne	.+2      	; 0x16b6 <_Z17Serial0_availablev+0xe>
    16b4:	20 e0       	ldi	r18, 0x00	; 0
}
    16b6:	82 2f       	mov	r24, r18
    16b8:	08 95       	ret

000016ba <_GLOBAL__sub_I___vector_20>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
    16ba:	e2 e6       	ldi	r30, 0x62	; 98
    16bc:	f2 e0       	ldi	r31, 0x02	; 2
    16be:	13 82       	std	Z+3, r1	; 0x03
    16c0:	12 82       	std	Z+2, r1	; 0x02
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
    16c2:	88 ee       	ldi	r24, 0xE8	; 232
    16c4:	93 e0       	ldi	r25, 0x03	; 3
    16c6:	a0 e0       	ldi	r26, 0x00	; 0
    16c8:	b0 e0       	ldi	r27, 0x00	; 0
    16ca:	84 83       	std	Z+4, r24	; 0x04
    16cc:	95 83       	std	Z+5, r25	; 0x05
    16ce:	a6 83       	std	Z+6, r26	; 0x06
    16d0:	b7 83       	std	Z+7, r27	; 0x07
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
    16d2:	81 e5       	ldi	r24, 0x51	; 81
    16d4:	91 e0       	ldi	r25, 0x01	; 1
    16d6:	91 83       	std	Z+1, r25	; 0x01
    16d8:	80 83       	st	Z, r24
    16da:	85 ec       	ldi	r24, 0xC5	; 197
    16dc:	90 e0       	ldi	r25, 0x00	; 0
    16de:	95 87       	std	Z+13, r25	; 0x0d
    16e0:	84 87       	std	Z+12, r24	; 0x0c
    16e2:	84 ec       	ldi	r24, 0xC4	; 196
    16e4:	90 e0       	ldi	r25, 0x00	; 0
    16e6:	97 87       	std	Z+15, r25	; 0x0f
    16e8:	86 87       	std	Z+14, r24	; 0x0e
    16ea:	80 ec       	ldi	r24, 0xC0	; 192
    16ec:	90 e0       	ldi	r25, 0x00	; 0
    16ee:	91 8b       	std	Z+17, r25	; 0x11
    16f0:	80 8b       	std	Z+16, r24	; 0x10
    16f2:	81 ec       	ldi	r24, 0xC1	; 193
    16f4:	90 e0       	ldi	r25, 0x00	; 0
    16f6:	93 8b       	std	Z+19, r25	; 0x13
    16f8:	82 8b       	std	Z+18, r24	; 0x12
    16fa:	82 ec       	ldi	r24, 0xC2	; 194
    16fc:	90 e0       	ldi	r25, 0x00	; 0
    16fe:	95 8b       	std	Z+21, r25	; 0x15
    1700:	84 8b       	std	Z+20, r24	; 0x14
    1702:	86 ec       	ldi	r24, 0xC6	; 198
    1704:	90 e0       	ldi	r25, 0x00	; 0
    1706:	97 8b       	std	Z+23, r25	; 0x17
    1708:	86 8b       	std	Z+22, r24	; 0x16
    170a:	11 8e       	std	Z+25, r1	; 0x19
    170c:	12 8e       	std	Z+26, r1	; 0x1a
    170e:	13 8e       	std	Z+27, r1	; 0x1b
    1710:	14 8e       	std	Z+28, r1	; 0x1c
    1712:	08 95       	ret

00001714 <initVariant>:
    1714:	08 95       	ret

00001716 <main>:
void setupUSB() __attribute__((weak));
void setupUSB() { }

int main(void)
{
	init();
    1716:	30 d1       	rcall	.+608    	; 0x1978 <init>

	initVariant();
    1718:	fd df       	rcall	.-6      	; 0x1714 <initVariant>
    171a:	0e 94 6d 01 	call	0x2da	; 0x2da <setup>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
    171e:	cf e4       	ldi	r28, 0x4F	; 79
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
    1720:	da e0       	ldi	r29, 0x0A	; 10
    1722:	0e 94 ea 01 	call	0x3d4	; 0x3d4 <loop>
#endif
	
	setup();
    
	for (;;) {
		loop();
    1726:	20 97       	sbiw	r28, 0x00	; 0
		if (serialEventRun) serialEventRun();
    1728:	e1 f3       	breq	.-8      	; 0x1722 <main+0xc>
    172a:	b9 de       	rcall	.-654    	; 0x149e <_Z14serialEventRunv>
    172c:	fa cf       	rjmp	.-12     	; 0x1722 <main+0xc>

0000172e <_Znaj>:
void *operator new(size_t size) {
  return malloc(size);
}

void *operator new[](size_t size) {
  return malloc(size);
    172e:	26 c3       	rjmp	.+1612   	; 0x1d7c <malloc>

00001730 <_ZdlPv>:
    1730:	bd c3       	rjmp	.+1914   	; 0x1eac <free>

00001732 <_ZN5Print5writeEPKhj>:
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
    }
    virtual size_t write(const uint8_t *buffer, size_t size);
    size_t write(const char *buffer, size_t size) {
      return write((const uint8_t *)buffer, size);
    1732:	cf 92       	push	r12
    1734:	df 92       	push	r13
    1736:	ef 92       	push	r14
    1738:	ff 92       	push	r15
    173a:	0f 93       	push	r16
    173c:	1f 93       	push	r17
    173e:	cf 93       	push	r28
    1740:	df 93       	push	r29
    1742:	6c 01       	movw	r12, r24
    1744:	7a 01       	movw	r14, r20
    1746:	8b 01       	movw	r16, r22
    1748:	c0 e0       	ldi	r28, 0x00	; 0
    174a:	d0 e0       	ldi	r29, 0x00	; 0
    174c:	ce 15       	cp	r28, r14
    174e:	df 05       	cpc	r29, r15
    1750:	81 f0       	breq	.+32     	; 0x1772 <_ZN5Print5writeEPKhj+0x40>
    1752:	d8 01       	movw	r26, r16
    1754:	6d 91       	ld	r22, X+
    1756:	8d 01       	movw	r16, r26
    1758:	d6 01       	movw	r26, r12
    175a:	ed 91       	ld	r30, X+
    175c:	fc 91       	ld	r31, X
    175e:	01 90       	ld	r0, Z+
    1760:	f0 81       	ld	r31, Z
    1762:	e0 2d       	mov	r30, r0
    1764:	c6 01       	movw	r24, r12
    1766:	09 95       	icall
    1768:	89 2b       	or	r24, r25
    176a:	11 f0       	breq	.+4      	; 0x1770 <_ZN5Print5writeEPKhj+0x3e>
    176c:	21 96       	adiw	r28, 0x01	; 1
    176e:	ee cf       	rjmp	.-36     	; 0x174c <_ZN5Print5writeEPKhj+0x1a>
    1770:	7e 01       	movw	r14, r28
    1772:	c7 01       	movw	r24, r14
    1774:	df 91       	pop	r29
    1776:	cf 91       	pop	r28
    1778:	1f 91       	pop	r17
    177a:	0f 91       	pop	r16
    177c:	ff 90       	pop	r15
    177e:	ef 90       	pop	r14
    1780:	df 90       	pop	r13
    1782:	cf 90       	pop	r12
    1784:	08 95       	ret

00001786 <_ZN5Print5writeEPKc>:
    1786:	61 15       	cp	r22, r1
    1788:	71 05       	cpc	r23, r1
    178a:	79 f0       	breq	.+30     	; 0x17aa <_ZN5Print5writeEPKc+0x24>
    178c:	fb 01       	movw	r30, r22
    178e:	01 90       	ld	r0, Z+
    1790:	00 20       	and	r0, r0
    1792:	e9 f7       	brne	.-6      	; 0x178e <_ZN5Print5writeEPKc+0x8>
    1794:	31 97       	sbiw	r30, 0x01	; 1
    1796:	af 01       	movw	r20, r30
    1798:	46 1b       	sub	r20, r22
    179a:	57 0b       	sbc	r21, r23
    179c:	dc 01       	movw	r26, r24
    179e:	ed 91       	ld	r30, X+
    17a0:	fc 91       	ld	r31, X
    17a2:	02 80       	ldd	r0, Z+2	; 0x02
    17a4:	f3 81       	ldd	r31, Z+3	; 0x03
    17a6:	e0 2d       	mov	r30, r0
    17a8:	09 94       	ijmp
    17aa:	80 e0       	ldi	r24, 0x00	; 0
    17ac:	90 e0       	ldi	r25, 0x00	; 0
    17ae:	08 95       	ret

000017b0 <_ZN5Print5printEPK19__FlashStringHelper>:
    17b0:	ef 92       	push	r14
    17b2:	ff 92       	push	r15
    17b4:	0f 93       	push	r16
    17b6:	1f 93       	push	r17
    17b8:	cf 93       	push	r28
    17ba:	df 93       	push	r29
    17bc:	8c 01       	movw	r16, r24
    17be:	7b 01       	movw	r14, r22
    17c0:	c0 e0       	ldi	r28, 0x00	; 0
    17c2:	d0 e0       	ldi	r29, 0x00	; 0
    17c4:	f7 01       	movw	r30, r14
    17c6:	ec 0f       	add	r30, r28
    17c8:	fd 1f       	adc	r31, r29
    17ca:	64 91       	lpm	r22, Z
    17cc:	66 23       	and	r22, r22
    17ce:	61 f0       	breq	.+24     	; 0x17e8 <_ZN5Print5printEPK19__FlashStringHelper+0x38>
    17d0:	d8 01       	movw	r26, r16
    17d2:	ed 91       	ld	r30, X+
    17d4:	fc 91       	ld	r31, X
    17d6:	01 90       	ld	r0, Z+
    17d8:	f0 81       	ld	r31, Z
    17da:	e0 2d       	mov	r30, r0
    17dc:	c8 01       	movw	r24, r16
    17de:	09 95       	icall
    17e0:	89 2b       	or	r24, r25
    17e2:	11 f0       	breq	.+4      	; 0x17e8 <_ZN5Print5printEPK19__FlashStringHelper+0x38>
    17e4:	21 96       	adiw	r28, 0x01	; 1
    17e6:	ee cf       	rjmp	.-36     	; 0x17c4 <_ZN5Print5printEPK19__FlashStringHelper+0x14>
    17e8:	ce 01       	movw	r24, r28
    17ea:	df 91       	pop	r29
    17ec:	cf 91       	pop	r28
    17ee:	1f 91       	pop	r17
    17f0:	0f 91       	pop	r16
    17f2:	ff 90       	pop	r15
    17f4:	ef 90       	pop	r14
    17f6:	08 95       	ret

000017f8 <_ZN5Print5printEPKc>:
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
  return write(str);
    17f8:	c6 cf       	rjmp	.-116    	; 0x1786 <_ZN5Print5writeEPKc>

000017fa <__vector_18>:
#if defined(__AVR_ATtiny24__) || defined(__AVR_ATtiny44__) || defined(__AVR_ATtiny84__)
ISR(TIM0_OVF_vect)
#else
ISR(TIMER0_OVF_vect)
#endif
{
    17fa:	1f 92       	push	r1
    17fc:	0f 92       	push	r0
    17fe:	0f b6       	in	r0, 0x3f	; 63
    1800:	0f 92       	push	r0
    1802:	11 24       	eor	r1, r1
    1804:	2f 93       	push	r18
    1806:	3f 93       	push	r19
    1808:	8f 93       	push	r24
    180a:	9f 93       	push	r25
    180c:	af 93       	push	r26
    180e:	bf 93       	push	r27
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
    1810:	80 91 00 03 	lds	r24, 0x0300	; 0x800300 <timer0_millis>
    1814:	90 91 01 03 	lds	r25, 0x0301	; 0x800301 <timer0_millis+0x1>
    1818:	a0 91 02 03 	lds	r26, 0x0302	; 0x800302 <timer0_millis+0x2>
    181c:	b0 91 03 03 	lds	r27, 0x0303	; 0x800303 <timer0_millis+0x3>
	unsigned char f = timer0_fract;
    1820:	30 91 ff 02 	lds	r19, 0x02FF	; 0x8002ff <timer0_fract>

	m += MILLIS_INC;
	f += FRACT_INC;
    1824:	23 e0       	ldi	r18, 0x03	; 3
    1826:	23 0f       	add	r18, r19
	if (f >= FRACT_MAX) {
    1828:	2d 37       	cpi	r18, 0x7D	; 125
    182a:	20 f4       	brcc	.+8      	; 0x1834 <__vector_18+0x3a>
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
	unsigned char f = timer0_fract;

	m += MILLIS_INC;
    182c:	01 96       	adiw	r24, 0x01	; 1
    182e:	a1 1d       	adc	r26, r1
    1830:	b1 1d       	adc	r27, r1
    1832:	05 c0       	rjmp	.+10     	; 0x183e <__vector_18+0x44>
	f += FRACT_INC;
	if (f >= FRACT_MAX) {
		f -= FRACT_MAX;
    1834:	26 e8       	ldi	r18, 0x86	; 134
    1836:	23 0f       	add	r18, r19
		m += 1;
    1838:	02 96       	adiw	r24, 0x02	; 2
    183a:	a1 1d       	adc	r26, r1
    183c:	b1 1d       	adc	r27, r1
	}

	timer0_fract = f;
    183e:	20 93 ff 02 	sts	0x02FF, r18	; 0x8002ff <timer0_fract>
	timer0_millis = m;
    1842:	80 93 00 03 	sts	0x0300, r24	; 0x800300 <timer0_millis>
    1846:	90 93 01 03 	sts	0x0301, r25	; 0x800301 <timer0_millis+0x1>
    184a:	a0 93 02 03 	sts	0x0302, r26	; 0x800302 <timer0_millis+0x2>
    184e:	b0 93 03 03 	sts	0x0303, r27	; 0x800303 <timer0_millis+0x3>
	timer0_overflow_count++;
    1852:	80 91 04 03 	lds	r24, 0x0304	; 0x800304 <timer0_overflow_count>
    1856:	90 91 05 03 	lds	r25, 0x0305	; 0x800305 <timer0_overflow_count+0x1>
    185a:	a0 91 06 03 	lds	r26, 0x0306	; 0x800306 <timer0_overflow_count+0x2>
    185e:	b0 91 07 03 	lds	r27, 0x0307	; 0x800307 <timer0_overflow_count+0x3>
    1862:	01 96       	adiw	r24, 0x01	; 1
    1864:	a1 1d       	adc	r26, r1
    1866:	b1 1d       	adc	r27, r1
    1868:	80 93 04 03 	sts	0x0304, r24	; 0x800304 <timer0_overflow_count>
    186c:	90 93 05 03 	sts	0x0305, r25	; 0x800305 <timer0_overflow_count+0x1>
    1870:	a0 93 06 03 	sts	0x0306, r26	; 0x800306 <timer0_overflow_count+0x2>
    1874:	b0 93 07 03 	sts	0x0307, r27	; 0x800307 <timer0_overflow_count+0x3>
}
    1878:	bf 91       	pop	r27
    187a:	af 91       	pop	r26
    187c:	9f 91       	pop	r25
    187e:	8f 91       	pop	r24
    1880:	3f 91       	pop	r19
    1882:	2f 91       	pop	r18
    1884:	0f 90       	pop	r0
    1886:	0f be       	out	0x3f, r0	; 63
    1888:	0f 90       	pop	r0
    188a:	1f 90       	pop	r1
    188c:	18 95       	reti

0000188e <millis>:

unsigned long millis()
{
	unsigned long m;
	uint8_t oldSREG = SREG;
    188e:	2f b7       	in	r18, 0x3f	; 63

	// disable interrupts while we read timer0_millis or we might get an
	// inconsistent value (e.g. in the middle of a write to timer0_millis)
	cli();
    1890:	f8 94       	cli
	m = timer0_millis;
    1892:	60 91 00 03 	lds	r22, 0x0300	; 0x800300 <timer0_millis>
    1896:	70 91 01 03 	lds	r23, 0x0301	; 0x800301 <timer0_millis+0x1>
    189a:	80 91 02 03 	lds	r24, 0x0302	; 0x800302 <timer0_millis+0x2>
    189e:	90 91 03 03 	lds	r25, 0x0303	; 0x800303 <timer0_millis+0x3>
	SREG = oldSREG;
    18a2:	2f bf       	out	0x3f, r18	; 63

	return m;
}
    18a4:	08 95       	ret

000018a6 <micros>:

unsigned long micros() {
	unsigned long m;
	uint8_t oldSREG = SREG, t;
    18a6:	3f b7       	in	r19, 0x3f	; 63
	
	cli();
    18a8:	f8 94       	cli
	m = timer0_overflow_count;
    18aa:	80 91 04 03 	lds	r24, 0x0304	; 0x800304 <timer0_overflow_count>
    18ae:	90 91 05 03 	lds	r25, 0x0305	; 0x800305 <timer0_overflow_count+0x1>
    18b2:	a0 91 06 03 	lds	r26, 0x0306	; 0x800306 <timer0_overflow_count+0x2>
    18b6:	b0 91 07 03 	lds	r27, 0x0307	; 0x800307 <timer0_overflow_count+0x3>
#if defined(TCNT0)
	t = TCNT0;
    18ba:	26 b5       	in	r18, 0x26	; 38
#else
	#error TIMER 0 not defined
#endif

#ifdef TIFR0
	if ((TIFR0 & _BV(TOV0)) && (t < 255))
    18bc:	a8 9b       	sbis	0x15, 0	; 21
    18be:	05 c0       	rjmp	.+10     	; 0x18ca <micros+0x24>
    18c0:	2f 3f       	cpi	r18, 0xFF	; 255
    18c2:	19 f0       	breq	.+6      	; 0x18ca <micros+0x24>
		m++;
    18c4:	01 96       	adiw	r24, 0x01	; 1
    18c6:	a1 1d       	adc	r26, r1
    18c8:	b1 1d       	adc	r27, r1
#else
	if ((TIFR & _BV(TOV0)) && (t < 255))
		m++;
#endif

	SREG = oldSREG;
    18ca:	3f bf       	out	0x3f, r19	; 63
	
	return ((m << 8) + t) * (64 / clockCyclesPerMicrosecond());
    18cc:	ba 2f       	mov	r27, r26
    18ce:	a9 2f       	mov	r26, r25
    18d0:	98 2f       	mov	r25, r24
    18d2:	88 27       	eor	r24, r24
    18d4:	82 0f       	add	r24, r18
    18d6:	91 1d       	adc	r25, r1
    18d8:	a1 1d       	adc	r26, r1
    18da:	b1 1d       	adc	r27, r1
    18dc:	bc 01       	movw	r22, r24
    18de:	cd 01       	movw	r24, r26
    18e0:	42 e0       	ldi	r20, 0x02	; 2
    18e2:	66 0f       	add	r22, r22
    18e4:	77 1f       	adc	r23, r23
    18e6:	88 1f       	adc	r24, r24
    18e8:	99 1f       	adc	r25, r25
    18ea:	4a 95       	dec	r20
    18ec:	d1 f7       	brne	.-12     	; 0x18e2 <micros+0x3c>
}
    18ee:	08 95       	ret

000018f0 <delay>:

void delay(unsigned long ms)
{
    18f0:	8f 92       	push	r8
    18f2:	9f 92       	push	r9
    18f4:	af 92       	push	r10
    18f6:	bf 92       	push	r11
    18f8:	cf 92       	push	r12
    18fa:	df 92       	push	r13
    18fc:	ef 92       	push	r14
    18fe:	ff 92       	push	r15
    1900:	6b 01       	movw	r12, r22
    1902:	7c 01       	movw	r14, r24
	uint32_t start = micros();
    1904:	d0 df       	rcall	.-96     	; 0x18a6 <micros>
    1906:	4b 01       	movw	r8, r22
    1908:	5c 01       	movw	r10, r24

	while (ms > 0) {
    190a:	c1 14       	cp	r12, r1
    190c:	d1 04       	cpc	r13, r1
    190e:	e1 04       	cpc	r14, r1
    1910:	f1 04       	cpc	r15, r1
		yield();
    1912:	f1 f0       	breq	.+60     	; 0x1950 <delay+0x60>
		while ( ms > 0 && (micros() - start) >= 1000) {
    1914:	02 d2       	rcall	.+1028   	; 0x1d1a <yield>
    1916:	c7 df       	rcall	.-114    	; 0x18a6 <micros>
    1918:	dc 01       	movw	r26, r24
    191a:	cb 01       	movw	r24, r22
    191c:	88 19       	sub	r24, r8
    191e:	99 09       	sbc	r25, r9
    1920:	aa 09       	sbc	r26, r10
    1922:	bb 09       	sbc	r27, r11
    1924:	88 3e       	cpi	r24, 0xE8	; 232
    1926:	93 40       	sbci	r25, 0x03	; 3
    1928:	a1 05       	cpc	r26, r1
    192a:	b1 05       	cpc	r27, r1
    192c:	70 f3       	brcs	.-36     	; 0x190a <delay+0x1a>
			ms--;
    192e:	21 e0       	ldi	r18, 0x01	; 1
    1930:	c2 1a       	sub	r12, r18
    1932:	d1 08       	sbc	r13, r1
    1934:	e1 08       	sbc	r14, r1
    1936:	f1 08       	sbc	r15, r1
			start += 1000;
    1938:	88 ee       	ldi	r24, 0xE8	; 232
    193a:	88 0e       	add	r8, r24
    193c:	83 e0       	ldi	r24, 0x03	; 3
    193e:	98 1e       	adc	r9, r24
    1940:	a1 1c       	adc	r10, r1
    1942:	b1 1c       	adc	r11, r1
{
	uint32_t start = micros();

	while (ms > 0) {
		yield();
		while ( ms > 0 && (micros() - start) >= 1000) {
    1944:	c1 14       	cp	r12, r1
    1946:	d1 04       	cpc	r13, r1
    1948:	e1 04       	cpc	r14, r1
    194a:	f1 04       	cpc	r15, r1
    194c:	21 f7       	brne	.-56     	; 0x1916 <delay+0x26>
    194e:	dd cf       	rjmp	.-70     	; 0x190a <delay+0x1a>
			ms--;
			start += 1000;
		}
	}
}
    1950:	ff 90       	pop	r15
    1952:	ef 90       	pop	r14
    1954:	df 90       	pop	r13
    1956:	cf 90       	pop	r12
    1958:	bf 90       	pop	r11
    195a:	af 90       	pop	r10
    195c:	9f 90       	pop	r9
    195e:	8f 90       	pop	r8
    1960:	08 95       	ret

00001962 <delayMicroseconds>:
#elif F_CPU >= 16000000L
	// for the 16 MHz clock on most Arduino boards

	// for a one-microsecond delay, simply return.  the overhead
	// of the function call takes 14 (16) cycles, which is 1us
	if (us <= 1) return; //  = 3 cycles, (4 when true)
    1962:	82 30       	cpi	r24, 0x02	; 2
    1964:	91 05       	cpc	r25, r1
    1966:	38 f0       	brcs	.+14     	; 0x1976 <delayMicroseconds+0x14>

	// the following loop takes 1/4 of a microsecond (4 cycles)
	// per iteration, so execute it four times for each microsecond of
	// delay requested.
	us <<= 2; // x4 us, = 4 cycles
    1968:	88 0f       	add	r24, r24
    196a:	99 1f       	adc	r25, r25
    196c:	88 0f       	add	r24, r24
    196e:	99 1f       	adc	r25, r25

	// account for the time taken in the preceeding commands.
	// we just burned 19 (21) cycles above, remove 5, (5*4=20)
	// us is at least 8 so we can substract 5
	us -= 5; // = 2 cycles,
    1970:	05 97       	sbiw	r24, 0x05	; 5
	

#endif

	// busy wait
	__asm__ __volatile__ (
    1972:	01 97       	sbiw	r24, 0x01	; 1
    1974:	f1 f7       	brne	.-4      	; 0x1972 <delayMicroseconds+0x10>
    1976:	08 95       	ret

00001978 <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
    1978:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
    197a:	84 b5       	in	r24, 0x24	; 36
    197c:	82 60       	ori	r24, 0x02	; 2
    197e:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
    1980:	84 b5       	in	r24, 0x24	; 36
    1982:	81 60       	ori	r24, 0x01	; 1
    1984:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
    1986:	85 b5       	in	r24, 0x25	; 37
    1988:	82 60       	ori	r24, 0x02	; 2
    198a:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
    198c:	85 b5       	in	r24, 0x25	; 37
    198e:	81 60       	ori	r24, 0x01	; 1
    1990:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
    1992:	ee e6       	ldi	r30, 0x6E	; 110
    1994:	f0 e0       	ldi	r31, 0x00	; 0
    1996:	80 81       	ld	r24, Z
    1998:	81 60       	ori	r24, 0x01	; 1
    199a:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
    199c:	e1 e8       	ldi	r30, 0x81	; 129
    199e:	f0 e0       	ldi	r31, 0x00	; 0
    19a0:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
    19a2:	80 81       	ld	r24, Z
    19a4:	82 60       	ori	r24, 0x02	; 2
    19a6:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
    19a8:	80 81       	ld	r24, Z
    19aa:	81 60       	ori	r24, 0x01	; 1
    19ac:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
    19ae:	e0 e8       	ldi	r30, 0x80	; 128
    19b0:	f0 e0       	ldi	r31, 0x00	; 0
    19b2:	80 81       	ld	r24, Z
    19b4:	81 60       	ori	r24, 0x01	; 1
    19b6:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
    19b8:	e1 eb       	ldi	r30, 0xB1	; 177
    19ba:	f0 e0       	ldi	r31, 0x00	; 0
    19bc:	80 81       	ld	r24, Z
    19be:	84 60       	ori	r24, 0x04	; 4
    19c0:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
    19c2:	e0 eb       	ldi	r30, 0xB0	; 176
    19c4:	f0 e0       	ldi	r31, 0x00	; 0
    19c6:	80 81       	ld	r24, Z
    19c8:	81 60       	ori	r24, 0x01	; 1
    19ca:	80 83       	st	Z, r24
//#else
	// Timer 2 not finished (may not be present on this CPU)
#endif

#if defined(TCCR3B) && defined(CS31) && defined(WGM30)
	sbi(TCCR3B, CS31);		// set timer 3 prescale factor to 64
    19cc:	e1 e9       	ldi	r30, 0x91	; 145
    19ce:	f0 e0       	ldi	r31, 0x00	; 0
    19d0:	80 81       	ld	r24, Z
    19d2:	82 60       	ori	r24, 0x02	; 2
    19d4:	80 83       	st	Z, r24
	sbi(TCCR3B, CS30);
    19d6:	80 81       	ld	r24, Z
    19d8:	81 60       	ori	r24, 0x01	; 1
    19da:	80 83       	st	Z, r24
	sbi(TCCR3A, WGM30);		// put timer 3 in 8-bit phase correct pwm mode
    19dc:	e0 e9       	ldi	r30, 0x90	; 144
    19de:	f0 e0       	ldi	r31, 0x00	; 0
    19e0:	80 81       	ld	r24, Z
    19e2:	81 60       	ori	r24, 0x01	; 1
    19e4:	80 83       	st	Z, r24
#endif

#if defined(ADCSRA)
	// set a2d prescaler so we are inside the desired 50-200 KHz range.
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
    19e6:	ea e7       	ldi	r30, 0x7A	; 122
    19e8:	f0 e0       	ldi	r31, 0x00	; 0
    19ea:	80 81       	ld	r24, Z
    19ec:	84 60       	ori	r24, 0x04	; 4
    19ee:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS1);
    19f0:	80 81       	ld	r24, Z
    19f2:	82 60       	ori	r24, 0x02	; 2
    19f4:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS0);
    19f6:	80 81       	ld	r24, Z
    19f8:	81 60       	ori	r24, 0x01	; 1
    19fa:	80 83       	st	Z, r24
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
    19fc:	80 81       	ld	r24, Z
    19fe:	80 68       	ori	r24, 0x80	; 128
    1a00:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
    1a02:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
    1a06:	08 95       	ret

00001a08 <analogRead>:

#if defined(analogPinToChannel)
#if defined(__AVR_ATmega32U4__)
	if (pin >= 18) pin -= 18; // allow for channel or pin numbers
#endif
	pin = analogPinToChannel(pin);
    1a08:	88 30       	cpi	r24, 0x08	; 8
    1a0a:	38 f0       	brcs	.+14     	; 0x1a1a <analogRead+0x12>
    1a0c:	88 31       	cpi	r24, 0x18	; 24
    1a0e:	20 f0       	brcs	.+8      	; 0x1a18 <analogRead+0x10>
    1a10:	9f e1       	ldi	r25, 0x1F	; 31
    1a12:	98 1b       	sub	r25, r24
    1a14:	89 2f       	mov	r24, r25
    1a16:	01 c0       	rjmp	.+2      	; 0x1a1a <analogRead+0x12>
    1a18:	8f ef       	ldi	r24, 0xFF	; 255
	// to 0 (the default).
#if defined(ADMUX)
#if defined(__AVR_ATtiny25__) || defined(__AVR_ATtiny45__) || defined(__AVR_ATtiny85__)
	ADMUX = (analog_reference << 4) | (pin & 0x07);
#else
	ADMUX = (analog_reference << 6) | (pin & 0x07);
    1a1a:	20 91 13 01 	lds	r18, 0x0113	; 0x800113 <analog_reference>
    1a1e:	90 e4       	ldi	r25, 0x40	; 64
    1a20:	29 9f       	mul	r18, r25
    1a22:	90 01       	movw	r18, r0
    1a24:	11 24       	eor	r1, r1
    1a26:	87 70       	andi	r24, 0x07	; 7
    1a28:	82 2b       	or	r24, r18
    1a2a:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
	// without a delay, we seem to read from the wrong channel
	//delay(1);

#if defined(ADCSRA) && defined(ADCL)
	// start the conversion
	sbi(ADCSRA, ADSC);
    1a2e:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    1a32:	80 64       	ori	r24, 0x40	; 64
    1a34:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>

	// ADSC is cleared when the conversion finishes
	while (bit_is_set(ADCSRA, ADSC));
    1a38:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    1a3c:	86 fd       	sbrc	r24, 6
    1a3e:	fc cf       	rjmp	.-8      	; 0x1a38 <analogRead+0x30>

	// we have to read ADCL first; doing so locks both ADCL
	// and ADCH until ADCH is read.  reading ADCL second would
	// cause the results of each conversion to be discarded,
	// as ADCL and ADCH would be locked when it completed.
	low  = ADCL;
    1a40:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
	high = ADCH;
    1a44:	20 91 79 00 	lds	r18, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
	low  = 0;
	high = 0;
#endif

	// combine the two bytes
	return (high << 8) | low;
    1a48:	90 e0       	ldi	r25, 0x00	; 0
}
    1a4a:	92 2b       	or	r25, r18
    1a4c:	08 95       	ret

00001a4e <analogWrite>:
// Right now, PWM output only works on the pins with
// hardware support.  These are defined in the appropriate
// pins_*.c file.  For the rest of the pins, we default
// to digital output.
void analogWrite(uint8_t pin, int val)
{
    1a4e:	1f 93       	push	r17
    1a50:	cf 93       	push	r28
    1a52:	df 93       	push	r29
    1a54:	18 2f       	mov	r17, r24
    1a56:	eb 01       	movw	r28, r22
	// We need to make sure the PWM output is enabled for those pins
	// that support it, as we turn it off when digitally reading or
	// writing with them.  Also, make sure the pin is in output mode
	// for consistenty with Wiring, which doesn't require a pinMode
	// call for the analog output pins.
	pinMode(pin, OUTPUT);
    1a58:	61 e0       	ldi	r22, 0x01	; 1
    1a5a:	96 d0       	rcall	.+300    	; 0x1b88 <pinMode>
	if (val == 0)
    1a5c:	20 97       	sbiw	r28, 0x00	; 0
    1a5e:	11 f4       	brne	.+4      	; 0x1a64 <analogWrite+0x16>
	{
		digitalWrite(pin, LOW);
    1a60:	60 e0       	ldi	r22, 0x00	; 0
    1a62:	04 c0       	rjmp	.+8      	; 0x1a6c <analogWrite+0x1e>
	}
	else if (val == 255)
    1a64:	cf 3f       	cpi	r28, 0xFF	; 255
    1a66:	d1 05       	cpc	r29, r1
    1a68:	31 f4       	brne	.+12     	; 0x1a76 <analogWrite+0x28>
	{
		digitalWrite(pin, HIGH);
    1a6a:	61 e0       	ldi	r22, 0x01	; 1
    1a6c:	81 2f       	mov	r24, r17
				} else {
					digitalWrite(pin, HIGH);
				}
		}
	}
}
    1a6e:	df 91       	pop	r29
    1a70:	cf 91       	pop	r28
	{
		digitalWrite(pin, LOW);
	}
	else if (val == 255)
	{
		digitalWrite(pin, HIGH);
    1a72:	1f 91       	pop	r17
    1a74:	c5 c0       	rjmp	.+394    	; 0x1c00 <digitalWrite>
	}
	else
	{
		switch(digitalPinToTimer(pin))
    1a76:	e1 2f       	mov	r30, r17
    1a78:	f0 e0       	ldi	r31, 0x00	; 0
    1a7a:	e1 52       	subi	r30, 0x21	; 33
    1a7c:	ff 4f       	sbci	r31, 0xFF	; 255
    1a7e:	e4 91       	lpm	r30, Z
    1a80:	8e 2f       	mov	r24, r30
    1a82:	90 e0       	ldi	r25, 0x00	; 0
    1a84:	fc 01       	movw	r30, r24
    1a86:	31 97       	sbiw	r30, 0x01	; 1
    1a88:	ea 30       	cpi	r30, 0x0A	; 10
    1a8a:	f1 05       	cpc	r31, r1
    1a8c:	08 f0       	brcs	.+2      	; 0x1a90 <analogWrite+0x42>
    1a8e:	45 c0       	rjmp	.+138    	; 0x1b1a <analogWrite+0xcc>
    1a90:	ea 5b       	subi	r30, 0xBA	; 186
    1a92:	ff 4f       	sbci	r31, 0xFF	; 255
    1a94:	6a c1       	rjmp	.+724    	; 0x1d6a <__tablejump2__>
			#endif

			#if defined(TCCR0A) && defined(COM0A1)
			case TIMER0A:
				// connect pwm to pin on timer 0, channel A
				sbi(TCCR0A, COM0A1);
    1a96:	84 b5       	in	r24, 0x24	; 36
    1a98:	80 68       	ori	r24, 0x80	; 128
    1a9a:	84 bd       	out	0x24, r24	; 36
				OCR0A = val; // set pwm duty
    1a9c:	c7 bd       	out	0x27, r28	; 39
				break;
    1a9e:	42 c0       	rjmp	.+132    	; 0x1b24 <analogWrite+0xd6>
			#endif

			#if defined(TCCR0A) && defined(COM0B1)
			case TIMER0B:
				// connect pwm to pin on timer 0, channel B
				sbi(TCCR0A, COM0B1);
    1aa0:	84 b5       	in	r24, 0x24	; 36
    1aa2:	80 62       	ori	r24, 0x20	; 32
    1aa4:	84 bd       	out	0x24, r24	; 36
				OCR0B = val; // set pwm duty
    1aa6:	c8 bd       	out	0x28, r28	; 40
				break;
    1aa8:	3d c0       	rjmp	.+122    	; 0x1b24 <analogWrite+0xd6>
			#endif

			#if defined(TCCR1A) && defined(COM1A1)
			case TIMER1A:
				// connect pwm to pin on timer 1, channel A
				sbi(TCCR1A, COM1A1);
    1aaa:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    1aae:	80 68       	ori	r24, 0x80	; 128
    1ab0:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
				OCR1A = val; // set pwm duty
    1ab4:	d0 93 89 00 	sts	0x0089, r29	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
    1ab8:	c0 93 88 00 	sts	0x0088, r28	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
				break;
    1abc:	33 c0       	rjmp	.+102    	; 0x1b24 <analogWrite+0xd6>
			#endif

			#if defined(TCCR1A) && defined(COM1B1)
			case TIMER1B:
				// connect pwm to pin on timer 1, channel B
				sbi(TCCR1A, COM1B1);
    1abe:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    1ac2:	80 62       	ori	r24, 0x20	; 32
    1ac4:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
				OCR1B = val; // set pwm duty
    1ac8:	d0 93 8b 00 	sts	0x008B, r29	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
    1acc:	c0 93 8a 00 	sts	0x008A, r28	; 0x80008a <__TEXT_REGION_LENGTH__+0x7e008a>
				break;
    1ad0:	29 c0       	rjmp	.+82     	; 0x1b24 <analogWrite+0xd6>
			#endif

			#if defined(TCCR2A) && defined(COM2A1)
			case TIMER2A:
				// connect pwm to pin on timer 2, channel A
				sbi(TCCR2A, COM2A1);
    1ad2:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    1ad6:	80 68       	ori	r24, 0x80	; 128
    1ad8:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
				OCR2A = val; // set pwm duty
    1adc:	c0 93 b3 00 	sts	0x00B3, r28	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
				break;
    1ae0:	21 c0       	rjmp	.+66     	; 0x1b24 <analogWrite+0xd6>
			#endif

			#if defined(TCCR2A) && defined(COM2B1)
			case TIMER2B:
				// connect pwm to pin on timer 2, channel B
				sbi(TCCR2A, COM2B1);
    1ae2:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    1ae6:	80 62       	ori	r24, 0x20	; 32
    1ae8:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
				OCR2B = val; // set pwm duty
    1aec:	c0 93 b4 00 	sts	0x00B4, r28	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7e00b4>
				break;
    1af0:	19 c0       	rjmp	.+50     	; 0x1b24 <analogWrite+0xd6>
			#endif

			#if defined(TCCR3A) && defined(COM3A1)
			case TIMER3A:
				// connect pwm to pin on timer 3, channel A
				sbi(TCCR3A, COM3A1);
    1af2:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
    1af6:	80 68       	ori	r24, 0x80	; 128
    1af8:	80 93 90 00 	sts	0x0090, r24	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
				OCR3A = val; // set pwm duty
    1afc:	d0 93 99 00 	sts	0x0099, r29	; 0x800099 <__TEXT_REGION_LENGTH__+0x7e0099>
    1b00:	c0 93 98 00 	sts	0x0098, r28	; 0x800098 <__TEXT_REGION_LENGTH__+0x7e0098>
				break;
    1b04:	0f c0       	rjmp	.+30     	; 0x1b24 <analogWrite+0xd6>
			#endif

			#if defined(TCCR3A) && defined(COM3B1)
			case TIMER3B:
				// connect pwm to pin on timer 3, channel B
				sbi(TCCR3A, COM3B1);
    1b06:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
    1b0a:	80 62       	ori	r24, 0x20	; 32
    1b0c:	80 93 90 00 	sts	0x0090, r24	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
				OCR3B = val; // set pwm duty
    1b10:	d0 93 9b 00 	sts	0x009B, r29	; 0x80009b <__TEXT_REGION_LENGTH__+0x7e009b>
    1b14:	c0 93 9a 00 	sts	0x009A, r28	; 0x80009a <__TEXT_REGION_LENGTH__+0x7e009a>
				break;
    1b18:	05 c0       	rjmp	.+10     	; 0x1b24 <analogWrite+0xd6>
				break;
			#endif

			case NOT_ON_TIMER:
			default:
				if (val < 128) {
    1b1a:	c0 38       	cpi	r28, 0x80	; 128
    1b1c:	d1 05       	cpc	r29, r1
    1b1e:	0c f0       	brlt	.+2      	; 0x1b22 <analogWrite+0xd4>
    1b20:	a4 cf       	rjmp	.-184    	; 0x1a6a <analogWrite+0x1c>
    1b22:	9e cf       	rjmp	.-196    	; 0x1a60 <analogWrite+0x12>
				} else {
					digitalWrite(pin, HIGH);
				}
		}
	}
}
    1b24:	df 91       	pop	r29
    1b26:	cf 91       	pop	r28
    1b28:	1f 91       	pop	r17
    1b2a:	08 95       	ret

00001b2c <turnOffPWM>:
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
    1b2c:	90 e0       	ldi	r25, 0x00	; 0
    1b2e:	fc 01       	movw	r30, r24
    1b30:	31 97       	sbiw	r30, 0x01	; 1
    1b32:	ea 30       	cpi	r30, 0x0A	; 10
    1b34:	f1 05       	cpc	r31, r1
    1b36:	38 f5       	brcc	.+78     	; 0x1b86 <turnOffPWM+0x5a>
    1b38:	e0 5b       	subi	r30, 0xB0	; 176
    1b3a:	ff 4f       	sbci	r31, 0xFF	; 255
    1b3c:	16 c1       	rjmp	.+556    	; 0x1d6a <__tablejump2__>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
    1b3e:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    1b42:	8f 77       	andi	r24, 0x7F	; 127
    1b44:	03 c0       	rjmp	.+6      	; 0x1b4c <turnOffPWM+0x20>
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    1b46:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    1b4a:	8f 7d       	andi	r24, 0xDF	; 223
    1b4c:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    1b50:	08 95       	ret
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
    1b52:	84 b5       	in	r24, 0x24	; 36
    1b54:	8f 77       	andi	r24, 0x7F	; 127
    1b56:	02 c0       	rjmp	.+4      	; 0x1b5c <turnOffPWM+0x30>
		#endif
		
		#if defined(TCCR0A) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
    1b58:	84 b5       	in	r24, 0x24	; 36
    1b5a:	8f 7d       	andi	r24, 0xDF	; 223
    1b5c:	84 bd       	out	0x24, r24	; 36
    1b5e:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
    1b60:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    1b64:	8f 77       	andi	r24, 0x7F	; 127
    1b66:	03 c0       	rjmp	.+6      	; 0x1b6e <turnOffPWM+0x42>
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
    1b68:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    1b6c:	8f 7d       	andi	r24, 0xDF	; 223
    1b6e:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    1b72:	08 95       	ret
		#endif
		
		#if defined(TCCR3A) && defined(COM3A1)
		case  TIMER3A:  cbi(TCCR3A, COM3A1);    break;
    1b74:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
    1b78:	8f 77       	andi	r24, 0x7F	; 127
    1b7a:	03 c0       	rjmp	.+6      	; 0x1b82 <turnOffPWM+0x56>
		#endif
		#if defined(TCCR3A) && defined(COM3B1)
		case  TIMER3B:  cbi(TCCR3A, COM3B1);    break;
    1b7c:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
    1b80:	8f 7d       	andi	r24, 0xDF	; 223
    1b82:	80 93 90 00 	sts	0x0090, r24	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
    1b86:	08 95       	ret

00001b88 <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
    1b88:	cf 93       	push	r28
    1b8a:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
    1b8c:	90 e0       	ldi	r25, 0x00	; 0
    1b8e:	fc 01       	movw	r30, r24
    1b90:	e1 50       	subi	r30, 0x01	; 1
    1b92:	ff 4f       	sbci	r31, 0xFF	; 255
    1b94:	24 91       	lpm	r18, Z
	uint8_t port = digitalPinToPort(pin);
    1b96:	fc 01       	movw	r30, r24
    1b98:	e1 5e       	subi	r30, 0xE1	; 225
    1b9a:	fe 4f       	sbci	r31, 0xFE	; 254
    1b9c:	84 91       	lpm	r24, Z
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
    1b9e:	88 23       	and	r24, r24
    1ba0:	61 f1       	breq	.+88     	; 0x1bfa <pinMode+0x72>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
    1ba2:	90 e0       	ldi	r25, 0x00	; 0
    1ba4:	88 0f       	add	r24, r24
    1ba6:	99 1f       	adc	r25, r25
    1ba8:	fc 01       	movw	r30, r24
    1baa:	ed 5a       	subi	r30, 0xAD	; 173
    1bac:	fe 4f       	sbci	r31, 0xFE	; 254
    1bae:	c5 91       	lpm	r28, Z+
    1bb0:	d4 91       	lpm	r29, Z
	out = portOutputRegister(port);
    1bb2:	fc 01       	movw	r30, r24
    1bb4:	e7 5b       	subi	r30, 0xB7	; 183
    1bb6:	fe 4f       	sbci	r31, 0xFE	; 254
    1bb8:	a5 91       	lpm	r26, Z+
    1bba:	b4 91       	lpm	r27, Z

	if (mode == INPUT) { 
    1bbc:	61 11       	cpse	r22, r1
    1bbe:	09 c0       	rjmp	.+18     	; 0x1bd2 <pinMode+0x4a>
		uint8_t oldSREG = SREG;
    1bc0:	9f b7       	in	r25, 0x3f	; 63
                cli();
    1bc2:	f8 94       	cli
		*reg &= ~bit;
    1bc4:	88 81       	ld	r24, Y
    1bc6:	20 95       	com	r18
    1bc8:	82 23       	and	r24, r18
    1bca:	88 83       	st	Y, r24
		*out &= ~bit;
    1bcc:	ec 91       	ld	r30, X
    1bce:	2e 23       	and	r18, r30
    1bd0:	0b c0       	rjmp	.+22     	; 0x1be8 <pinMode+0x60>
		SREG = oldSREG;
	} else if (mode == INPUT_PULLUP) {
    1bd2:	62 30       	cpi	r22, 0x02	; 2
    1bd4:	61 f4       	brne	.+24     	; 0x1bee <pinMode+0x66>
		uint8_t oldSREG = SREG;
    1bd6:	9f b7       	in	r25, 0x3f	; 63
                cli();
    1bd8:	f8 94       	cli
		*reg &= ~bit;
    1bda:	88 81       	ld	r24, Y
    1bdc:	32 2f       	mov	r19, r18
    1bde:	30 95       	com	r19
    1be0:	83 23       	and	r24, r19
    1be2:	88 83       	st	Y, r24
		*out |= bit;
    1be4:	ec 91       	ld	r30, X
    1be6:	2e 2b       	or	r18, r30
    1be8:	2c 93       	st	X, r18
		SREG = oldSREG;
    1bea:	9f bf       	out	0x3f, r25	; 63
    1bec:	06 c0       	rjmp	.+12     	; 0x1bfa <pinMode+0x72>
	} else {
		uint8_t oldSREG = SREG;
    1bee:	8f b7       	in	r24, 0x3f	; 63
                cli();
    1bf0:	f8 94       	cli
		*reg |= bit;
    1bf2:	e8 81       	ld	r30, Y
    1bf4:	2e 2b       	or	r18, r30
    1bf6:	28 83       	st	Y, r18
		SREG = oldSREG;
    1bf8:	8f bf       	out	0x3f, r24	; 63
	}
}
    1bfa:	df 91       	pop	r29
    1bfc:	cf 91       	pop	r28
    1bfe:	08 95       	ret

00001c00 <digitalWrite>:
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
    1c00:	1f 93       	push	r17
    1c02:	cf 93       	push	r28
    1c04:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
    1c06:	28 2f       	mov	r18, r24
    1c08:	30 e0       	ldi	r19, 0x00	; 0
    1c0a:	f9 01       	movw	r30, r18
    1c0c:	e1 52       	subi	r30, 0x21	; 33
    1c0e:	ff 4f       	sbci	r31, 0xFF	; 255
    1c10:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
    1c12:	f9 01       	movw	r30, r18
    1c14:	e1 50       	subi	r30, 0x01	; 1
    1c16:	ff 4f       	sbci	r31, 0xFF	; 255
    1c18:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
    1c1a:	f9 01       	movw	r30, r18
    1c1c:	e1 5e       	subi	r30, 0xE1	; 225
    1c1e:	fe 4f       	sbci	r31, 0xFE	; 254
    1c20:	c4 91       	lpm	r28, Z
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
    1c22:	cc 23       	and	r28, r28
    1c24:	b9 f0       	breq	.+46     	; 0x1c54 <digitalWrite+0x54>
    1c26:	16 2f       	mov	r17, r22

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    1c28:	81 11       	cpse	r24, r1
    1c2a:	80 df       	rcall	.-256    	; 0x1b2c <turnOffPWM>

	out = portOutputRegister(port);
    1c2c:	ec 2f       	mov	r30, r28
    1c2e:	f0 e0       	ldi	r31, 0x00	; 0
    1c30:	ee 0f       	add	r30, r30
    1c32:	ff 1f       	adc	r31, r31
    1c34:	e7 5b       	subi	r30, 0xB7	; 183
    1c36:	fe 4f       	sbci	r31, 0xFE	; 254
    1c38:	a5 91       	lpm	r26, Z+
    1c3a:	b4 91       	lpm	r27, Z

	uint8_t oldSREG = SREG;
    1c3c:	9f b7       	in	r25, 0x3f	; 63
	cli();
    1c3e:	f8 94       	cli

	if (val == LOW) {
    1c40:	11 11       	cpse	r17, r1
    1c42:	04 c0       	rjmp	.+8      	; 0x1c4c <digitalWrite+0x4c>
		*out &= ~bit;
    1c44:	8c 91       	ld	r24, X
    1c46:	d0 95       	com	r29
    1c48:	d8 23       	and	r29, r24
    1c4a:	02 c0       	rjmp	.+4      	; 0x1c50 <digitalWrite+0x50>
	} else {
		*out |= bit;
    1c4c:	ec 91       	ld	r30, X
    1c4e:	de 2b       	or	r29, r30
    1c50:	dc 93       	st	X, r29
	}

	SREG = oldSREG;
    1c52:	9f bf       	out	0x3f, r25	; 63
}
    1c54:	df 91       	pop	r29
    1c56:	cf 91       	pop	r28
    1c58:	1f 91       	pop	r17
    1c5a:	08 95       	ret

00001c5c <digitalRead>:

int digitalRead(uint8_t pin)
{
    1c5c:	cf 93       	push	r28
    1c5e:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
    1c60:	28 2f       	mov	r18, r24
    1c62:	30 e0       	ldi	r19, 0x00	; 0
    1c64:	f9 01       	movw	r30, r18
    1c66:	e1 52       	subi	r30, 0x21	; 33
    1c68:	ff 4f       	sbci	r31, 0xFF	; 255
    1c6a:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
    1c6c:	f9 01       	movw	r30, r18
    1c6e:	e1 50       	subi	r30, 0x01	; 1
    1c70:	ff 4f       	sbci	r31, 0xFF	; 255
    1c72:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
    1c74:	f9 01       	movw	r30, r18
    1c76:	e1 5e       	subi	r30, 0xE1	; 225
    1c78:	fe 4f       	sbci	r31, 0xFE	; 254
    1c7a:	c4 91       	lpm	r28, Z

	if (port == NOT_A_PIN) return LOW;
    1c7c:	cc 23       	and	r28, r28
    1c7e:	89 f0       	breq	.+34     	; 0x1ca2 <digitalRead+0x46>

	// If the pin that support PWM output, we need to turn it off
	// before getting a digital reading.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    1c80:	81 11       	cpse	r24, r1
    1c82:	54 df       	rcall	.-344    	; 0x1b2c <turnOffPWM>

	if (*portInputRegister(port) & bit) return HIGH;
    1c84:	ec 2f       	mov	r30, r28
    1c86:	f0 e0       	ldi	r31, 0x00	; 0
    1c88:	ee 0f       	add	r30, r30
    1c8a:	ff 1f       	adc	r31, r31
    1c8c:	e1 5c       	subi	r30, 0xC1	; 193
    1c8e:	fe 4f       	sbci	r31, 0xFE	; 254
    1c90:	a5 91       	lpm	r26, Z+
    1c92:	b4 91       	lpm	r27, Z
    1c94:	ec 91       	ld	r30, X
{
	uint8_t timer = digitalPinToTimer(pin);
	uint8_t bit = digitalPinToBitMask(pin);
	uint8_t port = digitalPinToPort(pin);

	if (port == NOT_A_PIN) return LOW;
    1c96:	ed 23       	and	r30, r29
    1c98:	81 e0       	ldi	r24, 0x01	; 1
    1c9a:	90 e0       	ldi	r25, 0x00	; 0
    1c9c:	21 f4       	brne	.+8      	; 0x1ca6 <digitalRead+0x4a>
    1c9e:	80 e0       	ldi	r24, 0x00	; 0
    1ca0:	02 c0       	rjmp	.+4      	; 0x1ca6 <digitalRead+0x4a>
    1ca2:	80 e0       	ldi	r24, 0x00	; 0
    1ca4:	90 e0       	ldi	r25, 0x00	; 0
	// before getting a digital reading.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);

	if (*portInputRegister(port) & bit) return HIGH;
	return LOW;
}
    1ca6:	df 91       	pop	r29
    1ca8:	cf 91       	pop	r28
    1caa:	08 95       	ret

00001cac <shiftIn>:
  Boston, MA  02111-1307  USA
*/

#include "wiring_private.h"

uint8_t shiftIn(uint8_t dataPin, uint8_t clockPin, uint8_t bitOrder) {
    1cac:	cf 92       	push	r12
    1cae:	df 92       	push	r13
    1cb0:	ef 92       	push	r14
    1cb2:	ff 92       	push	r15
    1cb4:	0f 93       	push	r16
    1cb6:	1f 93       	push	r17
    1cb8:	cf 93       	push	r28
    1cba:	df 93       	push	r29
    1cbc:	f8 2e       	mov	r15, r24
    1cbe:	d6 2f       	mov	r29, r22
    1cc0:	e4 2e       	mov	r14, r20
    1cc2:	07 e0       	ldi	r16, 0x07	; 7
    1cc4:	10 e0       	ldi	r17, 0x00	; 0
	uint8_t value = 0;
    1cc6:	c0 e0       	ldi	r28, 0x00	; 0
	uint8_t i;

	for (i = 0; i < 8; ++i) {
		digitalWrite(clockPin, HIGH);
		if (bitOrder == LSBFIRST)
			value |= digitalRead(dataPin) << i;
    1cc8:	87 e0       	ldi	r24, 0x07	; 7
    1cca:	c8 2e       	mov	r12, r24
    1ccc:	d1 2c       	mov	r13, r1
uint8_t shiftIn(uint8_t dataPin, uint8_t clockPin, uint8_t bitOrder) {
	uint8_t value = 0;
	uint8_t i;

	for (i = 0; i < 8; ++i) {
		digitalWrite(clockPin, HIGH);
    1cce:	61 e0       	ldi	r22, 0x01	; 1
    1cd0:	8d 2f       	mov	r24, r29
    1cd2:	96 df       	rcall	.-212    	; 0x1c00 <digitalWrite>
		if (bitOrder == LSBFIRST)
			value |= digitalRead(dataPin) << i;
    1cd4:	8f 2d       	mov	r24, r15
	uint8_t value = 0;
	uint8_t i;

	for (i = 0; i < 8; ++i) {
		digitalWrite(clockPin, HIGH);
		if (bitOrder == LSBFIRST)
    1cd6:	e1 10       	cpse	r14, r1
			value |= digitalRead(dataPin) << i;
    1cd8:	09 c0       	rjmp	.+18     	; 0x1cec <shiftIn+0x40>
    1cda:	c0 df       	rcall	.-128    	; 0x1c5c <digitalRead>
    1cdc:	96 01       	movw	r18, r12
    1cde:	20 1b       	sub	r18, r16
    1ce0:	31 0b       	sbc	r19, r17
    1ce2:	01 c0       	rjmp	.+2      	; 0x1ce6 <shiftIn+0x3a>
    1ce4:	88 0f       	add	r24, r24
    1ce6:	2a 95       	dec	r18
    1ce8:	ea f7       	brpl	.-6      	; 0x1ce4 <shiftIn+0x38>
		else
			value |= digitalRead(dataPin) << (7 - i);
    1cea:	06 c0       	rjmp	.+12     	; 0x1cf8 <shiftIn+0x4c>
    1cec:	b7 df       	rcall	.-146    	; 0x1c5c <digitalRead>
    1cee:	00 2e       	mov	r0, r16
    1cf0:	01 c0       	rjmp	.+2      	; 0x1cf4 <shiftIn+0x48>
    1cf2:	88 0f       	add	r24, r24
    1cf4:	0a 94       	dec	r0
    1cf6:	ea f7       	brpl	.-6      	; 0x1cf2 <shiftIn+0x46>
		digitalWrite(clockPin, LOW);
    1cf8:	c8 2b       	or	r28, r24
    1cfa:	60 e0       	ldi	r22, 0x00	; 0
    1cfc:	8d 2f       	mov	r24, r29
    1cfe:	80 df       	rcall	.-256    	; 0x1c00 <digitalWrite>
    1d00:	01 50       	subi	r16, 0x01	; 1
    1d02:	11 09       	sbc	r17, r1
    1d04:	20 f7       	brcc	.-56     	; 0x1cce <shiftIn+0x22>
	}
	return value;
}
    1d06:	8c 2f       	mov	r24, r28
    1d08:	df 91       	pop	r29
    1d0a:	cf 91       	pop	r28
    1d0c:	1f 91       	pop	r17
    1d0e:	0f 91       	pop	r16
    1d10:	ff 90       	pop	r15
    1d12:	ef 90       	pop	r14
    1d14:	df 90       	pop	r13
    1d16:	cf 90       	pop	r12
    1d18:	08 95       	ret

00001d1a <yield>:
 * libraries or sketches that supports cooperative threads.
 *
 * Its defined as a weak symbol and it can be redefined to implement a
 * real cooperative scheduler.
 */
static void __empty() {
    1d1a:	08 95       	ret

00001d1c <__udivmodhi4>:
    1d1c:	aa 1b       	sub	r26, r26
    1d1e:	bb 1b       	sub	r27, r27
    1d20:	51 e1       	ldi	r21, 0x11	; 17
    1d22:	07 c0       	rjmp	.+14     	; 0x1d32 <__udivmodhi4_ep>

00001d24 <__udivmodhi4_loop>:
    1d24:	aa 1f       	adc	r26, r26
    1d26:	bb 1f       	adc	r27, r27
    1d28:	a6 17       	cp	r26, r22
    1d2a:	b7 07       	cpc	r27, r23
    1d2c:	10 f0       	brcs	.+4      	; 0x1d32 <__udivmodhi4_ep>
    1d2e:	a6 1b       	sub	r26, r22
    1d30:	b7 0b       	sbc	r27, r23

00001d32 <__udivmodhi4_ep>:
    1d32:	88 1f       	adc	r24, r24
    1d34:	99 1f       	adc	r25, r25
    1d36:	5a 95       	dec	r21
    1d38:	a9 f7       	brne	.-22     	; 0x1d24 <__udivmodhi4_loop>
    1d3a:	80 95       	com	r24
    1d3c:	90 95       	com	r25
    1d3e:	bc 01       	movw	r22, r24
    1d40:	cd 01       	movw	r24, r26
    1d42:	08 95       	ret

00001d44 <__divmodhi4>:
    1d44:	97 fb       	bst	r25, 7
    1d46:	07 2e       	mov	r0, r23
    1d48:	16 f4       	brtc	.+4      	; 0x1d4e <__divmodhi4+0xa>
    1d4a:	00 94       	com	r0
    1d4c:	06 d0       	rcall	.+12     	; 0x1d5a <__divmodhi4_neg1>
    1d4e:	77 fd       	sbrc	r23, 7
    1d50:	08 d0       	rcall	.+16     	; 0x1d62 <__divmodhi4_neg2>
    1d52:	e4 df       	rcall	.-56     	; 0x1d1c <__udivmodhi4>
    1d54:	07 fc       	sbrc	r0, 7
    1d56:	05 d0       	rcall	.+10     	; 0x1d62 <__divmodhi4_neg2>
    1d58:	3e f4       	brtc	.+14     	; 0x1d68 <__divmodhi4_exit>

00001d5a <__divmodhi4_neg1>:
    1d5a:	90 95       	com	r25
    1d5c:	81 95       	neg	r24
    1d5e:	9f 4f       	sbci	r25, 0xFF	; 255
    1d60:	08 95       	ret

00001d62 <__divmodhi4_neg2>:
    1d62:	70 95       	com	r23
    1d64:	61 95       	neg	r22
    1d66:	7f 4f       	sbci	r23, 0xFF	; 255

00001d68 <__divmodhi4_exit>:
    1d68:	08 95       	ret

00001d6a <__tablejump2__>:
    1d6a:	ee 0f       	add	r30, r30
    1d6c:	ff 1f       	adc	r31, r31
    1d6e:	00 24       	eor	r0, r0
    1d70:	00 1c       	adc	r0, r0
    1d72:	0b be       	out	0x3b, r0	; 59
    1d74:	07 90       	elpm	r0, Z+
    1d76:	f6 91       	elpm	r31, Z
    1d78:	e0 2d       	mov	r30, r0
    1d7a:	09 94       	ijmp

00001d7c <malloc>:
    1d7c:	0f 93       	push	r16
    1d7e:	1f 93       	push	r17
    1d80:	cf 93       	push	r28
    1d82:	df 93       	push	r29
    1d84:	82 30       	cpi	r24, 0x02	; 2
    1d86:	91 05       	cpc	r25, r1
    1d88:	10 f4       	brcc	.+4      	; 0x1d8e <malloc+0x12>
    1d8a:	82 e0       	ldi	r24, 0x02	; 2
    1d8c:	90 e0       	ldi	r25, 0x00	; 0
    1d8e:	e0 91 0a 03 	lds	r30, 0x030A	; 0x80030a <__flp>
    1d92:	f0 91 0b 03 	lds	r31, 0x030B	; 0x80030b <__flp+0x1>
    1d96:	20 e0       	ldi	r18, 0x00	; 0
    1d98:	30 e0       	ldi	r19, 0x00	; 0
    1d9a:	a0 e0       	ldi	r26, 0x00	; 0
    1d9c:	b0 e0       	ldi	r27, 0x00	; 0
    1d9e:	30 97       	sbiw	r30, 0x00	; 0
    1da0:	19 f1       	breq	.+70     	; 0x1de8 <malloc+0x6c>
    1da2:	40 81       	ld	r20, Z
    1da4:	51 81       	ldd	r21, Z+1	; 0x01
    1da6:	02 81       	ldd	r16, Z+2	; 0x02
    1da8:	13 81       	ldd	r17, Z+3	; 0x03
    1daa:	48 17       	cp	r20, r24
    1dac:	59 07       	cpc	r21, r25
    1dae:	c8 f0       	brcs	.+50     	; 0x1de2 <malloc+0x66>
    1db0:	84 17       	cp	r24, r20
    1db2:	95 07       	cpc	r25, r21
    1db4:	69 f4       	brne	.+26     	; 0x1dd0 <malloc+0x54>
    1db6:	10 97       	sbiw	r26, 0x00	; 0
    1db8:	31 f0       	breq	.+12     	; 0x1dc6 <malloc+0x4a>
    1dba:	12 96       	adiw	r26, 0x02	; 2
    1dbc:	0c 93       	st	X, r16
    1dbe:	12 97       	sbiw	r26, 0x02	; 2
    1dc0:	13 96       	adiw	r26, 0x03	; 3
    1dc2:	1c 93       	st	X, r17
    1dc4:	27 c0       	rjmp	.+78     	; 0x1e14 <malloc+0x98>
    1dc6:	00 93 0a 03 	sts	0x030A, r16	; 0x80030a <__flp>
    1dca:	10 93 0b 03 	sts	0x030B, r17	; 0x80030b <__flp+0x1>
    1dce:	22 c0       	rjmp	.+68     	; 0x1e14 <malloc+0x98>
    1dd0:	21 15       	cp	r18, r1
    1dd2:	31 05       	cpc	r19, r1
    1dd4:	19 f0       	breq	.+6      	; 0x1ddc <malloc+0x60>
    1dd6:	42 17       	cp	r20, r18
    1dd8:	53 07       	cpc	r21, r19
    1dda:	18 f4       	brcc	.+6      	; 0x1de2 <malloc+0x66>
    1ddc:	9a 01       	movw	r18, r20
    1dde:	bd 01       	movw	r22, r26
    1de0:	ef 01       	movw	r28, r30
    1de2:	df 01       	movw	r26, r30
    1de4:	f8 01       	movw	r30, r16
    1de6:	db cf       	rjmp	.-74     	; 0x1d9e <malloc+0x22>
    1de8:	21 15       	cp	r18, r1
    1dea:	31 05       	cpc	r19, r1
    1dec:	f9 f0       	breq	.+62     	; 0x1e2c <malloc+0xb0>
    1dee:	28 1b       	sub	r18, r24
    1df0:	39 0b       	sbc	r19, r25
    1df2:	24 30       	cpi	r18, 0x04	; 4
    1df4:	31 05       	cpc	r19, r1
    1df6:	80 f4       	brcc	.+32     	; 0x1e18 <malloc+0x9c>
    1df8:	8a 81       	ldd	r24, Y+2	; 0x02
    1dfa:	9b 81       	ldd	r25, Y+3	; 0x03
    1dfc:	61 15       	cp	r22, r1
    1dfe:	71 05       	cpc	r23, r1
    1e00:	21 f0       	breq	.+8      	; 0x1e0a <malloc+0x8e>
    1e02:	fb 01       	movw	r30, r22
    1e04:	93 83       	std	Z+3, r25	; 0x03
    1e06:	82 83       	std	Z+2, r24	; 0x02
    1e08:	04 c0       	rjmp	.+8      	; 0x1e12 <malloc+0x96>
    1e0a:	90 93 0b 03 	sts	0x030B, r25	; 0x80030b <__flp+0x1>
    1e0e:	80 93 0a 03 	sts	0x030A, r24	; 0x80030a <__flp>
    1e12:	fe 01       	movw	r30, r28
    1e14:	32 96       	adiw	r30, 0x02	; 2
    1e16:	44 c0       	rjmp	.+136    	; 0x1ea0 <malloc+0x124>
    1e18:	fe 01       	movw	r30, r28
    1e1a:	e2 0f       	add	r30, r18
    1e1c:	f3 1f       	adc	r31, r19
    1e1e:	81 93       	st	Z+, r24
    1e20:	91 93       	st	Z+, r25
    1e22:	22 50       	subi	r18, 0x02	; 2
    1e24:	31 09       	sbc	r19, r1
    1e26:	39 83       	std	Y+1, r19	; 0x01
    1e28:	28 83       	st	Y, r18
    1e2a:	3a c0       	rjmp	.+116    	; 0x1ea0 <malloc+0x124>
    1e2c:	20 91 08 03 	lds	r18, 0x0308	; 0x800308 <__brkval>
    1e30:	30 91 09 03 	lds	r19, 0x0309	; 0x800309 <__brkval+0x1>
    1e34:	23 2b       	or	r18, r19
    1e36:	41 f4       	brne	.+16     	; 0x1e48 <malloc+0xcc>
    1e38:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
    1e3c:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
    1e40:	30 93 09 03 	sts	0x0309, r19	; 0x800309 <__brkval+0x1>
    1e44:	20 93 08 03 	sts	0x0308, r18	; 0x800308 <__brkval>
    1e48:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
    1e4c:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
    1e50:	21 15       	cp	r18, r1
    1e52:	31 05       	cpc	r19, r1
    1e54:	41 f4       	brne	.+16     	; 0x1e66 <malloc+0xea>
    1e56:	2d b7       	in	r18, 0x3d	; 61
    1e58:	3e b7       	in	r19, 0x3e	; 62
    1e5a:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    1e5e:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    1e62:	24 1b       	sub	r18, r20
    1e64:	35 0b       	sbc	r19, r21
    1e66:	e0 91 08 03 	lds	r30, 0x0308	; 0x800308 <__brkval>
    1e6a:	f0 91 09 03 	lds	r31, 0x0309	; 0x800309 <__brkval+0x1>
    1e6e:	e2 17       	cp	r30, r18
    1e70:	f3 07       	cpc	r31, r19
    1e72:	a0 f4       	brcc	.+40     	; 0x1e9c <malloc+0x120>
    1e74:	2e 1b       	sub	r18, r30
    1e76:	3f 0b       	sbc	r19, r31
    1e78:	28 17       	cp	r18, r24
    1e7a:	39 07       	cpc	r19, r25
    1e7c:	78 f0       	brcs	.+30     	; 0x1e9c <malloc+0x120>
    1e7e:	ac 01       	movw	r20, r24
    1e80:	4e 5f       	subi	r20, 0xFE	; 254
    1e82:	5f 4f       	sbci	r21, 0xFF	; 255
    1e84:	24 17       	cp	r18, r20
    1e86:	35 07       	cpc	r19, r21
    1e88:	48 f0       	brcs	.+18     	; 0x1e9c <malloc+0x120>
    1e8a:	4e 0f       	add	r20, r30
    1e8c:	5f 1f       	adc	r21, r31
    1e8e:	50 93 09 03 	sts	0x0309, r21	; 0x800309 <__brkval+0x1>
    1e92:	40 93 08 03 	sts	0x0308, r20	; 0x800308 <__brkval>
    1e96:	81 93       	st	Z+, r24
    1e98:	91 93       	st	Z+, r25
    1e9a:	02 c0       	rjmp	.+4      	; 0x1ea0 <malloc+0x124>
    1e9c:	e0 e0       	ldi	r30, 0x00	; 0
    1e9e:	f0 e0       	ldi	r31, 0x00	; 0
    1ea0:	cf 01       	movw	r24, r30
    1ea2:	df 91       	pop	r29
    1ea4:	cf 91       	pop	r28
    1ea6:	1f 91       	pop	r17
    1ea8:	0f 91       	pop	r16
    1eaa:	08 95       	ret

00001eac <free>:
    1eac:	cf 93       	push	r28
    1eae:	df 93       	push	r29
    1eb0:	00 97       	sbiw	r24, 0x00	; 0
    1eb2:	09 f4       	brne	.+2      	; 0x1eb6 <free+0xa>
    1eb4:	81 c0       	rjmp	.+258    	; 0x1fb8 <free+0x10c>
    1eb6:	fc 01       	movw	r30, r24
    1eb8:	32 97       	sbiw	r30, 0x02	; 2
    1eba:	13 82       	std	Z+3, r1	; 0x03
    1ebc:	12 82       	std	Z+2, r1	; 0x02
    1ebe:	a0 91 0a 03 	lds	r26, 0x030A	; 0x80030a <__flp>
    1ec2:	b0 91 0b 03 	lds	r27, 0x030B	; 0x80030b <__flp+0x1>
    1ec6:	10 97       	sbiw	r26, 0x00	; 0
    1ec8:	81 f4       	brne	.+32     	; 0x1eea <free+0x3e>
    1eca:	20 81       	ld	r18, Z
    1ecc:	31 81       	ldd	r19, Z+1	; 0x01
    1ece:	82 0f       	add	r24, r18
    1ed0:	93 1f       	adc	r25, r19
    1ed2:	20 91 08 03 	lds	r18, 0x0308	; 0x800308 <__brkval>
    1ed6:	30 91 09 03 	lds	r19, 0x0309	; 0x800309 <__brkval+0x1>
    1eda:	28 17       	cp	r18, r24
    1edc:	39 07       	cpc	r19, r25
    1ede:	51 f5       	brne	.+84     	; 0x1f34 <free+0x88>
    1ee0:	f0 93 09 03 	sts	0x0309, r31	; 0x800309 <__brkval+0x1>
    1ee4:	e0 93 08 03 	sts	0x0308, r30	; 0x800308 <__brkval>
    1ee8:	67 c0       	rjmp	.+206    	; 0x1fb8 <free+0x10c>
    1eea:	ed 01       	movw	r28, r26
    1eec:	20 e0       	ldi	r18, 0x00	; 0
    1eee:	30 e0       	ldi	r19, 0x00	; 0
    1ef0:	ce 17       	cp	r28, r30
    1ef2:	df 07       	cpc	r29, r31
    1ef4:	40 f4       	brcc	.+16     	; 0x1f06 <free+0x5a>
    1ef6:	4a 81       	ldd	r20, Y+2	; 0x02
    1ef8:	5b 81       	ldd	r21, Y+3	; 0x03
    1efa:	9e 01       	movw	r18, r28
    1efc:	41 15       	cp	r20, r1
    1efe:	51 05       	cpc	r21, r1
    1f00:	f1 f0       	breq	.+60     	; 0x1f3e <free+0x92>
    1f02:	ea 01       	movw	r28, r20
    1f04:	f5 cf       	rjmp	.-22     	; 0x1ef0 <free+0x44>
    1f06:	d3 83       	std	Z+3, r29	; 0x03
    1f08:	c2 83       	std	Z+2, r28	; 0x02
    1f0a:	40 81       	ld	r20, Z
    1f0c:	51 81       	ldd	r21, Z+1	; 0x01
    1f0e:	84 0f       	add	r24, r20
    1f10:	95 1f       	adc	r25, r21
    1f12:	c8 17       	cp	r28, r24
    1f14:	d9 07       	cpc	r29, r25
    1f16:	59 f4       	brne	.+22     	; 0x1f2e <free+0x82>
    1f18:	88 81       	ld	r24, Y
    1f1a:	99 81       	ldd	r25, Y+1	; 0x01
    1f1c:	84 0f       	add	r24, r20
    1f1e:	95 1f       	adc	r25, r21
    1f20:	02 96       	adiw	r24, 0x02	; 2
    1f22:	91 83       	std	Z+1, r25	; 0x01
    1f24:	80 83       	st	Z, r24
    1f26:	8a 81       	ldd	r24, Y+2	; 0x02
    1f28:	9b 81       	ldd	r25, Y+3	; 0x03
    1f2a:	93 83       	std	Z+3, r25	; 0x03
    1f2c:	82 83       	std	Z+2, r24	; 0x02
    1f2e:	21 15       	cp	r18, r1
    1f30:	31 05       	cpc	r19, r1
    1f32:	29 f4       	brne	.+10     	; 0x1f3e <free+0x92>
    1f34:	f0 93 0b 03 	sts	0x030B, r31	; 0x80030b <__flp+0x1>
    1f38:	e0 93 0a 03 	sts	0x030A, r30	; 0x80030a <__flp>
    1f3c:	3d c0       	rjmp	.+122    	; 0x1fb8 <free+0x10c>
    1f3e:	e9 01       	movw	r28, r18
    1f40:	fb 83       	std	Y+3, r31	; 0x03
    1f42:	ea 83       	std	Y+2, r30	; 0x02
    1f44:	49 91       	ld	r20, Y+
    1f46:	59 91       	ld	r21, Y+
    1f48:	c4 0f       	add	r28, r20
    1f4a:	d5 1f       	adc	r29, r21
    1f4c:	ec 17       	cp	r30, r28
    1f4e:	fd 07       	cpc	r31, r29
    1f50:	61 f4       	brne	.+24     	; 0x1f6a <free+0xbe>
    1f52:	80 81       	ld	r24, Z
    1f54:	91 81       	ldd	r25, Z+1	; 0x01
    1f56:	84 0f       	add	r24, r20
    1f58:	95 1f       	adc	r25, r21
    1f5a:	02 96       	adiw	r24, 0x02	; 2
    1f5c:	e9 01       	movw	r28, r18
    1f5e:	99 83       	std	Y+1, r25	; 0x01
    1f60:	88 83       	st	Y, r24
    1f62:	82 81       	ldd	r24, Z+2	; 0x02
    1f64:	93 81       	ldd	r25, Z+3	; 0x03
    1f66:	9b 83       	std	Y+3, r25	; 0x03
    1f68:	8a 83       	std	Y+2, r24	; 0x02
    1f6a:	e0 e0       	ldi	r30, 0x00	; 0
    1f6c:	f0 e0       	ldi	r31, 0x00	; 0
    1f6e:	12 96       	adiw	r26, 0x02	; 2
    1f70:	8d 91       	ld	r24, X+
    1f72:	9c 91       	ld	r25, X
    1f74:	13 97       	sbiw	r26, 0x03	; 3
    1f76:	00 97       	sbiw	r24, 0x00	; 0
    1f78:	19 f0       	breq	.+6      	; 0x1f80 <free+0xd4>
    1f7a:	fd 01       	movw	r30, r26
    1f7c:	dc 01       	movw	r26, r24
    1f7e:	f7 cf       	rjmp	.-18     	; 0x1f6e <free+0xc2>
    1f80:	8d 91       	ld	r24, X+
    1f82:	9c 91       	ld	r25, X
    1f84:	11 97       	sbiw	r26, 0x01	; 1
    1f86:	9d 01       	movw	r18, r26
    1f88:	2e 5f       	subi	r18, 0xFE	; 254
    1f8a:	3f 4f       	sbci	r19, 0xFF	; 255
    1f8c:	82 0f       	add	r24, r18
    1f8e:	93 1f       	adc	r25, r19
    1f90:	20 91 08 03 	lds	r18, 0x0308	; 0x800308 <__brkval>
    1f94:	30 91 09 03 	lds	r19, 0x0309	; 0x800309 <__brkval+0x1>
    1f98:	28 17       	cp	r18, r24
    1f9a:	39 07       	cpc	r19, r25
    1f9c:	69 f4       	brne	.+26     	; 0x1fb8 <free+0x10c>
    1f9e:	30 97       	sbiw	r30, 0x00	; 0
    1fa0:	29 f4       	brne	.+10     	; 0x1fac <free+0x100>
    1fa2:	10 92 0b 03 	sts	0x030B, r1	; 0x80030b <__flp+0x1>
    1fa6:	10 92 0a 03 	sts	0x030A, r1	; 0x80030a <__flp>
    1faa:	02 c0       	rjmp	.+4      	; 0x1fb0 <free+0x104>
    1fac:	13 82       	std	Z+3, r1	; 0x03
    1fae:	12 82       	std	Z+2, r1	; 0x02
    1fb0:	b0 93 09 03 	sts	0x0309, r27	; 0x800309 <__brkval+0x1>
    1fb4:	a0 93 08 03 	sts	0x0308, r26	; 0x800308 <__brkval>
    1fb8:	df 91       	pop	r29
    1fba:	cf 91       	pop	r28
    1fbc:	08 95       	ret

00001fbe <__do_global_dtors>:
    1fbe:	10 e0       	ldi	r17, 0x00	; 0
    1fc0:	c2 eb       	ldi	r28, 0xB2	; 178
    1fc2:	d0 e0       	ldi	r29, 0x00	; 0
    1fc4:	03 c0       	rjmp	.+6      	; 0x1fcc <__do_global_dtors+0xe>
    1fc6:	fe 01       	movw	r30, r28
    1fc8:	d0 de       	rcall	.-608    	; 0x1d6a <__tablejump2__>
    1fca:	21 96       	adiw	r28, 0x01	; 1
    1fcc:	c3 3b       	cpi	r28, 0xB3	; 179
    1fce:	d1 07       	cpc	r29, r17
    1fd0:	d1 f7       	brne	.-12     	; 0x1fc6 <__do_global_dtors+0x8>
    1fd2:	f8 94       	cli

00001fd4 <__stop_program>:
    1fd4:	ff cf       	rjmp	.-2      	; 0x1fd4 <__stop_program>

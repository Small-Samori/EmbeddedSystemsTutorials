
Blank.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000268  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001f4  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000009  00800100  00800100  00000268  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000268  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000298  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000a0  00000000  00000000  000002d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000e45  00000000  00000000  00000378  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a31  00000000  00000000  000011bd  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000699  00000000  00000000  00001bee  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000014c  00000000  00000000  00002288  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000071e  00000000  00000000  000023d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000028d  00000000  00000000  00002af2  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000070  00000000  00000000  00002d7f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	53 c0       	rjmp	.+166    	; 0xac <__bad_interrupt>
   6:	00 00       	nop
   8:	51 c0       	rjmp	.+162    	; 0xac <__bad_interrupt>
   a:	00 00       	nop
   c:	4f c0       	rjmp	.+158    	; 0xac <__bad_interrupt>
   e:	00 00       	nop
  10:	4d c0       	rjmp	.+154    	; 0xac <__bad_interrupt>
  12:	00 00       	nop
  14:	4b c0       	rjmp	.+150    	; 0xac <__bad_interrupt>
  16:	00 00       	nop
  18:	49 c0       	rjmp	.+146    	; 0xac <__bad_interrupt>
  1a:	00 00       	nop
  1c:	47 c0       	rjmp	.+142    	; 0xac <__bad_interrupt>
  1e:	00 00       	nop
  20:	45 c0       	rjmp	.+138    	; 0xac <__bad_interrupt>
  22:	00 00       	nop
  24:	43 c0       	rjmp	.+134    	; 0xac <__bad_interrupt>
  26:	00 00       	nop
  28:	41 c0       	rjmp	.+130    	; 0xac <__bad_interrupt>
  2a:	00 00       	nop
  2c:	3f c0       	rjmp	.+126    	; 0xac <__bad_interrupt>
  2e:	00 00       	nop
  30:	3d c0       	rjmp	.+122    	; 0xac <__bad_interrupt>
  32:	00 00       	nop
  34:	3b c0       	rjmp	.+118    	; 0xac <__bad_interrupt>
  36:	00 00       	nop
  38:	39 c0       	rjmp	.+114    	; 0xac <__bad_interrupt>
  3a:	00 00       	nop
  3c:	37 c0       	rjmp	.+110    	; 0xac <__bad_interrupt>
  3e:	00 00       	nop
  40:	35 c0       	rjmp	.+106    	; 0xac <__bad_interrupt>
  42:	00 00       	nop
  44:	33 c0       	rjmp	.+102    	; 0xac <__bad_interrupt>
  46:	00 00       	nop
  48:	41 c0       	rjmp	.+130    	; 0xcc <__vector_18>
  4a:	00 00       	nop
  4c:	2f c0       	rjmp	.+94     	; 0xac <__bad_interrupt>
  4e:	00 00       	nop
  50:	2d c0       	rjmp	.+90     	; 0xac <__bad_interrupt>
  52:	00 00       	nop
  54:	2b c0       	rjmp	.+86     	; 0xac <__bad_interrupt>
  56:	00 00       	nop
  58:	29 c0       	rjmp	.+82     	; 0xac <__bad_interrupt>
  5a:	00 00       	nop
  5c:	27 c0       	rjmp	.+78     	; 0xac <__bad_interrupt>
  5e:	00 00       	nop
  60:	25 c0       	rjmp	.+74     	; 0xac <__bad_interrupt>
  62:	00 00       	nop
  64:	23 c0       	rjmp	.+70     	; 0xac <__bad_interrupt>
  66:	00 00       	nop
  68:	21 c0       	rjmp	.+66     	; 0xac <__bad_interrupt>
  6a:	00 00       	nop
  6c:	1f c0       	rjmp	.+62     	; 0xac <__bad_interrupt>
  6e:	00 00       	nop
  70:	1d c0       	rjmp	.+58     	; 0xac <__bad_interrupt>
  72:	00 00       	nop
  74:	1b c0       	rjmp	.+54     	; 0xac <__bad_interrupt>
  76:	00 00       	nop
  78:	19 c0       	rjmp	.+50     	; 0xac <__bad_interrupt>
  7a:	00 00       	nop
  7c:	17 c0       	rjmp	.+46     	; 0xac <__bad_interrupt>
  7e:	00 00       	nop
  80:	15 c0       	rjmp	.+42     	; 0xac <__bad_interrupt>
  82:	00 00       	nop
  84:	13 c0       	rjmp	.+38     	; 0xac <__bad_interrupt>
  86:	00 00       	nop
  88:	11 c0       	rjmp	.+34     	; 0xac <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_clear_bss>:
  98:	21 e0       	ldi	r18, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	01 c0       	rjmp	.+2      	; 0xa2 <.do_clear_bss_start>

000000a0 <.do_clear_bss_loop>:
  a0:	1d 92       	st	X+, r1

000000a2 <.do_clear_bss_start>:
  a2:	a9 30       	cpi	r26, 0x09	; 9
  a4:	b2 07       	cpc	r27, r18
  a6:	e1 f7       	brne	.-8      	; 0xa0 <.do_clear_bss_loop>
  a8:	06 d0       	rcall	.+12     	; 0xb6 <main>
  aa:	a2 c0       	rjmp	.+324    	; 0x1f0 <_exit>

000000ac <__bad_interrupt>:
  ac:	a9 cf       	rjmp	.-174    	; 0x0 <__vectors>

000000ae <setup>:
//Beginning of Auto generated function prototypes by Atmel Studio
//End of Auto generated function prototypes by Atmel Studio

void setup() {
	// put your setup code here, to run once:
	DDRA = 0x00;
  ae:	11 b8       	out	0x01, r1	; 1
  b0:	08 95       	ret

000000b2 <loop>:

}

void loop() {
  b2:	08 95       	ret

000000b4 <initVariant>:
  b4:	08 95       	ret

000000b6 <main>:
void setupUSB() __attribute__((weak));
void setupUSB() { }

int main(void)
{
	init();
  b6:	54 d0       	rcall	.+168    	; 0x160 <init>

	initVariant();
  b8:	fd df       	rcall	.-6      	; 0xb4 <initVariant>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
  ba:	f9 df       	rcall	.-14     	; 0xae <setup>
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
  bc:	c0 e0       	ldi	r28, 0x00	; 0
  be:	d0 e0       	ldi	r29, 0x00	; 0
#endif
	
	setup();
    
	for (;;) {
		loop();
  c0:	f8 df       	rcall	.-16     	; 0xb2 <loop>
  c2:	20 97       	sbiw	r28, 0x00	; 0
		if (serialEventRun) serialEventRun();
  c4:	e9 f3       	breq	.-6      	; 0xc0 <main+0xa>
  c6:	0e 94 00 00 	call	0	; 0x0 <__vectors>
  ca:	fa cf       	rjmp	.-12     	; 0xc0 <main+0xa>

000000cc <__vector_18>:
  cc:	1f 92       	push	r1
	

#endif

	// busy wait
	__asm__ __volatile__ (
  ce:	0f 92       	push	r0
  d0:	0f b6       	in	r0, 0x3f	; 63
  d2:	0f 92       	push	r0
  d4:	11 24       	eor	r1, r1
  d6:	2f 93       	push	r18
  d8:	3f 93       	push	r19
  da:	8f 93       	push	r24
  dc:	9f 93       	push	r25
  de:	af 93       	push	r26
  e0:	bf 93       	push	r27
  e2:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <timer0_millis>
  e6:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <timer0_millis+0x1>
  ea:	a0 91 03 01 	lds	r26, 0x0103	; 0x800103 <timer0_millis+0x2>
  ee:	b0 91 04 01 	lds	r27, 0x0104	; 0x800104 <timer0_millis+0x3>
  f2:	30 91 00 01 	lds	r19, 0x0100	; 0x800100 <_edata>
  f6:	23 e0       	ldi	r18, 0x03	; 3
  f8:	23 0f       	add	r18, r19
  fa:	2d 37       	cpi	r18, 0x7D	; 125
  fc:	20 f4       	brcc	.+8      	; 0x106 <__vector_18+0x3a>
  fe:	01 96       	adiw	r24, 0x01	; 1
 100:	a1 1d       	adc	r26, r1
 102:	b1 1d       	adc	r27, r1
 104:	05 c0       	rjmp	.+10     	; 0x110 <__vector_18+0x44>
 106:	26 e8       	ldi	r18, 0x86	; 134
 108:	23 0f       	add	r18, r19
 10a:	02 96       	adiw	r24, 0x02	; 2
 10c:	a1 1d       	adc	r26, r1
 10e:	b1 1d       	adc	r27, r1
 110:	20 93 00 01 	sts	0x0100, r18	; 0x800100 <_edata>
 114:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <timer0_millis>
 118:	90 93 02 01 	sts	0x0102, r25	; 0x800102 <timer0_millis+0x1>
 11c:	a0 93 03 01 	sts	0x0103, r26	; 0x800103 <timer0_millis+0x2>
 120:	b0 93 04 01 	sts	0x0104, r27	; 0x800104 <timer0_millis+0x3>
 124:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <timer0_overflow_count>
 128:	90 91 06 01 	lds	r25, 0x0106	; 0x800106 <timer0_overflow_count+0x1>
 12c:	a0 91 07 01 	lds	r26, 0x0107	; 0x800107 <timer0_overflow_count+0x2>
 130:	b0 91 08 01 	lds	r27, 0x0108	; 0x800108 <timer0_overflow_count+0x3>
 134:	01 96       	adiw	r24, 0x01	; 1
 136:	a1 1d       	adc	r26, r1
 138:	b1 1d       	adc	r27, r1
 13a:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <timer0_overflow_count>
 13e:	90 93 06 01 	sts	0x0106, r25	; 0x800106 <timer0_overflow_count+0x1>
 142:	a0 93 07 01 	sts	0x0107, r26	; 0x800107 <timer0_overflow_count+0x2>
 146:	b0 93 08 01 	sts	0x0108, r27	; 0x800108 <timer0_overflow_count+0x3>
 14a:	bf 91       	pop	r27
 14c:	af 91       	pop	r26
 14e:	9f 91       	pop	r25
 150:	8f 91       	pop	r24
 152:	3f 91       	pop	r19
 154:	2f 91       	pop	r18
 156:	0f 90       	pop	r0
 158:	0f be       	out	0x3f, r0	; 63
 15a:	0f 90       	pop	r0
 15c:	1f 90       	pop	r1
 15e:	18 95       	reti

00000160 <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
 160:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
 162:	84 b5       	in	r24, 0x24	; 36
 164:	82 60       	ori	r24, 0x02	; 2
 166:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
 168:	84 b5       	in	r24, 0x24	; 36
 16a:	81 60       	ori	r24, 0x01	; 1
 16c:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
 16e:	85 b5       	in	r24, 0x25	; 37
 170:	82 60       	ori	r24, 0x02	; 2
 172:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
 174:	85 b5       	in	r24, 0x25	; 37
 176:	81 60       	ori	r24, 0x01	; 1
 178:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
 17a:	ee e6       	ldi	r30, 0x6E	; 110
 17c:	f0 e0       	ldi	r31, 0x00	; 0
 17e:	80 81       	ld	r24, Z
 180:	81 60       	ori	r24, 0x01	; 1
 182:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
 184:	e1 e8       	ldi	r30, 0x81	; 129
 186:	f0 e0       	ldi	r31, 0x00	; 0
 188:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
 18a:	80 81       	ld	r24, Z
 18c:	82 60       	ori	r24, 0x02	; 2
 18e:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
 190:	80 81       	ld	r24, Z
 192:	81 60       	ori	r24, 0x01	; 1
 194:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
 196:	e0 e8       	ldi	r30, 0x80	; 128
 198:	f0 e0       	ldi	r31, 0x00	; 0
 19a:	80 81       	ld	r24, Z
 19c:	81 60       	ori	r24, 0x01	; 1
 19e:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
 1a0:	e1 eb       	ldi	r30, 0xB1	; 177
 1a2:	f0 e0       	ldi	r31, 0x00	; 0
 1a4:	80 81       	ld	r24, Z
 1a6:	84 60       	ori	r24, 0x04	; 4
 1a8:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
 1aa:	e0 eb       	ldi	r30, 0xB0	; 176
 1ac:	f0 e0       	ldi	r31, 0x00	; 0
 1ae:	80 81       	ld	r24, Z
 1b0:	81 60       	ori	r24, 0x01	; 1
 1b2:	80 83       	st	Z, r24
//#else
	// Timer 2 not finished (may not be present on this CPU)
#endif

#if defined(TCCR3B) && defined(CS31) && defined(WGM30)
	sbi(TCCR3B, CS31);		// set timer 3 prescale factor to 64
 1b4:	e1 e9       	ldi	r30, 0x91	; 145
 1b6:	f0 e0       	ldi	r31, 0x00	; 0
 1b8:	80 81       	ld	r24, Z
 1ba:	82 60       	ori	r24, 0x02	; 2
 1bc:	80 83       	st	Z, r24
	sbi(TCCR3B, CS30);
 1be:	80 81       	ld	r24, Z
 1c0:	81 60       	ori	r24, 0x01	; 1
 1c2:	80 83       	st	Z, r24
	sbi(TCCR3A, WGM30);		// put timer 3 in 8-bit phase correct pwm mode
 1c4:	e0 e9       	ldi	r30, 0x90	; 144
 1c6:	f0 e0       	ldi	r31, 0x00	; 0
 1c8:	80 81       	ld	r24, Z
 1ca:	81 60       	ori	r24, 0x01	; 1
 1cc:	80 83       	st	Z, r24
#endif

#if defined(ADCSRA)
	// set a2d prescaler so we are inside the desired 50-200 KHz range.
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
 1ce:	ea e7       	ldi	r30, 0x7A	; 122
 1d0:	f0 e0       	ldi	r31, 0x00	; 0
 1d2:	80 81       	ld	r24, Z
 1d4:	84 60       	ori	r24, 0x04	; 4
 1d6:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS1);
 1d8:	80 81       	ld	r24, Z
 1da:	82 60       	ori	r24, 0x02	; 2
 1dc:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS0);
 1de:	80 81       	ld	r24, Z
 1e0:	81 60       	ori	r24, 0x01	; 1
 1e2:	80 83       	st	Z, r24
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
 1e4:	80 81       	ld	r24, Z
 1e6:	80 68       	ori	r24, 0x80	; 128
 1e8:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
 1ea:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
 1ee:	08 95       	ret

000001f0 <_exit>:
 1f0:	f8 94       	cli

000001f2 <__stop_program>:
 1f2:	ff cf       	rjmp	.-2      	; 0x1f2 <__stop_program>

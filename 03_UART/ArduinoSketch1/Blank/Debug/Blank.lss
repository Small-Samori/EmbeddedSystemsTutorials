
Blank.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000002e  00800100  00000744  000007d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000744  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000ac  0080012e  0080012e  00000806  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000806  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000838  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000230  00000000  00000000  00000878  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00007232  00000000  00000000  00000aa8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000017a3  00000000  00000000  00007cda  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001464  00000000  00000000  0000947d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000006b0  00000000  00000000  0000a8e4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001f0f  00000000  00000000  0000af94  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002532  00000000  00000000  0000cea3  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000200  00000000  00000000  0000f3d5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	46 c0       	rjmp	.+140    	; 0x8e <__ctors_end>
   2:	00 00       	nop
   4:	6b c0       	rjmp	.+214    	; 0xdc <__bad_interrupt>
   6:	00 00       	nop
   8:	69 c0       	rjmp	.+210    	; 0xdc <__bad_interrupt>
   a:	00 00       	nop
   c:	67 c0       	rjmp	.+206    	; 0xdc <__bad_interrupt>
   e:	00 00       	nop
  10:	65 c0       	rjmp	.+202    	; 0xdc <__bad_interrupt>
  12:	00 00       	nop
  14:	63 c0       	rjmp	.+198    	; 0xdc <__bad_interrupt>
  16:	00 00       	nop
  18:	61 c0       	rjmp	.+194    	; 0xdc <__bad_interrupt>
  1a:	00 00       	nop
  1c:	5f c0       	rjmp	.+190    	; 0xdc <__bad_interrupt>
  1e:	00 00       	nop
  20:	5d c0       	rjmp	.+186    	; 0xdc <__bad_interrupt>
  22:	00 00       	nop
  24:	5b c0       	rjmp	.+182    	; 0xdc <__bad_interrupt>
  26:	00 00       	nop
  28:	59 c0       	rjmp	.+178    	; 0xdc <__bad_interrupt>
  2a:	00 00       	nop
  2c:	57 c0       	rjmp	.+174    	; 0xdc <__bad_interrupt>
  2e:	00 00       	nop
  30:	55 c0       	rjmp	.+170    	; 0xdc <__bad_interrupt>
  32:	00 00       	nop
  34:	53 c0       	rjmp	.+166    	; 0xdc <__bad_interrupt>
  36:	00 00       	nop
  38:	51 c0       	rjmp	.+162    	; 0xdc <__bad_interrupt>
  3a:	00 00       	nop
  3c:	4f c0       	rjmp	.+158    	; 0xdc <__bad_interrupt>
  3e:	00 00       	nop
  40:	4d c0       	rjmp	.+154    	; 0xdc <__bad_interrupt>
  42:	00 00       	nop
  44:	4b c0       	rjmp	.+150    	; 0xdc <__bad_interrupt>
  46:	00 00       	nop
  48:	be c2       	rjmp	.+1404   	; 0x5c6 <__vector_18>
  4a:	00 00       	nop
  4c:	47 c0       	rjmp	.+142    	; 0xdc <__bad_interrupt>
  4e:	00 00       	nop
  50:	c7 c1       	rjmp	.+910    	; 0x3e0 <__vector_20>
  52:	00 00       	nop
  54:	fb c1       	rjmp	.+1014   	; 0x44c <__vector_21>
  56:	00 00       	nop
  58:	41 c0       	rjmp	.+130    	; 0xdc <__bad_interrupt>
  5a:	00 00       	nop
  5c:	3f c0       	rjmp	.+126    	; 0xdc <__bad_interrupt>
  5e:	00 00       	nop
  60:	3d c0       	rjmp	.+122    	; 0xdc <__bad_interrupt>
  62:	00 00       	nop
  64:	3b c0       	rjmp	.+118    	; 0xdc <__bad_interrupt>
  66:	00 00       	nop
  68:	39 c0       	rjmp	.+114    	; 0xdc <__bad_interrupt>
  6a:	00 00       	nop
  6c:	37 c0       	rjmp	.+110    	; 0xdc <__bad_interrupt>
  6e:	00 00       	nop
  70:	35 c0       	rjmp	.+106    	; 0xdc <__bad_interrupt>
  72:	00 00       	nop
  74:	33 c0       	rjmp	.+102    	; 0xdc <__bad_interrupt>
  76:	00 00       	nop
  78:	31 c0       	rjmp	.+98     	; 0xdc <__bad_interrupt>
  7a:	00 00       	nop
  7c:	2f c0       	rjmp	.+94     	; 0xdc <__bad_interrupt>
  7e:	00 00       	nop
  80:	2d c0       	rjmp	.+90     	; 0xdc <__bad_interrupt>
  82:	00 00       	nop
  84:	2b c0       	rjmp	.+86     	; 0xdc <__bad_interrupt>
  86:	00 00       	nop
  88:	29 c0       	rjmp	.+82     	; 0xdc <__bad_interrupt>
	...

0000008c <__ctors_start>:
  8c:	58 02       	muls	r21, r24

0000008e <__ctors_end>:
  8e:	11 24       	eor	r1, r1
  90:	1f be       	out	0x3f, r1	; 63
  92:	cf ef       	ldi	r28, 0xFF	; 255
  94:	d0 e4       	ldi	r29, 0x40	; 64
  96:	de bf       	out	0x3e, r29	; 62
  98:	cd bf       	out	0x3d, r28	; 61

0000009a <__do_copy_data>:
  9a:	11 e0       	ldi	r17, 0x01	; 1
  9c:	a0 e0       	ldi	r26, 0x00	; 0
  9e:	b1 e0       	ldi	r27, 0x01	; 1
  a0:	e4 e4       	ldi	r30, 0x44	; 68
  a2:	f7 e0       	ldi	r31, 0x07	; 7
  a4:	00 e0       	ldi	r16, 0x00	; 0
  a6:	0b bf       	out	0x3b, r16	; 59
  a8:	02 c0       	rjmp	.+4      	; 0xae <__do_copy_data+0x14>
  aa:	07 90       	elpm	r0, Z+
  ac:	0d 92       	st	X+, r0
  ae:	ae 32       	cpi	r26, 0x2E	; 46
  b0:	b1 07       	cpc	r27, r17
  b2:	d9 f7       	brne	.-10     	; 0xaa <__do_copy_data+0x10>

000000b4 <__do_clear_bss>:
  b4:	21 e0       	ldi	r18, 0x01	; 1
  b6:	ae e2       	ldi	r26, 0x2E	; 46
  b8:	b1 e0       	ldi	r27, 0x01	; 1
  ba:	01 c0       	rjmp	.+2      	; 0xbe <.do_clear_bss_start>

000000bc <.do_clear_bss_loop>:
  bc:	1d 92       	st	X+, r1

000000be <.do_clear_bss_start>:
  be:	aa 3d       	cpi	r26, 0xDA	; 218
  c0:	b2 07       	cpc	r27, r18
  c2:	e1 f7       	brne	.-8      	; 0xbc <.do_clear_bss_loop>

000000c4 <__do_global_ctors>:
  c4:	10 e0       	ldi	r17, 0x00	; 0
  c6:	c7 e4       	ldi	r28, 0x47	; 71
  c8:	d0 e0       	ldi	r29, 0x00	; 0
  ca:	03 c0       	rjmp	.+6      	; 0xd2 <__do_global_ctors+0xe>
  cc:	21 97       	sbiw	r28, 0x01	; 1
  ce:	fe 01       	movw	r30, r28
  d0:	2e d3       	rcall	.+1628   	; 0x72e <__tablejump2__>
  d2:	c6 34       	cpi	r28, 0x46	; 70
  d4:	d1 07       	cpc	r29, r17
  d6:	d1 f7       	brne	.-12     	; 0xcc <__do_global_ctors+0x8>
  d8:	19 d2       	rcall	.+1074   	; 0x50c <main>
  da:	32 c3       	rjmp	.+1636   	; 0x740 <_exit>

000000dc <__bad_interrupt>:
  dc:	91 cf       	rjmp	.-222    	; 0x0 <__vectors>

000000de <setup>:
  public:
    inline HardwareSerial(
      volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
      volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
      volatile uint8_t *ucsrc, volatile uint8_t *udr);
    void begin(unsigned long baud) { begin(baud, SERIAL_8N1); }
  de:	26 e0       	ldi	r18, 0x06	; 6
  e0:	40 e8       	ldi	r20, 0x80	; 128
  e2:	55 e2       	ldi	r21, 0x25	; 37
  e4:	60 e0       	ldi	r22, 0x00	; 0
  e6:	70 e0       	ldi	r23, 0x00	; 0
  e8:	84 e3       	ldi	r24, 0x34	; 52
  ea:	91 e0       	ldi	r25, 0x01	; 1
  ec:	16 d1       	rcall	.+556    	; 0x31a <_ZN14HardwareSerial5beginEmh>

void setup() {
	// Initialize serial with baud 9600 bit per second
	Serial.begin(9600);
	// Print hello world on terminal
	Serial.println("Hello World");
  ee:	60 e0       	ldi	r22, 0x00	; 0
  f0:	71 e0       	ldi	r23, 0x01	; 1
  f2:	84 e3       	ldi	r24, 0x34	; 52
  f4:	91 e0       	ldi	r25, 0x01	; 1
  f6:	57 d2       	rcall	.+1198   	; 0x5a6 <_ZN5Print7printlnEPKc>
	// Print shell sign
	Serial.print(">");
  f8:	6c e0       	ldi	r22, 0x0C	; 12
  fa:	71 e0       	ldi	r23, 0x01	; 1
  fc:	84 e3       	ldi	r24, 0x34	; 52
  fe:	91 e0       	ldi	r25, 0x01	; 1
 100:	4e d2       	rcall	.+1180   	; 0x59e <_ZN5Print5printEPKc>

	DDRA |= (1 << PORTA0);
 102:	08 9a       	sbi	0x01, 0	; 1
	PORTA &= ~(1 << PORTA0);
 104:	10 98       	cbi	0x02, 0	; 2
 106:	08 95       	ret

00000108 <loop>:
}

char in[4];
char k, u;

void loop() {
 108:	cf 93       	push	r28
	// Wait for serial input from device
	while(!Serial.available());
 10a:	84 e3       	ldi	r24, 0x34	; 52
 10c:	91 e0       	ldi	r25, 0x01	; 1
 10e:	31 d0       	rcall	.+98     	; 0x172 <_ZN14HardwareSerial9availableEv>
 110:	89 2b       	or	r24, r25
 112:	d9 f3       	breq	.-10     	; 0x10a <loop+0x2>
	// Read input data
	u = Serial.read();
 114:	84 e3       	ldi	r24, 0x34	; 52
 116:	91 e0       	ldi	r25, 0x01	; 1
 118:	46 d0       	rcall	.+140    	; 0x1a6 <_ZN14HardwareSerial4readEv>
 11a:	80 93 2e 01 	sts	0x012E, r24	; 0x80012e <__data_end>
	// Compare input data if it is enter key pressed
	if(u != '\r') {
 11e:	8d 30       	cpi	r24, 0x0D	; 13
 120:	71 f0       	breq	.+28     	; 0x13e <loop+0x36>
		in[k++] = Serial.read();
 122:	c0 91 2f 01 	lds	r28, 0x012F	; 0x80012f <k>
 126:	81 e0       	ldi	r24, 0x01	; 1
 128:	8c 0f       	add	r24, r28
 12a:	80 93 2f 01 	sts	0x012F, r24	; 0x80012f <k>
 12e:	84 e3       	ldi	r24, 0x34	; 52
 130:	91 e0       	ldi	r25, 0x01	; 1
 132:	39 d0       	rcall	.+114    	; 0x1a6 <_ZN14HardwareSerial4readEv>
 134:	ec 2f       	mov	r30, r28
 136:	f0 e0       	ldi	r31, 0x00	; 0
 138:	e0 5d       	subi	r30, 0xD0	; 208
 13a:	fe 4f       	sbci	r31, 0xFE	; 254
 13c:	80 83       	st	Z, r24
	}

	// Compare buffer elements to check if is ON
	if(in[0] == 'O' && in[1] == 'N') {
 13e:	e0 e3       	ldi	r30, 0x30	; 48
 140:	f1 e0       	ldi	r31, 0x01	; 1
 142:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <in>
 146:	8f 34       	cpi	r24, 0x4F	; 79
 148:	91 f4       	brne	.+36     	; 0x16e <loop+0x66>
 14a:	80 91 31 01 	lds	r24, 0x0131	; 0x800131 <in+0x1>
 14e:	8e 34       	cpi	r24, 0x4E	; 78
 150:	11 f4       	brne	.+4      	; 0x156 <loop+0x4e>
		// Turn motor on
		PORTA |= (1 << PORTA0);
 152:	10 9a       	sbi	0x02, 0	; 2
 154:	07 c0       	rjmp	.+14     	; 0x164 <loop+0x5c>
		// Clean buffer
		memset(in, 0x00, sizeof(in));
	}
	// Compare buffer elements to check if is OFF
	else if(in[0] == 'O' && in[1] == 'F' && in[2] == 'F') {
 156:	86 34       	cpi	r24, 0x46	; 70
 158:	51 f4       	brne	.+20     	; 0x16e <loop+0x66>
 15a:	80 91 32 01 	lds	r24, 0x0132	; 0x800132 <in+0x2>
 15e:	86 34       	cpi	r24, 0x46	; 70
 160:	31 f4       	brne	.+12     	; 0x16e <loop+0x66>
		// Turn motor off
		PORTA &= ~(1 << PORTA0);
 162:	10 98       	cbi	0x02, 0	; 2
		// Clear buffer
		memset(in, 0x00, sizeof(in));
 164:	84 e0       	ldi	r24, 0x04	; 4
 166:	df 01       	movw	r26, r30
 168:	1d 92       	st	X+, r1
 16a:	8a 95       	dec	r24
 16c:	e9 f7       	brne	.-6      	; 0x168 <loop+0x60>
	}
}
 16e:	cf 91       	pop	r28
 170:	08 95       	ret

00000172 <_ZN14HardwareSerial9availableEv>:
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
}

int HardwareSerial::available(void)
{
 172:	fc 01       	movw	r30, r24
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
 174:	91 8d       	ldd	r25, Z+25	; 0x19
 176:	22 8d       	ldd	r18, Z+26	; 0x1a
 178:	89 2f       	mov	r24, r25
 17a:	90 e0       	ldi	r25, 0x00	; 0
 17c:	80 5c       	subi	r24, 0xC0	; 192
 17e:	9f 4f       	sbci	r25, 0xFF	; 255
 180:	82 1b       	sub	r24, r18
 182:	91 09       	sbc	r25, r1
}
 184:	8f 73       	andi	r24, 0x3F	; 63
 186:	99 27       	eor	r25, r25
 188:	08 95       	ret

0000018a <_ZN14HardwareSerial4peekEv>:

int HardwareSerial::peek(void)
{
 18a:	fc 01       	movw	r30, r24
  if (_rx_buffer_head == _rx_buffer_tail) {
 18c:	91 8d       	ldd	r25, Z+25	; 0x19
 18e:	82 8d       	ldd	r24, Z+26	; 0x1a
 190:	98 17       	cp	r25, r24
 192:	31 f0       	breq	.+12     	; 0x1a0 <_ZN14HardwareSerial4peekEv+0x16>
    return -1;
  } else {
    return _rx_buffer[_rx_buffer_tail];
 194:	82 8d       	ldd	r24, Z+26	; 0x1a
 196:	e8 0f       	add	r30, r24
 198:	f1 1d       	adc	r31, r1
 19a:	85 8d       	ldd	r24, Z+29	; 0x1d
 19c:	90 e0       	ldi	r25, 0x00	; 0
 19e:	08 95       	ret
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
 1a0:	8f ef       	ldi	r24, 0xFF	; 255
 1a2:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    return _rx_buffer[_rx_buffer_tail];
  }
}
 1a4:	08 95       	ret

000001a6 <_ZN14HardwareSerial4readEv>:

int HardwareSerial::read(void)
{
 1a6:	fc 01       	movw	r30, r24
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
 1a8:	91 8d       	ldd	r25, Z+25	; 0x19
 1aa:	82 8d       	ldd	r24, Z+26	; 0x1a
 1ac:	98 17       	cp	r25, r24
 1ae:	61 f0       	breq	.+24     	; 0x1c8 <_ZN14HardwareSerial4readEv+0x22>
    return -1;
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
 1b0:	82 8d       	ldd	r24, Z+26	; 0x1a
 1b2:	df 01       	movw	r26, r30
 1b4:	a8 0f       	add	r26, r24
 1b6:	b1 1d       	adc	r27, r1
 1b8:	5d 96       	adiw	r26, 0x1d	; 29
 1ba:	8c 91       	ld	r24, X
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
 1bc:	92 8d       	ldd	r25, Z+26	; 0x1a
 1be:	9f 5f       	subi	r25, 0xFF	; 255
 1c0:	9f 73       	andi	r25, 0x3F	; 63
 1c2:	92 8f       	std	Z+26, r25	; 0x1a
    return c;
 1c4:	90 e0       	ldi	r25, 0x00	; 0
 1c6:	08 95       	ret

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
 1c8:	8f ef       	ldi	r24, 0xFF	; 255
 1ca:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    return c;
  }
}
 1cc:	08 95       	ret

000001ce <_Z14serialEventRunv>:
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
 1ce:	8f e4       	ldi	r24, 0x4F	; 79
 1d0:	92 e0       	ldi	r25, 0x02	; 2
 1d2:	89 2b       	or	r24, r25
 1d4:	39 f0       	breq	.+14     	; 0x1e4 <_Z14serialEventRunv+0x16>
 1d6:	80 e0       	ldi	r24, 0x00	; 0
 1d8:	90 e0       	ldi	r25, 0x00	; 0
 1da:	89 2b       	or	r24, r25
 1dc:	19 f0       	breq	.+6      	; 0x1e4 <_Z14serialEventRunv+0x16>
 1de:	5f d1       	rcall	.+702    	; 0x49e <_Z17Serial0_availablev>
 1e0:	81 11       	cpse	r24, r1
 1e2:	0d c0       	rjmp	.+26     	; 0x1fe <_Z14serialEventRunv+0x30>
#endif
#if defined(HAVE_HWSERIAL1)
  if (Serial1_available && serialEvent1 && Serial1_available()) serialEvent1();
 1e4:	80 e0       	ldi	r24, 0x00	; 0
 1e6:	90 e0       	ldi	r25, 0x00	; 0
 1e8:	89 2b       	or	r24, r25
 1ea:	71 f0       	breq	.+28     	; 0x208 <_Z14serialEventRunv+0x3a>
 1ec:	80 e0       	ldi	r24, 0x00	; 0
 1ee:	90 e0       	ldi	r25, 0x00	; 0
 1f0:	89 2b       	or	r24, r25
 1f2:	51 f0       	breq	.+20     	; 0x208 <_Z14serialEventRunv+0x3a>
 1f4:	0e 94 00 00 	call	0	; 0x0 <__vectors>
 1f8:	81 11       	cpse	r24, r1
 1fa:	04 c0       	rjmp	.+8      	; 0x204 <_Z14serialEventRunv+0x36>
 1fc:	08 95       	ret
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
 1fe:	0e 94 00 00 	call	0	; 0x0 <__vectors>
 202:	f0 cf       	rjmp	.-32     	; 0x1e4 <_Z14serialEventRunv+0x16>
#endif
#if defined(HAVE_HWSERIAL1)
  if (Serial1_available && serialEvent1 && Serial1_available()) serialEvent1();
 204:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
 208:	08 95       	ret

0000020a <_ZN14HardwareSerial17_tx_udr_empty_irqEv>:
}

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
 20a:	fc 01       	movw	r30, r24
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
 20c:	84 8d       	ldd	r24, Z+28	; 0x1c
 20e:	df 01       	movw	r26, r30
 210:	a8 0f       	add	r26, r24
 212:	b1 1d       	adc	r27, r1
 214:	a3 5a       	subi	r26, 0xA3	; 163
 216:	bf 4f       	sbci	r27, 0xFF	; 255
 218:	2c 91       	ld	r18, X
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
 21a:	84 8d       	ldd	r24, Z+28	; 0x1c
 21c:	90 e0       	ldi	r25, 0x00	; 0
 21e:	01 96       	adiw	r24, 0x01	; 1
 220:	8f 73       	andi	r24, 0x3F	; 63
 222:	99 27       	eor	r25, r25
 224:	84 8f       	std	Z+28, r24	; 0x1c

  *_udr = c;
 226:	a6 89       	ldd	r26, Z+22	; 0x16
 228:	b7 89       	ldd	r27, Z+23	; 0x17
 22a:	2c 93       	st	X, r18

  // clear the TXC bit -- "can be cleared by writing a one to its bit
  // location". This makes sure flush() won't return until the bytes
  // actually got written
  sbi(*_ucsra, TXC0);
 22c:	a0 89       	ldd	r26, Z+16	; 0x10
 22e:	b1 89       	ldd	r27, Z+17	; 0x11
 230:	8c 91       	ld	r24, X
 232:	80 64       	ori	r24, 0x40	; 64
 234:	8c 93       	st	X, r24

  if (_tx_buffer_head == _tx_buffer_tail) {
 236:	93 8d       	ldd	r25, Z+27	; 0x1b
 238:	84 8d       	ldd	r24, Z+28	; 0x1c
 23a:	98 13       	cpse	r25, r24
 23c:	06 c0       	rjmp	.+12     	; 0x24a <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x40>
    // Buffer empty, so disable interrupts
    cbi(*_ucsrb, UDRIE0);
 23e:	02 88       	ldd	r0, Z+18	; 0x12
 240:	f3 89       	ldd	r31, Z+19	; 0x13
 242:	e0 2d       	mov	r30, r0
 244:	80 81       	ld	r24, Z
 246:	8f 7d       	andi	r24, 0xDF	; 223
 248:	80 83       	st	Z, r24
 24a:	08 95       	ret

0000024c <_ZN14HardwareSerial5writeEh>:
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}

size_t HardwareSerial::write(uint8_t c)
{
 24c:	ef 92       	push	r14
 24e:	ff 92       	push	r15
 250:	0f 93       	push	r16
 252:	1f 93       	push	r17
 254:	cf 93       	push	r28
 256:	df 93       	push	r29
 258:	ec 01       	movw	r28, r24
  _written = true;
 25a:	81 e0       	ldi	r24, 0x01	; 1
 25c:	88 8f       	std	Y+24, r24	; 0x18
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
 25e:	9b 8d       	ldd	r25, Y+27	; 0x1b
 260:	8c 8d       	ldd	r24, Y+28	; 0x1c
 262:	98 13       	cpse	r25, r24
 264:	05 c0       	rjmp	.+10     	; 0x270 <_ZN14HardwareSerial5writeEh+0x24>
 266:	e8 89       	ldd	r30, Y+16	; 0x10
 268:	f9 89       	ldd	r31, Y+17	; 0x11
 26a:	80 81       	ld	r24, Z
 26c:	85 fd       	sbrc	r24, 5
 26e:	23 c0       	rjmp	.+70     	; 0x2b6 <_ZN14HardwareSerial5writeEh+0x6a>
 270:	f6 2e       	mov	r15, r22
    *_udr = c;
    sbi(*_ucsra, TXC0);
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
 272:	0b 8d       	ldd	r16, Y+27	; 0x1b
 274:	10 e0       	ldi	r17, 0x00	; 0
 276:	0f 5f       	subi	r16, 0xFF	; 255
 278:	1f 4f       	sbci	r17, 0xFF	; 255
 27a:	0f 73       	andi	r16, 0x3F	; 63
 27c:	11 27       	eor	r17, r17
 27e:	e0 2e       	mov	r14, r16
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
 280:	8c 8d       	ldd	r24, Y+28	; 0x1c
 282:	e8 12       	cpse	r14, r24
 284:	0b c0       	rjmp	.+22     	; 0x29c <_ZN14HardwareSerial5writeEh+0x50>
    if (bit_is_clear(SREG, SREG_I)) {
 286:	0f b6       	in	r0, 0x3f	; 63
 288:	07 fc       	sbrc	r0, 7
 28a:	fa cf       	rjmp	.-12     	; 0x280 <_ZN14HardwareSerial5writeEh+0x34>
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
 28c:	e8 89       	ldd	r30, Y+16	; 0x10
 28e:	f9 89       	ldd	r31, Y+17	; 0x11
 290:	80 81       	ld	r24, Z
 292:	85 ff       	sbrs	r24, 5
 294:	f5 cf       	rjmp	.-22     	; 0x280 <_ZN14HardwareSerial5writeEh+0x34>
	_tx_udr_empty_irq();
 296:	ce 01       	movw	r24, r28
 298:	b8 df       	rcall	.-144    	; 0x20a <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
 29a:	f2 cf       	rjmp	.-28     	; 0x280 <_ZN14HardwareSerial5writeEh+0x34>
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
 29c:	8b 8d       	ldd	r24, Y+27	; 0x1b
 29e:	fe 01       	movw	r30, r28
 2a0:	e8 0f       	add	r30, r24
 2a2:	f1 1d       	adc	r31, r1
 2a4:	e3 5a       	subi	r30, 0xA3	; 163
 2a6:	ff 4f       	sbci	r31, 0xFF	; 255
 2a8:	f0 82       	st	Z, r15
  _tx_buffer_head = i;
 2aa:	0b 8f       	std	Y+27, r16	; 0x1b
	
  sbi(*_ucsrb, UDRIE0);
 2ac:	ea 89       	ldd	r30, Y+18	; 0x12
 2ae:	fb 89       	ldd	r31, Y+19	; 0x13
 2b0:	80 81       	ld	r24, Z
 2b2:	80 62       	ori	r24, 0x20	; 32
 2b4:	07 c0       	rjmp	.+14     	; 0x2c4 <_ZN14HardwareSerial5writeEh+0x78>
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    *_udr = c;
 2b6:	ee 89       	ldd	r30, Y+22	; 0x16
 2b8:	ff 89       	ldd	r31, Y+23	; 0x17
 2ba:	60 83       	st	Z, r22
    sbi(*_ucsra, TXC0);
 2bc:	e8 89       	ldd	r30, Y+16	; 0x10
 2be:	f9 89       	ldd	r31, Y+17	; 0x11
 2c0:	80 81       	ld	r24, Z
 2c2:	80 64       	ori	r24, 0x40	; 64
 2c4:	80 83       	st	Z, r24
  _tx_buffer_head = i;
	
  sbi(*_ucsrb, UDRIE0);
  
  return 1;
}
 2c6:	81 e0       	ldi	r24, 0x01	; 1
 2c8:	90 e0       	ldi	r25, 0x00	; 0
 2ca:	df 91       	pop	r29
 2cc:	cf 91       	pop	r28
 2ce:	1f 91       	pop	r17
 2d0:	0f 91       	pop	r16
 2d2:	ff 90       	pop	r15
 2d4:	ef 90       	pop	r14
 2d6:	08 95       	ret

000002d8 <_ZN14HardwareSerial5flushEv>:
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
 2d8:	cf 93       	push	r28
 2da:	df 93       	push	r29
 2dc:	ec 01       	movw	r28, r24
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
 2de:	88 8d       	ldd	r24, Y+24	; 0x18
 2e0:	88 23       	and	r24, r24
 2e2:	c1 f0       	breq	.+48     	; 0x314 <_ZN14HardwareSerial5flushEv+0x3c>
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
 2e4:	ea 89       	ldd	r30, Y+18	; 0x12
 2e6:	fb 89       	ldd	r31, Y+19	; 0x13
 2e8:	80 81       	ld	r24, Z
 2ea:	85 fd       	sbrc	r24, 5
 2ec:	05 c0       	rjmp	.+10     	; 0x2f8 <_ZN14HardwareSerial5flushEv+0x20>
 2ee:	a8 89       	ldd	r26, Y+16	; 0x10
 2f0:	b9 89       	ldd	r27, Y+17	; 0x11
 2f2:	8c 91       	ld	r24, X
 2f4:	86 fd       	sbrc	r24, 6
 2f6:	0e c0       	rjmp	.+28     	; 0x314 <_ZN14HardwareSerial5flushEv+0x3c>
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
 2f8:	0f b6       	in	r0, 0x3f	; 63
 2fa:	07 fc       	sbrc	r0, 7
 2fc:	f5 cf       	rjmp	.-22     	; 0x2e8 <_ZN14HardwareSerial5flushEv+0x10>
 2fe:	80 81       	ld	r24, Z
 300:	85 ff       	sbrs	r24, 5
 302:	f2 cf       	rjmp	.-28     	; 0x2e8 <_ZN14HardwareSerial5flushEv+0x10>
	// Interrupts are globally disabled, but the DR empty
	// interrupt should be enabled, so poll the DR empty flag to
	// prevent deadlock
	if (bit_is_set(*_ucsra, UDRE0))
 304:	a8 89       	ldd	r26, Y+16	; 0x10
 306:	b9 89       	ldd	r27, Y+17	; 0x11
 308:	8c 91       	ld	r24, X
 30a:	85 ff       	sbrs	r24, 5
 30c:	ed cf       	rjmp	.-38     	; 0x2e8 <_ZN14HardwareSerial5flushEv+0x10>
	  _tx_udr_empty_irq();
 30e:	ce 01       	movw	r24, r28
 310:	7c df       	rcall	.-264    	; 0x20a <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
 312:	e8 cf       	rjmp	.-48     	; 0x2e4 <_ZN14HardwareSerial5flushEv+0xc>
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
 314:	df 91       	pop	r29
 316:	cf 91       	pop	r28
 318:	08 95       	ret

0000031a <_ZN14HardwareSerial5beginEmh>:
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
 31a:	cf 92       	push	r12
 31c:	df 92       	push	r13
 31e:	ef 92       	push	r14
 320:	ff 92       	push	r15
 322:	1f 93       	push	r17
 324:	cf 93       	push	r28
 326:	df 93       	push	r29
 328:	ec 01       	movw	r28, r24
 32a:	6a 01       	movw	r12, r20
 32c:	7b 01       	movw	r14, r22
 32e:	12 2f       	mov	r17, r18
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
  *_ucsra = 1 << U2X0;
 330:	e8 89       	ldd	r30, Y+16	; 0x10
 332:	f9 89       	ldd	r31, Y+17	; 0x11
 334:	82 e0       	ldi	r24, 0x02	; 2
 336:	80 83       	st	Z, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
 338:	41 15       	cp	r20, r1
 33a:	51 4e       	sbci	r21, 0xE1	; 225
 33c:	61 05       	cpc	r22, r1
 33e:	71 05       	cpc	r23, r1
 340:	a9 f0       	breq	.+42     	; 0x36c <_ZN14HardwareSerial5beginEmh+0x52>
// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
 342:	60 e0       	ldi	r22, 0x00	; 0
 344:	79 e0       	ldi	r23, 0x09	; 9
 346:	8d e3       	ldi	r24, 0x3D	; 61
 348:	90 e0       	ldi	r25, 0x00	; 0
 34a:	a7 01       	movw	r20, r14
 34c:	96 01       	movw	r18, r12
 34e:	cd d1       	rcall	.+922    	; 0x6ea <__udivmodsi4>
 350:	da 01       	movw	r26, r20
 352:	c9 01       	movw	r24, r18
 354:	01 97       	sbiw	r24, 0x01	; 1
 356:	a1 09       	sbc	r26, r1
 358:	b1 09       	sbc	r27, r1
 35a:	b6 95       	lsr	r27
 35c:	a7 95       	ror	r26
 35e:	97 95       	ror	r25
 360:	87 95       	ror	r24
 362:	9c 01       	movw	r18, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
 364:	21 15       	cp	r18, r1
 366:	80 e1       	ldi	r24, 0x10	; 16
 368:	38 07       	cpc	r19, r24
 36a:	a0 f0       	brcs	.+40     	; 0x394 <_ZN14HardwareSerial5beginEmh+0x7a>
  {
    *_ucsra = 0;
 36c:	e8 89       	ldd	r30, Y+16	; 0x10
 36e:	f9 89       	ldd	r31, Y+17	; 0x11
 370:	10 82       	st	Z, r1
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
 372:	60 e8       	ldi	r22, 0x80	; 128
 374:	74 e8       	ldi	r23, 0x84	; 132
 376:	8e e1       	ldi	r24, 0x1E	; 30
 378:	90 e0       	ldi	r25, 0x00	; 0
 37a:	a7 01       	movw	r20, r14
 37c:	96 01       	movw	r18, r12
 37e:	b5 d1       	rcall	.+874    	; 0x6ea <__udivmodsi4>
 380:	da 01       	movw	r26, r20
 382:	c9 01       	movw	r24, r18
 384:	01 97       	sbiw	r24, 0x01	; 1
 386:	a1 09       	sbc	r26, r1
 388:	b1 09       	sbc	r27, r1
 38a:	b6 95       	lsr	r27
 38c:	a7 95       	ror	r26
 38e:	97 95       	ror	r25
 390:	87 95       	ror	r24
 392:	9c 01       	movw	r18, r24
  }

  // assign the baud_setting, a.k.a. ubrr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
 394:	ec 85       	ldd	r30, Y+12	; 0x0c
 396:	fd 85       	ldd	r31, Y+13	; 0x0d
 398:	30 83       	st	Z, r19
  *_ubrrl = baud_setting;
 39a:	ee 85       	ldd	r30, Y+14	; 0x0e
 39c:	ff 85       	ldd	r31, Y+15	; 0x0f
 39e:	20 83       	st	Z, r18

  _written = false;
 3a0:	18 8e       	std	Y+24, r1	; 0x18

  //set the data bits, parity, and stop bits
#if defined(__AVR_ATmega8__)
  config |= 0x80; // select UCSRC register (shared with UBRRH)
#endif
  *_ucsrc = config;
 3a2:	ec 89       	ldd	r30, Y+20	; 0x14
 3a4:	fd 89       	ldd	r31, Y+21	; 0x15
 3a6:	10 83       	st	Z, r17
  
  sbi(*_ucsrb, RXEN0);
 3a8:	ea 89       	ldd	r30, Y+18	; 0x12
 3aa:	fb 89       	ldd	r31, Y+19	; 0x13
 3ac:	80 81       	ld	r24, Z
 3ae:	80 61       	ori	r24, 0x10	; 16
 3b0:	80 83       	st	Z, r24
  sbi(*_ucsrb, TXEN0);
 3b2:	ea 89       	ldd	r30, Y+18	; 0x12
 3b4:	fb 89       	ldd	r31, Y+19	; 0x13
 3b6:	80 81       	ld	r24, Z
 3b8:	88 60       	ori	r24, 0x08	; 8
 3ba:	80 83       	st	Z, r24
  sbi(*_ucsrb, RXCIE0);
 3bc:	ea 89       	ldd	r30, Y+18	; 0x12
 3be:	fb 89       	ldd	r31, Y+19	; 0x13
 3c0:	80 81       	ld	r24, Z
 3c2:	80 68       	ori	r24, 0x80	; 128
 3c4:	80 83       	st	Z, r24
  cbi(*_ucsrb, UDRIE0);
 3c6:	ea 89       	ldd	r30, Y+18	; 0x12
 3c8:	fb 89       	ldd	r31, Y+19	; 0x13
 3ca:	80 81       	ld	r24, Z
 3cc:	8f 7d       	andi	r24, 0xDF	; 223
 3ce:	80 83       	st	Z, r24
}
 3d0:	df 91       	pop	r29
 3d2:	cf 91       	pop	r28
 3d4:	1f 91       	pop	r17
 3d6:	ff 90       	pop	r15
 3d8:	ef 90       	pop	r14
 3da:	df 90       	pop	r13
 3dc:	cf 90       	pop	r12
 3de:	08 95       	ret

000003e0 <__vector_20>:
#elif defined(USART_RXC_vect)
  ISR(USART_RXC_vect) // ATmega8
#else
  #error "Don't know what the Data Received vector is called for Serial"
#endif
  {
 3e0:	1f 92       	push	r1
 3e2:	0f 92       	push	r0
 3e4:	0f b6       	in	r0, 0x3f	; 63
 3e6:	0f 92       	push	r0
 3e8:	11 24       	eor	r1, r1
 3ea:	0b b6       	in	r0, 0x3b	; 59
 3ec:	0f 92       	push	r0
 3ee:	2f 93       	push	r18
 3f0:	8f 93       	push	r24
 3f2:	9f 93       	push	r25
 3f4:	ef 93       	push	r30
 3f6:	ff 93       	push	r31

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
 3f8:	e0 91 44 01 	lds	r30, 0x0144	; 0x800144 <Serial+0x10>
 3fc:	f0 91 45 01 	lds	r31, 0x0145	; 0x800145 <Serial+0x11>
 400:	80 81       	ld	r24, Z
 402:	e0 91 4a 01 	lds	r30, 0x014A	; 0x80014a <Serial+0x16>
 406:	f0 91 4b 01 	lds	r31, 0x014B	; 0x80014b <Serial+0x17>
 40a:	82 fd       	sbrc	r24, 2
 40c:	12 c0       	rjmp	.+36     	; 0x432 <__LOCK_REGION_LENGTH__+0x32>
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
 40e:	90 81       	ld	r25, Z
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
 410:	80 91 4d 01 	lds	r24, 0x014D	; 0x80014d <Serial+0x19>
 414:	8f 5f       	subi	r24, 0xFF	; 255
 416:	8f 73       	andi	r24, 0x3F	; 63

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
 418:	20 91 4e 01 	lds	r18, 0x014E	; 0x80014e <Serial+0x1a>
 41c:	82 17       	cp	r24, r18
 41e:	51 f0       	breq	.+20     	; 0x434 <__LOCK_REGION_LENGTH__+0x34>
      _rx_buffer[_rx_buffer_head] = c;
 420:	e0 91 4d 01 	lds	r30, 0x014D	; 0x80014d <Serial+0x19>
 424:	f0 e0       	ldi	r31, 0x00	; 0
 426:	ec 5c       	subi	r30, 0xCC	; 204
 428:	fe 4f       	sbci	r31, 0xFE	; 254
 42a:	95 8f       	std	Z+29, r25	; 0x1d
      _rx_buffer_head = i;
 42c:	80 93 4d 01 	sts	0x014D, r24	; 0x80014d <Serial+0x19>
 430:	01 c0       	rjmp	.+2      	; 0x434 <__LOCK_REGION_LENGTH__+0x34>
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
 432:	80 81       	ld	r24, Z
    Serial._rx_complete_irq();
  }
 434:	ff 91       	pop	r31
 436:	ef 91       	pop	r30
 438:	9f 91       	pop	r25
 43a:	8f 91       	pop	r24
 43c:	2f 91       	pop	r18
 43e:	0f 90       	pop	r0
 440:	0b be       	out	0x3b, r0	; 59
 442:	0f 90       	pop	r0
 444:	0f be       	out	0x3f, r0	; 63
 446:	0f 90       	pop	r0
 448:	1f 90       	pop	r1
 44a:	18 95       	reti

0000044c <__vector_21>:
#elif defined(USART_UDRE_vect)
ISR(USART_UDRE_vect)
#else
  #error "Don't know what the Data Register Empty vector is called for Serial"
#endif
{
 44c:	1f 92       	push	r1
 44e:	0f 92       	push	r0
 450:	0f b6       	in	r0, 0x3f	; 63
 452:	0f 92       	push	r0
 454:	11 24       	eor	r1, r1
 456:	0b b6       	in	r0, 0x3b	; 59
 458:	0f 92       	push	r0
 45a:	2f 93       	push	r18
 45c:	3f 93       	push	r19
 45e:	4f 93       	push	r20
 460:	5f 93       	push	r21
 462:	6f 93       	push	r22
 464:	7f 93       	push	r23
 466:	8f 93       	push	r24
 468:	9f 93       	push	r25
 46a:	af 93       	push	r26
 46c:	bf 93       	push	r27
 46e:	ef 93       	push	r30
 470:	ff 93       	push	r31
  Serial._tx_udr_empty_irq();
 472:	84 e3       	ldi	r24, 0x34	; 52
 474:	91 e0       	ldi	r25, 0x01	; 1
 476:	c9 de       	rcall	.-622    	; 0x20a <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
}
 478:	ff 91       	pop	r31
 47a:	ef 91       	pop	r30
 47c:	bf 91       	pop	r27
 47e:	af 91       	pop	r26
 480:	9f 91       	pop	r25
 482:	8f 91       	pop	r24
 484:	7f 91       	pop	r23
 486:	6f 91       	pop	r22
 488:	5f 91       	pop	r21
 48a:	4f 91       	pop	r20
 48c:	3f 91       	pop	r19
 48e:	2f 91       	pop	r18
 490:	0f 90       	pop	r0
 492:	0b be       	out	0x3b, r0	; 59
 494:	0f 90       	pop	r0
 496:	0f be       	out	0x3f, r0	; 63
 498:	0f 90       	pop	r0
 49a:	1f 90       	pop	r1
 49c:	18 95       	reti

0000049e <_Z17Serial0_availablev>:
#endif

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
 49e:	84 e3       	ldi	r24, 0x34	; 52
 4a0:	91 e0       	ldi	r25, 0x01	; 1
 4a2:	67 de       	rcall	.-818    	; 0x172 <_ZN14HardwareSerial9availableEv>
 4a4:	21 e0       	ldi	r18, 0x01	; 1
 4a6:	89 2b       	or	r24, r25
 4a8:	09 f4       	brne	.+2      	; 0x4ac <_Z17Serial0_availablev+0xe>
 4aa:	20 e0       	ldi	r18, 0x00	; 0
}
 4ac:	82 2f       	mov	r24, r18
 4ae:	08 95       	ret

000004b0 <_GLOBAL__sub_I___vector_20>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
 4b0:	e4 e3       	ldi	r30, 0x34	; 52
 4b2:	f1 e0       	ldi	r31, 0x01	; 1
 4b4:	13 82       	std	Z+3, r1	; 0x03
 4b6:	12 82       	std	Z+2, r1	; 0x02
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 4b8:	88 ee       	ldi	r24, 0xE8	; 232
 4ba:	93 e0       	ldi	r25, 0x03	; 3
 4bc:	a0 e0       	ldi	r26, 0x00	; 0
 4be:	b0 e0       	ldi	r27, 0x00	; 0
 4c0:	84 83       	std	Z+4, r24	; 0x04
 4c2:	95 83       	std	Z+5, r25	; 0x05
 4c4:	a6 83       	std	Z+6, r26	; 0x06
 4c6:	b7 83       	std	Z+7, r27	; 0x07
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
 4c8:	82 e1       	ldi	r24, 0x12	; 18
 4ca:	91 e0       	ldi	r25, 0x01	; 1
 4cc:	91 83       	std	Z+1, r25	; 0x01
 4ce:	80 83       	st	Z, r24
 4d0:	85 ec       	ldi	r24, 0xC5	; 197
 4d2:	90 e0       	ldi	r25, 0x00	; 0
 4d4:	95 87       	std	Z+13, r25	; 0x0d
 4d6:	84 87       	std	Z+12, r24	; 0x0c
 4d8:	84 ec       	ldi	r24, 0xC4	; 196
 4da:	90 e0       	ldi	r25, 0x00	; 0
 4dc:	97 87       	std	Z+15, r25	; 0x0f
 4de:	86 87       	std	Z+14, r24	; 0x0e
 4e0:	80 ec       	ldi	r24, 0xC0	; 192
 4e2:	90 e0       	ldi	r25, 0x00	; 0
 4e4:	91 8b       	std	Z+17, r25	; 0x11
 4e6:	80 8b       	std	Z+16, r24	; 0x10
 4e8:	81 ec       	ldi	r24, 0xC1	; 193
 4ea:	90 e0       	ldi	r25, 0x00	; 0
 4ec:	93 8b       	std	Z+19, r25	; 0x13
 4ee:	82 8b       	std	Z+18, r24	; 0x12
 4f0:	82 ec       	ldi	r24, 0xC2	; 194
 4f2:	90 e0       	ldi	r25, 0x00	; 0
 4f4:	95 8b       	std	Z+21, r25	; 0x15
 4f6:	84 8b       	std	Z+20, r24	; 0x14
 4f8:	86 ec       	ldi	r24, 0xC6	; 198
 4fa:	90 e0       	ldi	r25, 0x00	; 0
 4fc:	97 8b       	std	Z+23, r25	; 0x17
 4fe:	86 8b       	std	Z+22, r24	; 0x16
 500:	11 8e       	std	Z+25, r1	; 0x19
 502:	12 8e       	std	Z+26, r1	; 0x1a
 504:	13 8e       	std	Z+27, r1	; 0x1b
 506:	14 8e       	std	Z+28, r1	; 0x1c
 508:	08 95       	ret

0000050a <initVariant>:
 50a:	08 95       	ret

0000050c <main>:
void setupUSB() __attribute__((weak));
void setupUSB() { }

int main(void)
{
	init();
 50c:	a6 d0       	rcall	.+332    	; 0x65a <init>

	initVariant();
 50e:	fd df       	rcall	.-6      	; 0x50a <initVariant>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
 510:	e6 dd       	rcall	.-1076   	; 0xde <setup>
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
 512:	c7 ee       	ldi	r28, 0xE7	; 231
 514:	d0 e0       	ldi	r29, 0x00	; 0
#endif
	
	setup();
    
	for (;;) {
		loop();
 516:	f8 dd       	rcall	.-1040   	; 0x108 <loop>
		if (serialEventRun) serialEventRun();
 518:	20 97       	sbiw	r28, 0x00	; 0
 51a:	e9 f3       	breq	.-6      	; 0x516 <main+0xa>
 51c:	58 de       	rcall	.-848    	; 0x1ce <_Z14serialEventRunv>
 51e:	fb cf       	rjmp	.-10     	; 0x516 <main+0xa>

00000520 <_ZN5Print5writeEPKhj>:
 520:	cf 92       	push	r12
size_t Print::println(const String &s)
{
  size_t n = print(s);
  n += println();
  return n;
}
 522:	df 92       	push	r13
 524:	ef 92       	push	r14
 526:	ff 92       	push	r15
 528:	0f 93       	push	r16
 52a:	1f 93       	push	r17
 52c:	cf 93       	push	r28
 52e:	df 93       	push	r29
 530:	6c 01       	movw	r12, r24
 532:	7a 01       	movw	r14, r20
 534:	8b 01       	movw	r16, r22
 536:	c0 e0       	ldi	r28, 0x00	; 0
 538:	d0 e0       	ldi	r29, 0x00	; 0
 53a:	ce 15       	cp	r28, r14
 53c:	df 05       	cpc	r29, r15
 53e:	81 f0       	breq	.+32     	; 0x560 <_ZN5Print5writeEPKhj+0x40>
 540:	d8 01       	movw	r26, r16
 542:	6d 91       	ld	r22, X+
 544:	8d 01       	movw	r16, r26
 546:	d6 01       	movw	r26, r12
 548:	ed 91       	ld	r30, X+
 54a:	fc 91       	ld	r31, X
 54c:	01 90       	ld	r0, Z+
 54e:	f0 81       	ld	r31, Z
 550:	e0 2d       	mov	r30, r0
 552:	c6 01       	movw	r24, r12
 554:	09 95       	icall
 556:	89 2b       	or	r24, r25
 558:	11 f0       	breq	.+4      	; 0x55e <_ZN5Print5writeEPKhj+0x3e>
 55a:	21 96       	adiw	r28, 0x01	; 1
 55c:	ee cf       	rjmp	.-36     	; 0x53a <_ZN5Print5writeEPKhj+0x1a>
 55e:	7e 01       	movw	r14, r28
 560:	c7 01       	movw	r24, r14
 562:	df 91       	pop	r29
 564:	cf 91       	pop	r28
 566:	1f 91       	pop	r17
 568:	0f 91       	pop	r16
 56a:	ff 90       	pop	r15
 56c:	ef 90       	pop	r14
 56e:	df 90       	pop	r13
 570:	cf 90       	pop	r12
 572:	08 95       	ret

00000574 <_ZN5Print5writeEPKc>:
 574:	61 15       	cp	r22, r1
 576:	71 05       	cpc	r23, r1
 578:	79 f0       	breq	.+30     	; 0x598 <_ZN5Print5writeEPKc+0x24>
 57a:	fb 01       	movw	r30, r22
 57c:	01 90       	ld	r0, Z+
 57e:	00 20       	and	r0, r0
 580:	e9 f7       	brne	.-6      	; 0x57c <_ZN5Print5writeEPKc+0x8>
 582:	31 97       	sbiw	r30, 0x01	; 1
 584:	af 01       	movw	r20, r30
 586:	46 1b       	sub	r20, r22
 588:	57 0b       	sbc	r21, r23
 58a:	dc 01       	movw	r26, r24
 58c:	ed 91       	ld	r30, X+
 58e:	fc 91       	ld	r31, X
 590:	02 80       	ldd	r0, Z+2	; 0x02
 592:	f3 81       	ldd	r31, Z+3	; 0x03
 594:	e0 2d       	mov	r30, r0
 596:	09 94       	ijmp
 598:	80 e0       	ldi	r24, 0x00	; 0
 59a:	90 e0       	ldi	r25, 0x00	; 0
 59c:	08 95       	ret

0000059e <_ZN5Print5printEPKc>:
 59e:	ea cf       	rjmp	.-44     	; 0x574 <_ZN5Print5writeEPKc>

000005a0 <_ZN5Print7printlnEv>:
 5a0:	6e e1       	ldi	r22, 0x1E	; 30
 5a2:	71 e0       	ldi	r23, 0x01	; 1
 5a4:	e7 cf       	rjmp	.-50     	; 0x574 <_ZN5Print5writeEPKc>

000005a6 <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
 5a6:	0f 93       	push	r16
 5a8:	1f 93       	push	r17
 5aa:	cf 93       	push	r28
 5ac:	df 93       	push	r29
 5ae:	ec 01       	movw	r28, r24
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
  return write(str);
 5b0:	e1 df       	rcall	.-62     	; 0x574 <_ZN5Print5writeEPKc>
 5b2:	8c 01       	movw	r16, r24
}

size_t Print::println(const char c[])
{
  size_t n = print(c);
  n += println();
 5b4:	ce 01       	movw	r24, r28
 5b6:	f4 df       	rcall	.-24     	; 0x5a0 <_ZN5Print7printlnEv>
  return n;
}
 5b8:	80 0f       	add	r24, r16
 5ba:	91 1f       	adc	r25, r17
 5bc:	df 91       	pop	r29
 5be:	cf 91       	pop	r28
 5c0:	1f 91       	pop	r17
 5c2:	0f 91       	pop	r16
 5c4:	08 95       	ret

000005c6 <__vector_18>:
	

#endif

	// busy wait
	__asm__ __volatile__ (
 5c6:	1f 92       	push	r1
 5c8:	0f 92       	push	r0
 5ca:	0f b6       	in	r0, 0x3f	; 63
 5cc:	0f 92       	push	r0
 5ce:	11 24       	eor	r1, r1
 5d0:	2f 93       	push	r18
 5d2:	3f 93       	push	r19
 5d4:	8f 93       	push	r24
 5d6:	9f 93       	push	r25
 5d8:	af 93       	push	r26
 5da:	bf 93       	push	r27
 5dc:	80 91 d2 01 	lds	r24, 0x01D2	; 0x8001d2 <timer0_millis>
 5e0:	90 91 d3 01 	lds	r25, 0x01D3	; 0x8001d3 <timer0_millis+0x1>
 5e4:	a0 91 d4 01 	lds	r26, 0x01D4	; 0x8001d4 <timer0_millis+0x2>
 5e8:	b0 91 d5 01 	lds	r27, 0x01D5	; 0x8001d5 <timer0_millis+0x3>
 5ec:	30 91 d1 01 	lds	r19, 0x01D1	; 0x8001d1 <timer0_fract>
 5f0:	23 e0       	ldi	r18, 0x03	; 3
 5f2:	23 0f       	add	r18, r19
 5f4:	2d 37       	cpi	r18, 0x7D	; 125
 5f6:	20 f4       	brcc	.+8      	; 0x600 <__vector_18+0x3a>
 5f8:	01 96       	adiw	r24, 0x01	; 1
 5fa:	a1 1d       	adc	r26, r1
 5fc:	b1 1d       	adc	r27, r1
 5fe:	05 c0       	rjmp	.+10     	; 0x60a <__vector_18+0x44>
 600:	26 e8       	ldi	r18, 0x86	; 134
 602:	23 0f       	add	r18, r19
 604:	02 96       	adiw	r24, 0x02	; 2
 606:	a1 1d       	adc	r26, r1
 608:	b1 1d       	adc	r27, r1
 60a:	20 93 d1 01 	sts	0x01D1, r18	; 0x8001d1 <timer0_fract>
 60e:	80 93 d2 01 	sts	0x01D2, r24	; 0x8001d2 <timer0_millis>
 612:	90 93 d3 01 	sts	0x01D3, r25	; 0x8001d3 <timer0_millis+0x1>
 616:	a0 93 d4 01 	sts	0x01D4, r26	; 0x8001d4 <timer0_millis+0x2>
 61a:	b0 93 d5 01 	sts	0x01D5, r27	; 0x8001d5 <timer0_millis+0x3>
 61e:	80 91 d6 01 	lds	r24, 0x01D6	; 0x8001d6 <timer0_overflow_count>
 622:	90 91 d7 01 	lds	r25, 0x01D7	; 0x8001d7 <timer0_overflow_count+0x1>
 626:	a0 91 d8 01 	lds	r26, 0x01D8	; 0x8001d8 <timer0_overflow_count+0x2>
 62a:	b0 91 d9 01 	lds	r27, 0x01D9	; 0x8001d9 <timer0_overflow_count+0x3>
 62e:	01 96       	adiw	r24, 0x01	; 1
 630:	a1 1d       	adc	r26, r1
 632:	b1 1d       	adc	r27, r1
 634:	80 93 d6 01 	sts	0x01D6, r24	; 0x8001d6 <timer0_overflow_count>
 638:	90 93 d7 01 	sts	0x01D7, r25	; 0x8001d7 <timer0_overflow_count+0x1>
 63c:	a0 93 d8 01 	sts	0x01D8, r26	; 0x8001d8 <timer0_overflow_count+0x2>
 640:	b0 93 d9 01 	sts	0x01D9, r27	; 0x8001d9 <timer0_overflow_count+0x3>
 644:	bf 91       	pop	r27
 646:	af 91       	pop	r26
 648:	9f 91       	pop	r25
 64a:	8f 91       	pop	r24
 64c:	3f 91       	pop	r19
 64e:	2f 91       	pop	r18
 650:	0f 90       	pop	r0
 652:	0f be       	out	0x3f, r0	; 63
 654:	0f 90       	pop	r0
 656:	1f 90       	pop	r1
 658:	18 95       	reti

0000065a <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
 65a:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
 65c:	84 b5       	in	r24, 0x24	; 36
 65e:	82 60       	ori	r24, 0x02	; 2
 660:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
 662:	84 b5       	in	r24, 0x24	; 36
 664:	81 60       	ori	r24, 0x01	; 1
 666:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
 668:	85 b5       	in	r24, 0x25	; 37
 66a:	82 60       	ori	r24, 0x02	; 2
 66c:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
 66e:	85 b5       	in	r24, 0x25	; 37
 670:	81 60       	ori	r24, 0x01	; 1
 672:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
 674:	ee e6       	ldi	r30, 0x6E	; 110
 676:	f0 e0       	ldi	r31, 0x00	; 0
 678:	80 81       	ld	r24, Z
 67a:	81 60       	ori	r24, 0x01	; 1
 67c:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
 67e:	e1 e8       	ldi	r30, 0x81	; 129
 680:	f0 e0       	ldi	r31, 0x00	; 0
 682:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
 684:	80 81       	ld	r24, Z
 686:	82 60       	ori	r24, 0x02	; 2
 688:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
 68a:	80 81       	ld	r24, Z
 68c:	81 60       	ori	r24, 0x01	; 1
 68e:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
 690:	e0 e8       	ldi	r30, 0x80	; 128
 692:	f0 e0       	ldi	r31, 0x00	; 0
 694:	80 81       	ld	r24, Z
 696:	81 60       	ori	r24, 0x01	; 1
 698:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
 69a:	e1 eb       	ldi	r30, 0xB1	; 177
 69c:	f0 e0       	ldi	r31, 0x00	; 0
 69e:	80 81       	ld	r24, Z
 6a0:	84 60       	ori	r24, 0x04	; 4
 6a2:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
 6a4:	e0 eb       	ldi	r30, 0xB0	; 176
 6a6:	f0 e0       	ldi	r31, 0x00	; 0
 6a8:	80 81       	ld	r24, Z
 6aa:	81 60       	ori	r24, 0x01	; 1
 6ac:	80 83       	st	Z, r24
//#else
	// Timer 2 not finished (may not be present on this CPU)
#endif

#if defined(TCCR3B) && defined(CS31) && defined(WGM30)
	sbi(TCCR3B, CS31);		// set timer 3 prescale factor to 64
 6ae:	e1 e9       	ldi	r30, 0x91	; 145
 6b0:	f0 e0       	ldi	r31, 0x00	; 0
 6b2:	80 81       	ld	r24, Z
 6b4:	82 60       	ori	r24, 0x02	; 2
 6b6:	80 83       	st	Z, r24
	sbi(TCCR3B, CS30);
 6b8:	80 81       	ld	r24, Z
 6ba:	81 60       	ori	r24, 0x01	; 1
 6bc:	80 83       	st	Z, r24
	sbi(TCCR3A, WGM30);		// put timer 3 in 8-bit phase correct pwm mode
 6be:	e0 e9       	ldi	r30, 0x90	; 144
 6c0:	f0 e0       	ldi	r31, 0x00	; 0
 6c2:	80 81       	ld	r24, Z
 6c4:	81 60       	ori	r24, 0x01	; 1
 6c6:	80 83       	st	Z, r24
#endif

#if defined(ADCSRA)
	// set a2d prescaler so we are inside the desired 50-200 KHz range.
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
 6c8:	ea e7       	ldi	r30, 0x7A	; 122
 6ca:	f0 e0       	ldi	r31, 0x00	; 0
 6cc:	80 81       	ld	r24, Z
 6ce:	84 60       	ori	r24, 0x04	; 4
 6d0:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS1);
 6d2:	80 81       	ld	r24, Z
 6d4:	82 60       	ori	r24, 0x02	; 2
 6d6:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS0);
 6d8:	80 81       	ld	r24, Z
 6da:	81 60       	ori	r24, 0x01	; 1
 6dc:	80 83       	st	Z, r24
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
 6de:	80 81       	ld	r24, Z
 6e0:	80 68       	ori	r24, 0x80	; 128
 6e2:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
 6e4:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
 6e8:	08 95       	ret

000006ea <__udivmodsi4>:
 6ea:	a1 e2       	ldi	r26, 0x21	; 33
 6ec:	1a 2e       	mov	r1, r26
 6ee:	aa 1b       	sub	r26, r26
 6f0:	bb 1b       	sub	r27, r27
 6f2:	fd 01       	movw	r30, r26
 6f4:	0d c0       	rjmp	.+26     	; 0x710 <__udivmodsi4_ep>

000006f6 <__udivmodsi4_loop>:
 6f6:	aa 1f       	adc	r26, r26
 6f8:	bb 1f       	adc	r27, r27
 6fa:	ee 1f       	adc	r30, r30
 6fc:	ff 1f       	adc	r31, r31
 6fe:	a2 17       	cp	r26, r18
 700:	b3 07       	cpc	r27, r19
 702:	e4 07       	cpc	r30, r20
 704:	f5 07       	cpc	r31, r21
 706:	20 f0       	brcs	.+8      	; 0x710 <__udivmodsi4_ep>
 708:	a2 1b       	sub	r26, r18
 70a:	b3 0b       	sbc	r27, r19
 70c:	e4 0b       	sbc	r30, r20
 70e:	f5 0b       	sbc	r31, r21

00000710 <__udivmodsi4_ep>:
 710:	66 1f       	adc	r22, r22
 712:	77 1f       	adc	r23, r23
 714:	88 1f       	adc	r24, r24
 716:	99 1f       	adc	r25, r25
 718:	1a 94       	dec	r1
 71a:	69 f7       	brne	.-38     	; 0x6f6 <__udivmodsi4_loop>
 71c:	60 95       	com	r22
 71e:	70 95       	com	r23
 720:	80 95       	com	r24
 722:	90 95       	com	r25
 724:	9b 01       	movw	r18, r22
 726:	ac 01       	movw	r20, r24
 728:	bd 01       	movw	r22, r26
 72a:	cf 01       	movw	r24, r30
 72c:	08 95       	ret

0000072e <__tablejump2__>:
 72e:	ee 0f       	add	r30, r30
 730:	ff 1f       	adc	r31, r31
 732:	00 24       	eor	r0, r0
 734:	00 1c       	adc	r0, r0
 736:	0b be       	out	0x3b, r0	; 59
 738:	07 90       	elpm	r0, Z+
 73a:	f6 91       	elpm	r31, Z
 73c:	e0 2d       	mov	r30, r0
 73e:	09 94       	ijmp

00000740 <_exit>:
 740:	f8 94       	cli

00000742 <__stop_program>:
 742:	ff cf       	rjmp	.-2      	; 0x742 <__stop_program>

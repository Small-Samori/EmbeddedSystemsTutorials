
Blank.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  000004ae  00000542  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000004ae  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000b  00800102  00800102  00000544  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000544  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000574  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000d0  00000000  00000000  000005b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000010fe  00000000  00000000  00000684  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000bfd  00000000  00000000  00001782  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000008e9  00000000  00000000  0000237f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001a0  00000000  00000000  00002c68  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000007cf  00000000  00000000  00002e08  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000040f  00000000  00000000  000035d7  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000090  00000000  00000000  000039e6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	7b c1       	rjmp	.+758    	; 0x340 <__vector_18>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	ee ea       	ldi	r30, 0xAE	; 174
  a0:	f4 e0       	ldi	r31, 0x04	; 4
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a2 30       	cpi	r26, 0x02	; 2
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a2 e0       	ldi	r26, 0x02	; 2
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	ad 30       	cpi	r26, 0x0D	; 13
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	33 d1       	rcall	.+614    	; 0x32a <main>
  c4:	f2 c1       	rjmp	.+996    	; 0x4aa <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <setup>:

uint16_t temperature = 0;

void setup() {
	// put your setup code here, to run once:
	temperature = analogRead(A3) * 0.488;
  c8:	8c e1       	ldi	r24, 0x1C	; 28
  ca:	cc d1       	rcall	.+920    	; 0x464 <analogRead>
  cc:	bc 01       	movw	r22, r24
  ce:	99 0f       	add	r25, r25
  d0:	88 0b       	sbc	r24, r24
  d2:	99 0b       	sbc	r25, r25
  d4:	3a d0       	rcall	.+116    	; 0x14a <__floatsisf>
  d6:	23 e2       	ldi	r18, 0x23	; 35
  d8:	3b ed       	ldi	r19, 0xDB	; 219
  da:	49 ef       	ldi	r20, 0xF9	; 249
  dc:	5e e3       	ldi	r21, 0x3E	; 62
  de:	99 d0       	rcall	.+306    	; 0x212 <__mulsf3>
  e0:	06 d0       	rcall	.+12     	; 0xee <__fixunssfsi>
  e2:	70 93 03 01 	sts	0x0103, r23	; 0x800103 <__data_end+0x1>
  e6:	60 93 02 01 	sts	0x0102, r22	; 0x800102 <__data_end>
  ea:	08 95       	ret

000000ec <loop>:
}

void loop() {
  ec:	08 95       	ret

000000ee <__fixunssfsi>:
  ee:	70 d0       	rcall	.+224    	; 0x1d0 <__fp_splitA>
  f0:	88 f0       	brcs	.+34     	; 0x114 <__fixunssfsi+0x26>
  f2:	9f 57       	subi	r25, 0x7F	; 127
  f4:	90 f0       	brcs	.+36     	; 0x11a <__fixunssfsi+0x2c>
  f6:	b9 2f       	mov	r27, r25
  f8:	99 27       	eor	r25, r25
  fa:	b7 51       	subi	r27, 0x17	; 23
  fc:	a0 f0       	brcs	.+40     	; 0x126 <__fixunssfsi+0x38>
  fe:	d1 f0       	breq	.+52     	; 0x134 <__fixunssfsi+0x46>
 100:	66 0f       	add	r22, r22
 102:	77 1f       	adc	r23, r23
 104:	88 1f       	adc	r24, r24
 106:	99 1f       	adc	r25, r25
 108:	1a f0       	brmi	.+6      	; 0x110 <__fixunssfsi+0x22>
 10a:	ba 95       	dec	r27
 10c:	c9 f7       	brne	.-14     	; 0x100 <__fixunssfsi+0x12>
 10e:	12 c0       	rjmp	.+36     	; 0x134 <__fixunssfsi+0x46>
 110:	b1 30       	cpi	r27, 0x01	; 1
 112:	81 f0       	breq	.+32     	; 0x134 <__fixunssfsi+0x46>
 114:	77 d0       	rcall	.+238    	; 0x204 <__fp_zero>
 116:	b1 e0       	ldi	r27, 0x01	; 1
 118:	08 95       	ret
 11a:	74 c0       	rjmp	.+232    	; 0x204 <__fp_zero>
 11c:	67 2f       	mov	r22, r23
 11e:	78 2f       	mov	r23, r24
 120:	88 27       	eor	r24, r24
 122:	b8 5f       	subi	r27, 0xF8	; 248
 124:	39 f0       	breq	.+14     	; 0x134 <__fixunssfsi+0x46>
 126:	b9 3f       	cpi	r27, 0xF9	; 249
 128:	cc f3       	brlt	.-14     	; 0x11c <__fixunssfsi+0x2e>
 12a:	86 95       	lsr	r24
 12c:	77 95       	ror	r23
 12e:	67 95       	ror	r22
 130:	b3 95       	inc	r27
 132:	d9 f7       	brne	.-10     	; 0x12a <__fixunssfsi+0x3c>
 134:	3e f4       	brtc	.+14     	; 0x144 <__fixunssfsi+0x56>
 136:	90 95       	com	r25
 138:	80 95       	com	r24
 13a:	70 95       	com	r23
 13c:	61 95       	neg	r22
 13e:	7f 4f       	sbci	r23, 0xFF	; 255
 140:	8f 4f       	sbci	r24, 0xFF	; 255
 142:	9f 4f       	sbci	r25, 0xFF	; 255
 144:	08 95       	ret

00000146 <__floatunsisf>:
 146:	e8 94       	clt
 148:	09 c0       	rjmp	.+18     	; 0x15c <__floatsisf+0x12>

0000014a <__floatsisf>:
 14a:	97 fb       	bst	r25, 7
 14c:	3e f4       	brtc	.+14     	; 0x15c <__floatsisf+0x12>
 14e:	90 95       	com	r25
 150:	80 95       	com	r24
 152:	70 95       	com	r23
 154:	61 95       	neg	r22
 156:	7f 4f       	sbci	r23, 0xFF	; 255
 158:	8f 4f       	sbci	r24, 0xFF	; 255
 15a:	9f 4f       	sbci	r25, 0xFF	; 255
 15c:	99 23       	and	r25, r25
 15e:	a9 f0       	breq	.+42     	; 0x18a <__floatsisf+0x40>
 160:	f9 2f       	mov	r31, r25
 162:	96 e9       	ldi	r25, 0x96	; 150
 164:	bb 27       	eor	r27, r27
 166:	93 95       	inc	r25
 168:	f6 95       	lsr	r31
 16a:	87 95       	ror	r24
 16c:	77 95       	ror	r23
 16e:	67 95       	ror	r22
 170:	b7 95       	ror	r27
 172:	f1 11       	cpse	r31, r1
 174:	f8 cf       	rjmp	.-16     	; 0x166 <__floatsisf+0x1c>
 176:	fa f4       	brpl	.+62     	; 0x1b6 <__floatsisf+0x6c>
 178:	bb 0f       	add	r27, r27
 17a:	11 f4       	brne	.+4      	; 0x180 <__floatsisf+0x36>
 17c:	60 ff       	sbrs	r22, 0
 17e:	1b c0       	rjmp	.+54     	; 0x1b6 <__floatsisf+0x6c>
 180:	6f 5f       	subi	r22, 0xFF	; 255
 182:	7f 4f       	sbci	r23, 0xFF	; 255
 184:	8f 4f       	sbci	r24, 0xFF	; 255
 186:	9f 4f       	sbci	r25, 0xFF	; 255
 188:	16 c0       	rjmp	.+44     	; 0x1b6 <__floatsisf+0x6c>
 18a:	88 23       	and	r24, r24
 18c:	11 f0       	breq	.+4      	; 0x192 <__floatsisf+0x48>
 18e:	96 e9       	ldi	r25, 0x96	; 150
 190:	11 c0       	rjmp	.+34     	; 0x1b4 <__floatsisf+0x6a>
 192:	77 23       	and	r23, r23
 194:	21 f0       	breq	.+8      	; 0x19e <__floatsisf+0x54>
 196:	9e e8       	ldi	r25, 0x8E	; 142
 198:	87 2f       	mov	r24, r23
 19a:	76 2f       	mov	r23, r22
 19c:	05 c0       	rjmp	.+10     	; 0x1a8 <__floatsisf+0x5e>
 19e:	66 23       	and	r22, r22
 1a0:	71 f0       	breq	.+28     	; 0x1be <__floatsisf+0x74>
 1a2:	96 e8       	ldi	r25, 0x86	; 134
 1a4:	86 2f       	mov	r24, r22
 1a6:	70 e0       	ldi	r23, 0x00	; 0
 1a8:	60 e0       	ldi	r22, 0x00	; 0
 1aa:	2a f0       	brmi	.+10     	; 0x1b6 <__floatsisf+0x6c>
 1ac:	9a 95       	dec	r25
 1ae:	66 0f       	add	r22, r22
 1b0:	77 1f       	adc	r23, r23
 1b2:	88 1f       	adc	r24, r24
 1b4:	da f7       	brpl	.-10     	; 0x1ac <__floatsisf+0x62>
 1b6:	88 0f       	add	r24, r24
 1b8:	96 95       	lsr	r25
 1ba:	87 95       	ror	r24
 1bc:	97 f9       	bld	r25, 7
 1be:	08 95       	ret

000001c0 <__fp_split3>:
 1c0:	57 fd       	sbrc	r21, 7
 1c2:	90 58       	subi	r25, 0x80	; 128
 1c4:	44 0f       	add	r20, r20
 1c6:	55 1f       	adc	r21, r21
 1c8:	59 f0       	breq	.+22     	; 0x1e0 <__fp_splitA+0x10>
 1ca:	5f 3f       	cpi	r21, 0xFF	; 255
 1cc:	71 f0       	breq	.+28     	; 0x1ea <__fp_splitA+0x1a>
 1ce:	47 95       	ror	r20

000001d0 <__fp_splitA>:
 1d0:	88 0f       	add	r24, r24
 1d2:	97 fb       	bst	r25, 7
 1d4:	99 1f       	adc	r25, r25
 1d6:	61 f0       	breq	.+24     	; 0x1f0 <__fp_splitA+0x20>
 1d8:	9f 3f       	cpi	r25, 0xFF	; 255
 1da:	79 f0       	breq	.+30     	; 0x1fa <__fp_splitA+0x2a>
 1dc:	87 95       	ror	r24
 1de:	08 95       	ret
 1e0:	12 16       	cp	r1, r18
 1e2:	13 06       	cpc	r1, r19
 1e4:	14 06       	cpc	r1, r20
 1e6:	55 1f       	adc	r21, r21
 1e8:	f2 cf       	rjmp	.-28     	; 0x1ce <__fp_split3+0xe>
 1ea:	46 95       	lsr	r20
 1ec:	f1 df       	rcall	.-30     	; 0x1d0 <__fp_splitA>
 1ee:	08 c0       	rjmp	.+16     	; 0x200 <__fp_splitA+0x30>
 1f0:	16 16       	cp	r1, r22
 1f2:	17 06       	cpc	r1, r23
 1f4:	18 06       	cpc	r1, r24
 1f6:	99 1f       	adc	r25, r25
 1f8:	f1 cf       	rjmp	.-30     	; 0x1dc <__fp_splitA+0xc>
 1fa:	86 95       	lsr	r24
 1fc:	71 05       	cpc	r23, r1
 1fe:	61 05       	cpc	r22, r1
 200:	08 94       	sec
 202:	08 95       	ret

00000204 <__fp_zero>:
 204:	e8 94       	clt

00000206 <__fp_szero>:
 206:	bb 27       	eor	r27, r27
 208:	66 27       	eor	r22, r22
 20a:	77 27       	eor	r23, r23
 20c:	cb 01       	movw	r24, r22
 20e:	97 f9       	bld	r25, 7
 210:	08 95       	ret

00000212 <__mulsf3>:
 212:	0b d0       	rcall	.+22     	; 0x22a <__mulsf3x>
 214:	78 c0       	rjmp	.+240    	; 0x306 <__fp_round>
 216:	69 d0       	rcall	.+210    	; 0x2ea <__fp_pscA>
 218:	28 f0       	brcs	.+10     	; 0x224 <__mulsf3+0x12>
 21a:	6e d0       	rcall	.+220    	; 0x2f8 <__fp_pscB>
 21c:	18 f0       	brcs	.+6      	; 0x224 <__mulsf3+0x12>
 21e:	95 23       	and	r25, r21
 220:	09 f0       	breq	.+2      	; 0x224 <__mulsf3+0x12>
 222:	5a c0       	rjmp	.+180    	; 0x2d8 <__fp_inf>
 224:	5f c0       	rjmp	.+190    	; 0x2e4 <__fp_nan>
 226:	11 24       	eor	r1, r1
 228:	ee cf       	rjmp	.-36     	; 0x206 <__fp_szero>

0000022a <__mulsf3x>:
 22a:	ca df       	rcall	.-108    	; 0x1c0 <__fp_split3>
 22c:	a0 f3       	brcs	.-24     	; 0x216 <__mulsf3+0x4>

0000022e <__mulsf3_pse>:
 22e:	95 9f       	mul	r25, r21
 230:	d1 f3       	breq	.-12     	; 0x226 <__mulsf3+0x14>
 232:	95 0f       	add	r25, r21
 234:	50 e0       	ldi	r21, 0x00	; 0
 236:	55 1f       	adc	r21, r21
 238:	62 9f       	mul	r22, r18
 23a:	f0 01       	movw	r30, r0
 23c:	72 9f       	mul	r23, r18
 23e:	bb 27       	eor	r27, r27
 240:	f0 0d       	add	r31, r0
 242:	b1 1d       	adc	r27, r1
 244:	63 9f       	mul	r22, r19
 246:	aa 27       	eor	r26, r26
 248:	f0 0d       	add	r31, r0
 24a:	b1 1d       	adc	r27, r1
 24c:	aa 1f       	adc	r26, r26
 24e:	64 9f       	mul	r22, r20
 250:	66 27       	eor	r22, r22
 252:	b0 0d       	add	r27, r0
 254:	a1 1d       	adc	r26, r1
 256:	66 1f       	adc	r22, r22
 258:	82 9f       	mul	r24, r18
 25a:	22 27       	eor	r18, r18
 25c:	b0 0d       	add	r27, r0
 25e:	a1 1d       	adc	r26, r1
 260:	62 1f       	adc	r22, r18
 262:	73 9f       	mul	r23, r19
 264:	b0 0d       	add	r27, r0
 266:	a1 1d       	adc	r26, r1
 268:	62 1f       	adc	r22, r18
 26a:	83 9f       	mul	r24, r19
 26c:	a0 0d       	add	r26, r0
 26e:	61 1d       	adc	r22, r1
 270:	22 1f       	adc	r18, r18
 272:	74 9f       	mul	r23, r20
 274:	33 27       	eor	r19, r19
 276:	a0 0d       	add	r26, r0
 278:	61 1d       	adc	r22, r1
 27a:	23 1f       	adc	r18, r19
 27c:	84 9f       	mul	r24, r20
 27e:	60 0d       	add	r22, r0
 280:	21 1d       	adc	r18, r1
 282:	82 2f       	mov	r24, r18
 284:	76 2f       	mov	r23, r22
 286:	6a 2f       	mov	r22, r26
 288:	11 24       	eor	r1, r1
 28a:	9f 57       	subi	r25, 0x7F	; 127
 28c:	50 40       	sbci	r21, 0x00	; 0
 28e:	8a f0       	brmi	.+34     	; 0x2b2 <__mulsf3_pse+0x84>
 290:	e1 f0       	breq	.+56     	; 0x2ca <__mulsf3_pse+0x9c>
 292:	88 23       	and	r24, r24
 294:	4a f0       	brmi	.+18     	; 0x2a8 <__mulsf3_pse+0x7a>
 296:	ee 0f       	add	r30, r30
 298:	ff 1f       	adc	r31, r31
 29a:	bb 1f       	adc	r27, r27
 29c:	66 1f       	adc	r22, r22
 29e:	77 1f       	adc	r23, r23
 2a0:	88 1f       	adc	r24, r24
 2a2:	91 50       	subi	r25, 0x01	; 1
 2a4:	50 40       	sbci	r21, 0x00	; 0
 2a6:	a9 f7       	brne	.-22     	; 0x292 <__mulsf3_pse+0x64>
 2a8:	9e 3f       	cpi	r25, 0xFE	; 254
 2aa:	51 05       	cpc	r21, r1
 2ac:	70 f0       	brcs	.+28     	; 0x2ca <__mulsf3_pse+0x9c>
 2ae:	14 c0       	rjmp	.+40     	; 0x2d8 <__fp_inf>
 2b0:	aa cf       	rjmp	.-172    	; 0x206 <__fp_szero>
 2b2:	5f 3f       	cpi	r21, 0xFF	; 255
 2b4:	ec f3       	brlt	.-6      	; 0x2b0 <__mulsf3_pse+0x82>
 2b6:	98 3e       	cpi	r25, 0xE8	; 232
 2b8:	dc f3       	brlt	.-10     	; 0x2b0 <__mulsf3_pse+0x82>
 2ba:	86 95       	lsr	r24
 2bc:	77 95       	ror	r23
 2be:	67 95       	ror	r22
 2c0:	b7 95       	ror	r27
 2c2:	f7 95       	ror	r31
 2c4:	e7 95       	ror	r30
 2c6:	9f 5f       	subi	r25, 0xFF	; 255
 2c8:	c1 f7       	brne	.-16     	; 0x2ba <__mulsf3_pse+0x8c>
 2ca:	fe 2b       	or	r31, r30
 2cc:	88 0f       	add	r24, r24
 2ce:	91 1d       	adc	r25, r1
 2d0:	96 95       	lsr	r25
 2d2:	87 95       	ror	r24
 2d4:	97 f9       	bld	r25, 7
 2d6:	08 95       	ret

000002d8 <__fp_inf>:
 2d8:	97 f9       	bld	r25, 7
 2da:	9f 67       	ori	r25, 0x7F	; 127
 2dc:	80 e8       	ldi	r24, 0x80	; 128
 2de:	70 e0       	ldi	r23, 0x00	; 0
 2e0:	60 e0       	ldi	r22, 0x00	; 0
 2e2:	08 95       	ret

000002e4 <__fp_nan>:
 2e4:	9f ef       	ldi	r25, 0xFF	; 255
 2e6:	80 ec       	ldi	r24, 0xC0	; 192
 2e8:	08 95       	ret

000002ea <__fp_pscA>:
 2ea:	00 24       	eor	r0, r0
 2ec:	0a 94       	dec	r0
 2ee:	16 16       	cp	r1, r22
 2f0:	17 06       	cpc	r1, r23
 2f2:	18 06       	cpc	r1, r24
 2f4:	09 06       	cpc	r0, r25
 2f6:	08 95       	ret

000002f8 <__fp_pscB>:
 2f8:	00 24       	eor	r0, r0
 2fa:	0a 94       	dec	r0
 2fc:	12 16       	cp	r1, r18
 2fe:	13 06       	cpc	r1, r19
 300:	14 06       	cpc	r1, r20
 302:	05 06       	cpc	r0, r21
 304:	08 95       	ret

00000306 <__fp_round>:
 306:	09 2e       	mov	r0, r25
 308:	03 94       	inc	r0
 30a:	00 0c       	add	r0, r0
 30c:	11 f4       	brne	.+4      	; 0x312 <__fp_round+0xc>
 30e:	88 23       	and	r24, r24
 310:	52 f0       	brmi	.+20     	; 0x326 <__fp_round+0x20>
 312:	bb 0f       	add	r27, r27
 314:	40 f4       	brcc	.+16     	; 0x326 <__fp_round+0x20>
 316:	bf 2b       	or	r27, r31
 318:	11 f4       	brne	.+4      	; 0x31e <__fp_round+0x18>
 31a:	60 ff       	sbrs	r22, 0
 31c:	04 c0       	rjmp	.+8      	; 0x326 <__fp_round+0x20>
 31e:	6f 5f       	subi	r22, 0xFF	; 255
 320:	7f 4f       	sbci	r23, 0xFF	; 255
 322:	8f 4f       	sbci	r24, 0xFF	; 255
 324:	9f 4f       	sbci	r25, 0xFF	; 255
 326:	08 95       	ret

00000328 <initVariant>:
 328:	08 95       	ret

0000032a <main>:
void setupUSB() __attribute__((weak));
void setupUSB() { }

int main(void)
{
	init();
 32a:	54 d0       	rcall	.+168    	; 0x3d4 <init>

	initVariant();
 32c:	fd df       	rcall	.-6      	; 0x328 <initVariant>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
 32e:	cc de       	rcall	.-616    	; 0xc8 <setup>
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
 330:	c0 e0       	ldi	r28, 0x00	; 0
 332:	d0 e0       	ldi	r29, 0x00	; 0
#endif
	
	setup();
    
	for (;;) {
		loop();
 334:	db de       	rcall	.-586    	; 0xec <loop>
 336:	20 97       	sbiw	r28, 0x00	; 0
		if (serialEventRun) serialEventRun();
 338:	e9 f3       	breq	.-6      	; 0x334 <main+0xa>
 33a:	0e 94 00 00 	call	0	; 0x0 <__vectors>
 33e:	fa cf       	rjmp	.-12     	; 0x334 <main+0xa>

00000340 <__vector_18>:
 340:	1f 92       	push	r1
	

#endif

	// busy wait
	__asm__ __volatile__ (
 342:	0f 92       	push	r0
 344:	0f b6       	in	r0, 0x3f	; 63
 346:	0f 92       	push	r0
 348:	11 24       	eor	r1, r1
 34a:	2f 93       	push	r18
 34c:	3f 93       	push	r19
 34e:	8f 93       	push	r24
 350:	9f 93       	push	r25
 352:	af 93       	push	r26
 354:	bf 93       	push	r27
 356:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <timer0_millis>
 35a:	90 91 06 01 	lds	r25, 0x0106	; 0x800106 <timer0_millis+0x1>
 35e:	a0 91 07 01 	lds	r26, 0x0107	; 0x800107 <timer0_millis+0x2>
 362:	b0 91 08 01 	lds	r27, 0x0108	; 0x800108 <timer0_millis+0x3>
 366:	30 91 04 01 	lds	r19, 0x0104	; 0x800104 <timer0_fract>
 36a:	23 e0       	ldi	r18, 0x03	; 3
 36c:	23 0f       	add	r18, r19
 36e:	2d 37       	cpi	r18, 0x7D	; 125
 370:	20 f4       	brcc	.+8      	; 0x37a <__vector_18+0x3a>
 372:	01 96       	adiw	r24, 0x01	; 1
 374:	a1 1d       	adc	r26, r1
 376:	b1 1d       	adc	r27, r1
 378:	05 c0       	rjmp	.+10     	; 0x384 <__vector_18+0x44>
 37a:	26 e8       	ldi	r18, 0x86	; 134
 37c:	23 0f       	add	r18, r19
 37e:	02 96       	adiw	r24, 0x02	; 2
 380:	a1 1d       	adc	r26, r1
 382:	b1 1d       	adc	r27, r1
 384:	20 93 04 01 	sts	0x0104, r18	; 0x800104 <timer0_fract>
 388:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <timer0_millis>
 38c:	90 93 06 01 	sts	0x0106, r25	; 0x800106 <timer0_millis+0x1>
 390:	a0 93 07 01 	sts	0x0107, r26	; 0x800107 <timer0_millis+0x2>
 394:	b0 93 08 01 	sts	0x0108, r27	; 0x800108 <timer0_millis+0x3>
 398:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <timer0_overflow_count>
 39c:	90 91 0a 01 	lds	r25, 0x010A	; 0x80010a <timer0_overflow_count+0x1>
 3a0:	a0 91 0b 01 	lds	r26, 0x010B	; 0x80010b <timer0_overflow_count+0x2>
 3a4:	b0 91 0c 01 	lds	r27, 0x010C	; 0x80010c <timer0_overflow_count+0x3>
 3a8:	01 96       	adiw	r24, 0x01	; 1
 3aa:	a1 1d       	adc	r26, r1
 3ac:	b1 1d       	adc	r27, r1
 3ae:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <timer0_overflow_count>
 3b2:	90 93 0a 01 	sts	0x010A, r25	; 0x80010a <timer0_overflow_count+0x1>
 3b6:	a0 93 0b 01 	sts	0x010B, r26	; 0x80010b <timer0_overflow_count+0x2>
 3ba:	b0 93 0c 01 	sts	0x010C, r27	; 0x80010c <timer0_overflow_count+0x3>
 3be:	bf 91       	pop	r27
 3c0:	af 91       	pop	r26
 3c2:	9f 91       	pop	r25
 3c4:	8f 91       	pop	r24
 3c6:	3f 91       	pop	r19
 3c8:	2f 91       	pop	r18
 3ca:	0f 90       	pop	r0
 3cc:	0f be       	out	0x3f, r0	; 63
 3ce:	0f 90       	pop	r0
 3d0:	1f 90       	pop	r1
 3d2:	18 95       	reti

000003d4 <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
 3d4:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
 3d6:	84 b5       	in	r24, 0x24	; 36
 3d8:	82 60       	ori	r24, 0x02	; 2
 3da:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
 3dc:	84 b5       	in	r24, 0x24	; 36
 3de:	81 60       	ori	r24, 0x01	; 1
 3e0:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
 3e2:	85 b5       	in	r24, 0x25	; 37
 3e4:	82 60       	ori	r24, 0x02	; 2
 3e6:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
 3e8:	85 b5       	in	r24, 0x25	; 37
 3ea:	81 60       	ori	r24, 0x01	; 1
 3ec:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
 3ee:	ee e6       	ldi	r30, 0x6E	; 110
 3f0:	f0 e0       	ldi	r31, 0x00	; 0
 3f2:	80 81       	ld	r24, Z
 3f4:	81 60       	ori	r24, 0x01	; 1
 3f6:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
 3f8:	e1 e8       	ldi	r30, 0x81	; 129
 3fa:	f0 e0       	ldi	r31, 0x00	; 0
 3fc:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
 3fe:	80 81       	ld	r24, Z
 400:	82 60       	ori	r24, 0x02	; 2
 402:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
 404:	80 81       	ld	r24, Z
 406:	81 60       	ori	r24, 0x01	; 1
 408:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
 40a:	e0 e8       	ldi	r30, 0x80	; 128
 40c:	f0 e0       	ldi	r31, 0x00	; 0
 40e:	80 81       	ld	r24, Z
 410:	81 60       	ori	r24, 0x01	; 1
 412:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
 414:	e1 eb       	ldi	r30, 0xB1	; 177
 416:	f0 e0       	ldi	r31, 0x00	; 0
 418:	80 81       	ld	r24, Z
 41a:	84 60       	ori	r24, 0x04	; 4
 41c:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
 41e:	e0 eb       	ldi	r30, 0xB0	; 176
 420:	f0 e0       	ldi	r31, 0x00	; 0
 422:	80 81       	ld	r24, Z
 424:	81 60       	ori	r24, 0x01	; 1
 426:	80 83       	st	Z, r24
//#else
	// Timer 2 not finished (may not be present on this CPU)
#endif

#if defined(TCCR3B) && defined(CS31) && defined(WGM30)
	sbi(TCCR3B, CS31);		// set timer 3 prescale factor to 64
 428:	e1 e9       	ldi	r30, 0x91	; 145
 42a:	f0 e0       	ldi	r31, 0x00	; 0
 42c:	80 81       	ld	r24, Z
 42e:	82 60       	ori	r24, 0x02	; 2
 430:	80 83       	st	Z, r24
	sbi(TCCR3B, CS30);
 432:	80 81       	ld	r24, Z
 434:	81 60       	ori	r24, 0x01	; 1
 436:	80 83       	st	Z, r24
	sbi(TCCR3A, WGM30);		// put timer 3 in 8-bit phase correct pwm mode
 438:	e0 e9       	ldi	r30, 0x90	; 144
 43a:	f0 e0       	ldi	r31, 0x00	; 0
 43c:	80 81       	ld	r24, Z
 43e:	81 60       	ori	r24, 0x01	; 1
 440:	80 83       	st	Z, r24
#endif

#if defined(ADCSRA)
	// set a2d prescaler so we are inside the desired 50-200 KHz range.
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
 442:	ea e7       	ldi	r30, 0x7A	; 122
 444:	f0 e0       	ldi	r31, 0x00	; 0
 446:	80 81       	ld	r24, Z
 448:	84 60       	ori	r24, 0x04	; 4
 44a:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS1);
 44c:	80 81       	ld	r24, Z
 44e:	82 60       	ori	r24, 0x02	; 2
 450:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS0);
 452:	80 81       	ld	r24, Z
 454:	81 60       	ori	r24, 0x01	; 1
 456:	80 83       	st	Z, r24
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
 458:	80 81       	ld	r24, Z
 45a:	80 68       	ori	r24, 0x80	; 128
 45c:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
 45e:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
 462:	08 95       	ret

00000464 <analogRead>:

#if defined(analogPinToChannel)
#if defined(__AVR_ATmega32U4__)
	if (pin >= 18) pin -= 18; // allow for channel or pin numbers
#endif
	pin = analogPinToChannel(pin);
 464:	88 30       	cpi	r24, 0x08	; 8
 466:	38 f0       	brcs	.+14     	; 0x476 <analogRead+0x12>
 468:	88 31       	cpi	r24, 0x18	; 24
 46a:	20 f0       	brcs	.+8      	; 0x474 <analogRead+0x10>
 46c:	9f e1       	ldi	r25, 0x1F	; 31
 46e:	98 1b       	sub	r25, r24
 470:	89 2f       	mov	r24, r25
 472:	01 c0       	rjmp	.+2      	; 0x476 <analogRead+0x12>
 474:	8f ef       	ldi	r24, 0xFF	; 255
	// to 0 (the default).
#if defined(ADMUX)
#if defined(__AVR_ATtiny25__) || defined(__AVR_ATtiny45__) || defined(__AVR_ATtiny85__)
	ADMUX = (analog_reference << 4) | (pin & 0x07);
#else
	ADMUX = (analog_reference << 6) | (pin & 0x07);
 476:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
 47a:	90 e4       	ldi	r25, 0x40	; 64
 47c:	29 9f       	mul	r18, r25
 47e:	90 01       	movw	r18, r0
 480:	11 24       	eor	r1, r1
 482:	87 70       	andi	r24, 0x07	; 7
 484:	82 2b       	or	r24, r18
 486:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
	// without a delay, we seem to read from the wrong channel
	//delay(1);

#if defined(ADCSRA) && defined(ADCL)
	// start the conversion
	sbi(ADCSRA, ADSC);
 48a:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
 48e:	80 64       	ori	r24, 0x40	; 64
 490:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>

	// ADSC is cleared when the conversion finishes
	while (bit_is_set(ADCSRA, ADSC));
 494:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
 498:	86 fd       	sbrc	r24, 6
 49a:	fc cf       	rjmp	.-8      	; 0x494 <analogRead+0x30>

	// we have to read ADCL first; doing so locks both ADCL
	// and ADCH until ADCH is read.  reading ADCL second would
	// cause the results of each conversion to be discarded,
	// as ADCL and ADCH would be locked when it completed.
	low  = ADCL;
 49c:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
	high = ADCH;
 4a0:	20 91 79 00 	lds	r18, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
	low  = 0;
	high = 0;
#endif

	// combine the two bytes
	return (high << 8) | low;
 4a4:	90 e0       	ldi	r25, 0x00	; 0
}
 4a6:	92 2b       	or	r25, r18
 4a8:	08 95       	ret

000004aa <_exit>:
 4aa:	f8 94       	cli

000004ac <__stop_program>:
 4ac:	ff cf       	rjmp	.-2      	; 0x4ac <__stop_program>


Blank.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000001c  00800100  00000ebe  00000f52  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000ebe  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000026  0080011c  0080011c  00000f6e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000f6e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000fa0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000328  00000000  00000000  00000fe0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000553d  00000000  00000000  00001308  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000019b5  00000000  00000000  00006845  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001bb2  00000000  00000000  000081fa  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000990  00000000  00000000  00009dac  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000025c0  00000000  00000000  0000a73c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002a12  00000000  00000000  0000ccfc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000002b8  00000000  00000000  0000f70e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	90 c0       	rjmp	.+288    	; 0x122 <__dtors_end>
   2:	00 00       	nop
   4:	b5 c0       	rjmp	.+362    	; 0x170 <__bad_interrupt>
   6:	00 00       	nop
   8:	b3 c0       	rjmp	.+358    	; 0x170 <__bad_interrupt>
   a:	00 00       	nop
   c:	b1 c0       	rjmp	.+354    	; 0x170 <__bad_interrupt>
   e:	00 00       	nop
  10:	af c0       	rjmp	.+350    	; 0x170 <__bad_interrupt>
  12:	00 00       	nop
  14:	ad c0       	rjmp	.+346    	; 0x170 <__bad_interrupt>
  16:	00 00       	nop
  18:	ab c0       	rjmp	.+342    	; 0x170 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	a9 c0       	rjmp	.+338    	; 0x170 <__bad_interrupt>
  1e:	00 00       	nop
  20:	a7 c0       	rjmp	.+334    	; 0x170 <__bad_interrupt>
  22:	00 00       	nop
  24:	a5 c0       	rjmp	.+330    	; 0x170 <__bad_interrupt>
  26:	00 00       	nop
  28:	a3 c0       	rjmp	.+326    	; 0x170 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	a1 c0       	rjmp	.+322    	; 0x170 <__bad_interrupt>
  2e:	00 00       	nop
  30:	9f c0       	rjmp	.+318    	; 0x170 <__bad_interrupt>
  32:	00 00       	nop
  34:	9d c0       	rjmp	.+314    	; 0x170 <__bad_interrupt>
  36:	00 00       	nop
  38:	9b c0       	rjmp	.+310    	; 0x170 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	99 c0       	rjmp	.+306    	; 0x170 <__bad_interrupt>
  3e:	00 00       	nop
  40:	97 c0       	rjmp	.+302    	; 0x170 <__bad_interrupt>
  42:	00 00       	nop
  44:	95 c0       	rjmp	.+298    	; 0x170 <__bad_interrupt>
  46:	00 00       	nop
  48:	d2 c3       	rjmp	.+1956   	; 0x7ee <__vector_18>
  4a:	00 00       	nop
  4c:	91 c0       	rjmp	.+290    	; 0x170 <__bad_interrupt>
  4e:	00 00       	nop
  50:	8f c0       	rjmp	.+286    	; 0x170 <__bad_interrupt>
  52:	00 00       	nop
  54:	8d c0       	rjmp	.+282    	; 0x170 <__bad_interrupt>
  56:	00 00       	nop
  58:	8b c0       	rjmp	.+278    	; 0x170 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	89 c0       	rjmp	.+274    	; 0x170 <__bad_interrupt>
  5e:	00 00       	nop
  60:	87 c0       	rjmp	.+270    	; 0x170 <__bad_interrupt>
  62:	00 00       	nop
  64:	85 c0       	rjmp	.+266    	; 0x170 <__bad_interrupt>
  66:	00 00       	nop
  68:	83 c0       	rjmp	.+262    	; 0x170 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	81 c0       	rjmp	.+258    	; 0x170 <__bad_interrupt>
  6e:	00 00       	nop
  70:	7f c0       	rjmp	.+254    	; 0x170 <__bad_interrupt>
  72:	00 00       	nop
  74:	7d c0       	rjmp	.+250    	; 0x170 <__bad_interrupt>
  76:	00 00       	nop
  78:	7b c0       	rjmp	.+246    	; 0x170 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	79 c0       	rjmp	.+242    	; 0x170 <__bad_interrupt>
  7e:	00 00       	nop
  80:	77 c0       	rjmp	.+238    	; 0x170 <__bad_interrupt>
  82:	00 00       	nop
  84:	75 c0       	rjmp	.+234    	; 0x170 <__bad_interrupt>
  86:	00 00       	nop
  88:	73 c0       	rjmp	.+230    	; 0x170 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	1d 05       	cpc	r17, r13
  8e:	20 05       	cpc	r18, r0
  90:	13 05       	cpc	r17, r3
  92:	17 05       	cpc	r17, r7
  94:	37 05       	cpc	r19, r7
  96:	37 05       	cpc	r19, r7
  98:	24 05       	cpc	r18, r4
  9a:	28 05       	cpc	r18, r8
  9c:	2e 05       	cpc	r18, r14
  9e:	32 05       	cpc	r19, r2

000000a0 <__trampolines_end>:
  a0:	00 00       	nop
  a2:	00 01       	movw	r0, r0
  a4:	02 00       	.word	0x0002	; ????
  a6:	09 0a       	sbc	r0, r25
  a8:	00 00       	nop
  aa:	00 00       	nop
  ac:	04 03       	mulsu	r16, r20
  ae:	08 07       	cpc	r16, r24
	...

000000c0 <digital_pin_to_bit_mask_PGM>:
  c0:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 40 80     ..... @...... @.
  d0:	01 02 04 08 10 20 40 80 80 40 20 10 08 04 02 01     ..... @..@ .....

000000e0 <digital_pin_to_port_PGM>:
  e0:	02 02 02 02 02 02 02 02 04 04 04 04 04 04 04 04     ................
  f0:	03 03 03 03 03 03 03 03 01 01 01 01 01 01 01 01     ................

00000100 <port_to_input_PGM>:
 100:	00 00 20 00 23 00 26 00 29 00                       .. .#.&.).

0000010a <port_to_output_PGM>:
 10a:	00 00 22 00 25 00 28 00 2b 00                       ..".%.(.+.

00000114 <port_to_mode_PGM>:
 114:	00 00 21 00 24 00 27 00 2a 00                       ..!.$.'.*.

0000011e <__ctors_start>:
 11e:	53 01       	movw	r10, r6

00000120 <__ctors_end>:
 120:	56 01       	movw	r10, r12

00000122 <__dtors_end>:
 122:	11 24       	eor	r1, r1
 124:	1f be       	out	0x3f, r1	; 63
 126:	cf ef       	ldi	r28, 0xFF	; 255
 128:	d0 e4       	ldi	r29, 0x40	; 64
 12a:	de bf       	out	0x3e, r29	; 62
 12c:	cd bf       	out	0x3d, r28	; 61

0000012e <__do_copy_data>:
 12e:	11 e0       	ldi	r17, 0x01	; 1
 130:	a0 e0       	ldi	r26, 0x00	; 0
 132:	b1 e0       	ldi	r27, 0x01	; 1
 134:	ee eb       	ldi	r30, 0xBE	; 190
 136:	fe e0       	ldi	r31, 0x0E	; 14
 138:	00 e0       	ldi	r16, 0x00	; 0
 13a:	0b bf       	out	0x3b, r16	; 59
 13c:	02 c0       	rjmp	.+4      	; 0x142 <__do_copy_data+0x14>
 13e:	07 90       	elpm	r0, Z+
 140:	0d 92       	st	X+, r0
 142:	ac 31       	cpi	r26, 0x1C	; 28
 144:	b1 07       	cpc	r27, r17
 146:	d9 f7       	brne	.-10     	; 0x13e <__do_copy_data+0x10>

00000148 <__do_clear_bss>:
 148:	21 e0       	ldi	r18, 0x01	; 1
 14a:	ac e1       	ldi	r26, 0x1C	; 28
 14c:	b1 e0       	ldi	r27, 0x01	; 1
 14e:	01 c0       	rjmp	.+2      	; 0x152 <.do_clear_bss_start>

00000150 <.do_clear_bss_loop>:
 150:	1d 92       	st	X+, r1

00000152 <.do_clear_bss_start>:
 152:	a2 34       	cpi	r26, 0x42	; 66
 154:	b2 07       	cpc	r27, r18
 156:	e1 f7       	brne	.-8      	; 0x150 <.do_clear_bss_loop>

00000158 <__do_global_ctors>:
 158:	10 e0       	ldi	r17, 0x00	; 0
 15a:	c0 e9       	ldi	r28, 0x90	; 144
 15c:	d0 e0       	ldi	r29, 0x00	; 0
 15e:	03 c0       	rjmp	.+6      	; 0x166 <__do_global_ctors+0xe>
 160:	21 97       	sbiw	r28, 0x01	; 1
 162:	fe 01       	movw	r30, r28
 164:	62 d5       	rcall	.+2756   	; 0xc2a <__tablejump2__>
 166:	cf 38       	cpi	r28, 0x8F	; 143
 168:	d1 07       	cpc	r29, r17
 16a:	d1 f7       	brne	.-12     	; 0x160 <__do_global_ctors+0x8>
 16c:	35 d3       	rcall	.+1642   	; 0x7d8 <main>
 16e:	9b c6       	rjmp	.+3382   	; 0xea6 <__do_global_dtors>

00000170 <__bad_interrupt>:
 170:	47 cf       	rjmp	.-370    	; 0x0 <__vectors>

00000172 <_Z23MQResistanceCalculationi>:
void monitorBloodPressure(HardwareSerial ser) {
	char InByte = 0x00;
	if(ser.available()) {
		InByte = ser.read();
	}
}
 172:	cf 92       	push	r12
 174:	df 92       	push	r13
 176:	ef 92       	push	r14
 178:	ff 92       	push	r15
 17a:	bc 01       	movw	r22, r24
 17c:	8f ef       	ldi	r24, 0xFF	; 255
 17e:	93 e0       	ldi	r25, 0x03	; 3
 180:	41 d5       	rcall	.+2690   	; 0xc04 <__divmodhi4>
 182:	07 2e       	mov	r0, r23
 184:	00 0c       	add	r0, r0
 186:	88 0b       	sbc	r24, r24
 188:	99 0b       	sbc	r25, r25
 18a:	17 d2       	rcall	.+1070   	; 0x5ba <__floatsisf>
 18c:	20 e0       	ldi	r18, 0x00	; 0
 18e:	30 e0       	ldi	r19, 0x00	; 0
 190:	40 e8       	ldi	r20, 0x80	; 128
 192:	5f e3       	ldi	r21, 0x3F	; 63
 194:	43 d1       	rcall	.+646    	; 0x41c <__subsf3>
 196:	6b 01       	movw	r12, r22
 198:	7c 01       	movw	r14, r24
 19a:	60 91 10 01 	lds	r22, 0x0110	; 0x800110 <RL_VALUE>
 19e:	70 91 11 01 	lds	r23, 0x0111	; 0x800111 <RL_VALUE+0x1>
 1a2:	07 2e       	mov	r0, r23
 1a4:	00 0c       	add	r0, r0
 1a6:	88 0b       	sbc	r24, r24
 1a8:	99 0b       	sbc	r25, r25
 1aa:	07 d2       	rcall	.+1038   	; 0x5ba <__floatsisf>
 1ac:	a7 01       	movw	r20, r14
 1ae:	96 01       	movw	r18, r12
 1b0:	90 d2       	rcall	.+1312   	; 0x6d2 <__mulsf3>
 1b2:	ff 90       	pop	r15
 1b4:	ef 90       	pop	r14
 1b6:	df 90       	pop	r13
 1b8:	cf 90       	pop	r12
 1ba:	08 95       	ret

000001bc <_Z13MQCalibrationhh>:
 1bc:	cf 92       	push	r12
 1be:	df 92       	push	r13
 1c0:	ef 92       	push	r14
 1c2:	ff 92       	push	r15
 1c4:	0f 93       	push	r16
 1c6:	1f 93       	push	r17
 1c8:	cf 93       	push	r28
 1ca:	df 93       	push	r29
 1cc:	d8 2f       	mov	r29, r24
 1ce:	c6 2f       	mov	r28, r22
 1d0:	00 e0       	ldi	r16, 0x00	; 0
 1d2:	10 e0       	ldi	r17, 0x00	; 0
 1d4:	c1 2c       	mov	r12, r1
 1d6:	d1 2c       	mov	r13, r1
 1d8:	76 01       	movw	r14, r12
 1da:	60 91 08 01 	lds	r22, 0x0108	; 0x800108 <CALIBARAION_SAMPLE_TIMES>
 1de:	70 91 09 01 	lds	r23, 0x0109	; 0x800109 <CALIBARAION_SAMPLE_TIMES+0x1>
 1e2:	06 17       	cp	r16, r22
 1e4:	17 07       	cpc	r17, r23
 1e6:	b4 f4       	brge	.+44     	; 0x214 <_Z13MQCalibrationhh+0x58>
 1e8:	8d 2f       	mov	r24, r29
 1ea:	f1 d3       	rcall	.+2018   	; 0x9ce <analogRead>
 1ec:	c2 df       	rcall	.-124    	; 0x172 <_Z23MQResistanceCalculationi>
 1ee:	9b 01       	movw	r18, r22
 1f0:	ac 01       	movw	r20, r24
 1f2:	c7 01       	movw	r24, r14
 1f4:	b6 01       	movw	r22, r12
 1f6:	13 d1       	rcall	.+550    	; 0x41e <__addsf3>
 1f8:	6b 01       	movw	r12, r22
 1fa:	7c 01       	movw	r14, r24
 1fc:	60 91 06 01 	lds	r22, 0x0106	; 0x800106 <CALIBRATION_SAMPLE_INTERVAL>
 200:	70 91 07 01 	lds	r23, 0x0107	; 0x800107 <CALIBRATION_SAMPLE_INTERVAL+0x1>
 204:	07 2e       	mov	r0, r23
 206:	00 0c       	add	r0, r0
 208:	88 0b       	sbc	r24, r24
 20a:	99 0b       	sbc	r25, r25
 20c:	5f d3       	rcall	.+1726   	; 0x8cc <delay>
 20e:	0f 5f       	subi	r16, 0xFF	; 255
 210:	1f 4f       	sbci	r17, 0xFF	; 255
 212:	e3 cf       	rjmp	.-58     	; 0x1da <_Z13MQCalibrationhh+0x1e>
 214:	07 2e       	mov	r0, r23
 216:	00 0c       	add	r0, r0
 218:	88 0b       	sbc	r24, r24
 21a:	99 0b       	sbc	r25, r25
 21c:	ce d1       	rcall	.+924    	; 0x5ba <__floatsisf>
 21e:	9b 01       	movw	r18, r22
 220:	ac 01       	movw	r20, r24
 222:	c7 01       	movw	r24, r14
 224:	b6 01       	movw	r22, r12
 226:	5f d1       	rcall	.+702    	; 0x4e6 <__divsf3>
 228:	6b 01       	movw	r12, r22
 22a:	7c 01       	movw	r14, r24
 22c:	c1 30       	cpi	r28, 0x01	; 1
 22e:	69 f0       	breq	.+26     	; 0x24a <_Z13MQCalibrationhh+0x8e>
 230:	38 f0       	brcs	.+14     	; 0x240 <_Z13MQCalibrationhh+0x84>
 232:	c2 30       	cpi	r28, 0x02	; 2
 234:	d1 f4       	brne	.+52     	; 0x26a <_Z13MQCalibrationhh+0xae>
 236:	60 91 0a 01 	lds	r22, 0x010A	; 0x80010a <MQ135_RO_CLEAN_AIR_FACTOR>
 23a:	70 91 0b 01 	lds	r23, 0x010B	; 0x80010b <MQ135_RO_CLEAN_AIR_FACTOR+0x1>
 23e:	09 c0       	rjmp	.+18     	; 0x252 <_Z13MQCalibrationhh+0x96>
 240:	60 91 0e 01 	lds	r22, 0x010E	; 0x80010e <MQ2_RO_CLEAN_AIR_FACTOR>
 244:	70 91 0f 01 	lds	r23, 0x010F	; 0x80010f <MQ2_RO_CLEAN_AIR_FACTOR+0x1>
 248:	04 c0       	rjmp	.+8      	; 0x252 <_Z13MQCalibrationhh+0x96>
 24a:	60 91 0c 01 	lds	r22, 0x010C	; 0x80010c <MQ131_RO_CLEAN_AIR_FACTOR>
 24e:	70 91 0d 01 	lds	r23, 0x010D	; 0x80010d <MQ131_RO_CLEAN_AIR_FACTOR+0x1>
 252:	07 2e       	mov	r0, r23
 254:	00 0c       	add	r0, r0
 256:	88 0b       	sbc	r24, r24
 258:	99 0b       	sbc	r25, r25
 25a:	af d1       	rcall	.+862    	; 0x5ba <__floatsisf>
 25c:	9b 01       	movw	r18, r22
 25e:	ac 01       	movw	r20, r24
 260:	c7 01       	movw	r24, r14
 262:	b6 01       	movw	r22, r12
 264:	40 d1       	rcall	.+640    	; 0x4e6 <__divsf3>
 266:	6b 01       	movw	r12, r22
 268:	7c 01       	movw	r14, r24
 26a:	c7 01       	movw	r24, r14
 26c:	b6 01       	movw	r22, r12
 26e:	df 91       	pop	r29
 270:	cf 91       	pop	r28
 272:	1f 91       	pop	r17
 274:	0f 91       	pop	r16
 276:	ff 90       	pop	r15
 278:	ef 90       	pop	r14
 27a:	df 90       	pop	r13
 27c:	cf 90       	pop	r12
 27e:	08 95       	ret

00000280 <setup>:
 280:	20 e8       	ldi	r18, 0x80	; 128
 282:	43 e0       	ldi	r20, 0x03	; 3
 284:	62 e0       	ldi	r22, 0x02	; 2
 286:	88 e2       	ldi	r24, 0x28	; 40
 288:	91 e0       	ldi	r25, 0x01	; 1
 28a:	b5 d0       	rcall	.+362    	; 0x3f6 <_ZN5HX7115beginEhhh>
 28c:	60 e0       	ldi	r22, 0x00	; 0
 28e:	80 e0       	ldi	r24, 0x00	; 0
 290:	95 df       	rcall	.-214    	; 0x1bc <_Z13MQCalibrationhh>
 292:	60 93 1c 01 	sts	0x011C, r22	; 0x80011c <__data_end>
 296:	70 93 1d 01 	sts	0x011D, r23	; 0x80011d <__data_end+0x1>
 29a:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <__data_end+0x2>
 29e:	90 93 1f 01 	sts	0x011F, r25	; 0x80011f <__data_end+0x3>
 2a2:	08 95       	ret

000002a4 <loop>:
 2a4:	08 95       	ret

000002a6 <_GLOBAL__sub_I_pinDHT11>:
 2a6:	88 e2       	ldi	r24, 0x28	; 40
 2a8:	91 e0       	ldi	r25, 0x01	; 1
 2aa:	05 c0       	rjmp	.+10     	; 0x2b6 <_ZN5HX711C1Ev>

000002ac <_GLOBAL__sub_D_pinDHT11>:
//      GND: GND
//      DATA: 2
int pinDHT11 = 2;

SimpleDHT11 myDHT;
HX711 scale;
 2ac:	88 e2       	ldi	r24, 0x28	; 40
 2ae:	91 e0       	ldi	r25, 0x01	; 1
 2b0:	00 c0       	rjmp	.+0      	; 0x2b2 <_ZN5HX711D1Ev>

000002b2 <_ZN5HX711D1Ev>:


HX711::HX711() {
}

HX711::~HX711() {
 2b2:	08 95       	ret

000002b4 <_ZN5HX711D0Ev>:
}
 2b4:	9b c2       	rjmp	.+1334   	; 0x7ec <_ZdlPv>

000002b6 <_ZN5HX711C1Ev>:
#else
#define SHIFTIN_WITH_SPEED_SUPPORT(data,clock,order) shiftIn(data,clock,order)
#endif


HX711::HX711() {
 2b6:	fc 01       	movw	r30, r24
 2b8:	87 e1       	ldi	r24, 0x17	; 23
 2ba:	91 e0       	ldi	r25, 0x01	; 1
 2bc:	91 83       	std	Z+1, r25	; 0x01
 2be:	80 83       	st	Z, r24
 2c0:	15 82       	std	Z+5, r1	; 0x05
 2c2:	16 82       	std	Z+6, r1	; 0x06
 2c4:	17 82       	std	Z+7, r1	; 0x07
 2c6:	10 86       	std	Z+8, r1	; 0x08
 2c8:	80 e0       	ldi	r24, 0x00	; 0
 2ca:	90 e0       	ldi	r25, 0x00	; 0
 2cc:	a0 e8       	ldi	r26, 0x80	; 128
 2ce:	bf e3       	ldi	r27, 0x3F	; 63
 2d0:	81 87       	std	Z+9, r24	; 0x09
 2d2:	92 87       	std	Z+10, r25	; 0x0a
 2d4:	a3 87       	std	Z+11, r26	; 0x0b
 2d6:	b4 87       	std	Z+12, r27	; 0x0c
 2d8:	08 95       	ret

000002da <_ZN5HX7118is_readyEv>:

	set_gain(gain);
}

bool HX711::is_ready() {
	return digitalRead(DOUT) == LOW;
 2da:	fc 01       	movw	r30, r24
 2dc:	83 81       	ldd	r24, Z+3	; 0x03
 2de:	32 d4       	rcall	.+2148   	; 0xb44 <digitalRead>
 2e0:	21 e0       	ldi	r18, 0x01	; 1
 2e2:	89 2b       	or	r24, r25
 2e4:	09 f0       	breq	.+2      	; 0x2e8 <_ZN5HX7118is_readyEv+0xe>
 2e6:	20 e0       	ldi	r18, 0x00	; 0
}
 2e8:	82 2f       	mov	r24, r18
 2ea:	08 95       	ret

000002ec <_ZN5HX71110wait_readyEm>:
			| static_cast<unsigned long>(data[0]) );

	return static_cast<long>(value);
}

void HX711::wait_ready(unsigned long delay_ms) {
 2ec:	cf 92       	push	r12
 2ee:	df 92       	push	r13
 2f0:	ef 92       	push	r14
 2f2:	ff 92       	push	r15
 2f4:	cf 93       	push	r28
 2f6:	df 93       	push	r29
 2f8:	ec 01       	movw	r28, r24
 2fa:	6a 01       	movw	r12, r20
 2fc:	7b 01       	movw	r14, r22
	// Wait for the chip to become ready.
	// This is a blocking implementation and will
	// halt the sketch until a load cell is connected.
	while (!is_ready()) {
 2fe:	ce 01       	movw	r24, r28
 300:	ec df       	rcall	.-40     	; 0x2da <_ZN5HX7118is_readyEv>
 302:	81 11       	cpse	r24, r1
 304:	04 c0       	rjmp	.+8      	; 0x30e <_ZN5HX71110wait_readyEm+0x22>
		// Probably will do no harm on AVR but will feed the Watchdog Timer (WDT) on ESP.
		// https://github.com/bogde/HX711/issues/73
		delay(delay_ms);
 306:	c7 01       	movw	r24, r14
 308:	b6 01       	movw	r22, r12
 30a:	e0 d2       	rcall	.+1472   	; 0x8cc <delay>

void HX711::wait_ready(unsigned long delay_ms) {
	// Wait for the chip to become ready.
	// This is a blocking implementation and will
	// halt the sketch until a load cell is connected.
	while (!is_ready()) {
 30c:	f8 cf       	rjmp	.-16     	; 0x2fe <_ZN5HX71110wait_readyEm+0x12>
		// Probably will do no harm on AVR but will feed the Watchdog Timer (WDT) on ESP.
		// https://github.com/bogde/HX711/issues/73
		delay(delay_ms);
	}
}
 30e:	df 91       	pop	r29
 310:	cf 91       	pop	r28
 312:	ff 90       	pop	r15
 314:	ef 90       	pop	r14
 316:	df 90       	pop	r13
 318:	cf 90       	pop	r12
 31a:	08 95       	ret

0000031c <_ZN5HX7114readEv>:

	digitalWrite(PD_SCK, LOW);
	read();
}

long HX711::read() {
 31c:	cf 92       	push	r12
 31e:	df 92       	push	r13
 320:	ef 92       	push	r14
 322:	ff 92       	push	r15
 324:	0f 93       	push	r16
 326:	1f 93       	push	r17
 328:	cf 93       	push	r28
 32a:	df 93       	push	r29
 32c:	ec 01       	movw	r28, r24

	// Wait for the chip to become ready.
	wait_ready();
 32e:	40 e0       	ldi	r20, 0x00	; 0
 330:	50 e0       	ldi	r21, 0x00	; 0
 332:	ba 01       	movw	r22, r20
 334:	db df       	rcall	.-74     	; 0x2ec <_ZN5HX71110wait_readyEm>
	// interrupts during the sequence and then restores the interrupt mask to its previous
	// state after the sequence completes, insuring that the entire read-and-gain-set
	// sequence is not interrupted.  The macro has a few minor advantages over bracketing
	// the sequence between `noInterrupts()` and `interrupts()` calls.
	#if HAS_ATOMIC_BLOCK
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
 336:	ef b6       	in	r14, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
 338:	f8 94       	cli
	// Disable interrupts.
	noInterrupts();
	#endif

	// Pulse the clock pin 24 times to read the data.
	data[2] = SHIFTIN_WITH_SPEED_SUPPORT(DOUT, PD_SCK, MSBFIRST);
 33a:	41 e0       	ldi	r20, 0x01	; 1
 33c:	6a 81       	ldd	r22, Y+2	; 0x02
 33e:	8b 81       	ldd	r24, Y+3	; 0x03
 340:	29 d4       	rcall	.+2130   	; 0xb94 <shiftIn>
 342:	08 2f       	mov	r16, r24
	data[1] = SHIFTIN_WITH_SPEED_SUPPORT(DOUT, PD_SCK, MSBFIRST);
 344:	41 e0       	ldi	r20, 0x01	; 1
 346:	6a 81       	ldd	r22, Y+2	; 0x02
 348:	8b 81       	ldd	r24, Y+3	; 0x03
 34a:	24 d4       	rcall	.+2120   	; 0xb94 <shiftIn>
 34c:	18 2f       	mov	r17, r24
	data[0] = SHIFTIN_WITH_SPEED_SUPPORT(DOUT, PD_SCK, MSBFIRST);
 34e:	41 e0       	ldi	r20, 0x01	; 1
 350:	6a 81       	ldd	r22, Y+2	; 0x02
 352:	8b 81       	ldd	r24, Y+3	; 0x03
 354:	1f d4       	rcall	.+2110   	; 0xb94 <shiftIn>
 356:	f8 2e       	mov	r15, r24

	// Set the channel and the gain factor for the next reading using the clock pin.
	for (unsigned int i = 0; i < GAIN; i++) {
 358:	c1 2c       	mov	r12, r1
 35a:	d1 2c       	mov	r13, r1
 35c:	8c 81       	ldd	r24, Y+4	; 0x04
 35e:	90 e0       	ldi	r25, 0x00	; 0
 360:	c8 16       	cp	r12, r24
 362:	d9 06       	cpc	r13, r25
		digitalWrite(PD_SCK, HIGH);
 364:	50 f4       	brcc	.+20     	; 0x37a <_ZN5HX7114readEv+0x5e>
 366:	61 e0       	ldi	r22, 0x01	; 1
 368:	8a 81       	ldd	r24, Y+2	; 0x02
		#if ARCH_ESPRESSIF
		delayMicroseconds(1);
		#endif
		digitalWrite(PD_SCK, LOW);
 36a:	be d3       	rcall	.+1916   	; 0xae8 <digitalWrite>
 36c:	60 e0       	ldi	r22, 0x00	; 0
 36e:	8a 81       	ldd	r24, Y+2	; 0x02
 370:	bb d3       	rcall	.+1910   	; 0xae8 <digitalWrite>
	data[2] = SHIFTIN_WITH_SPEED_SUPPORT(DOUT, PD_SCK, MSBFIRST);
	data[1] = SHIFTIN_WITH_SPEED_SUPPORT(DOUT, PD_SCK, MSBFIRST);
	data[0] = SHIFTIN_WITH_SPEED_SUPPORT(DOUT, PD_SCK, MSBFIRST);

	// Set the channel and the gain factor for the next reading using the clock pin.
	for (unsigned int i = 0; i < GAIN; i++) {
 372:	2f ef       	ldi	r18, 0xFF	; 255
 374:	c2 1a       	sub	r12, r18
 376:	d2 0a       	sbc	r13, r18
 378:	f1 cf       	rjmp	.-30     	; 0x35c <_ZN5HX7114readEv+0x40>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
 37a:	ef be       	out	0x3f, r14	; 63
	value = ( static_cast<unsigned long>(filler) << 24
			| static_cast<unsigned long>(data[2]) << 16
			| static_cast<unsigned long>(data[1]) << 8
			| static_cast<unsigned long>(data[0]) );

	return static_cast<long>(value);
 37c:	81 2f       	mov	r24, r17
 37e:	90 e0       	ldi	r25, 0x00	; 0
 380:	a0 e0       	ldi	r26, 0x00	; 0
 382:	b0 e0       	ldi	r27, 0x00	; 0
 384:	ba 2f       	mov	r27, r26
 386:	a9 2f       	mov	r26, r25
 388:	98 2f       	mov	r25, r24
 38a:	88 27       	eor	r24, r24
 38c:	a0 2b       	or	r26, r16
 38e:	ac 01       	movw	r20, r24
 390:	bd 01       	movw	r22, r26
 392:	4f 29       	or	r20, r15
 394:	80 2f       	mov	r24, r16
 396:	88 0f       	add	r24, r24
 398:	88 0b       	sbc	r24, r24
 39a:	90 e0       	ldi	r25, 0x00	; 0
 39c:	a0 e0       	ldi	r26, 0x00	; 0
 39e:	b0 e0       	ldi	r27, 0x00	; 0
 3a0:	b8 2f       	mov	r27, r24
 3a2:	aa 27       	eor	r26, r26
 3a4:	99 27       	eor	r25, r25
 3a6:	88 27       	eor	r24, r24
 3a8:	8a 01       	movw	r16, r20
 3aa:	9b 01       	movw	r18, r22
 3ac:	08 2b       	or	r16, r24
 3ae:	19 2b       	or	r17, r25
 3b0:	2a 2b       	or	r18, r26
 3b2:	3b 2b       	or	r19, r27
 3b4:	c9 01       	movw	r24, r18
 3b6:	b8 01       	movw	r22, r16
}
 3b8:	df 91       	pop	r29
 3ba:	cf 91       	pop	r28
 3bc:	1f 91       	pop	r17
 3be:	0f 91       	pop	r16
 3c0:	ff 90       	pop	r15
 3c2:	ef 90       	pop	r14
 3c4:	df 90       	pop	r13
 3c6:	cf 90       	pop	r12
 3c8:	08 95       	ret

000003ca <_ZN5HX7118set_gainEh>:

bool HX711::is_ready() {
	return digitalRead(DOUT) == LOW;
}

void HX711::set_gain(byte gain) {
 3ca:	cf 93       	push	r28
 3cc:	df 93       	push	r29
 3ce:	ec 01       	movw	r28, r24
	switch (gain) {
 3d0:	60 34       	cpi	r22, 0x40	; 64
 3d2:	41 f0       	breq	.+16     	; 0x3e4 <_ZN5HX7118set_gainEh+0x1a>
 3d4:	60 38       	cpi	r22, 0x80	; 128
 3d6:	21 f0       	breq	.+8      	; 0x3e0 <_ZN5HX7118set_gainEh+0x16>
 3d8:	60 32       	cpi	r22, 0x20	; 32
 3da:	31 f4       	brne	.+12     	; 0x3e8 <_ZN5HX7118set_gainEh+0x1e>
			break;
		case 64:		// channel A, gain factor 64
			GAIN = 3;
			break;
		case 32:		// channel B, gain factor 32
			GAIN = 2;
 3dc:	82 e0       	ldi	r24, 0x02	; 2
 3de:	03 c0       	rjmp	.+6      	; 0x3e6 <_ZN5HX7118set_gainEh+0x1c>
}

void HX711::set_gain(byte gain) {
	switch (gain) {
		case 128:		// channel A, gain factor 128
			GAIN = 1;
 3e0:	81 e0       	ldi	r24, 0x01	; 1
 3e2:	01 c0       	rjmp	.+2      	; 0x3e6 <_ZN5HX7118set_gainEh+0x1c>
			break;
		case 64:		// channel A, gain factor 64
			GAIN = 3;
 3e4:	83 e0       	ldi	r24, 0x03	; 3
			break;
		case 32:		// channel B, gain factor 32
			GAIN = 2;
 3e6:	8c 83       	std	Y+4, r24	; 0x04
			break;
	}

	digitalWrite(PD_SCK, LOW);
 3e8:	60 e0       	ldi	r22, 0x00	; 0
 3ea:	8a 81       	ldd	r24, Y+2	; 0x02
 3ec:	7d d3       	rcall	.+1786   	; 0xae8 <digitalWrite>
	read();
 3ee:	ce 01       	movw	r24, r28
}
 3f0:	df 91       	pop	r29
			GAIN = 2;
			break;
	}

	digitalWrite(PD_SCK, LOW);
	read();
 3f2:	cf 91       	pop	r28
 3f4:	93 cf       	rjmp	.-218    	; 0x31c <_ZN5HX7114readEv>

000003f6 <_ZN5HX7115beginEhhh>:
}

HX711::~HX711() {
}

void HX711::begin(byte dout, byte pd_sck, byte gain) {
 3f6:	1f 93       	push	r17
 3f8:	cf 93       	push	r28
 3fa:	df 93       	push	r29
 3fc:	ec 01       	movw	r28, r24
 3fe:	84 2f       	mov	r24, r20
 400:	12 2f       	mov	r17, r18
	PD_SCK = pd_sck;
 402:	4a 83       	std	Y+2, r20	; 0x02
	DOUT = dout;
 404:	6b 83       	std	Y+3, r22	; 0x03

	pinMode(PD_SCK, OUTPUT);
 406:	61 e0       	ldi	r22, 0x01	; 1
 408:	33 d3       	rcall	.+1638   	; 0xa70 <pinMode>
	pinMode(DOUT, INPUT);
 40a:	60 e0       	ldi	r22, 0x00	; 0
 40c:	8b 81       	ldd	r24, Y+3	; 0x03
 40e:	30 d3       	rcall	.+1632   	; 0xa70 <pinMode>

	set_gain(gain);
 410:	61 2f       	mov	r22, r17
 412:	ce 01       	movw	r24, r28
}
 414:	df 91       	pop	r29
 416:	cf 91       	pop	r28
	DOUT = dout;

	pinMode(PD_SCK, OUTPUT);
	pinMode(DOUT, INPUT);

	set_gain(gain);
 418:	1f 91       	pop	r17
 41a:	d7 cf       	rjmp	.-82     	; 0x3ca <_ZN5HX7118set_gainEh>

0000041c <__subsf3>:
 41c:	50 58       	subi	r21, 0x80	; 128

0000041e <__addsf3>:
 41e:	bb 27       	eor	r27, r27
 420:	aa 27       	eor	r26, r26
 422:	0e d0       	rcall	.+28     	; 0x440 <__addsf3x>
 424:	1c c1       	rjmp	.+568    	; 0x65e <__fp_round>
 426:	0d d1       	rcall	.+538    	; 0x642 <__fp_pscA>
 428:	30 f0       	brcs	.+12     	; 0x436 <__addsf3+0x18>
 42a:	12 d1       	rcall	.+548    	; 0x650 <__fp_pscB>
 42c:	20 f0       	brcs	.+8      	; 0x436 <__addsf3+0x18>
 42e:	31 f4       	brne	.+12     	; 0x43c <__addsf3+0x1e>
 430:	9f 3f       	cpi	r25, 0xFF	; 255
 432:	11 f4       	brne	.+4      	; 0x438 <__addsf3+0x1a>
 434:	1e f4       	brtc	.+6      	; 0x43c <__addsf3+0x1e>
 436:	02 c1       	rjmp	.+516    	; 0x63c <__fp_nan>
 438:	0e f4       	brtc	.+2      	; 0x43c <__addsf3+0x1e>
 43a:	e0 95       	com	r30
 43c:	e7 fb       	bst	r30, 7
 43e:	f8 c0       	rjmp	.+496    	; 0x630 <__fp_inf>

00000440 <__addsf3x>:
 440:	e9 2f       	mov	r30, r25
 442:	1e d1       	rcall	.+572    	; 0x680 <__fp_split3>
 444:	80 f3       	brcs	.-32     	; 0x426 <__addsf3+0x8>
 446:	ba 17       	cp	r27, r26
 448:	62 07       	cpc	r22, r18
 44a:	73 07       	cpc	r23, r19
 44c:	84 07       	cpc	r24, r20
 44e:	95 07       	cpc	r25, r21
 450:	18 f0       	brcs	.+6      	; 0x458 <__addsf3x+0x18>
 452:	71 f4       	brne	.+28     	; 0x470 <__addsf3x+0x30>
 454:	9e f5       	brtc	.+102    	; 0x4bc <__addsf3x+0x7c>
 456:	36 c1       	rjmp	.+620    	; 0x6c4 <__fp_zero>
 458:	0e f4       	brtc	.+2      	; 0x45c <__addsf3x+0x1c>
 45a:	e0 95       	com	r30
 45c:	0b 2e       	mov	r0, r27
 45e:	ba 2f       	mov	r27, r26
 460:	a0 2d       	mov	r26, r0
 462:	0b 01       	movw	r0, r22
 464:	b9 01       	movw	r22, r18
 466:	90 01       	movw	r18, r0
 468:	0c 01       	movw	r0, r24
 46a:	ca 01       	movw	r24, r20
 46c:	a0 01       	movw	r20, r0
 46e:	11 24       	eor	r1, r1
 470:	ff 27       	eor	r31, r31
 472:	59 1b       	sub	r21, r25
 474:	99 f0       	breq	.+38     	; 0x49c <__addsf3x+0x5c>
 476:	59 3f       	cpi	r21, 0xF9	; 249
 478:	50 f4       	brcc	.+20     	; 0x48e <__addsf3x+0x4e>
 47a:	50 3e       	cpi	r21, 0xE0	; 224
 47c:	68 f1       	brcs	.+90     	; 0x4d8 <__addsf3x+0x98>
 47e:	1a 16       	cp	r1, r26
 480:	f0 40       	sbci	r31, 0x00	; 0
 482:	a2 2f       	mov	r26, r18
 484:	23 2f       	mov	r18, r19
 486:	34 2f       	mov	r19, r20
 488:	44 27       	eor	r20, r20
 48a:	58 5f       	subi	r21, 0xF8	; 248
 48c:	f3 cf       	rjmp	.-26     	; 0x474 <__addsf3x+0x34>
 48e:	46 95       	lsr	r20
 490:	37 95       	ror	r19
 492:	27 95       	ror	r18
 494:	a7 95       	ror	r26
 496:	f0 40       	sbci	r31, 0x00	; 0
 498:	53 95       	inc	r21
 49a:	c9 f7       	brne	.-14     	; 0x48e <__addsf3x+0x4e>
 49c:	7e f4       	brtc	.+30     	; 0x4bc <__addsf3x+0x7c>
 49e:	1f 16       	cp	r1, r31
 4a0:	ba 0b       	sbc	r27, r26
 4a2:	62 0b       	sbc	r22, r18
 4a4:	73 0b       	sbc	r23, r19
 4a6:	84 0b       	sbc	r24, r20
 4a8:	ba f0       	brmi	.+46     	; 0x4d8 <__addsf3x+0x98>
 4aa:	91 50       	subi	r25, 0x01	; 1
 4ac:	a1 f0       	breq	.+40     	; 0x4d6 <__addsf3x+0x96>
 4ae:	ff 0f       	add	r31, r31
 4b0:	bb 1f       	adc	r27, r27
 4b2:	66 1f       	adc	r22, r22
 4b4:	77 1f       	adc	r23, r23
 4b6:	88 1f       	adc	r24, r24
 4b8:	c2 f7       	brpl	.-16     	; 0x4aa <__addsf3x+0x6a>
 4ba:	0e c0       	rjmp	.+28     	; 0x4d8 <__addsf3x+0x98>
 4bc:	ba 0f       	add	r27, r26
 4be:	62 1f       	adc	r22, r18
 4c0:	73 1f       	adc	r23, r19
 4c2:	84 1f       	adc	r24, r20
 4c4:	48 f4       	brcc	.+18     	; 0x4d8 <__addsf3x+0x98>
 4c6:	87 95       	ror	r24
 4c8:	77 95       	ror	r23
 4ca:	67 95       	ror	r22
 4cc:	b7 95       	ror	r27
 4ce:	f7 95       	ror	r31
 4d0:	9e 3f       	cpi	r25, 0xFE	; 254
 4d2:	08 f0       	brcs	.+2      	; 0x4d6 <__addsf3x+0x96>
 4d4:	b3 cf       	rjmp	.-154    	; 0x43c <__addsf3+0x1e>
 4d6:	93 95       	inc	r25
 4d8:	88 0f       	add	r24, r24
 4da:	08 f0       	brcs	.+2      	; 0x4de <__addsf3x+0x9e>
 4dc:	99 27       	eor	r25, r25
 4de:	ee 0f       	add	r30, r30
 4e0:	97 95       	ror	r25
 4e2:	87 95       	ror	r24
 4e4:	08 95       	ret

000004e6 <__divsf3>:
 4e6:	0c d0       	rcall	.+24     	; 0x500 <__divsf3x>
 4e8:	ba c0       	rjmp	.+372    	; 0x65e <__fp_round>
 4ea:	b2 d0       	rcall	.+356    	; 0x650 <__fp_pscB>
 4ec:	40 f0       	brcs	.+16     	; 0x4fe <__divsf3+0x18>
 4ee:	a9 d0       	rcall	.+338    	; 0x642 <__fp_pscA>
 4f0:	30 f0       	brcs	.+12     	; 0x4fe <__divsf3+0x18>
 4f2:	21 f4       	brne	.+8      	; 0x4fc <__divsf3+0x16>
 4f4:	5f 3f       	cpi	r21, 0xFF	; 255
 4f6:	19 f0       	breq	.+6      	; 0x4fe <__divsf3+0x18>
 4f8:	9b c0       	rjmp	.+310    	; 0x630 <__fp_inf>
 4fa:	51 11       	cpse	r21, r1
 4fc:	e4 c0       	rjmp	.+456    	; 0x6c6 <__fp_szero>
 4fe:	9e c0       	rjmp	.+316    	; 0x63c <__fp_nan>

00000500 <__divsf3x>:
 500:	bf d0       	rcall	.+382    	; 0x680 <__fp_split3>
 502:	98 f3       	brcs	.-26     	; 0x4ea <__divsf3+0x4>

00000504 <__divsf3_pse>:
 504:	99 23       	and	r25, r25
 506:	c9 f3       	breq	.-14     	; 0x4fa <__divsf3+0x14>
 508:	55 23       	and	r21, r21
 50a:	b1 f3       	breq	.-20     	; 0x4f8 <__divsf3+0x12>
 50c:	95 1b       	sub	r25, r21
 50e:	55 0b       	sbc	r21, r21
 510:	bb 27       	eor	r27, r27
 512:	aa 27       	eor	r26, r26
 514:	62 17       	cp	r22, r18
 516:	73 07       	cpc	r23, r19
 518:	84 07       	cpc	r24, r20
 51a:	38 f0       	brcs	.+14     	; 0x52a <__divsf3_pse+0x26>
 51c:	9f 5f       	subi	r25, 0xFF	; 255
 51e:	5f 4f       	sbci	r21, 0xFF	; 255
 520:	22 0f       	add	r18, r18
 522:	33 1f       	adc	r19, r19
 524:	44 1f       	adc	r20, r20
 526:	aa 1f       	adc	r26, r26
 528:	a9 f3       	breq	.-22     	; 0x514 <__divsf3_pse+0x10>
 52a:	33 d0       	rcall	.+102    	; 0x592 <__divsf3_pse+0x8e>
 52c:	0e 2e       	mov	r0, r30
 52e:	3a f0       	brmi	.+14     	; 0x53e <__divsf3_pse+0x3a>
 530:	e0 e8       	ldi	r30, 0x80	; 128
 532:	30 d0       	rcall	.+96     	; 0x594 <__divsf3_pse+0x90>
 534:	91 50       	subi	r25, 0x01	; 1
 536:	50 40       	sbci	r21, 0x00	; 0
 538:	e6 95       	lsr	r30
 53a:	00 1c       	adc	r0, r0
 53c:	ca f7       	brpl	.-14     	; 0x530 <__divsf3_pse+0x2c>
 53e:	29 d0       	rcall	.+82     	; 0x592 <__divsf3_pse+0x8e>
 540:	fe 2f       	mov	r31, r30
 542:	27 d0       	rcall	.+78     	; 0x592 <__divsf3_pse+0x8e>
 544:	66 0f       	add	r22, r22
 546:	77 1f       	adc	r23, r23
 548:	88 1f       	adc	r24, r24
 54a:	bb 1f       	adc	r27, r27
 54c:	26 17       	cp	r18, r22
 54e:	37 07       	cpc	r19, r23
 550:	48 07       	cpc	r20, r24
 552:	ab 07       	cpc	r26, r27
 554:	b0 e8       	ldi	r27, 0x80	; 128
 556:	09 f0       	breq	.+2      	; 0x55a <__divsf3_pse+0x56>
 558:	bb 0b       	sbc	r27, r27
 55a:	80 2d       	mov	r24, r0
 55c:	bf 01       	movw	r22, r30
 55e:	ff 27       	eor	r31, r31
 560:	93 58       	subi	r25, 0x83	; 131
 562:	5f 4f       	sbci	r21, 0xFF	; 255
 564:	2a f0       	brmi	.+10     	; 0x570 <__divsf3_pse+0x6c>
 566:	9e 3f       	cpi	r25, 0xFE	; 254
 568:	51 05       	cpc	r21, r1
 56a:	68 f0       	brcs	.+26     	; 0x586 <__divsf3_pse+0x82>
 56c:	61 c0       	rjmp	.+194    	; 0x630 <__fp_inf>
 56e:	ab c0       	rjmp	.+342    	; 0x6c6 <__fp_szero>
 570:	5f 3f       	cpi	r21, 0xFF	; 255
 572:	ec f3       	brlt	.-6      	; 0x56e <__divsf3_pse+0x6a>
 574:	98 3e       	cpi	r25, 0xE8	; 232
 576:	dc f3       	brlt	.-10     	; 0x56e <__divsf3_pse+0x6a>
 578:	86 95       	lsr	r24
 57a:	77 95       	ror	r23
 57c:	67 95       	ror	r22
 57e:	b7 95       	ror	r27
 580:	f7 95       	ror	r31
 582:	9f 5f       	subi	r25, 0xFF	; 255
 584:	c9 f7       	brne	.-14     	; 0x578 <__divsf3_pse+0x74>
 586:	88 0f       	add	r24, r24
 588:	91 1d       	adc	r25, r1
 58a:	96 95       	lsr	r25
 58c:	87 95       	ror	r24
 58e:	97 f9       	bld	r25, 7
 590:	08 95       	ret
 592:	e1 e0       	ldi	r30, 0x01	; 1
 594:	66 0f       	add	r22, r22
 596:	77 1f       	adc	r23, r23
 598:	88 1f       	adc	r24, r24
 59a:	bb 1f       	adc	r27, r27
 59c:	62 17       	cp	r22, r18
 59e:	73 07       	cpc	r23, r19
 5a0:	84 07       	cpc	r24, r20
 5a2:	ba 07       	cpc	r27, r26
 5a4:	20 f0       	brcs	.+8      	; 0x5ae <__divsf3_pse+0xaa>
 5a6:	62 1b       	sub	r22, r18
 5a8:	73 0b       	sbc	r23, r19
 5aa:	84 0b       	sbc	r24, r20
 5ac:	ba 0b       	sbc	r27, r26
 5ae:	ee 1f       	adc	r30, r30
 5b0:	88 f7       	brcc	.-30     	; 0x594 <__divsf3_pse+0x90>
 5b2:	e0 95       	com	r30
 5b4:	08 95       	ret

000005b6 <__floatunsisf>:
 5b6:	e8 94       	clt
 5b8:	09 c0       	rjmp	.+18     	; 0x5cc <__floatsisf+0x12>

000005ba <__floatsisf>:
 5ba:	97 fb       	bst	r25, 7
 5bc:	3e f4       	brtc	.+14     	; 0x5cc <__floatsisf+0x12>
 5be:	90 95       	com	r25
 5c0:	80 95       	com	r24
 5c2:	70 95       	com	r23
 5c4:	61 95       	neg	r22
 5c6:	7f 4f       	sbci	r23, 0xFF	; 255
 5c8:	8f 4f       	sbci	r24, 0xFF	; 255
 5ca:	9f 4f       	sbci	r25, 0xFF	; 255
 5cc:	99 23       	and	r25, r25
 5ce:	a9 f0       	breq	.+42     	; 0x5fa <__floatsisf+0x40>
 5d0:	f9 2f       	mov	r31, r25
 5d2:	96 e9       	ldi	r25, 0x96	; 150
 5d4:	bb 27       	eor	r27, r27
 5d6:	93 95       	inc	r25
 5d8:	f6 95       	lsr	r31
 5da:	87 95       	ror	r24
 5dc:	77 95       	ror	r23
 5de:	67 95       	ror	r22
 5e0:	b7 95       	ror	r27
 5e2:	f1 11       	cpse	r31, r1
 5e4:	f8 cf       	rjmp	.-16     	; 0x5d6 <__floatsisf+0x1c>
 5e6:	fa f4       	brpl	.+62     	; 0x626 <__floatsisf+0x6c>
 5e8:	bb 0f       	add	r27, r27
 5ea:	11 f4       	brne	.+4      	; 0x5f0 <__floatsisf+0x36>
 5ec:	60 ff       	sbrs	r22, 0
 5ee:	1b c0       	rjmp	.+54     	; 0x626 <__floatsisf+0x6c>
 5f0:	6f 5f       	subi	r22, 0xFF	; 255
 5f2:	7f 4f       	sbci	r23, 0xFF	; 255
 5f4:	8f 4f       	sbci	r24, 0xFF	; 255
 5f6:	9f 4f       	sbci	r25, 0xFF	; 255
 5f8:	16 c0       	rjmp	.+44     	; 0x626 <__floatsisf+0x6c>
 5fa:	88 23       	and	r24, r24
 5fc:	11 f0       	breq	.+4      	; 0x602 <__floatsisf+0x48>
 5fe:	96 e9       	ldi	r25, 0x96	; 150
 600:	11 c0       	rjmp	.+34     	; 0x624 <__floatsisf+0x6a>
 602:	77 23       	and	r23, r23
 604:	21 f0       	breq	.+8      	; 0x60e <__floatsisf+0x54>
 606:	9e e8       	ldi	r25, 0x8E	; 142
 608:	87 2f       	mov	r24, r23
 60a:	76 2f       	mov	r23, r22
 60c:	05 c0       	rjmp	.+10     	; 0x618 <__floatsisf+0x5e>
 60e:	66 23       	and	r22, r22
 610:	71 f0       	breq	.+28     	; 0x62e <__floatsisf+0x74>
 612:	96 e8       	ldi	r25, 0x86	; 134
 614:	86 2f       	mov	r24, r22
 616:	70 e0       	ldi	r23, 0x00	; 0
 618:	60 e0       	ldi	r22, 0x00	; 0
 61a:	2a f0       	brmi	.+10     	; 0x626 <__floatsisf+0x6c>
 61c:	9a 95       	dec	r25
 61e:	66 0f       	add	r22, r22
 620:	77 1f       	adc	r23, r23
 622:	88 1f       	adc	r24, r24
 624:	da f7       	brpl	.-10     	; 0x61c <__floatsisf+0x62>
 626:	88 0f       	add	r24, r24
 628:	96 95       	lsr	r25
 62a:	87 95       	ror	r24
 62c:	97 f9       	bld	r25, 7
 62e:	08 95       	ret

00000630 <__fp_inf>:
 630:	97 f9       	bld	r25, 7
 632:	9f 67       	ori	r25, 0x7F	; 127
 634:	80 e8       	ldi	r24, 0x80	; 128
 636:	70 e0       	ldi	r23, 0x00	; 0
 638:	60 e0       	ldi	r22, 0x00	; 0
 63a:	08 95       	ret

0000063c <__fp_nan>:
 63c:	9f ef       	ldi	r25, 0xFF	; 255
 63e:	80 ec       	ldi	r24, 0xC0	; 192
 640:	08 95       	ret

00000642 <__fp_pscA>:
 642:	00 24       	eor	r0, r0
 644:	0a 94       	dec	r0
 646:	16 16       	cp	r1, r22
 648:	17 06       	cpc	r1, r23
 64a:	18 06       	cpc	r1, r24
 64c:	09 06       	cpc	r0, r25
 64e:	08 95       	ret

00000650 <__fp_pscB>:
 650:	00 24       	eor	r0, r0
 652:	0a 94       	dec	r0
 654:	12 16       	cp	r1, r18
 656:	13 06       	cpc	r1, r19
 658:	14 06       	cpc	r1, r20
 65a:	05 06       	cpc	r0, r21
 65c:	08 95       	ret

0000065e <__fp_round>:
 65e:	09 2e       	mov	r0, r25
 660:	03 94       	inc	r0
 662:	00 0c       	add	r0, r0
 664:	11 f4       	brne	.+4      	; 0x66a <__fp_round+0xc>
 666:	88 23       	and	r24, r24
 668:	52 f0       	brmi	.+20     	; 0x67e <__fp_round+0x20>
 66a:	bb 0f       	add	r27, r27
 66c:	40 f4       	brcc	.+16     	; 0x67e <__fp_round+0x20>
 66e:	bf 2b       	or	r27, r31
 670:	11 f4       	brne	.+4      	; 0x676 <__fp_round+0x18>
 672:	60 ff       	sbrs	r22, 0
 674:	04 c0       	rjmp	.+8      	; 0x67e <__fp_round+0x20>
 676:	6f 5f       	subi	r22, 0xFF	; 255
 678:	7f 4f       	sbci	r23, 0xFF	; 255
 67a:	8f 4f       	sbci	r24, 0xFF	; 255
 67c:	9f 4f       	sbci	r25, 0xFF	; 255
 67e:	08 95       	ret

00000680 <__fp_split3>:
 680:	57 fd       	sbrc	r21, 7
 682:	90 58       	subi	r25, 0x80	; 128
 684:	44 0f       	add	r20, r20
 686:	55 1f       	adc	r21, r21
 688:	59 f0       	breq	.+22     	; 0x6a0 <__fp_splitA+0x10>
 68a:	5f 3f       	cpi	r21, 0xFF	; 255
 68c:	71 f0       	breq	.+28     	; 0x6aa <__fp_splitA+0x1a>
 68e:	47 95       	ror	r20

00000690 <__fp_splitA>:
 690:	88 0f       	add	r24, r24
 692:	97 fb       	bst	r25, 7
 694:	99 1f       	adc	r25, r25
 696:	61 f0       	breq	.+24     	; 0x6b0 <__fp_splitA+0x20>
 698:	9f 3f       	cpi	r25, 0xFF	; 255
 69a:	79 f0       	breq	.+30     	; 0x6ba <__fp_splitA+0x2a>
 69c:	87 95       	ror	r24
 69e:	08 95       	ret
 6a0:	12 16       	cp	r1, r18
 6a2:	13 06       	cpc	r1, r19
 6a4:	14 06       	cpc	r1, r20
 6a6:	55 1f       	adc	r21, r21
 6a8:	f2 cf       	rjmp	.-28     	; 0x68e <__fp_split3+0xe>
 6aa:	46 95       	lsr	r20
 6ac:	f1 df       	rcall	.-30     	; 0x690 <__fp_splitA>
 6ae:	08 c0       	rjmp	.+16     	; 0x6c0 <__fp_splitA+0x30>
 6b0:	16 16       	cp	r1, r22
 6b2:	17 06       	cpc	r1, r23
 6b4:	18 06       	cpc	r1, r24
 6b6:	99 1f       	adc	r25, r25
 6b8:	f1 cf       	rjmp	.-30     	; 0x69c <__fp_splitA+0xc>
 6ba:	86 95       	lsr	r24
 6bc:	71 05       	cpc	r23, r1
 6be:	61 05       	cpc	r22, r1
 6c0:	08 94       	sec
 6c2:	08 95       	ret

000006c4 <__fp_zero>:
 6c4:	e8 94       	clt

000006c6 <__fp_szero>:
 6c6:	bb 27       	eor	r27, r27
 6c8:	66 27       	eor	r22, r22
 6ca:	77 27       	eor	r23, r23
 6cc:	cb 01       	movw	r24, r22
 6ce:	97 f9       	bld	r25, 7
 6d0:	08 95       	ret

000006d2 <__mulsf3>:
 6d2:	0b d0       	rcall	.+22     	; 0x6ea <__mulsf3x>
 6d4:	c4 cf       	rjmp	.-120    	; 0x65e <__fp_round>
 6d6:	b5 df       	rcall	.-150    	; 0x642 <__fp_pscA>
 6d8:	28 f0       	brcs	.+10     	; 0x6e4 <__mulsf3+0x12>
 6da:	ba df       	rcall	.-140    	; 0x650 <__fp_pscB>
 6dc:	18 f0       	brcs	.+6      	; 0x6e4 <__mulsf3+0x12>
 6de:	95 23       	and	r25, r21
 6e0:	09 f0       	breq	.+2      	; 0x6e4 <__mulsf3+0x12>
 6e2:	a6 cf       	rjmp	.-180    	; 0x630 <__fp_inf>
 6e4:	ab cf       	rjmp	.-170    	; 0x63c <__fp_nan>
 6e6:	11 24       	eor	r1, r1
 6e8:	ee cf       	rjmp	.-36     	; 0x6c6 <__fp_szero>

000006ea <__mulsf3x>:
 6ea:	ca df       	rcall	.-108    	; 0x680 <__fp_split3>
 6ec:	a0 f3       	brcs	.-24     	; 0x6d6 <__mulsf3+0x4>

000006ee <__mulsf3_pse>:
 6ee:	95 9f       	mul	r25, r21
 6f0:	d1 f3       	breq	.-12     	; 0x6e6 <__mulsf3+0x14>
 6f2:	95 0f       	add	r25, r21
 6f4:	50 e0       	ldi	r21, 0x00	; 0
 6f6:	55 1f       	adc	r21, r21
 6f8:	62 9f       	mul	r22, r18
 6fa:	f0 01       	movw	r30, r0
 6fc:	72 9f       	mul	r23, r18
 6fe:	bb 27       	eor	r27, r27
 700:	f0 0d       	add	r31, r0
 702:	b1 1d       	adc	r27, r1
 704:	63 9f       	mul	r22, r19
 706:	aa 27       	eor	r26, r26
 708:	f0 0d       	add	r31, r0
 70a:	b1 1d       	adc	r27, r1
 70c:	aa 1f       	adc	r26, r26
 70e:	64 9f       	mul	r22, r20
 710:	66 27       	eor	r22, r22
 712:	b0 0d       	add	r27, r0
 714:	a1 1d       	adc	r26, r1
 716:	66 1f       	adc	r22, r22
 718:	82 9f       	mul	r24, r18
 71a:	22 27       	eor	r18, r18
 71c:	b0 0d       	add	r27, r0
 71e:	a1 1d       	adc	r26, r1
 720:	62 1f       	adc	r22, r18
 722:	73 9f       	mul	r23, r19
 724:	b0 0d       	add	r27, r0
 726:	a1 1d       	adc	r26, r1
 728:	62 1f       	adc	r22, r18
 72a:	83 9f       	mul	r24, r19
 72c:	a0 0d       	add	r26, r0
 72e:	61 1d       	adc	r22, r1
 730:	22 1f       	adc	r18, r18
 732:	74 9f       	mul	r23, r20
 734:	33 27       	eor	r19, r19
 736:	a0 0d       	add	r26, r0
 738:	61 1d       	adc	r22, r1
 73a:	23 1f       	adc	r18, r19
 73c:	84 9f       	mul	r24, r20
 73e:	60 0d       	add	r22, r0
 740:	21 1d       	adc	r18, r1
 742:	82 2f       	mov	r24, r18
 744:	76 2f       	mov	r23, r22
 746:	6a 2f       	mov	r22, r26
 748:	11 24       	eor	r1, r1
 74a:	9f 57       	subi	r25, 0x7F	; 127
 74c:	50 40       	sbci	r21, 0x00	; 0
 74e:	8a f0       	brmi	.+34     	; 0x772 <__mulsf3_pse+0x84>
 750:	e1 f0       	breq	.+56     	; 0x78a <__mulsf3_pse+0x9c>
 752:	88 23       	and	r24, r24
 754:	4a f0       	brmi	.+18     	; 0x768 <__mulsf3_pse+0x7a>
 756:	ee 0f       	add	r30, r30
 758:	ff 1f       	adc	r31, r31
 75a:	bb 1f       	adc	r27, r27
 75c:	66 1f       	adc	r22, r22
 75e:	77 1f       	adc	r23, r23
 760:	88 1f       	adc	r24, r24
 762:	91 50       	subi	r25, 0x01	; 1
 764:	50 40       	sbci	r21, 0x00	; 0
 766:	a9 f7       	brne	.-22     	; 0x752 <__mulsf3_pse+0x64>
 768:	9e 3f       	cpi	r25, 0xFE	; 254
 76a:	51 05       	cpc	r21, r1
 76c:	70 f0       	brcs	.+28     	; 0x78a <__mulsf3_pse+0x9c>
 76e:	60 cf       	rjmp	.-320    	; 0x630 <__fp_inf>
 770:	aa cf       	rjmp	.-172    	; 0x6c6 <__fp_szero>
 772:	5f 3f       	cpi	r21, 0xFF	; 255
 774:	ec f3       	brlt	.-6      	; 0x770 <__mulsf3_pse+0x82>
 776:	98 3e       	cpi	r25, 0xE8	; 232
 778:	dc f3       	brlt	.-10     	; 0x770 <__mulsf3_pse+0x82>
 77a:	86 95       	lsr	r24
 77c:	77 95       	ror	r23
 77e:	67 95       	ror	r22
 780:	b7 95       	ror	r27
 782:	f7 95       	ror	r31
 784:	e7 95       	ror	r30
 786:	9f 5f       	subi	r25, 0xFF	; 255
 788:	c1 f7       	brne	.-16     	; 0x77a <__mulsf3_pse+0x8c>
 78a:	fe 2b       	or	r31, r30
 78c:	88 0f       	add	r24, r24
 78e:	91 1d       	adc	r25, r1
 790:	96 95       	lsr	r25
 792:	87 95       	ror	r24
 794:	97 f9       	bld	r25, 7
 796:	08 95       	ret

00000798 <_Z14serialEventRunv>:
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
 798:	80 e0       	ldi	r24, 0x00	; 0
 79a:	90 e0       	ldi	r25, 0x00	; 0
 79c:	89 2b       	or	r24, r25
 79e:	41 f0       	breq	.+16     	; 0x7b0 <_Z14serialEventRunv+0x18>
 7a0:	80 e0       	ldi	r24, 0x00	; 0
 7a2:	90 e0       	ldi	r25, 0x00	; 0
 7a4:	89 2b       	or	r24, r25
 7a6:	21 f0       	breq	.+8      	; 0x7b0 <_Z14serialEventRunv+0x18>
 7a8:	0e 94 00 00 	call	0	; 0x0 <__vectors>
 7ac:	81 11       	cpse	r24, r1
 7ae:	0d c0       	rjmp	.+26     	; 0x7ca <_Z14serialEventRunv+0x32>
#endif
#if defined(HAVE_HWSERIAL1)
  if (Serial1_available && serialEvent1 && Serial1_available()) serialEvent1();
 7b0:	80 e0       	ldi	r24, 0x00	; 0
 7b2:	90 e0       	ldi	r25, 0x00	; 0
 7b4:	89 2b       	or	r24, r25
 7b6:	71 f0       	breq	.+28     	; 0x7d4 <_Z14serialEventRunv+0x3c>
 7b8:	80 e0       	ldi	r24, 0x00	; 0
 7ba:	90 e0       	ldi	r25, 0x00	; 0
 7bc:	89 2b       	or	r24, r25
 7be:	51 f0       	breq	.+20     	; 0x7d4 <_Z14serialEventRunv+0x3c>
 7c0:	0e 94 00 00 	call	0	; 0x0 <__vectors>
 7c4:	81 11       	cpse	r24, r1
 7c6:	04 c0       	rjmp	.+8      	; 0x7d0 <_Z14serialEventRunv+0x38>
 7c8:	08 95       	ret
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
 7ca:	0e 94 00 00 	call	0	; 0x0 <__vectors>
 7ce:	f0 cf       	rjmp	.-32     	; 0x7b0 <_Z14serialEventRunv+0x18>
#endif
#if defined(HAVE_HWSERIAL1)
  if (Serial1_available && serialEvent1 && Serial1_available()) serialEvent1();
 7d0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
 7d4:	08 95       	ret

000007d6 <initVariant>:
 7d6:	08 95       	ret

000007d8 <main>:
void setupUSB() __attribute__((weak));
void setupUSB() { }

int main(void)
{
	init();
 7d8:	b2 d0       	rcall	.+356    	; 0x93e <init>

	initVariant();
 7da:	fd df       	rcall	.-6      	; 0x7d6 <initVariant>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
 7dc:	51 dd       	rcall	.-1374   	; 0x280 <setup>
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
 7de:	cc ec       	ldi	r28, 0xCC	; 204
 7e0:	d3 e0       	ldi	r29, 0x03	; 3
#endif
	
	setup();
    
	for (;;) {
		loop();
 7e2:	60 dd       	rcall	.-1344   	; 0x2a4 <loop>
		if (serialEventRun) serialEventRun();
 7e4:	20 97       	sbiw	r28, 0x00	; 0
 7e6:	e9 f3       	breq	.-6      	; 0x7e2 <main+0xa>
 7e8:	d7 df       	rcall	.-82     	; 0x798 <_Z14serialEventRunv>
 7ea:	fb cf       	rjmp	.-10     	; 0x7e2 <main+0xa>

000007ec <_ZdlPv>:
 7ec:	d3 c2       	rjmp	.+1446   	; 0xd94 <free>

000007ee <__vector_18>:
	

#endif

	// busy wait
	__asm__ __volatile__ (
 7ee:	1f 92       	push	r1
 7f0:	0f 92       	push	r0
 7f2:	0f b6       	in	r0, 0x3f	; 63
 7f4:	0f 92       	push	r0
 7f6:	11 24       	eor	r1, r1
 7f8:	2f 93       	push	r18
 7fa:	3f 93       	push	r19
 7fc:	8f 93       	push	r24
 7fe:	9f 93       	push	r25
 800:	af 93       	push	r26
 802:	bf 93       	push	r27
 804:	80 91 36 01 	lds	r24, 0x0136	; 0x800136 <timer0_millis>
 808:	90 91 37 01 	lds	r25, 0x0137	; 0x800137 <timer0_millis+0x1>
 80c:	a0 91 38 01 	lds	r26, 0x0138	; 0x800138 <timer0_millis+0x2>
 810:	b0 91 39 01 	lds	r27, 0x0139	; 0x800139 <timer0_millis+0x3>
 814:	30 91 35 01 	lds	r19, 0x0135	; 0x800135 <timer0_fract>
 818:	23 e0       	ldi	r18, 0x03	; 3
 81a:	23 0f       	add	r18, r19
 81c:	2d 37       	cpi	r18, 0x7D	; 125
 81e:	20 f4       	brcc	.+8      	; 0x828 <__vector_18+0x3a>
 820:	01 96       	adiw	r24, 0x01	; 1
 822:	a1 1d       	adc	r26, r1
 824:	b1 1d       	adc	r27, r1
 826:	05 c0       	rjmp	.+10     	; 0x832 <__vector_18+0x44>
 828:	26 e8       	ldi	r18, 0x86	; 134
 82a:	23 0f       	add	r18, r19
 82c:	02 96       	adiw	r24, 0x02	; 2
 82e:	a1 1d       	adc	r26, r1
 830:	b1 1d       	adc	r27, r1
 832:	20 93 35 01 	sts	0x0135, r18	; 0x800135 <timer0_fract>
 836:	80 93 36 01 	sts	0x0136, r24	; 0x800136 <timer0_millis>
 83a:	90 93 37 01 	sts	0x0137, r25	; 0x800137 <timer0_millis+0x1>
 83e:	a0 93 38 01 	sts	0x0138, r26	; 0x800138 <timer0_millis+0x2>
 842:	b0 93 39 01 	sts	0x0139, r27	; 0x800139 <timer0_millis+0x3>
 846:	80 91 3a 01 	lds	r24, 0x013A	; 0x80013a <timer0_overflow_count>
 84a:	90 91 3b 01 	lds	r25, 0x013B	; 0x80013b <timer0_overflow_count+0x1>
 84e:	a0 91 3c 01 	lds	r26, 0x013C	; 0x80013c <timer0_overflow_count+0x2>
 852:	b0 91 3d 01 	lds	r27, 0x013D	; 0x80013d <timer0_overflow_count+0x3>
 856:	01 96       	adiw	r24, 0x01	; 1
 858:	a1 1d       	adc	r26, r1
 85a:	b1 1d       	adc	r27, r1
 85c:	80 93 3a 01 	sts	0x013A, r24	; 0x80013a <timer0_overflow_count>
 860:	90 93 3b 01 	sts	0x013B, r25	; 0x80013b <timer0_overflow_count+0x1>
 864:	a0 93 3c 01 	sts	0x013C, r26	; 0x80013c <timer0_overflow_count+0x2>
 868:	b0 93 3d 01 	sts	0x013D, r27	; 0x80013d <timer0_overflow_count+0x3>
 86c:	bf 91       	pop	r27
 86e:	af 91       	pop	r26
 870:	9f 91       	pop	r25
 872:	8f 91       	pop	r24
 874:	3f 91       	pop	r19
 876:	2f 91       	pop	r18
 878:	0f 90       	pop	r0
 87a:	0f be       	out	0x3f, r0	; 63
 87c:	0f 90       	pop	r0
 87e:	1f 90       	pop	r1
 880:	18 95       	reti

00000882 <micros>:
 882:	3f b7       	in	r19, 0x3f	; 63
 884:	f8 94       	cli
 886:	80 91 3a 01 	lds	r24, 0x013A	; 0x80013a <timer0_overflow_count>
 88a:	90 91 3b 01 	lds	r25, 0x013B	; 0x80013b <timer0_overflow_count+0x1>
 88e:	a0 91 3c 01 	lds	r26, 0x013C	; 0x80013c <timer0_overflow_count+0x2>
 892:	b0 91 3d 01 	lds	r27, 0x013D	; 0x80013d <timer0_overflow_count+0x3>
 896:	26 b5       	in	r18, 0x26	; 38
 898:	a8 9b       	sbis	0x15, 0	; 21
 89a:	05 c0       	rjmp	.+10     	; 0x8a6 <micros+0x24>
 89c:	2f 3f       	cpi	r18, 0xFF	; 255
 89e:	19 f0       	breq	.+6      	; 0x8a6 <micros+0x24>
 8a0:	01 96       	adiw	r24, 0x01	; 1
 8a2:	a1 1d       	adc	r26, r1
 8a4:	b1 1d       	adc	r27, r1
 8a6:	3f bf       	out	0x3f, r19	; 63
 8a8:	ba 2f       	mov	r27, r26
 8aa:	a9 2f       	mov	r26, r25
 8ac:	98 2f       	mov	r25, r24
 8ae:	88 27       	eor	r24, r24
 8b0:	82 0f       	add	r24, r18
 8b2:	91 1d       	adc	r25, r1
 8b4:	a1 1d       	adc	r26, r1
 8b6:	b1 1d       	adc	r27, r1
 8b8:	bc 01       	movw	r22, r24
 8ba:	cd 01       	movw	r24, r26
 8bc:	42 e0       	ldi	r20, 0x02	; 2
 8be:	66 0f       	add	r22, r22
 8c0:	77 1f       	adc	r23, r23
 8c2:	88 1f       	adc	r24, r24
 8c4:	99 1f       	adc	r25, r25
 8c6:	4a 95       	dec	r20
 8c8:	d1 f7       	brne	.-12     	; 0x8be <micros+0x3c>
 8ca:	08 95       	ret

000008cc <delay>:
 8cc:	8f 92       	push	r8
 8ce:	9f 92       	push	r9
 8d0:	af 92       	push	r10
 8d2:	bf 92       	push	r11
 8d4:	cf 92       	push	r12
 8d6:	df 92       	push	r13
 8d8:	ef 92       	push	r14
 8da:	ff 92       	push	r15
 8dc:	6b 01       	movw	r12, r22
 8de:	7c 01       	movw	r14, r24
 8e0:	d0 df       	rcall	.-96     	; 0x882 <micros>
 8e2:	4b 01       	movw	r8, r22
 8e4:	5c 01       	movw	r10, r24
 8e6:	c1 14       	cp	r12, r1
 8e8:	d1 04       	cpc	r13, r1
 8ea:	e1 04       	cpc	r14, r1
 8ec:	f1 04       	cpc	r15, r1
 8ee:	f1 f0       	breq	.+60     	; 0x92c <delay+0x60>
 8f0:	88 d1       	rcall	.+784    	; 0xc02 <yield>
 8f2:	c7 df       	rcall	.-114    	; 0x882 <micros>
 8f4:	dc 01       	movw	r26, r24
 8f6:	cb 01       	movw	r24, r22
 8f8:	88 19       	sub	r24, r8
 8fa:	99 09       	sbc	r25, r9
 8fc:	aa 09       	sbc	r26, r10
 8fe:	bb 09       	sbc	r27, r11
 900:	88 3e       	cpi	r24, 0xE8	; 232
 902:	93 40       	sbci	r25, 0x03	; 3
 904:	a1 05       	cpc	r26, r1
 906:	b1 05       	cpc	r27, r1
 908:	70 f3       	brcs	.-36     	; 0x8e6 <delay+0x1a>
 90a:	21 e0       	ldi	r18, 0x01	; 1
 90c:	c2 1a       	sub	r12, r18
 90e:	d1 08       	sbc	r13, r1
 910:	e1 08       	sbc	r14, r1
 912:	f1 08       	sbc	r15, r1
 914:	88 ee       	ldi	r24, 0xE8	; 232
 916:	88 0e       	add	r8, r24
 918:	83 e0       	ldi	r24, 0x03	; 3
 91a:	98 1e       	adc	r9, r24
 91c:	a1 1c       	adc	r10, r1
 91e:	b1 1c       	adc	r11, r1
 920:	c1 14       	cp	r12, r1
 922:	d1 04       	cpc	r13, r1
 924:	e1 04       	cpc	r14, r1
 926:	f1 04       	cpc	r15, r1
 928:	21 f7       	brne	.-56     	; 0x8f2 <delay+0x26>
 92a:	dd cf       	rjmp	.-70     	; 0x8e6 <delay+0x1a>
 92c:	ff 90       	pop	r15
 92e:	ef 90       	pop	r14
 930:	df 90       	pop	r13
 932:	cf 90       	pop	r12
 934:	bf 90       	pop	r11
 936:	af 90       	pop	r10
 938:	9f 90       	pop	r9
 93a:	8f 90       	pop	r8
 93c:	08 95       	ret

0000093e <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
 93e:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
 940:	84 b5       	in	r24, 0x24	; 36
 942:	82 60       	ori	r24, 0x02	; 2
 944:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
 946:	84 b5       	in	r24, 0x24	; 36
 948:	81 60       	ori	r24, 0x01	; 1
 94a:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
 94c:	85 b5       	in	r24, 0x25	; 37
 94e:	82 60       	ori	r24, 0x02	; 2
 950:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
 952:	85 b5       	in	r24, 0x25	; 37
 954:	81 60       	ori	r24, 0x01	; 1
 956:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
 958:	ee e6       	ldi	r30, 0x6E	; 110
 95a:	f0 e0       	ldi	r31, 0x00	; 0
 95c:	80 81       	ld	r24, Z
 95e:	81 60       	ori	r24, 0x01	; 1
 960:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
 962:	e1 e8       	ldi	r30, 0x81	; 129
 964:	f0 e0       	ldi	r31, 0x00	; 0
 966:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
 968:	80 81       	ld	r24, Z
 96a:	82 60       	ori	r24, 0x02	; 2
 96c:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
 96e:	80 81       	ld	r24, Z
 970:	81 60       	ori	r24, 0x01	; 1
 972:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
 974:	e0 e8       	ldi	r30, 0x80	; 128
 976:	f0 e0       	ldi	r31, 0x00	; 0
 978:	80 81       	ld	r24, Z
 97a:	81 60       	ori	r24, 0x01	; 1
 97c:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
 97e:	e1 eb       	ldi	r30, 0xB1	; 177
 980:	f0 e0       	ldi	r31, 0x00	; 0
 982:	80 81       	ld	r24, Z
 984:	84 60       	ori	r24, 0x04	; 4
 986:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
 988:	e0 eb       	ldi	r30, 0xB0	; 176
 98a:	f0 e0       	ldi	r31, 0x00	; 0
 98c:	80 81       	ld	r24, Z
 98e:	81 60       	ori	r24, 0x01	; 1
 990:	80 83       	st	Z, r24
//#else
	// Timer 2 not finished (may not be present on this CPU)
#endif

#if defined(TCCR3B) && defined(CS31) && defined(WGM30)
	sbi(TCCR3B, CS31);		// set timer 3 prescale factor to 64
 992:	e1 e9       	ldi	r30, 0x91	; 145
 994:	f0 e0       	ldi	r31, 0x00	; 0
 996:	80 81       	ld	r24, Z
 998:	82 60       	ori	r24, 0x02	; 2
 99a:	80 83       	st	Z, r24
	sbi(TCCR3B, CS30);
 99c:	80 81       	ld	r24, Z
 99e:	81 60       	ori	r24, 0x01	; 1
 9a0:	80 83       	st	Z, r24
	sbi(TCCR3A, WGM30);		// put timer 3 in 8-bit phase correct pwm mode
 9a2:	e0 e9       	ldi	r30, 0x90	; 144
 9a4:	f0 e0       	ldi	r31, 0x00	; 0
 9a6:	80 81       	ld	r24, Z
 9a8:	81 60       	ori	r24, 0x01	; 1
 9aa:	80 83       	st	Z, r24
#endif

#if defined(ADCSRA)
	// set a2d prescaler so we are inside the desired 50-200 KHz range.
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
 9ac:	ea e7       	ldi	r30, 0x7A	; 122
 9ae:	f0 e0       	ldi	r31, 0x00	; 0
 9b0:	80 81       	ld	r24, Z
 9b2:	84 60       	ori	r24, 0x04	; 4
 9b4:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS1);
 9b6:	80 81       	ld	r24, Z
 9b8:	82 60       	ori	r24, 0x02	; 2
 9ba:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS0);
 9bc:	80 81       	ld	r24, Z
 9be:	81 60       	ori	r24, 0x01	; 1
 9c0:	80 83       	st	Z, r24
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
 9c2:	80 81       	ld	r24, Z
 9c4:	80 68       	ori	r24, 0x80	; 128
 9c6:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
 9c8:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
 9cc:	08 95       	ret

000009ce <analogRead>:

#if defined(analogPinToChannel)
#if defined(__AVR_ATmega32U4__)
	if (pin >= 18) pin -= 18; // allow for channel or pin numbers
#endif
	pin = analogPinToChannel(pin);
 9ce:	88 30       	cpi	r24, 0x08	; 8
 9d0:	38 f0       	brcs	.+14     	; 0x9e0 <analogRead+0x12>
 9d2:	88 31       	cpi	r24, 0x18	; 24
 9d4:	20 f0       	brcs	.+8      	; 0x9de <analogRead+0x10>
 9d6:	9f e1       	ldi	r25, 0x1F	; 31
 9d8:	98 1b       	sub	r25, r24
 9da:	89 2f       	mov	r24, r25
 9dc:	01 c0       	rjmp	.+2      	; 0x9e0 <analogRead+0x12>
 9de:	8f ef       	ldi	r24, 0xFF	; 255
	// to 0 (the default).
#if defined(ADMUX)
#if defined(__AVR_ATtiny25__) || defined(__AVR_ATtiny45__) || defined(__AVR_ATtiny85__)
	ADMUX = (analog_reference << 4) | (pin & 0x07);
#else
	ADMUX = (analog_reference << 6) | (pin & 0x07);
 9e0:	20 91 12 01 	lds	r18, 0x0112	; 0x800112 <analog_reference>
 9e4:	90 e4       	ldi	r25, 0x40	; 64
 9e6:	29 9f       	mul	r18, r25
 9e8:	90 01       	movw	r18, r0
 9ea:	11 24       	eor	r1, r1
 9ec:	87 70       	andi	r24, 0x07	; 7
 9ee:	82 2b       	or	r24, r18
 9f0:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
	// without a delay, we seem to read from the wrong channel
	//delay(1);

#if defined(ADCSRA) && defined(ADCL)
	// start the conversion
	sbi(ADCSRA, ADSC);
 9f4:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
 9f8:	80 64       	ori	r24, 0x40	; 64
 9fa:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>

	// ADSC is cleared when the conversion finishes
	while (bit_is_set(ADCSRA, ADSC));
 9fe:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
 a02:	86 fd       	sbrc	r24, 6
 a04:	fc cf       	rjmp	.-8      	; 0x9fe <analogRead+0x30>

	// we have to read ADCL first; doing so locks both ADCL
	// and ADCH until ADCH is read.  reading ADCL second would
	// cause the results of each conversion to be discarded,
	// as ADCL and ADCH would be locked when it completed.
	low  = ADCL;
 a06:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
	high = ADCH;
 a0a:	20 91 79 00 	lds	r18, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
	low  = 0;
	high = 0;
#endif

	// combine the two bytes
	return (high << 8) | low;
 a0e:	90 e0       	ldi	r25, 0x00	; 0
}
 a10:	92 2b       	or	r25, r18
 a12:	08 95       	ret

00000a14 <turnOffPWM>:
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
 a14:	90 e0       	ldi	r25, 0x00	; 0
 a16:	fc 01       	movw	r30, r24
 a18:	31 97       	sbiw	r30, 0x01	; 1
 a1a:	ea 30       	cpi	r30, 0x0A	; 10
 a1c:	f1 05       	cpc	r31, r1
 a1e:	38 f5       	brcc	.+78     	; 0xa6e <turnOffPWM+0x5a>
 a20:	ea 5b       	subi	r30, 0xBA	; 186
 a22:	ff 4f       	sbci	r31, 0xFF	; 255
 a24:	02 c1       	rjmp	.+516    	; 0xc2a <__tablejump2__>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
 a26:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
 a2a:	8f 77       	andi	r24, 0x7F	; 127
 a2c:	03 c0       	rjmp	.+6      	; 0xa34 <turnOffPWM+0x20>
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
 a2e:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
 a32:	8f 7d       	andi	r24, 0xDF	; 223
 a34:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
 a38:	08 95       	ret
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
 a3a:	84 b5       	in	r24, 0x24	; 36
 a3c:	8f 77       	andi	r24, 0x7F	; 127
 a3e:	02 c0       	rjmp	.+4      	; 0xa44 <turnOffPWM+0x30>
		#endif
		
		#if defined(TCCR0A) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
 a40:	84 b5       	in	r24, 0x24	; 36
 a42:	8f 7d       	andi	r24, 0xDF	; 223
 a44:	84 bd       	out	0x24, r24	; 36
 a46:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
 a48:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
 a4c:	8f 77       	andi	r24, 0x7F	; 127
 a4e:	03 c0       	rjmp	.+6      	; 0xa56 <turnOffPWM+0x42>
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
 a50:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
 a54:	8f 7d       	andi	r24, 0xDF	; 223
 a56:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
 a5a:	08 95       	ret
		#endif
		
		#if defined(TCCR3A) && defined(COM3A1)
		case  TIMER3A:  cbi(TCCR3A, COM3A1);    break;
 a5c:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
 a60:	8f 77       	andi	r24, 0x7F	; 127
 a62:	03 c0       	rjmp	.+6      	; 0xa6a <turnOffPWM+0x56>
		#endif
		#if defined(TCCR3A) && defined(COM3B1)
		case  TIMER3B:  cbi(TCCR3A, COM3B1);    break;
 a64:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
 a68:	8f 7d       	andi	r24, 0xDF	; 223
 a6a:	80 93 90 00 	sts	0x0090, r24	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
 a6e:	08 95       	ret

00000a70 <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
 a70:	cf 93       	push	r28
 a72:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
 a74:	90 e0       	ldi	r25, 0x00	; 0
 a76:	fc 01       	movw	r30, r24
 a78:	e0 54       	subi	r30, 0x40	; 64
 a7a:	ff 4f       	sbci	r31, 0xFF	; 255
 a7c:	24 91       	lpm	r18, Z
	uint8_t port = digitalPinToPort(pin);
 a7e:	fc 01       	movw	r30, r24
 a80:	e0 52       	subi	r30, 0x20	; 32
 a82:	ff 4f       	sbci	r31, 0xFF	; 255
 a84:	84 91       	lpm	r24, Z
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
 a86:	88 23       	and	r24, r24
 a88:	61 f1       	breq	.+88     	; 0xae2 <pinMode+0x72>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
 a8a:	90 e0       	ldi	r25, 0x00	; 0
 a8c:	88 0f       	add	r24, r24
 a8e:	99 1f       	adc	r25, r25
 a90:	fc 01       	movw	r30, r24
 a92:	ec 5e       	subi	r30, 0xEC	; 236
 a94:	fe 4f       	sbci	r31, 0xFE	; 254
 a96:	c5 91       	lpm	r28, Z+
 a98:	d4 91       	lpm	r29, Z
	out = portOutputRegister(port);
 a9a:	fc 01       	movw	r30, r24
 a9c:	e6 5f       	subi	r30, 0xF6	; 246
 a9e:	fe 4f       	sbci	r31, 0xFE	; 254
 aa0:	a5 91       	lpm	r26, Z+
 aa2:	b4 91       	lpm	r27, Z

	if (mode == INPUT) { 
 aa4:	61 11       	cpse	r22, r1
 aa6:	09 c0       	rjmp	.+18     	; 0xaba <pinMode+0x4a>
		uint8_t oldSREG = SREG;
 aa8:	9f b7       	in	r25, 0x3f	; 63
                cli();
 aaa:	f8 94       	cli
		*reg &= ~bit;
 aac:	88 81       	ld	r24, Y
 aae:	20 95       	com	r18
 ab0:	82 23       	and	r24, r18
 ab2:	88 83       	st	Y, r24
		*out &= ~bit;
 ab4:	ec 91       	ld	r30, X
 ab6:	2e 23       	and	r18, r30
 ab8:	0b c0       	rjmp	.+22     	; 0xad0 <pinMode+0x60>
		SREG = oldSREG;
	} else if (mode == INPUT_PULLUP) {
 aba:	62 30       	cpi	r22, 0x02	; 2
 abc:	61 f4       	brne	.+24     	; 0xad6 <pinMode+0x66>
		uint8_t oldSREG = SREG;
 abe:	9f b7       	in	r25, 0x3f	; 63
                cli();
 ac0:	f8 94       	cli
		*reg &= ~bit;
 ac2:	88 81       	ld	r24, Y
 ac4:	32 2f       	mov	r19, r18
 ac6:	30 95       	com	r19
 ac8:	83 23       	and	r24, r19
 aca:	88 83       	st	Y, r24
		*out |= bit;
 acc:	ec 91       	ld	r30, X
 ace:	2e 2b       	or	r18, r30
 ad0:	2c 93       	st	X, r18
		SREG = oldSREG;
 ad2:	9f bf       	out	0x3f, r25	; 63
 ad4:	06 c0       	rjmp	.+12     	; 0xae2 <pinMode+0x72>
	} else {
		uint8_t oldSREG = SREG;
 ad6:	8f b7       	in	r24, 0x3f	; 63
                cli();
 ad8:	f8 94       	cli
		*reg |= bit;
 ada:	e8 81       	ld	r30, Y
 adc:	2e 2b       	or	r18, r30
 ade:	28 83       	st	Y, r18
		SREG = oldSREG;
 ae0:	8f bf       	out	0x3f, r24	; 63
	}
}
 ae2:	df 91       	pop	r29
 ae4:	cf 91       	pop	r28
 ae6:	08 95       	ret

00000ae8 <digitalWrite>:
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
 ae8:	1f 93       	push	r17
 aea:	cf 93       	push	r28
 aec:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
 aee:	28 2f       	mov	r18, r24
 af0:	30 e0       	ldi	r19, 0x00	; 0
 af2:	f9 01       	movw	r30, r18
 af4:	e0 56       	subi	r30, 0x60	; 96
 af6:	ff 4f       	sbci	r31, 0xFF	; 255
 af8:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
 afa:	f9 01       	movw	r30, r18
 afc:	e0 54       	subi	r30, 0x40	; 64
 afe:	ff 4f       	sbci	r31, 0xFF	; 255
 b00:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
 b02:	f9 01       	movw	r30, r18
 b04:	e0 52       	subi	r30, 0x20	; 32
 b06:	ff 4f       	sbci	r31, 0xFF	; 255
 b08:	c4 91       	lpm	r28, Z
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
 b0a:	cc 23       	and	r28, r28
 b0c:	b9 f0       	breq	.+46     	; 0xb3c <digitalWrite+0x54>
 b0e:	16 2f       	mov	r17, r22

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
 b10:	81 11       	cpse	r24, r1
 b12:	80 df       	rcall	.-256    	; 0xa14 <turnOffPWM>

	out = portOutputRegister(port);
 b14:	ec 2f       	mov	r30, r28
 b16:	f0 e0       	ldi	r31, 0x00	; 0
 b18:	ee 0f       	add	r30, r30
 b1a:	ff 1f       	adc	r31, r31
 b1c:	e6 5f       	subi	r30, 0xF6	; 246
 b1e:	fe 4f       	sbci	r31, 0xFE	; 254
 b20:	a5 91       	lpm	r26, Z+
 b22:	b4 91       	lpm	r27, Z

	uint8_t oldSREG = SREG;
 b24:	9f b7       	in	r25, 0x3f	; 63
	cli();
 b26:	f8 94       	cli

	if (val == LOW) {
 b28:	11 11       	cpse	r17, r1
 b2a:	04 c0       	rjmp	.+8      	; 0xb34 <digitalWrite+0x4c>
		*out &= ~bit;
 b2c:	8c 91       	ld	r24, X
 b2e:	d0 95       	com	r29
 b30:	d8 23       	and	r29, r24
 b32:	02 c0       	rjmp	.+4      	; 0xb38 <digitalWrite+0x50>
	} else {
		*out |= bit;
 b34:	ec 91       	ld	r30, X
 b36:	de 2b       	or	r29, r30
 b38:	dc 93       	st	X, r29
	}

	SREG = oldSREG;
 b3a:	9f bf       	out	0x3f, r25	; 63
}
 b3c:	df 91       	pop	r29
 b3e:	cf 91       	pop	r28
 b40:	1f 91       	pop	r17
 b42:	08 95       	ret

00000b44 <digitalRead>:

int digitalRead(uint8_t pin)
{
 b44:	cf 93       	push	r28
 b46:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
 b48:	28 2f       	mov	r18, r24
 b4a:	30 e0       	ldi	r19, 0x00	; 0
 b4c:	f9 01       	movw	r30, r18
 b4e:	e0 56       	subi	r30, 0x60	; 96
 b50:	ff 4f       	sbci	r31, 0xFF	; 255
 b52:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
 b54:	f9 01       	movw	r30, r18
 b56:	e0 54       	subi	r30, 0x40	; 64
 b58:	ff 4f       	sbci	r31, 0xFF	; 255
 b5a:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
 b5c:	f9 01       	movw	r30, r18
 b5e:	e0 52       	subi	r30, 0x20	; 32
 b60:	ff 4f       	sbci	r31, 0xFF	; 255
 b62:	c4 91       	lpm	r28, Z

	if (port == NOT_A_PIN) return LOW;
 b64:	cc 23       	and	r28, r28
 b66:	89 f0       	breq	.+34     	; 0xb8a <digitalRead+0x46>

	// If the pin that support PWM output, we need to turn it off
	// before getting a digital reading.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
 b68:	81 11       	cpse	r24, r1
 b6a:	54 df       	rcall	.-344    	; 0xa14 <turnOffPWM>

	if (*portInputRegister(port) & bit) return HIGH;
 b6c:	ec 2f       	mov	r30, r28
 b6e:	f0 e0       	ldi	r31, 0x00	; 0
 b70:	ee 0f       	add	r30, r30
 b72:	ff 1f       	adc	r31, r31
 b74:	e0 50       	subi	r30, 0x00	; 0
 b76:	ff 4f       	sbci	r31, 0xFF	; 255
 b78:	a5 91       	lpm	r26, Z+
 b7a:	b4 91       	lpm	r27, Z
 b7c:	ec 91       	ld	r30, X
{
	uint8_t timer = digitalPinToTimer(pin);
	uint8_t bit = digitalPinToBitMask(pin);
	uint8_t port = digitalPinToPort(pin);

	if (port == NOT_A_PIN) return LOW;
 b7e:	ed 23       	and	r30, r29
 b80:	81 e0       	ldi	r24, 0x01	; 1
 b82:	90 e0       	ldi	r25, 0x00	; 0
 b84:	21 f4       	brne	.+8      	; 0xb8e <digitalRead+0x4a>
 b86:	80 e0       	ldi	r24, 0x00	; 0
 b88:	02 c0       	rjmp	.+4      	; 0xb8e <digitalRead+0x4a>
 b8a:	80 e0       	ldi	r24, 0x00	; 0
 b8c:	90 e0       	ldi	r25, 0x00	; 0
	// before getting a digital reading.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);

	if (*portInputRegister(port) & bit) return HIGH;
	return LOW;
}
 b8e:	df 91       	pop	r29
 b90:	cf 91       	pop	r28
 b92:	08 95       	ret

00000b94 <shiftIn>:
  Boston, MA  02111-1307  USA
*/

#include "wiring_private.h"

uint8_t shiftIn(uint8_t dataPin, uint8_t clockPin, uint8_t bitOrder) {
 b94:	cf 92       	push	r12
 b96:	df 92       	push	r13
 b98:	ef 92       	push	r14
 b9a:	ff 92       	push	r15
 b9c:	0f 93       	push	r16
 b9e:	1f 93       	push	r17
 ba0:	cf 93       	push	r28
 ba2:	df 93       	push	r29
 ba4:	f8 2e       	mov	r15, r24
 ba6:	d6 2f       	mov	r29, r22
 ba8:	e4 2e       	mov	r14, r20
 baa:	07 e0       	ldi	r16, 0x07	; 7
 bac:	10 e0       	ldi	r17, 0x00	; 0
	uint8_t value = 0;
 bae:	c0 e0       	ldi	r28, 0x00	; 0
	uint8_t i;

	for (i = 0; i < 8; ++i) {
		digitalWrite(clockPin, HIGH);
		if (bitOrder == LSBFIRST)
			value |= digitalRead(dataPin) << i;
 bb0:	87 e0       	ldi	r24, 0x07	; 7
 bb2:	c8 2e       	mov	r12, r24
 bb4:	d1 2c       	mov	r13, r1
uint8_t shiftIn(uint8_t dataPin, uint8_t clockPin, uint8_t bitOrder) {
	uint8_t value = 0;
	uint8_t i;

	for (i = 0; i < 8; ++i) {
		digitalWrite(clockPin, HIGH);
 bb6:	61 e0       	ldi	r22, 0x01	; 1
 bb8:	8d 2f       	mov	r24, r29
 bba:	96 df       	rcall	.-212    	; 0xae8 <digitalWrite>
		if (bitOrder == LSBFIRST)
			value |= digitalRead(dataPin) << i;
 bbc:	8f 2d       	mov	r24, r15
	uint8_t value = 0;
	uint8_t i;

	for (i = 0; i < 8; ++i) {
		digitalWrite(clockPin, HIGH);
		if (bitOrder == LSBFIRST)
 bbe:	e1 10       	cpse	r14, r1
			value |= digitalRead(dataPin) << i;
 bc0:	09 c0       	rjmp	.+18     	; 0xbd4 <shiftIn+0x40>
 bc2:	c0 df       	rcall	.-128    	; 0xb44 <digitalRead>
 bc4:	96 01       	movw	r18, r12
 bc6:	20 1b       	sub	r18, r16
 bc8:	31 0b       	sbc	r19, r17
 bca:	01 c0       	rjmp	.+2      	; 0xbce <shiftIn+0x3a>
 bcc:	88 0f       	add	r24, r24
 bce:	2a 95       	dec	r18
 bd0:	ea f7       	brpl	.-6      	; 0xbcc <shiftIn+0x38>
		else
			value |= digitalRead(dataPin) << (7 - i);
 bd2:	06 c0       	rjmp	.+12     	; 0xbe0 <shiftIn+0x4c>
 bd4:	b7 df       	rcall	.-146    	; 0xb44 <digitalRead>
 bd6:	00 2e       	mov	r0, r16
 bd8:	01 c0       	rjmp	.+2      	; 0xbdc <shiftIn+0x48>
 bda:	88 0f       	add	r24, r24
 bdc:	0a 94       	dec	r0
 bde:	ea f7       	brpl	.-6      	; 0xbda <shiftIn+0x46>
		digitalWrite(clockPin, LOW);
 be0:	c8 2b       	or	r28, r24
 be2:	60 e0       	ldi	r22, 0x00	; 0
 be4:	8d 2f       	mov	r24, r29
 be6:	80 df       	rcall	.-256    	; 0xae8 <digitalWrite>
 be8:	01 50       	subi	r16, 0x01	; 1
 bea:	11 09       	sbc	r17, r1
 bec:	20 f7       	brcc	.-56     	; 0xbb6 <shiftIn+0x22>
	}
	return value;
}
 bee:	8c 2f       	mov	r24, r28
 bf0:	df 91       	pop	r29
 bf2:	cf 91       	pop	r28
 bf4:	1f 91       	pop	r17
 bf6:	0f 91       	pop	r16
 bf8:	ff 90       	pop	r15
 bfa:	ef 90       	pop	r14
 bfc:	df 90       	pop	r13
 bfe:	cf 90       	pop	r12
 c00:	08 95       	ret

00000c02 <yield>:
 * libraries or sketches that supports cooperative threads.
 *
 * Its defined as a weak symbol and it can be redefined to implement a
 * real cooperative scheduler.
 */
static void __empty() {
 c02:	08 95       	ret

00000c04 <__divmodhi4>:
 c04:	97 fb       	bst	r25, 7
 c06:	07 2e       	mov	r0, r23
 c08:	16 f4       	brtc	.+4      	; 0xc0e <__divmodhi4+0xa>
 c0a:	00 94       	com	r0
 c0c:	06 d0       	rcall	.+12     	; 0xc1a <__divmodhi4_neg1>
 c0e:	77 fd       	sbrc	r23, 7
 c10:	08 d0       	rcall	.+16     	; 0xc22 <__divmodhi4_neg2>
 c12:	14 d0       	rcall	.+40     	; 0xc3c <__udivmodhi4>
 c14:	07 fc       	sbrc	r0, 7
 c16:	05 d0       	rcall	.+10     	; 0xc22 <__divmodhi4_neg2>
 c18:	3e f4       	brtc	.+14     	; 0xc28 <__divmodhi4_exit>

00000c1a <__divmodhi4_neg1>:
 c1a:	90 95       	com	r25
 c1c:	81 95       	neg	r24
 c1e:	9f 4f       	sbci	r25, 0xFF	; 255
 c20:	08 95       	ret

00000c22 <__divmodhi4_neg2>:
 c22:	70 95       	com	r23
 c24:	61 95       	neg	r22
 c26:	7f 4f       	sbci	r23, 0xFF	; 255

00000c28 <__divmodhi4_exit>:
 c28:	08 95       	ret

00000c2a <__tablejump2__>:
 c2a:	ee 0f       	add	r30, r30
 c2c:	ff 1f       	adc	r31, r31
 c2e:	00 24       	eor	r0, r0
 c30:	00 1c       	adc	r0, r0
 c32:	0b be       	out	0x3b, r0	; 59
 c34:	07 90       	elpm	r0, Z+
 c36:	f6 91       	elpm	r31, Z
 c38:	e0 2d       	mov	r30, r0
 c3a:	09 94       	ijmp

00000c3c <__udivmodhi4>:
 c3c:	aa 1b       	sub	r26, r26
 c3e:	bb 1b       	sub	r27, r27
 c40:	51 e1       	ldi	r21, 0x11	; 17
 c42:	07 c0       	rjmp	.+14     	; 0xc52 <__udivmodhi4_ep>

00000c44 <__udivmodhi4_loop>:
 c44:	aa 1f       	adc	r26, r26
 c46:	bb 1f       	adc	r27, r27
 c48:	a6 17       	cp	r26, r22
 c4a:	b7 07       	cpc	r27, r23
 c4c:	10 f0       	brcs	.+4      	; 0xc52 <__udivmodhi4_ep>
 c4e:	a6 1b       	sub	r26, r22
 c50:	b7 0b       	sbc	r27, r23

00000c52 <__udivmodhi4_ep>:
 c52:	88 1f       	adc	r24, r24
 c54:	99 1f       	adc	r25, r25
 c56:	5a 95       	dec	r21
 c58:	a9 f7       	brne	.-22     	; 0xc44 <__udivmodhi4_loop>
 c5a:	80 95       	com	r24
 c5c:	90 95       	com	r25
 c5e:	bc 01       	movw	r22, r24
 c60:	cd 01       	movw	r24, r26
 c62:	08 95       	ret

00000c64 <malloc>:
 c64:	0f 93       	push	r16
 c66:	1f 93       	push	r17
 c68:	cf 93       	push	r28
 c6a:	df 93       	push	r29
 c6c:	82 30       	cpi	r24, 0x02	; 2
 c6e:	91 05       	cpc	r25, r1
 c70:	10 f4       	brcc	.+4      	; 0xc76 <malloc+0x12>
 c72:	82 e0       	ldi	r24, 0x02	; 2
 c74:	90 e0       	ldi	r25, 0x00	; 0
 c76:	e0 91 40 01 	lds	r30, 0x0140	; 0x800140 <__flp>
 c7a:	f0 91 41 01 	lds	r31, 0x0141	; 0x800141 <__flp+0x1>
 c7e:	20 e0       	ldi	r18, 0x00	; 0
 c80:	30 e0       	ldi	r19, 0x00	; 0
 c82:	a0 e0       	ldi	r26, 0x00	; 0
 c84:	b0 e0       	ldi	r27, 0x00	; 0
 c86:	30 97       	sbiw	r30, 0x00	; 0
 c88:	19 f1       	breq	.+70     	; 0xcd0 <malloc+0x6c>
 c8a:	40 81       	ld	r20, Z
 c8c:	51 81       	ldd	r21, Z+1	; 0x01
 c8e:	02 81       	ldd	r16, Z+2	; 0x02
 c90:	13 81       	ldd	r17, Z+3	; 0x03
 c92:	48 17       	cp	r20, r24
 c94:	59 07       	cpc	r21, r25
 c96:	c8 f0       	brcs	.+50     	; 0xcca <malloc+0x66>
 c98:	84 17       	cp	r24, r20
 c9a:	95 07       	cpc	r25, r21
 c9c:	69 f4       	brne	.+26     	; 0xcb8 <malloc+0x54>
 c9e:	10 97       	sbiw	r26, 0x00	; 0
 ca0:	31 f0       	breq	.+12     	; 0xcae <malloc+0x4a>
 ca2:	12 96       	adiw	r26, 0x02	; 2
 ca4:	0c 93       	st	X, r16
 ca6:	12 97       	sbiw	r26, 0x02	; 2
 ca8:	13 96       	adiw	r26, 0x03	; 3
 caa:	1c 93       	st	X, r17
 cac:	27 c0       	rjmp	.+78     	; 0xcfc <malloc+0x98>
 cae:	00 93 40 01 	sts	0x0140, r16	; 0x800140 <__flp>
 cb2:	10 93 41 01 	sts	0x0141, r17	; 0x800141 <__flp+0x1>
 cb6:	22 c0       	rjmp	.+68     	; 0xcfc <malloc+0x98>
 cb8:	21 15       	cp	r18, r1
 cba:	31 05       	cpc	r19, r1
 cbc:	19 f0       	breq	.+6      	; 0xcc4 <malloc+0x60>
 cbe:	42 17       	cp	r20, r18
 cc0:	53 07       	cpc	r21, r19
 cc2:	18 f4       	brcc	.+6      	; 0xcca <malloc+0x66>
 cc4:	9a 01       	movw	r18, r20
 cc6:	bd 01       	movw	r22, r26
 cc8:	ef 01       	movw	r28, r30
 cca:	df 01       	movw	r26, r30
 ccc:	f8 01       	movw	r30, r16
 cce:	db cf       	rjmp	.-74     	; 0xc86 <malloc+0x22>
 cd0:	21 15       	cp	r18, r1
 cd2:	31 05       	cpc	r19, r1
 cd4:	f9 f0       	breq	.+62     	; 0xd14 <malloc+0xb0>
 cd6:	28 1b       	sub	r18, r24
 cd8:	39 0b       	sbc	r19, r25
 cda:	24 30       	cpi	r18, 0x04	; 4
 cdc:	31 05       	cpc	r19, r1
 cde:	80 f4       	brcc	.+32     	; 0xd00 <malloc+0x9c>
 ce0:	8a 81       	ldd	r24, Y+2	; 0x02
 ce2:	9b 81       	ldd	r25, Y+3	; 0x03
 ce4:	61 15       	cp	r22, r1
 ce6:	71 05       	cpc	r23, r1
 ce8:	21 f0       	breq	.+8      	; 0xcf2 <malloc+0x8e>
 cea:	fb 01       	movw	r30, r22
 cec:	93 83       	std	Z+3, r25	; 0x03
 cee:	82 83       	std	Z+2, r24	; 0x02
 cf0:	04 c0       	rjmp	.+8      	; 0xcfa <malloc+0x96>
 cf2:	90 93 41 01 	sts	0x0141, r25	; 0x800141 <__flp+0x1>
 cf6:	80 93 40 01 	sts	0x0140, r24	; 0x800140 <__flp>
 cfa:	fe 01       	movw	r30, r28
 cfc:	32 96       	adiw	r30, 0x02	; 2
 cfe:	44 c0       	rjmp	.+136    	; 0xd88 <malloc+0x124>
 d00:	fe 01       	movw	r30, r28
 d02:	e2 0f       	add	r30, r18
 d04:	f3 1f       	adc	r31, r19
 d06:	81 93       	st	Z+, r24
 d08:	91 93       	st	Z+, r25
 d0a:	22 50       	subi	r18, 0x02	; 2
 d0c:	31 09       	sbc	r19, r1
 d0e:	39 83       	std	Y+1, r19	; 0x01
 d10:	28 83       	st	Y, r18
 d12:	3a c0       	rjmp	.+116    	; 0xd88 <malloc+0x124>
 d14:	20 91 3e 01 	lds	r18, 0x013E	; 0x80013e <__brkval>
 d18:	30 91 3f 01 	lds	r19, 0x013F	; 0x80013f <__brkval+0x1>
 d1c:	23 2b       	or	r18, r19
 d1e:	41 f4       	brne	.+16     	; 0xd30 <malloc+0xcc>
 d20:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
 d24:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
 d28:	30 93 3f 01 	sts	0x013F, r19	; 0x80013f <__brkval+0x1>
 d2c:	20 93 3e 01 	sts	0x013E, r18	; 0x80013e <__brkval>
 d30:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
 d34:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
 d38:	21 15       	cp	r18, r1
 d3a:	31 05       	cpc	r19, r1
 d3c:	41 f4       	brne	.+16     	; 0xd4e <malloc+0xea>
 d3e:	2d b7       	in	r18, 0x3d	; 61
 d40:	3e b7       	in	r19, 0x3e	; 62
 d42:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
 d46:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
 d4a:	24 1b       	sub	r18, r20
 d4c:	35 0b       	sbc	r19, r21
 d4e:	e0 91 3e 01 	lds	r30, 0x013E	; 0x80013e <__brkval>
 d52:	f0 91 3f 01 	lds	r31, 0x013F	; 0x80013f <__brkval+0x1>
 d56:	e2 17       	cp	r30, r18
 d58:	f3 07       	cpc	r31, r19
 d5a:	a0 f4       	brcc	.+40     	; 0xd84 <malloc+0x120>
 d5c:	2e 1b       	sub	r18, r30
 d5e:	3f 0b       	sbc	r19, r31
 d60:	28 17       	cp	r18, r24
 d62:	39 07       	cpc	r19, r25
 d64:	78 f0       	brcs	.+30     	; 0xd84 <malloc+0x120>
 d66:	ac 01       	movw	r20, r24
 d68:	4e 5f       	subi	r20, 0xFE	; 254
 d6a:	5f 4f       	sbci	r21, 0xFF	; 255
 d6c:	24 17       	cp	r18, r20
 d6e:	35 07       	cpc	r19, r21
 d70:	48 f0       	brcs	.+18     	; 0xd84 <malloc+0x120>
 d72:	4e 0f       	add	r20, r30
 d74:	5f 1f       	adc	r21, r31
 d76:	50 93 3f 01 	sts	0x013F, r21	; 0x80013f <__brkval+0x1>
 d7a:	40 93 3e 01 	sts	0x013E, r20	; 0x80013e <__brkval>
 d7e:	81 93       	st	Z+, r24
 d80:	91 93       	st	Z+, r25
 d82:	02 c0       	rjmp	.+4      	; 0xd88 <malloc+0x124>
 d84:	e0 e0       	ldi	r30, 0x00	; 0
 d86:	f0 e0       	ldi	r31, 0x00	; 0
 d88:	cf 01       	movw	r24, r30
 d8a:	df 91       	pop	r29
 d8c:	cf 91       	pop	r28
 d8e:	1f 91       	pop	r17
 d90:	0f 91       	pop	r16
 d92:	08 95       	ret

00000d94 <free>:
 d94:	cf 93       	push	r28
 d96:	df 93       	push	r29
 d98:	00 97       	sbiw	r24, 0x00	; 0
 d9a:	09 f4       	brne	.+2      	; 0xd9e <free+0xa>
 d9c:	81 c0       	rjmp	.+258    	; 0xea0 <free+0x10c>
 d9e:	fc 01       	movw	r30, r24
 da0:	32 97       	sbiw	r30, 0x02	; 2
 da2:	13 82       	std	Z+3, r1	; 0x03
 da4:	12 82       	std	Z+2, r1	; 0x02
 da6:	a0 91 40 01 	lds	r26, 0x0140	; 0x800140 <__flp>
 daa:	b0 91 41 01 	lds	r27, 0x0141	; 0x800141 <__flp+0x1>
 dae:	10 97       	sbiw	r26, 0x00	; 0
 db0:	81 f4       	brne	.+32     	; 0xdd2 <free+0x3e>
 db2:	20 81       	ld	r18, Z
 db4:	31 81       	ldd	r19, Z+1	; 0x01
 db6:	82 0f       	add	r24, r18
 db8:	93 1f       	adc	r25, r19
 dba:	20 91 3e 01 	lds	r18, 0x013E	; 0x80013e <__brkval>
 dbe:	30 91 3f 01 	lds	r19, 0x013F	; 0x80013f <__brkval+0x1>
 dc2:	28 17       	cp	r18, r24
 dc4:	39 07       	cpc	r19, r25
 dc6:	51 f5       	brne	.+84     	; 0xe1c <free+0x88>
 dc8:	f0 93 3f 01 	sts	0x013F, r31	; 0x80013f <__brkval+0x1>
 dcc:	e0 93 3e 01 	sts	0x013E, r30	; 0x80013e <__brkval>
 dd0:	67 c0       	rjmp	.+206    	; 0xea0 <free+0x10c>
 dd2:	ed 01       	movw	r28, r26
 dd4:	20 e0       	ldi	r18, 0x00	; 0
 dd6:	30 e0       	ldi	r19, 0x00	; 0
 dd8:	ce 17       	cp	r28, r30
 dda:	df 07       	cpc	r29, r31
 ddc:	40 f4       	brcc	.+16     	; 0xdee <free+0x5a>
 dde:	4a 81       	ldd	r20, Y+2	; 0x02
 de0:	5b 81       	ldd	r21, Y+3	; 0x03
 de2:	9e 01       	movw	r18, r28
 de4:	41 15       	cp	r20, r1
 de6:	51 05       	cpc	r21, r1
 de8:	f1 f0       	breq	.+60     	; 0xe26 <free+0x92>
 dea:	ea 01       	movw	r28, r20
 dec:	f5 cf       	rjmp	.-22     	; 0xdd8 <free+0x44>
 dee:	d3 83       	std	Z+3, r29	; 0x03
 df0:	c2 83       	std	Z+2, r28	; 0x02
 df2:	40 81       	ld	r20, Z
 df4:	51 81       	ldd	r21, Z+1	; 0x01
 df6:	84 0f       	add	r24, r20
 df8:	95 1f       	adc	r25, r21
 dfa:	c8 17       	cp	r28, r24
 dfc:	d9 07       	cpc	r29, r25
 dfe:	59 f4       	brne	.+22     	; 0xe16 <free+0x82>
 e00:	88 81       	ld	r24, Y
 e02:	99 81       	ldd	r25, Y+1	; 0x01
 e04:	84 0f       	add	r24, r20
 e06:	95 1f       	adc	r25, r21
 e08:	02 96       	adiw	r24, 0x02	; 2
 e0a:	91 83       	std	Z+1, r25	; 0x01
 e0c:	80 83       	st	Z, r24
 e0e:	8a 81       	ldd	r24, Y+2	; 0x02
 e10:	9b 81       	ldd	r25, Y+3	; 0x03
 e12:	93 83       	std	Z+3, r25	; 0x03
 e14:	82 83       	std	Z+2, r24	; 0x02
 e16:	21 15       	cp	r18, r1
 e18:	31 05       	cpc	r19, r1
 e1a:	29 f4       	brne	.+10     	; 0xe26 <free+0x92>
 e1c:	f0 93 41 01 	sts	0x0141, r31	; 0x800141 <__flp+0x1>
 e20:	e0 93 40 01 	sts	0x0140, r30	; 0x800140 <__flp>
 e24:	3d c0       	rjmp	.+122    	; 0xea0 <free+0x10c>
 e26:	e9 01       	movw	r28, r18
 e28:	fb 83       	std	Y+3, r31	; 0x03
 e2a:	ea 83       	std	Y+2, r30	; 0x02
 e2c:	49 91       	ld	r20, Y+
 e2e:	59 91       	ld	r21, Y+
 e30:	c4 0f       	add	r28, r20
 e32:	d5 1f       	adc	r29, r21
 e34:	ec 17       	cp	r30, r28
 e36:	fd 07       	cpc	r31, r29
 e38:	61 f4       	brne	.+24     	; 0xe52 <free+0xbe>
 e3a:	80 81       	ld	r24, Z
 e3c:	91 81       	ldd	r25, Z+1	; 0x01
 e3e:	84 0f       	add	r24, r20
 e40:	95 1f       	adc	r25, r21
 e42:	02 96       	adiw	r24, 0x02	; 2
 e44:	e9 01       	movw	r28, r18
 e46:	99 83       	std	Y+1, r25	; 0x01
 e48:	88 83       	st	Y, r24
 e4a:	82 81       	ldd	r24, Z+2	; 0x02
 e4c:	93 81       	ldd	r25, Z+3	; 0x03
 e4e:	9b 83       	std	Y+3, r25	; 0x03
 e50:	8a 83       	std	Y+2, r24	; 0x02
 e52:	e0 e0       	ldi	r30, 0x00	; 0
 e54:	f0 e0       	ldi	r31, 0x00	; 0
 e56:	12 96       	adiw	r26, 0x02	; 2
 e58:	8d 91       	ld	r24, X+
 e5a:	9c 91       	ld	r25, X
 e5c:	13 97       	sbiw	r26, 0x03	; 3
 e5e:	00 97       	sbiw	r24, 0x00	; 0
 e60:	19 f0       	breq	.+6      	; 0xe68 <free+0xd4>
 e62:	fd 01       	movw	r30, r26
 e64:	dc 01       	movw	r26, r24
 e66:	f7 cf       	rjmp	.-18     	; 0xe56 <free+0xc2>
 e68:	8d 91       	ld	r24, X+
 e6a:	9c 91       	ld	r25, X
 e6c:	11 97       	sbiw	r26, 0x01	; 1
 e6e:	9d 01       	movw	r18, r26
 e70:	2e 5f       	subi	r18, 0xFE	; 254
 e72:	3f 4f       	sbci	r19, 0xFF	; 255
 e74:	82 0f       	add	r24, r18
 e76:	93 1f       	adc	r25, r19
 e78:	20 91 3e 01 	lds	r18, 0x013E	; 0x80013e <__brkval>
 e7c:	30 91 3f 01 	lds	r19, 0x013F	; 0x80013f <__brkval+0x1>
 e80:	28 17       	cp	r18, r24
 e82:	39 07       	cpc	r19, r25
 e84:	69 f4       	brne	.+26     	; 0xea0 <free+0x10c>
 e86:	30 97       	sbiw	r30, 0x00	; 0
 e88:	29 f4       	brne	.+10     	; 0xe94 <free+0x100>
 e8a:	10 92 41 01 	sts	0x0141, r1	; 0x800141 <__flp+0x1>
 e8e:	10 92 40 01 	sts	0x0140, r1	; 0x800140 <__flp>
 e92:	02 c0       	rjmp	.+4      	; 0xe98 <free+0x104>
 e94:	13 82       	std	Z+3, r1	; 0x03
 e96:	12 82       	std	Z+2, r1	; 0x02
 e98:	b0 93 3f 01 	sts	0x013F, r27	; 0x80013f <__brkval+0x1>
 e9c:	a0 93 3e 01 	sts	0x013E, r26	; 0x80013e <__brkval>
 ea0:	df 91       	pop	r29
 ea2:	cf 91       	pop	r28
 ea4:	08 95       	ret

00000ea6 <__do_global_dtors>:
 ea6:	10 e0       	ldi	r17, 0x00	; 0
 ea8:	c0 e9       	ldi	r28, 0x90	; 144
 eaa:	d0 e0       	ldi	r29, 0x00	; 0
 eac:	03 c0       	rjmp	.+6      	; 0xeb4 <__do_global_dtors+0xe>
 eae:	fe 01       	movw	r30, r28
 eb0:	bc de       	rcall	.-648    	; 0xc2a <__tablejump2__>
 eb2:	21 96       	adiw	r28, 0x01	; 1
 eb4:	c1 39       	cpi	r28, 0x91	; 145
 eb6:	d1 07       	cpc	r29, r17
 eb8:	d1 f7       	brne	.-12     	; 0xeae <__do_global_dtors+0x8>
 eba:	f8 94       	cli

00000ebc <__stop_program>:
 ebc:	ff cf       	rjmp	.-2      	; 0xebc <__stop_program>


Blank.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000013c  00800100  00003836  000038ca  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00003836  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000001cc  0080023c  0080023c  00003a06  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00003a06  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00003a64  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000978  00000000  00000000  00003aa4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00016541  00000000  00000000  0000441c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00003e88  00000000  00000000  0001a95d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000511c  00000000  00000000  0001e7e5  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00001d28  00000000  00000000  00023904  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00004c0c  00000000  00000000  0002562c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00008eef  00000000  00000000  0002a238  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000910  00000000  00000000  00033127  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	ff c0       	rjmp	.+510    	; 0x200 <__dtors_end>
       2:	00 00       	nop
       4:	27 c1       	rjmp	.+590    	; 0x254 <__bad_interrupt>
       6:	00 00       	nop
       8:	25 c1       	rjmp	.+586    	; 0x254 <__bad_interrupt>
       a:	00 00       	nop
       c:	23 c1       	rjmp	.+582    	; 0x254 <__bad_interrupt>
       e:	00 00       	nop
      10:	21 c1       	rjmp	.+578    	; 0x254 <__bad_interrupt>
      12:	00 00       	nop
      14:	1f c1       	rjmp	.+574    	; 0x254 <__bad_interrupt>
      16:	00 00       	nop
      18:	1d c1       	rjmp	.+570    	; 0x254 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	1b c1       	rjmp	.+566    	; 0x254 <__bad_interrupt>
      1e:	00 00       	nop
      20:	19 c1       	rjmp	.+562    	; 0x254 <__bad_interrupt>
      22:	00 00       	nop
      24:	17 c1       	rjmp	.+558    	; 0x254 <__bad_interrupt>
      26:	00 00       	nop
      28:	15 c1       	rjmp	.+554    	; 0x254 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	13 c1       	rjmp	.+550    	; 0x254 <__bad_interrupt>
      2e:	00 00       	nop
      30:	11 c1       	rjmp	.+546    	; 0x254 <__bad_interrupt>
      32:	00 00       	nop
      34:	0f c1       	rjmp	.+542    	; 0x254 <__bad_interrupt>
      36:	00 00       	nop
      38:	0d c1       	rjmp	.+538    	; 0x254 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	0b c1       	rjmp	.+534    	; 0x254 <__bad_interrupt>
      3e:	00 00       	nop
      40:	09 c1       	rjmp	.+530    	; 0x254 <__bad_interrupt>
      42:	00 00       	nop
      44:	07 c1       	rjmp	.+526    	; 0x254 <__bad_interrupt>
      46:	00 00       	nop
      48:	0c 94 a1 14 	jmp	0x2942	; 0x2942 <__vector_18>
      4c:	03 c1       	rjmp	.+518    	; 0x254 <__bad_interrupt>
      4e:	00 00       	nop
      50:	0c 94 99 13 	jmp	0x2732	; 0x2732 <__vector_20>
      54:	0c 94 cf 13 	jmp	0x279e	; 0x279e <__vector_21>
      58:	fd c0       	rjmp	.+506    	; 0x254 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	fb c0       	rjmp	.+502    	; 0x254 <__bad_interrupt>
      5e:	00 00       	nop
      60:	f9 c0       	rjmp	.+498    	; 0x254 <__bad_interrupt>
      62:	00 00       	nop
      64:	f7 c0       	rjmp	.+494    	; 0x254 <__bad_interrupt>
      66:	00 00       	nop
      68:	0c 94 5b 0d 	jmp	0x1ab6	; 0x1ab6 <__vector_26>
      6c:	f3 c0       	rjmp	.+486    	; 0x254 <__bad_interrupt>
      6e:	00 00       	nop
      70:	f1 c0       	rjmp	.+482    	; 0x254 <__bad_interrupt>
      72:	00 00       	nop
      74:	ef c0       	rjmp	.+478    	; 0x254 <__bad_interrupt>
      76:	00 00       	nop
      78:	ed c0       	rjmp	.+474    	; 0x254 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	eb c0       	rjmp	.+470    	; 0x254 <__bad_interrupt>
      7e:	00 00       	nop
      80:	e9 c0       	rjmp	.+466    	; 0x254 <__bad_interrupt>
      82:	00 00       	nop
      84:	e7 c0       	rjmp	.+462    	; 0x254 <__bad_interrupt>
      86:	00 00       	nop
      88:	e5 c0       	rjmp	.+458    	; 0x254 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	52 02       	muls	r21, r18
      8e:	6b 02       	muls	r22, r27
      90:	84 02       	muls	r24, r20
      92:	9d 02       	muls	r25, r29
      94:	b6 02       	muls	r27, r22
      96:	cf 02       	muls	r28, r31
      98:	e8 02       	muls	r30, r24
      9a:	01 03       	mulsu	r16, r17
      9c:	1a 03       	fmul	r17, r18
      9e:	33 03       	mulsu	r19, r19
      a0:	4c 03       	fmul	r20, r20
      a2:	65 03       	mulsu	r22, r21
      a4:	08 00       	.word	0x0008	; ????
      a6:	00 00       	nop
      a8:	be 92       	st	-X, r11
      aa:	24 49       	sbci	r18, 0x94	; 148
      ac:	12 3e       	cpi	r17, 0xE2	; 226
      ae:	ab aa       	std	Y+51, r10	; 0x33
      b0:	aa 2a       	or	r10, r26
      b2:	be cd       	rjmp	.-1156   	; 0xfffffc30 <__eeprom_end+0xff7efc30>
      b4:	cc cc       	rjmp	.-1640   	; 0xfffffa4e <__eeprom_end+0xff7efa4e>
      b6:	4c 3e       	cpi	r20, 0xEC	; 236
      b8:	00 00       	nop
      ba:	00 80       	ld	r0, Z
      bc:	be ab       	std	Y+54, r27	; 0x36
      be:	aa aa       	std	Y+50, r10	; 0x32
      c0:	aa 3e       	cpi	r26, 0xEA	; 234
      c2:	00 00       	nop
      c4:	00 00       	nop
      c6:	bf 00       	.word	0x00bf	; ????
      c8:	00 00       	nop
      ca:	80 3f       	cpi	r24, 0xF0	; 240
      cc:	00 00       	nop
      ce:	00 00       	nop
      d0:	00 08       	sbc	r0, r0
      d2:	41 78       	andi	r20, 0x81	; 129
      d4:	d3 bb       	out	0x13, r29	; 19
      d6:	43 87       	std	Z+11, r20	; 0x0b
      d8:	d1 13       	cpse	r29, r17
      da:	3d 19       	sub	r19, r13
      dc:	0e 3c       	cpi	r16, 0xCE	; 206
      de:	c3 bd       	out	0x23, r28	; 35
      e0:	42 82       	std	Z+2, r4	; 0x02
      e2:	ad 2b       	or	r26, r29
      e4:	3e 68       	ori	r19, 0x8E	; 142
      e6:	ec 82       	std	Y+4, r14	; 0x04
      e8:	76 be       	out	0x36, r7	; 54
      ea:	d9 8f       	std	Y+25, r29	; 0x19
      ec:	e1 a9       	ldd	r30, Z+49	; 0x31
      ee:	3e 4c       	sbci	r19, 0xCE	; 206
      f0:	80 ef       	ldi	r24, 0xF0	; 240
      f2:	ff be       	out	0x3f, r15	; 63
      f4:	01 c4       	rjmp	.+2050   	; 0x8f8 <_Z10oxygenReadv+0x2c>
      f6:	ff 7f       	andi	r31, 0xFF	; 255
      f8:	3f 00       	.word	0x003f	; ????
      fa:	00 00       	nop
      fc:	00 00       	nop
      fe:	07 63       	ori	r16, 0x37	; 55
     100:	42 36       	cpi	r20, 0x62	; 98
     102:	b7 9b       	sbis	0x16, 7	; 22
     104:	d8 a7       	std	Y+40, r29	; 0x28
     106:	1a 39       	cpi	r17, 0x9A	; 154
     108:	68 56       	subi	r22, 0x68	; 104
     10a:	18 ae       	std	Y+56, r1	; 0x38
     10c:	ba ab       	std	Y+50, r27	; 0x32
     10e:	55 8c       	ldd	r5, Z+29	; 0x1d
     110:	1d 3c       	cpi	r17, 0xCD	; 205
     112:	b7 cc       	rjmp	.-1682   	; 0xfffffa82 <__eeprom_end+0xff7efa82>
     114:	57 63       	ori	r21, 0x37	; 55
     116:	bd 6d       	ori	r27, 0xDD	; 221
     118:	ed fd       	.word	0xfded	; ????
     11a:	75 3e       	cpi	r23, 0xE5	; 229
     11c:	f6 17       	cp	r31, r22
     11e:	72 31       	cpi	r23, 0x12	; 18
     120:	bf 00       	.word	0x00bf	; ????
     122:	00 00       	nop
     124:	80 3f       	cpi	r24, 0xF0	; 240
     126:	ef 15       	cp	r30, r15
     128:	f4 15       	cp	r31, r4
     12a:	f9 15       	cp	r31, r9
     12c:	03 16       	cp	r0, r19
     12e:	31 16       	cp	r3, r17
     130:	31 16       	cp	r3, r17
     132:	0d 16       	cp	r0, r29
     134:	15 16       	cp	r1, r21
     136:	1d 16       	cp	r1, r29
     138:	27 16       	cp	r2, r23
     13a:	4d 16       	cp	r4, r29
     13c:	50 16       	cp	r5, r16
     13e:	43 16       	cp	r4, r19
     140:	47 16       	cp	r4, r23
     142:	67 16       	cp	r6, r23
     144:	67 16       	cp	r6, r23
     146:	54 16       	cp	r5, r20
     148:	58 16       	cp	r5, r24
     14a:	5e 16       	cp	r5, r30
     14c:	62 16       	cp	r6, r18

0000014e <__trampolines_end>:
     14e:	49 6e       	ori	r20, 0xE9	; 233
     150:	74 65       	ori	r23, 0x54	; 84
     152:	72 72       	andi	r23, 0x22	; 34
     154:	75 70       	andi	r23, 0x05	; 5
     156:	74 73       	andi	r23, 0x34	; 52
     158:	20 6e       	ori	r18, 0xE0	; 224
     15a:	6f 74       	andi	r22, 0x4F	; 79
     15c:	20 73       	andi	r18, 0x30	; 48
     15e:	75 70       	andi	r23, 0x05	; 5
     160:	70 6f       	ori	r23, 0xF0	; 240
     162:	72 74       	andi	r23, 0x42	; 66
     164:	65 64       	ori	r22, 0x45	; 69
     166:	20 6f       	ori	r18, 0xF0	; 240
     168:	6e 20       	and	r6, r14
     16a:	74 68       	ori	r23, 0x84	; 132
     16c:	69 73       	andi	r22, 0x39	; 57
     16e:	20 70       	andi	r18, 0x00	; 0
     170:	6c 61       	ori	r22, 0x1C	; 28
     172:	74 66       	ori	r23, 0x64	; 100
     174:	6f 72       	andi	r22, 0x2F	; 47
     176:	6d 0a       	sbc	r6, r29
	...

00000179 <digital_pin_to_timer_PGM>:
     179:	00 00 00 01 02 00 09 0a 00 00 00 00 04 03 08 07     ................
	...

00000199 <digital_pin_to_bit_mask_PGM>:
     199:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 40 80     ..... @...... @.
     1a9:	01 02 04 08 10 20 40 80 80 40 20 10 08 04 02 01     ..... @..@ .....

000001b9 <digital_pin_to_port_PGM>:
     1b9:	02 02 02 02 02 02 02 02 04 04 04 04 04 04 04 04     ................
     1c9:	03 03 03 03 03 03 03 03 01 01 01 01 01 01 01 01     ................

000001d9 <port_to_input_PGM>:
     1d9:	00 00 20 00 23 00 26 00 29 00                       .. .#.&.).

000001e3 <port_to_output_PGM>:
     1e3:	00 00 22 00 25 00 28 00 2b 00                       ..".%.(.+.

000001ed <port_to_mode_PGM>:
     1ed:	00 00 21 00 24 00 27 00 2a 00 00                    ..!.$.'.*..

000001f8 <__ctors_start>:
     1f8:	39 07       	cpc	r19, r25
     1fa:	46 0f       	add	r20, r22
     1fc:	01 14       	cp	r0, r1

000001fe <__ctors_end>:
     1fe:	47 07       	cpc	r20, r23

00000200 <__dtors_end>:
     200:	11 24       	eor	r1, r1
     202:	1f be       	out	0x3f, r1	; 63
     204:	cf ef       	ldi	r28, 0xFF	; 255
     206:	d0 e4       	ldi	r29, 0x40	; 64
     208:	de bf       	out	0x3e, r29	; 62
     20a:	cd bf       	out	0x3d, r28	; 61

0000020c <__do_copy_data>:
     20c:	12 e0       	ldi	r17, 0x02	; 2
     20e:	a0 e0       	ldi	r26, 0x00	; 0
     210:	b1 e0       	ldi	r27, 0x01	; 1
     212:	e6 e3       	ldi	r30, 0x36	; 54
     214:	f8 e3       	ldi	r31, 0x38	; 56
     216:	00 e0       	ldi	r16, 0x00	; 0
     218:	0b bf       	out	0x3b, r16	; 59
     21a:	02 c0       	rjmp	.+4      	; 0x220 <__do_copy_data+0x14>
     21c:	07 90       	elpm	r0, Z+
     21e:	0d 92       	st	X+, r0
     220:	ac 33       	cpi	r26, 0x3C	; 60
     222:	b1 07       	cpc	r27, r17
     224:	d9 f7       	brne	.-10     	; 0x21c <__do_copy_data+0x10>

00000226 <__do_clear_bss>:
     226:	24 e0       	ldi	r18, 0x04	; 4
     228:	ac e3       	ldi	r26, 0x3C	; 60
     22a:	b2 e0       	ldi	r27, 0x02	; 2
     22c:	01 c0       	rjmp	.+2      	; 0x230 <.do_clear_bss_start>

0000022e <.do_clear_bss_loop>:
     22e:	1d 92       	st	X+, r1

00000230 <.do_clear_bss_start>:
     230:	a8 30       	cpi	r26, 0x08	; 8
     232:	b2 07       	cpc	r27, r18
     234:	e1 f7       	brne	.-8      	; 0x22e <.do_clear_bss_loop>

00000236 <__do_global_ctors>:
     236:	10 e0       	ldi	r17, 0x00	; 0
     238:	cf ef       	ldi	r28, 0xFF	; 255
     23a:	d0 e0       	ldi	r29, 0x00	; 0
     23c:	04 c0       	rjmp	.+8      	; 0x246 <__do_global_ctors+0x10>
     23e:	21 97       	sbiw	r28, 0x01	; 1
     240:	fe 01       	movw	r30, r28
     242:	0e 94 f1 17 	call	0x2fe2	; 0x2fe2 <__tablejump2__>
     246:	cc 3f       	cpi	r28, 0xFC	; 252
     248:	d1 07       	cpc	r29, r17
     24a:	c9 f7       	brne	.-14     	; 0x23e <__do_global_ctors+0x8>
     24c:	0e 94 2f 14 	call	0x285e	; 0x285e <main>
     250:	0c 94 0f 1c 	jmp	0x381e	; 0x381e <__do_global_dtors>

00000254 <__bad_interrupt>:
     254:	d5 ce       	rjmp	.-598    	; 0x0 <__vectors>

00000256 <_Z35PulseSensorPlaygroundSetupInterruptv>:
     256:	80 e0       	ldi	r24, 0x00	; 0
     258:	08 95       	ret

0000025a <_Z15readTemperatureh>:
void monitorBloodPressure(HardwareSerial ser) {
	char InByte = 0x00;
	if(ser.available()) {
		InByte = ser.read();
	}
}
     25a:	0e 94 a8 15 	call	0x2b50	; 0x2b50 <analogRead>
     25e:	bc 01       	movw	r22, r24
     260:	99 0f       	add	r25, r25
     262:	88 0b       	sbc	r24, r24
     264:	99 0b       	sbc	r25, r25
     266:	0e 94 49 10 	call	0x2092	; 0x2092 <__floatsisf>
     26a:	23 e2       	ldi	r18, 0x23	; 35
     26c:	3b ed       	ldi	r19, 0xDB	; 219
     26e:	49 ef       	ldi	r20, 0xF9	; 249
     270:	5e e3       	ldi	r21, 0x3E	; 62
     272:	0c 94 1e 11 	jmp	0x223c	; 0x223c <__mulsf3>
     276:	08 95       	ret

00000278 <_Z23readTemptratureHumidityv>:
     278:	0f 93       	push	r16
     27a:	1f 93       	push	r17
     27c:	00 e0       	ldi	r16, 0x00	; 0
     27e:	10 e0       	ldi	r17, 0x00	; 0
     280:	2d e8       	ldi	r18, 0x8D	; 141
     282:	32 e0       	ldi	r19, 0x02	; 2
     284:	4e e8       	ldi	r20, 0x8E	; 142
     286:	52 e0       	ldi	r21, 0x02	; 2
     288:	62 e0       	ldi	r22, 0x02	; 2
     28a:	70 e0       	ldi	r23, 0x00	; 0
     28c:	86 ea       	ldi	r24, 0xA6	; 166
     28e:	91 e0       	ldi	r25, 0x01	; 1
     290:	0e 94 97 0a 	call	0x152e	; 0x152e <_ZN9SimpleDHT4readEiPhS0_S0_>
     294:	89 2b       	or	r24, r25
     296:	41 f0       	breq	.+16     	; 0x2a8 <_Z23readTemptratureHumidityv+0x30>
     298:	68 ee       	ldi	r22, 0xE8	; 232
     29a:	73 e0       	ldi	r23, 0x03	; 3
     29c:	80 e0       	ldi	r24, 0x00	; 0
     29e:	90 e0       	ldi	r25, 0x00	; 0
     2a0:	0e 94 1c 15 	call	0x2a38	; 0x2a38 <delay>
     2a4:	80 e0       	ldi	r24, 0x00	; 0
     2a6:	07 c0       	rjmp	.+14     	; 0x2b6 <_Z23readTemptratureHumidityv+0x3e>
     2a8:	6c ed       	ldi	r22, 0xDC	; 220
     2aa:	75 e0       	ldi	r23, 0x05	; 5
     2ac:	80 e0       	ldi	r24, 0x00	; 0
     2ae:	90 e0       	ldi	r25, 0x00	; 0
     2b0:	0e 94 1c 15 	call	0x2a38	; 0x2a38 <delay>
     2b4:	81 e0       	ldi	r24, 0x01	; 1
     2b6:	1f 91       	pop	r17
     2b8:	0f 91       	pop	r16
     2ba:	08 95       	ret

000002bc <_Z20controlHeaterElementh>:
     2bc:	af 92       	push	r10
     2be:	bf 92       	push	r11
     2c0:	cf 92       	push	r12
     2c2:	df 92       	push	r13
     2c4:	ef 92       	push	r14
     2c6:	ff 92       	push	r15
     2c8:	0f 93       	push	r16
     2ca:	1f 93       	push	r17
     2cc:	68 2f       	mov	r22, r24
     2ce:	70 e0       	ldi	r23, 0x00	; 0
     2d0:	80 e0       	ldi	r24, 0x00	; 0
     2d2:	90 e0       	ldi	r25, 0x00	; 0
     2d4:	1f 92       	push	r1
     2d6:	1f 92       	push	r1
     2d8:	1f 92       	push	r1
     2da:	2f ef       	ldi	r18, 0xFF	; 255
     2dc:	2f 93       	push	r18
     2de:	a1 2c       	mov	r10, r1
     2e0:	b1 2c       	mov	r11, r1
     2e2:	65 01       	movw	r12, r10
     2e4:	14 e6       	ldi	r17, 0x64	; 100
     2e6:	e1 2e       	mov	r14, r17
     2e8:	f1 2c       	mov	r15, r1
     2ea:	00 e0       	ldi	r16, 0x00	; 0
     2ec:	10 e0       	ldi	r17, 0x00	; 0
     2ee:	20 e0       	ldi	r18, 0x00	; 0
     2f0:	30 e0       	ldi	r19, 0x00	; 0
     2f2:	a9 01       	movw	r20, r18
     2f4:	0e 94 31 17 	call	0x2e62	; 0x2e62 <_Z3maplllll>
     2f8:	0f 90       	pop	r0
     2fa:	0f 90       	pop	r0
     2fc:	0f 90       	pop	r0
     2fe:	0f 90       	pop	r0
     300:	83 e0       	ldi	r24, 0x03	; 3
     302:	1f 91       	pop	r17
     304:	0f 91       	pop	r16
     306:	ff 90       	pop	r15
     308:	ef 90       	pop	r14
     30a:	df 90       	pop	r13
     30c:	cf 90       	pop	r12
     30e:	bf 90       	pop	r11
     310:	af 90       	pop	r10
     312:	0c 94 cb 15 	jmp	0x2b96	; 0x2b96 <analogWrite>

00000316 <_Z23MQResistanceCalculationi>:
     316:	cf 92       	push	r12
     318:	df 92       	push	r13
     31a:	ef 92       	push	r14
     31c:	ff 92       	push	r15
     31e:	bc 01       	movw	r22, r24
     320:	8f ef       	ldi	r24, 0xFF	; 255
     322:	93 e0       	ldi	r25, 0x03	; 3
     324:	0e 94 a0 17 	call	0x2f40	; 0x2f40 <__divmodhi4>
     328:	07 2e       	mov	r0, r23
     32a:	00 0c       	add	r0, r0
     32c:	88 0b       	sbc	r24, r24
     32e:	99 0b       	sbc	r25, r25
     330:	0e 94 49 10 	call	0x2092	; 0x2092 <__floatsisf>
     334:	20 e0       	ldi	r18, 0x00	; 0
     336:	30 e0       	ldi	r19, 0x00	; 0
     338:	40 e8       	ldi	r20, 0x80	; 128
     33a:	5f e3       	ldi	r21, 0x3F	; 63
     33c:	0e 94 49 0f 	call	0x1e92	; 0x1e92 <__subsf3>
     340:	6b 01       	movw	r12, r22
     342:	7c 01       	movw	r14, r24
     344:	60 91 14 01 	lds	r22, 0x0114	; 0x800114 <RL_VALUE>
     348:	70 91 15 01 	lds	r23, 0x0115	; 0x800115 <RL_VALUE+0x1>
     34c:	07 2e       	mov	r0, r23
     34e:	00 0c       	add	r0, r0
     350:	88 0b       	sbc	r24, r24
     352:	99 0b       	sbc	r25, r25
     354:	0e 94 49 10 	call	0x2092	; 0x2092 <__floatsisf>
     358:	a7 01       	movw	r20, r14
     35a:	96 01       	movw	r18, r12
     35c:	0e 94 1e 11 	call	0x223c	; 0x223c <__mulsf3>
     360:	ff 90       	pop	r15
     362:	ef 90       	pop	r14
     364:	df 90       	pop	r13
     366:	cf 90       	pop	r12
     368:	08 95       	ret

0000036a <_Z6MQReadh>:
     36a:	cf 92       	push	r12
     36c:	df 92       	push	r13
     36e:	ef 92       	push	r14
     370:	ff 92       	push	r15
     372:	0f 93       	push	r16
     374:	1f 93       	push	r17
     376:	cf 93       	push	r28
     378:	df 93       	push	r29
     37a:	0e 94 a8 15 	call	0x2b50	; 0x2b50 <analogRead>
     37e:	8c 01       	movw	r16, r24
     380:	c1 2c       	mov	r12, r1
     382:	d1 2c       	mov	r13, r1
     384:	76 01       	movw	r14, r12
     386:	c0 e0       	ldi	r28, 0x00	; 0
     388:	d0 e0       	ldi	r29, 0x00	; 0
     38a:	60 91 06 01 	lds	r22, 0x0106	; 0x800106 <READ_SAMPLE_TIMES>
     38e:	70 91 07 01 	lds	r23, 0x0107	; 0x800107 <READ_SAMPLE_TIMES+0x1>
     392:	c6 17       	cp	r28, r22
     394:	d7 07       	cpc	r29, r23
     396:	94 f4       	brge	.+36     	; 0x3bc <_Z6MQReadh+0x52>
     398:	c8 01       	movw	r24, r16
     39a:	bd df       	rcall	.-134    	; 0x316 <_Z23MQResistanceCalculationi>
     39c:	9b 01       	movw	r18, r22
     39e:	ac 01       	movw	r20, r24
     3a0:	c7 01       	movw	r24, r14
     3a2:	b6 01       	movw	r22, r12
     3a4:	0e 94 4a 0f 	call	0x1e94	; 0x1e94 <__addsf3>
     3a8:	6b 01       	movw	r12, r22
     3aa:	7c 01       	movw	r14, r24
     3ac:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <READ_SAMPLE_INTERVAL>
     3b0:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <READ_SAMPLE_INTERVAL+0x1>
     3b4:	0e 94 55 15 	call	0x2aaa	; 0x2aaa <delayMicroseconds>
     3b8:	21 96       	adiw	r28, 0x01	; 1
     3ba:	e7 cf       	rjmp	.-50     	; 0x38a <_Z6MQReadh+0x20>
     3bc:	07 2e       	mov	r0, r23
     3be:	00 0c       	add	r0, r0
     3c0:	88 0b       	sbc	r24, r24
     3c2:	99 0b       	sbc	r25, r25
     3c4:	0e 94 49 10 	call	0x2092	; 0x2092 <__floatsisf>
     3c8:	9b 01       	movw	r18, r22
     3ca:	ac 01       	movw	r20, r24
     3cc:	c7 01       	movw	r24, r14
     3ce:	b6 01       	movw	r22, r12
     3d0:	0e 94 ae 0f 	call	0x1f5c	; 0x1f5c <__divsf3>
     3d4:	df 91       	pop	r29
     3d6:	cf 91       	pop	r28
     3d8:	1f 91       	pop	r17
     3da:	0f 91       	pop	r16
     3dc:	ff 90       	pop	r15
     3de:	ef 90       	pop	r14
     3e0:	df 90       	pop	r13
     3e2:	cf 90       	pop	r12
     3e4:	08 95       	ret

000003e6 <_Z15MQGetPercentagef11SensorCurve>:
     3e6:	af 92       	push	r10
     3e8:	bf 92       	push	r11
     3ea:	cf 92       	push	r12
     3ec:	df 92       	push	r13
     3ee:	ef 92       	push	r14
     3f0:	ff 92       	push	r15
     3f2:	0f 93       	push	r16
     3f4:	1f 93       	push	r17
     3f6:	cf 93       	push	r28
     3f8:	df 93       	push	r29
     3fa:	cd b7       	in	r28, 0x3d	; 61
     3fc:	de b7       	in	r29, 0x3e	; 62
     3fe:	2c 97       	sbiw	r28, 0x0c	; 12
     400:	0f b6       	in	r0, 0x3f	; 63
     402:	f8 94       	cli
     404:	de bf       	out	0x3e, r29	; 62
     406:	0f be       	out	0x3f, r0	; 63
     408:	cd bf       	out	0x3d, r28	; 61
     40a:	a9 82       	std	Y+1, r10	; 0x01
     40c:	ba 82       	std	Y+2, r11	; 0x02
     40e:	cb 82       	std	Y+3, r12	; 0x03
     410:	dc 82       	std	Y+4, r13	; 0x04
     412:	ed 82       	std	Y+5, r14	; 0x05
     414:	fe 82       	std	Y+6, r15	; 0x06
     416:	0f 83       	std	Y+7, r16	; 0x07
     418:	18 87       	std	Y+8, r17	; 0x08
     41a:	29 87       	std	Y+9, r18	; 0x09
     41c:	3a 87       	std	Y+10, r19	; 0x0a
     41e:	4b 87       	std	Y+11, r20	; 0x0b
     420:	5c 87       	std	Y+12, r21	; 0x0c
     422:	0e 94 de 10 	call	0x21bc	; 0x21bc <log>
     426:	2d 81       	ldd	r18, Y+5	; 0x05
     428:	3e 81       	ldd	r19, Y+6	; 0x06
     42a:	4f 81       	ldd	r20, Y+7	; 0x07
     42c:	58 85       	ldd	r21, Y+8	; 0x08
     42e:	0e 94 49 0f 	call	0x1e92	; 0x1e92 <__subsf3>
     432:	29 85       	ldd	r18, Y+9	; 0x09
     434:	3a 85       	ldd	r19, Y+10	; 0x0a
     436:	4b 85       	ldd	r20, Y+11	; 0x0b
     438:	5c 85       	ldd	r21, Y+12	; 0x0c
     43a:	0e 94 ae 0f 	call	0x1f5c	; 0x1f5c <__divsf3>
     43e:	29 81       	ldd	r18, Y+1	; 0x01
     440:	3a 81       	ldd	r19, Y+2	; 0x02
     442:	4b 81       	ldd	r20, Y+3	; 0x03
     444:	5c 81       	ldd	r21, Y+4	; 0x04
     446:	0e 94 4a 0f 	call	0x1e94	; 0x1e94 <__addsf3>
     44a:	9b 01       	movw	r18, r22
     44c:	ac 01       	movw	r20, r24
     44e:	60 e0       	ldi	r22, 0x00	; 0
     450:	70 e0       	ldi	r23, 0x00	; 0
     452:	80 e2       	ldi	r24, 0x20	; 32
     454:	91 e4       	ldi	r25, 0x41	; 65
     456:	0e 94 81 11 	call	0x2302	; 0x2302 <pow>
     45a:	0e 94 16 10 	call	0x202c	; 0x202c <__fixsfsi>
     45e:	cb 01       	movw	r24, r22
     460:	2c 96       	adiw	r28, 0x0c	; 12
     462:	0f b6       	in	r0, 0x3f	; 63
     464:	f8 94       	cli
     466:	de bf       	out	0x3e, r29	; 62
     468:	0f be       	out	0x3f, r0	; 63
     46a:	cd bf       	out	0x3d, r28	; 61
     46c:	df 91       	pop	r29
     46e:	cf 91       	pop	r28
     470:	1f 91       	pop	r17
     472:	0f 91       	pop	r16
     474:	ff 90       	pop	r15
     476:	ef 90       	pop	r14
     478:	df 90       	pop	r13
     47a:	cf 90       	pop	r12
     47c:	bf 90       	pop	r11
     47e:	af 90       	pop	r10
     480:	08 95       	ret

00000482 <_Z18MQGetGasPercentagefi>:
     482:	af 92       	push	r10
     484:	bf 92       	push	r11
     486:	cf 92       	push	r12
     488:	df 92       	push	r13
     48a:	ef 92       	push	r14
     48c:	ff 92       	push	r15
     48e:	0f 93       	push	r16
     490:	1f 93       	push	r17
     492:	4c 30       	cpi	r20, 0x0C	; 12
     494:	51 05       	cpc	r21, r1
     496:	08 f0       	brcs	.+2      	; 0x49a <_Z18MQGetGasPercentagefi+0x18>
     498:	38 c1       	rjmp	.+624    	; 0x70a <_Z18MQGetGasPercentagefi+0x288>
     49a:	fa 01       	movw	r30, r20
     49c:	ea 5b       	subi	r30, 0xBA	; 186
     49e:	ff 4f       	sbci	r31, 0xFF	; 255
     4a0:	0c 94 f1 17 	jmp	0x2fe2	; 0x2fe2 <__tablejump2__>
     4a4:	a0 90 9a 01 	lds	r10, 0x019A	; 0x80019a <LPGCurve>
     4a8:	b0 90 9b 01 	lds	r11, 0x019B	; 0x80019b <LPGCurve+0x1>
     4ac:	c0 90 9c 01 	lds	r12, 0x019C	; 0x80019c <LPGCurve+0x2>
     4b0:	d0 90 9d 01 	lds	r13, 0x019D	; 0x80019d <LPGCurve+0x3>
     4b4:	e0 90 9e 01 	lds	r14, 0x019E	; 0x80019e <LPGCurve+0x4>
     4b8:	f0 90 9f 01 	lds	r15, 0x019F	; 0x80019f <LPGCurve+0x5>
     4bc:	00 91 a0 01 	lds	r16, 0x01A0	; 0x8001a0 <LPGCurve+0x6>
     4c0:	10 91 a1 01 	lds	r17, 0x01A1	; 0x8001a1 <LPGCurve+0x7>
     4c4:	20 91 a2 01 	lds	r18, 0x01A2	; 0x8001a2 <LPGCurve+0x8>
     4c8:	30 91 a3 01 	lds	r19, 0x01A3	; 0x8001a3 <LPGCurve+0x9>
     4cc:	40 91 a4 01 	lds	r20, 0x01A4	; 0x8001a4 <LPGCurve+0xa>
     4d0:	50 91 a5 01 	lds	r21, 0x01A5	; 0x8001a5 <LPGCurve+0xb>
     4d4:	12 c1       	rjmp	.+548    	; 0x6fa <_Z18MQGetGasPercentagefi+0x278>
     4d6:	a0 90 8e 01 	lds	r10, 0x018E	; 0x80018e <COCurve>
     4da:	b0 90 8f 01 	lds	r11, 0x018F	; 0x80018f <COCurve+0x1>
     4de:	c0 90 90 01 	lds	r12, 0x0190	; 0x800190 <COCurve+0x2>
     4e2:	d0 90 91 01 	lds	r13, 0x0191	; 0x800191 <COCurve+0x3>
     4e6:	e0 90 92 01 	lds	r14, 0x0192	; 0x800192 <COCurve+0x4>
     4ea:	f0 90 93 01 	lds	r15, 0x0193	; 0x800193 <COCurve+0x5>
     4ee:	00 91 94 01 	lds	r16, 0x0194	; 0x800194 <COCurve+0x6>
     4f2:	10 91 95 01 	lds	r17, 0x0195	; 0x800195 <COCurve+0x7>
     4f6:	20 91 96 01 	lds	r18, 0x0196	; 0x800196 <COCurve+0x8>
     4fa:	30 91 97 01 	lds	r19, 0x0197	; 0x800197 <COCurve+0x9>
     4fe:	40 91 98 01 	lds	r20, 0x0198	; 0x800198 <COCurve+0xa>
     502:	50 91 99 01 	lds	r21, 0x0199	; 0x800199 <COCurve+0xb>
     506:	f9 c0       	rjmp	.+498    	; 0x6fa <_Z18MQGetGasPercentagefi+0x278>
     508:	a0 90 82 01 	lds	r10, 0x0182	; 0x800182 <MethaneCurve>
     50c:	b0 90 83 01 	lds	r11, 0x0183	; 0x800183 <MethaneCurve+0x1>
     510:	c0 90 84 01 	lds	r12, 0x0184	; 0x800184 <MethaneCurve+0x2>
     514:	d0 90 85 01 	lds	r13, 0x0185	; 0x800185 <MethaneCurve+0x3>
     518:	e0 90 86 01 	lds	r14, 0x0186	; 0x800186 <MethaneCurve+0x4>
     51c:	f0 90 87 01 	lds	r15, 0x0187	; 0x800187 <MethaneCurve+0x5>
     520:	00 91 88 01 	lds	r16, 0x0188	; 0x800188 <MethaneCurve+0x6>
     524:	10 91 89 01 	lds	r17, 0x0189	; 0x800189 <MethaneCurve+0x7>
     528:	20 91 8a 01 	lds	r18, 0x018A	; 0x80018a <MethaneCurve+0x8>
     52c:	30 91 8b 01 	lds	r19, 0x018B	; 0x80018b <MethaneCurve+0x9>
     530:	40 91 8c 01 	lds	r20, 0x018C	; 0x80018c <MethaneCurve+0xa>
     534:	50 91 8d 01 	lds	r21, 0x018D	; 0x80018d <MethaneCurve+0xb>
     538:	e0 c0       	rjmp	.+448    	; 0x6fa <_Z18MQGetGasPercentagefi+0x278>
     53a:	a0 90 76 01 	lds	r10, 0x0176	; 0x800176 <H2Curve>
     53e:	b0 90 77 01 	lds	r11, 0x0177	; 0x800177 <H2Curve+0x1>
     542:	c0 90 78 01 	lds	r12, 0x0178	; 0x800178 <H2Curve+0x2>
     546:	d0 90 79 01 	lds	r13, 0x0179	; 0x800179 <H2Curve+0x3>
     54a:	e0 90 7a 01 	lds	r14, 0x017A	; 0x80017a <H2Curve+0x4>
     54e:	f0 90 7b 01 	lds	r15, 0x017B	; 0x80017b <H2Curve+0x5>
     552:	00 91 7c 01 	lds	r16, 0x017C	; 0x80017c <H2Curve+0x6>
     556:	10 91 7d 01 	lds	r17, 0x017D	; 0x80017d <H2Curve+0x7>
     55a:	20 91 7e 01 	lds	r18, 0x017E	; 0x80017e <H2Curve+0x8>
     55e:	30 91 7f 01 	lds	r19, 0x017F	; 0x80017f <H2Curve+0x9>
     562:	40 91 80 01 	lds	r20, 0x0180	; 0x800180 <H2Curve+0xa>
     566:	50 91 81 01 	lds	r21, 0x0181	; 0x800181 <H2Curve+0xb>
     56a:	c7 c0       	rjmp	.+398    	; 0x6fa <_Z18MQGetGasPercentagefi+0x278>
     56c:	a0 90 6a 01 	lds	r10, 0x016A	; 0x80016a <AlcoholCurve>
     570:	b0 90 6b 01 	lds	r11, 0x016B	; 0x80016b <AlcoholCurve+0x1>
     574:	c0 90 6c 01 	lds	r12, 0x016C	; 0x80016c <AlcoholCurve+0x2>
     578:	d0 90 6d 01 	lds	r13, 0x016D	; 0x80016d <AlcoholCurve+0x3>
     57c:	e0 90 6e 01 	lds	r14, 0x016E	; 0x80016e <AlcoholCurve+0x4>
     580:	f0 90 6f 01 	lds	r15, 0x016F	; 0x80016f <AlcoholCurve+0x5>
     584:	00 91 70 01 	lds	r16, 0x0170	; 0x800170 <AlcoholCurve+0x6>
     588:	10 91 71 01 	lds	r17, 0x0171	; 0x800171 <AlcoholCurve+0x7>
     58c:	20 91 72 01 	lds	r18, 0x0172	; 0x800172 <AlcoholCurve+0x8>
     590:	30 91 73 01 	lds	r19, 0x0173	; 0x800173 <AlcoholCurve+0x9>
     594:	40 91 74 01 	lds	r20, 0x0174	; 0x800174 <AlcoholCurve+0xa>
     598:	50 91 75 01 	lds	r21, 0x0175	; 0x800175 <AlcoholCurve+0xb>
     59c:	ae c0       	rjmp	.+348    	; 0x6fa <_Z18MQGetGasPercentagefi+0x278>
     59e:	a0 90 5e 01 	lds	r10, 0x015E	; 0x80015e <PropaneCurve>
     5a2:	b0 90 5f 01 	lds	r11, 0x015F	; 0x80015f <PropaneCurve+0x1>
     5a6:	c0 90 60 01 	lds	r12, 0x0160	; 0x800160 <PropaneCurve+0x2>
     5aa:	d0 90 61 01 	lds	r13, 0x0161	; 0x800161 <PropaneCurve+0x3>
     5ae:	e0 90 62 01 	lds	r14, 0x0162	; 0x800162 <PropaneCurve+0x4>
     5b2:	f0 90 63 01 	lds	r15, 0x0163	; 0x800163 <PropaneCurve+0x5>
     5b6:	00 91 64 01 	lds	r16, 0x0164	; 0x800164 <PropaneCurve+0x6>
     5ba:	10 91 65 01 	lds	r17, 0x0165	; 0x800165 <PropaneCurve+0x7>
     5be:	20 91 66 01 	lds	r18, 0x0166	; 0x800166 <PropaneCurve+0x8>
     5c2:	30 91 67 01 	lds	r19, 0x0167	; 0x800167 <PropaneCurve+0x9>
     5c6:	40 91 68 01 	lds	r20, 0x0168	; 0x800168 <PropaneCurve+0xa>
     5ca:	50 91 69 01 	lds	r21, 0x0169	; 0x800169 <PropaneCurve+0xb>
     5ce:	95 c0       	rjmp	.+298    	; 0x6fa <_Z18MQGetGasPercentagefi+0x278>
     5d0:	a0 90 52 01 	lds	r10, 0x0152	; 0x800152 <NitrogenOxideCurve>
     5d4:	b0 90 53 01 	lds	r11, 0x0153	; 0x800153 <NitrogenOxideCurve+0x1>
     5d8:	c0 90 54 01 	lds	r12, 0x0154	; 0x800154 <NitrogenOxideCurve+0x2>
     5dc:	d0 90 55 01 	lds	r13, 0x0155	; 0x800155 <NitrogenOxideCurve+0x3>
     5e0:	e0 90 56 01 	lds	r14, 0x0156	; 0x800156 <NitrogenOxideCurve+0x4>
     5e4:	f0 90 57 01 	lds	r15, 0x0157	; 0x800157 <NitrogenOxideCurve+0x5>
     5e8:	00 91 58 01 	lds	r16, 0x0158	; 0x800158 <NitrogenOxideCurve+0x6>
     5ec:	10 91 59 01 	lds	r17, 0x0159	; 0x800159 <NitrogenOxideCurve+0x7>
     5f0:	20 91 5a 01 	lds	r18, 0x015A	; 0x80015a <NitrogenOxideCurve+0x8>
     5f4:	30 91 5b 01 	lds	r19, 0x015B	; 0x80015b <NitrogenOxideCurve+0x9>
     5f8:	40 91 5c 01 	lds	r20, 0x015C	; 0x80015c <NitrogenOxideCurve+0xa>
     5fc:	50 91 5d 01 	lds	r21, 0x015D	; 0x80015d <NitrogenOxideCurve+0xb>
     600:	7c c0       	rjmp	.+248    	; 0x6fa <_Z18MQGetGasPercentagefi+0x278>
     602:	a0 90 46 01 	lds	r10, 0x0146	; 0x800146 <ChlorideCurve>
     606:	b0 90 47 01 	lds	r11, 0x0147	; 0x800147 <ChlorideCurve+0x1>
     60a:	c0 90 48 01 	lds	r12, 0x0148	; 0x800148 <ChlorideCurve+0x2>
     60e:	d0 90 49 01 	lds	r13, 0x0149	; 0x800149 <ChlorideCurve+0x3>
     612:	e0 90 4a 01 	lds	r14, 0x014A	; 0x80014a <ChlorideCurve+0x4>
     616:	f0 90 4b 01 	lds	r15, 0x014B	; 0x80014b <ChlorideCurve+0x5>
     61a:	00 91 4c 01 	lds	r16, 0x014C	; 0x80014c <ChlorideCurve+0x6>
     61e:	10 91 4d 01 	lds	r17, 0x014D	; 0x80014d <ChlorideCurve+0x7>
     622:	20 91 4e 01 	lds	r18, 0x014E	; 0x80014e <ChlorideCurve+0x8>
     626:	30 91 4f 01 	lds	r19, 0x014F	; 0x80014f <ChlorideCurve+0x9>
     62a:	40 91 50 01 	lds	r20, 0x0150	; 0x800150 <ChlorideCurve+0xa>
     62e:	50 91 51 01 	lds	r21, 0x0151	; 0x800151 <ChlorideCurve+0xb>
     632:	63 c0       	rjmp	.+198    	; 0x6fa <_Z18MQGetGasPercentagefi+0x278>
     634:	a0 90 3a 01 	lds	r10, 0x013A	; 0x80013a <Ozone_03Curve>
     638:	b0 90 3b 01 	lds	r11, 0x013B	; 0x80013b <Ozone_03Curve+0x1>
     63c:	c0 90 3c 01 	lds	r12, 0x013C	; 0x80013c <Ozone_03Curve+0x2>
     640:	d0 90 3d 01 	lds	r13, 0x013D	; 0x80013d <Ozone_03Curve+0x3>
     644:	e0 90 3e 01 	lds	r14, 0x013E	; 0x80013e <Ozone_03Curve+0x4>
     648:	f0 90 3f 01 	lds	r15, 0x013F	; 0x80013f <Ozone_03Curve+0x5>
     64c:	00 91 40 01 	lds	r16, 0x0140	; 0x800140 <Ozone_03Curve+0x6>
     650:	10 91 41 01 	lds	r17, 0x0141	; 0x800141 <Ozone_03Curve+0x7>
     654:	20 91 42 01 	lds	r18, 0x0142	; 0x800142 <Ozone_03Curve+0x8>
     658:	30 91 43 01 	lds	r19, 0x0143	; 0x800143 <Ozone_03Curve+0x9>
     65c:	40 91 44 01 	lds	r20, 0x0144	; 0x800144 <Ozone_03Curve+0xa>
     660:	50 91 45 01 	lds	r21, 0x0145	; 0x800145 <Ozone_03Curve+0xb>
     664:	4a c0       	rjmp	.+148    	; 0x6fa <_Z18MQGetGasPercentagefi+0x278>
     666:	a0 90 2e 01 	lds	r10, 0x012E	; 0x80012e <CarbonDioxideCurve>
     66a:	b0 90 2f 01 	lds	r11, 0x012F	; 0x80012f <CarbonDioxideCurve+0x1>
     66e:	c0 90 30 01 	lds	r12, 0x0130	; 0x800130 <CarbonDioxideCurve+0x2>
     672:	d0 90 31 01 	lds	r13, 0x0131	; 0x800131 <CarbonDioxideCurve+0x3>
     676:	e0 90 32 01 	lds	r14, 0x0132	; 0x800132 <CarbonDioxideCurve+0x4>
     67a:	f0 90 33 01 	lds	r15, 0x0133	; 0x800133 <CarbonDioxideCurve+0x5>
     67e:	00 91 34 01 	lds	r16, 0x0134	; 0x800134 <CarbonDioxideCurve+0x6>
     682:	10 91 35 01 	lds	r17, 0x0135	; 0x800135 <CarbonDioxideCurve+0x7>
     686:	20 91 36 01 	lds	r18, 0x0136	; 0x800136 <CarbonDioxideCurve+0x8>
     68a:	30 91 37 01 	lds	r19, 0x0137	; 0x800137 <CarbonDioxideCurve+0x9>
     68e:	40 91 38 01 	lds	r20, 0x0138	; 0x800138 <CarbonDioxideCurve+0xa>
     692:	50 91 39 01 	lds	r21, 0x0139	; 0x800139 <CarbonDioxideCurve+0xb>
     696:	31 c0       	rjmp	.+98     	; 0x6fa <_Z18MQGetGasPercentagefi+0x278>
     698:	a0 90 22 01 	lds	r10, 0x0122	; 0x800122 <CarbonMonooxideCurve>
     69c:	b0 90 23 01 	lds	r11, 0x0123	; 0x800123 <CarbonMonooxideCurve+0x1>
     6a0:	c0 90 24 01 	lds	r12, 0x0124	; 0x800124 <CarbonMonooxideCurve+0x2>
     6a4:	d0 90 25 01 	lds	r13, 0x0125	; 0x800125 <CarbonMonooxideCurve+0x3>
     6a8:	e0 90 26 01 	lds	r14, 0x0126	; 0x800126 <CarbonMonooxideCurve+0x4>
     6ac:	f0 90 27 01 	lds	r15, 0x0127	; 0x800127 <CarbonMonooxideCurve+0x5>
     6b0:	00 91 28 01 	lds	r16, 0x0128	; 0x800128 <CarbonMonooxideCurve+0x6>
     6b4:	10 91 29 01 	lds	r17, 0x0129	; 0x800129 <CarbonMonooxideCurve+0x7>
     6b8:	20 91 2a 01 	lds	r18, 0x012A	; 0x80012a <CarbonMonooxideCurve+0x8>
     6bc:	30 91 2b 01 	lds	r19, 0x012B	; 0x80012b <CarbonMonooxideCurve+0x9>
     6c0:	40 91 2c 01 	lds	r20, 0x012C	; 0x80012c <CarbonMonooxideCurve+0xa>
     6c4:	50 91 2d 01 	lds	r21, 0x012D	; 0x80012d <CarbonMonooxideCurve+0xb>
     6c8:	18 c0       	rjmp	.+48     	; 0x6fa <_Z18MQGetGasPercentagefi+0x278>
     6ca:	a0 90 16 01 	lds	r10, 0x0116	; 0x800116 <MQ135MethaneCurve>
     6ce:	b0 90 17 01 	lds	r11, 0x0117	; 0x800117 <MQ135MethaneCurve+0x1>
     6d2:	c0 90 18 01 	lds	r12, 0x0118	; 0x800118 <MQ135MethaneCurve+0x2>
     6d6:	d0 90 19 01 	lds	r13, 0x0119	; 0x800119 <MQ135MethaneCurve+0x3>
     6da:	e0 90 1a 01 	lds	r14, 0x011A	; 0x80011a <MQ135MethaneCurve+0x4>
     6de:	f0 90 1b 01 	lds	r15, 0x011B	; 0x80011b <MQ135MethaneCurve+0x5>
     6e2:	00 91 1c 01 	lds	r16, 0x011C	; 0x80011c <MQ135MethaneCurve+0x6>
     6e6:	10 91 1d 01 	lds	r17, 0x011D	; 0x80011d <MQ135MethaneCurve+0x7>
     6ea:	20 91 1e 01 	lds	r18, 0x011E	; 0x80011e <MQ135MethaneCurve+0x8>
     6ee:	30 91 1f 01 	lds	r19, 0x011F	; 0x80011f <MQ135MethaneCurve+0x9>
     6f2:	40 91 20 01 	lds	r20, 0x0120	; 0x800120 <MQ135MethaneCurve+0xa>
     6f6:	50 91 21 01 	lds	r21, 0x0121	; 0x800121 <MQ135MethaneCurve+0xb>
     6fa:	75 de       	rcall	.-790    	; 0x3e6 <_Z15MQGetPercentagef11SensorCurve>
     6fc:	bc 01       	movw	r22, r24
     6fe:	99 0f       	add	r25, r25
     700:	88 0b       	sbc	r24, r24
     702:	99 0b       	sbc	r25, r25
     704:	0e 94 49 10 	call	0x2092	; 0x2092 <__floatsisf>
     708:	03 c0       	rjmp	.+6      	; 0x710 <_Z18MQGetGasPercentagefi+0x28e>
     70a:	60 e0       	ldi	r22, 0x00	; 0
     70c:	70 e0       	ldi	r23, 0x00	; 0
     70e:	cb 01       	movw	r24, r22
     710:	1f 91       	pop	r17
     712:	0f 91       	pop	r16
     714:	ff 90       	pop	r15
     716:	ef 90       	pop	r14
     718:	df 90       	pop	r13
     71a:	cf 90       	pop	r12
     71c:	bf 90       	pop	r11
     71e:	af 90       	pop	r10
     720:	08 95       	ret

00000722 <_Z13MQCalibrationhh>:
     722:	cf 92       	push	r12
     724:	df 92       	push	r13
     726:	ef 92       	push	r14
     728:	ff 92       	push	r15
     72a:	0f 93       	push	r16
     72c:	1f 93       	push	r17
     72e:	cf 93       	push	r28
     730:	df 93       	push	r29
     732:	d8 2f       	mov	r29, r24
     734:	c6 2f       	mov	r28, r22
     736:	00 e0       	ldi	r16, 0x00	; 0
     738:	10 e0       	ldi	r17, 0x00	; 0
     73a:	c1 2c       	mov	r12, r1
     73c:	d1 2c       	mov	r13, r1
     73e:	76 01       	movw	r14, r12
     740:	60 91 0c 01 	lds	r22, 0x010C	; 0x80010c <CALIBARAION_SAMPLE_TIMES>
     744:	70 91 0d 01 	lds	r23, 0x010D	; 0x80010d <CALIBARAION_SAMPLE_TIMES+0x1>
     748:	06 17       	cp	r16, r22
     74a:	17 07       	cpc	r17, r23
     74c:	cc f4       	brge	.+50     	; 0x780 <_Z13MQCalibrationhh+0x5e>
     74e:	8d 2f       	mov	r24, r29
     750:	0e 94 a8 15 	call	0x2b50	; 0x2b50 <analogRead>
     754:	e0 dd       	rcall	.-1088   	; 0x316 <_Z23MQResistanceCalculationi>
     756:	9b 01       	movw	r18, r22
     758:	ac 01       	movw	r20, r24
     75a:	c7 01       	movw	r24, r14
     75c:	b6 01       	movw	r22, r12
     75e:	0e 94 4a 0f 	call	0x1e94	; 0x1e94 <__addsf3>
     762:	6b 01       	movw	r12, r22
     764:	7c 01       	movw	r14, r24
     766:	60 91 0a 01 	lds	r22, 0x010A	; 0x80010a <CALIBRATION_SAMPLE_INTERVAL>
     76a:	70 91 0b 01 	lds	r23, 0x010B	; 0x80010b <CALIBRATION_SAMPLE_INTERVAL+0x1>
     76e:	07 2e       	mov	r0, r23
     770:	00 0c       	add	r0, r0
     772:	88 0b       	sbc	r24, r24
     774:	99 0b       	sbc	r25, r25
     776:	0e 94 1c 15 	call	0x2a38	; 0x2a38 <delay>
     77a:	0f 5f       	subi	r16, 0xFF	; 255
     77c:	1f 4f       	sbci	r17, 0xFF	; 255
     77e:	e0 cf       	rjmp	.-64     	; 0x740 <_Z13MQCalibrationhh+0x1e>
     780:	07 2e       	mov	r0, r23
     782:	00 0c       	add	r0, r0
     784:	88 0b       	sbc	r24, r24
     786:	99 0b       	sbc	r25, r25
     788:	0e 94 49 10 	call	0x2092	; 0x2092 <__floatsisf>
     78c:	9b 01       	movw	r18, r22
     78e:	ac 01       	movw	r20, r24
     790:	c7 01       	movw	r24, r14
     792:	b6 01       	movw	r22, r12
     794:	0e 94 ae 0f 	call	0x1f5c	; 0x1f5c <__divsf3>
     798:	6b 01       	movw	r12, r22
     79a:	7c 01       	movw	r14, r24
     79c:	c1 30       	cpi	r28, 0x01	; 1
     79e:	69 f0       	breq	.+26     	; 0x7ba <_Z13MQCalibrationhh+0x98>
     7a0:	38 f0       	brcs	.+14     	; 0x7b0 <_Z13MQCalibrationhh+0x8e>
     7a2:	c2 30       	cpi	r28, 0x02	; 2
     7a4:	e1 f4       	brne	.+56     	; 0x7de <_Z13MQCalibrationhh+0xbc>
     7a6:	60 91 0e 01 	lds	r22, 0x010E	; 0x80010e <MQ135_RO_CLEAN_AIR_FACTOR>
     7aa:	70 91 0f 01 	lds	r23, 0x010F	; 0x80010f <MQ135_RO_CLEAN_AIR_FACTOR+0x1>
     7ae:	09 c0       	rjmp	.+18     	; 0x7c2 <_Z13MQCalibrationhh+0xa0>
     7b0:	60 91 12 01 	lds	r22, 0x0112	; 0x800112 <MQ2_RO_CLEAN_AIR_FACTOR>
     7b4:	70 91 13 01 	lds	r23, 0x0113	; 0x800113 <MQ2_RO_CLEAN_AIR_FACTOR+0x1>
     7b8:	04 c0       	rjmp	.+8      	; 0x7c2 <_Z13MQCalibrationhh+0xa0>
     7ba:	60 91 10 01 	lds	r22, 0x0110	; 0x800110 <MQ131_RO_CLEAN_AIR_FACTOR>
     7be:	70 91 11 01 	lds	r23, 0x0111	; 0x800111 <MQ131_RO_CLEAN_AIR_FACTOR+0x1>
     7c2:	07 2e       	mov	r0, r23
     7c4:	00 0c       	add	r0, r0
     7c6:	88 0b       	sbc	r24, r24
     7c8:	99 0b       	sbc	r25, r25
     7ca:	0e 94 49 10 	call	0x2092	; 0x2092 <__floatsisf>
     7ce:	9b 01       	movw	r18, r22
     7d0:	ac 01       	movw	r20, r24
     7d2:	c7 01       	movw	r24, r14
     7d4:	b6 01       	movw	r22, r12
     7d6:	0e 94 ae 0f 	call	0x1f5c	; 0x1f5c <__divsf3>
     7da:	6b 01       	movw	r12, r22
     7dc:	7c 01       	movw	r14, r24
     7de:	c7 01       	movw	r24, r14
     7e0:	b6 01       	movw	r22, r12
     7e2:	df 91       	pop	r29
     7e4:	cf 91       	pop	r28
     7e6:	1f 91       	pop	r17
     7e8:	0f 91       	pop	r16
     7ea:	ff 90       	pop	r15
     7ec:	ef 90       	pop	r14
     7ee:	df 90       	pop	r13
     7f0:	cf 90       	pop	r12
     7f2:	08 95       	ret

000007f4 <_Z9MQ131Readh>:
     7f4:	cf 92       	push	r12
     7f6:	df 92       	push	r13
     7f8:	ef 92       	push	r14
     7fa:	ff 92       	push	r15
     7fc:	cf 93       	push	r28
     7fe:	df 93       	push	r29
     800:	ec 01       	movw	r28, r24
     802:	86 2f       	mov	r24, r22
     804:	b2 dd       	rcall	.-1180   	; 0x36a <_Z6MQReadh>
     806:	20 91 85 02 	lds	r18, 0x0285	; 0x800285 <Ro+0x4>
     80a:	30 91 86 02 	lds	r19, 0x0286	; 0x800286 <Ro+0x5>
     80e:	40 91 87 02 	lds	r20, 0x0287	; 0x800287 <Ro+0x6>
     812:	50 91 88 02 	lds	r21, 0x0288	; 0x800288 <Ro+0x7>
     816:	0e 94 ae 0f 	call	0x1f5c	; 0x1f5c <__divsf3>
     81a:	6b 01       	movw	r12, r22
     81c:	7c 01       	movw	r14, r24
     81e:	46 e0       	ldi	r20, 0x06	; 6
     820:	50 e0       	ldi	r21, 0x00	; 0
     822:	2f de       	rcall	.-930    	; 0x482 <_Z18MQGetGasPercentagefi>
     824:	68 83       	st	Y, r22
     826:	79 83       	std	Y+1, r23	; 0x01
     828:	8a 83       	std	Y+2, r24	; 0x02
     82a:	9b 83       	std	Y+3, r25	; 0x03
     82c:	47 e0       	ldi	r20, 0x07	; 7
     82e:	50 e0       	ldi	r21, 0x00	; 0
     830:	c7 01       	movw	r24, r14
     832:	b6 01       	movw	r22, r12
     834:	26 de       	rcall	.-948    	; 0x482 <_Z18MQGetGasPercentagefi>
     836:	6c 83       	std	Y+4, r22	; 0x04
     838:	7d 83       	std	Y+5, r23	; 0x05
     83a:	8e 83       	std	Y+6, r24	; 0x06
     83c:	9f 83       	std	Y+7, r25	; 0x07
     83e:	48 e0       	ldi	r20, 0x08	; 8
     840:	50 e0       	ldi	r21, 0x00	; 0
     842:	c7 01       	movw	r24, r14
     844:	b6 01       	movw	r22, r12
     846:	1d de       	rcall	.-966    	; 0x482 <_Z18MQGetGasPercentagefi>
     848:	68 87       	std	Y+8, r22	; 0x08
     84a:	79 87       	std	Y+9, r23	; 0x09
     84c:	8a 87       	std	Y+10, r24	; 0x0a
     84e:	9b 87       	std	Y+11, r25	; 0x0b
     850:	ce 01       	movw	r24, r28
     852:	df 91       	pop	r29
     854:	cf 91       	pop	r28
     856:	ff 90       	pop	r15
     858:	ef 90       	pop	r14
     85a:	df 90       	pop	r13
     85c:	cf 90       	pop	r12
     85e:	08 95       	ret

00000860 <_Z9MQ135Readh>:
     860:	cf 92       	push	r12
     862:	df 92       	push	r13
     864:	ef 92       	push	r14
     866:	ff 92       	push	r15
     868:	cf 93       	push	r28
     86a:	df 93       	push	r29
     86c:	ec 01       	movw	r28, r24
     86e:	86 2f       	mov	r24, r22
     870:	7c dd       	rcall	.-1288   	; 0x36a <_Z6MQReadh>
     872:	20 91 89 02 	lds	r18, 0x0289	; 0x800289 <Ro+0x8>
     876:	30 91 8a 02 	lds	r19, 0x028A	; 0x80028a <Ro+0x9>
     87a:	40 91 8b 02 	lds	r20, 0x028B	; 0x80028b <Ro+0xa>
     87e:	50 91 8c 02 	lds	r21, 0x028C	; 0x80028c <Ro+0xb>
     882:	0e 94 ae 0f 	call	0x1f5c	; 0x1f5c <__divsf3>
     886:	6b 01       	movw	r12, r22
     888:	7c 01       	movw	r14, r24
     88a:	49 e0       	ldi	r20, 0x09	; 9
     88c:	50 e0       	ldi	r21, 0x00	; 0
     88e:	f9 dd       	rcall	.-1038   	; 0x482 <_Z18MQGetGasPercentagefi>
     890:	68 83       	st	Y, r22
     892:	79 83       	std	Y+1, r23	; 0x01
     894:	8a 83       	std	Y+2, r24	; 0x02
     896:	9b 83       	std	Y+3, r25	; 0x03
     898:	4a e0       	ldi	r20, 0x0A	; 10
     89a:	50 e0       	ldi	r21, 0x00	; 0
     89c:	c7 01       	movw	r24, r14
     89e:	b6 01       	movw	r22, r12
     8a0:	f0 dd       	rcall	.-1056   	; 0x482 <_Z18MQGetGasPercentagefi>
     8a2:	6c 83       	std	Y+4, r22	; 0x04
     8a4:	7d 83       	std	Y+5, r23	; 0x05
     8a6:	8e 83       	std	Y+6, r24	; 0x06
     8a8:	9f 83       	std	Y+7, r25	; 0x07
     8aa:	4b e0       	ldi	r20, 0x0B	; 11
     8ac:	50 e0       	ldi	r21, 0x00	; 0
     8ae:	c7 01       	movw	r24, r14
     8b0:	b6 01       	movw	r22, r12
     8b2:	e7 dd       	rcall	.-1074   	; 0x482 <_Z18MQGetGasPercentagefi>
     8b4:	68 87       	std	Y+8, r22	; 0x08
     8b6:	79 87       	std	Y+9, r23	; 0x09
     8b8:	8a 87       	std	Y+10, r24	; 0x0a
     8ba:	9b 87       	std	Y+11, r25	; 0x0b
     8bc:	ce 01       	movw	r24, r28
     8be:	df 91       	pop	r29
     8c0:	cf 91       	pop	r28
     8c2:	ff 90       	pop	r15
     8c4:	ef 90       	pop	r14
     8c6:	df 90       	pop	r13
     8c8:	cf 90       	pop	r12
     8ca:	08 95       	ret

000008cc <_Z10oxygenReadv>:
     8cc:	cf 93       	push	r28
     8ce:	df 93       	push	r29
     8d0:	cd b7       	in	r28, 0x3d	; 61
     8d2:	de b7       	in	r29, 0x3e	; 62
     8d4:	2c 97       	sbiw	r28, 0x0c	; 12
     8d6:	0f b6       	in	r0, 0x3f	; 63
     8d8:	f8 94       	cli
     8da:	de bf       	out	0x3e, r29	; 62
     8dc:	0f be       	out	0x3f, r0	; 63
     8de:	cd bf       	out	0x3d, r28	; 61
     8e0:	60 e0       	ldi	r22, 0x00	; 0
     8e2:	ce 01       	movw	r24, r28
     8e4:	01 96       	adiw	r24, 0x01	; 1
     8e6:	86 df       	rcall	.-244    	; 0x7f4 <_Z9MQ131Readh>
     8e8:	69 85       	ldd	r22, Y+9	; 0x09
     8ea:	7a 85       	ldd	r23, Y+10	; 0x0a
     8ec:	8b 85       	ldd	r24, Y+11	; 0x0b
     8ee:	9c 85       	ldd	r25, Y+12	; 0x0c
     8f0:	2c 96       	adiw	r28, 0x0c	; 12
     8f2:	0f b6       	in	r0, 0x3f	; 63
     8f4:	f8 94       	cli
     8f6:	de bf       	out	0x3e, r29	; 62
     8f8:	0f be       	out	0x3f, r0	; 63
     8fa:	cd bf       	out	0x3d, r28	; 61
     8fc:	df 91       	pop	r29
     8fe:	cf 91       	pop	r28
     900:	08 95       	ret

00000902 <_Z18carbondiaoxideReadv>:
     902:	cf 93       	push	r28
     904:	df 93       	push	r29
     906:	cd b7       	in	r28, 0x3d	; 61
     908:	de b7       	in	r29, 0x3e	; 62
     90a:	2c 97       	sbiw	r28, 0x0c	; 12
     90c:	0f b6       	in	r0, 0x3f	; 63
     90e:	f8 94       	cli
     910:	de bf       	out	0x3e, r29	; 62
     912:	0f be       	out	0x3f, r0	; 63
     914:	cd bf       	out	0x3d, r28	; 61
     916:	60 e0       	ldi	r22, 0x00	; 0
     918:	ce 01       	movw	r24, r28
     91a:	01 96       	adiw	r24, 0x01	; 1
     91c:	a1 df       	rcall	.-190    	; 0x860 <_Z9MQ135Readh>
     91e:	69 81       	ldd	r22, Y+1	; 0x01
     920:	7a 81       	ldd	r23, Y+2	; 0x02
     922:	8b 81       	ldd	r24, Y+3	; 0x03
     924:	9c 81       	ldd	r25, Y+4	; 0x04
     926:	2c 96       	adiw	r28, 0x0c	; 12
     928:	0f b6       	in	r0, 0x3f	; 63
     92a:	f8 94       	cli
     92c:	de bf       	out	0x3e, r29	; 62
     92e:	0f be       	out	0x3f, r0	; 63
     930:	cd bf       	out	0x3d, r28	; 61
     932:	df 91       	pop	r29
     934:	cf 91       	pop	r28
     936:	08 95       	ret

00000938 <setup>:
     938:	cf 93       	push	r28
     93a:	df 93       	push	r29
     93c:	20 e8       	ldi	r18, 0x80	; 128
     93e:	43 e0       	ldi	r20, 0x03	; 3
     940:	62 e0       	ldi	r22, 0x02	; 2
     942:	8f e8       	ldi	r24, 0x8F	; 143
     944:	92 e0       	ldi	r25, 0x02	; 2
     946:	51 d3       	rcall	.+1698   	; 0xfea <_ZN5HX7115beginEhhh>
     948:	60 e0       	ldi	r22, 0x00	; 0
     94a:	80 e0       	ldi	r24, 0x00	; 0
     94c:	ea de       	rcall	.-556    	; 0x722 <_Z13MQCalibrationhh>
     94e:	60 93 81 02 	sts	0x0281, r22	; 0x800281 <Ro>
     952:	70 93 82 02 	sts	0x0282, r23	; 0x800282 <Ro+0x1>
     956:	80 93 83 02 	sts	0x0283, r24	; 0x800283 <Ro+0x2>
     95a:	90 93 84 02 	sts	0x0284, r25	; 0x800284 <Ro+0x3>
     95e:	40 e0       	ldi	r20, 0x00	; 0
     960:	50 e0       	ldi	r21, 0x00	; 0
     962:	6f e1       	ldi	r22, 0x1F	; 31
     964:	70 e0       	ldi	r23, 0x00	; 0
     966:	84 e7       	ldi	r24, 0x74	; 116
     968:	92 e0       	ldi	r25, 0x02	; 2
     96a:	d4 d4       	rcall	.+2472   	; 0x1314 <_ZN21PulseSensorPlayground11analogInputEii>
     96c:	40 e0       	ldi	r20, 0x00	; 0
     96e:	50 e0       	ldi	r21, 0x00	; 0
     970:	6d e0       	ldi	r22, 0x0D	; 13
     972:	70 e0       	ldi	r23, 0x00	; 0
     974:	84 e7       	ldi	r24, 0x74	; 116
     976:	92 e0       	ldi	r25, 0x02	; 2
     978:	e5 d4       	rcall	.+2506   	; 0x1344 <_ZN21PulseSensorPlayground12blinkOnPulseEii>
     97a:	40 e0       	ldi	r20, 0x00	; 0
     97c:	50 e0       	ldi	r21, 0x00	; 0
     97e:	65 e0       	ldi	r22, 0x05	; 5
     980:	70 e0       	ldi	r23, 0x00	; 0
     982:	84 e7       	ldi	r24, 0x74	; 116
     984:	92 e0       	ldi	r25, 0x02	; 2
     986:	f6 d4       	rcall	.+2540   	; 0x1374 <_ZN21PulseSensorPlayground11fadeOnPulseEii>
     988:	6e e5       	ldi	r22, 0x5E	; 94
     98a:	73 e0       	ldi	r23, 0x03	; 3
     98c:	84 e7       	ldi	r24, 0x74	; 116
     98e:	92 e0       	ldi	r25, 0x02	; 2
     990:	23 d5       	rcall	.+2630   	; 0x13d8 <_ZN21PulseSensorPlayground9setSerialER6Stream>
     992:	62 e0       	ldi	r22, 0x02	; 2
     994:	84 e7       	ldi	r24, 0x74	; 116
     996:	92 e0       	ldi	r25, 0x02	; 2
     998:	21 d5       	rcall	.+2626   	; 0x13dc <_ZN21PulseSensorPlayground13setOutputTypeEh>
     99a:	40 e0       	ldi	r20, 0x00	; 0
     99c:	50 e0       	ldi	r21, 0x00	; 0
     99e:	66 e2       	ldi	r22, 0x26	; 38
     9a0:	72 e0       	ldi	r23, 0x02	; 2
     9a2:	84 e7       	ldi	r24, 0x74	; 116
     9a4:	92 e0       	ldi	r25, 0x02	; 2
     9a6:	1c d5       	rcall	.+2616   	; 0x13e0 <_ZN21PulseSensorPlayground12setThresholdEii>
     9a8:	84 e7       	ldi	r24, 0x74	; 116
     9aa:	92 e0       	ldi	r25, 0x02	; 2
     9ac:	6c d4       	rcall	.+2264   	; 0x1286 <_ZN21PulseSensorPlayground5beginEv>
     9ae:	81 11       	cpse	r24, r1
     9b0:	1c c0       	rjmp	.+56     	; 0x9ea <setup+0xb2>
     9b2:	c4 e1       	ldi	r28, 0x14	; 20
     9b4:	d0 e0       	ldi	r29, 0x00	; 0
     9b6:	60 e0       	ldi	r22, 0x00	; 0
     9b8:	8d e0       	ldi	r24, 0x0D	; 13
     9ba:	0e 94 a4 16 	call	0x2d48	; 0x2d48 <digitalWrite>
     9be:	64 e6       	ldi	r22, 0x64	; 100
     9c0:	70 e0       	ldi	r23, 0x00	; 0
     9c2:	80 e0       	ldi	r24, 0x00	; 0
     9c4:	90 e0       	ldi	r25, 0x00	; 0
     9c6:	0e 94 1c 15 	call	0x2a38	; 0x2a38 <delay>
     9ca:	61 e0       	ldi	r22, 0x01	; 1
     9cc:	8d e0       	ldi	r24, 0x0D	; 13
     9ce:	0e 94 a4 16 	call	0x2d48	; 0x2d48 <digitalWrite>
     9d2:	64 e6       	ldi	r22, 0x64	; 100
     9d4:	70 e0       	ldi	r23, 0x00	; 0
     9d6:	80 e0       	ldi	r24, 0x00	; 0
     9d8:	90 e0       	ldi	r25, 0x00	; 0
     9da:	0e 94 1c 15 	call	0x2a38	; 0x2a38 <delay>
     9de:	21 97       	sbiw	r28, 0x01	; 1
     9e0:	51 f7       	brne	.-44     	; 0x9b6 <setup+0x7e>
     9e2:	61 e0       	ldi	r22, 0x01	; 1
     9e4:	8d e0       	ldi	r24, 0x0D	; 13
     9e6:	0e 94 a4 16 	call	0x2d48	; 0x2d48 <digitalWrite>
     9ea:	88 e6       	ldi	r24, 0x68	; 104
     9ec:	92 e0       	ldi	r25, 0x02	; 2
     9ee:	13 d4       	rcall	.+2086   	; 0x1216 <_ZN17LiquidCrystal_I2C4initEv>
     9f0:	88 e6       	ldi	r24, 0x68	; 104
     9f2:	92 e0       	ldi	r25, 0x02	; 2
     9f4:	35 d3       	rcall	.+1642   	; 0x1060 <_ZN17LiquidCrystal_I2C9backlightEv>
     9f6:	88 e6       	ldi	r24, 0x68	; 104
     9f8:	92 e0       	ldi	r25, 0x02	; 2
     9fa:	70 d3       	rcall	.+1760   	; 0x10dc <_ZN17LiquidCrystal_I2C5clearEv>
     9fc:	40 e0       	ldi	r20, 0x00	; 0
     9fe:	60 e0       	ldi	r22, 0x00	; 0
     a00:	88 e6       	ldi	r24, 0x68	; 104
     a02:	92 e0       	ldi	r25, 0x02	; 2
     a04:	77 d3       	rcall	.+1774   	; 0x10f4 <_ZN17LiquidCrystal_I2C9setCursorEhh>
     a06:	62 eb       	ldi	r22, 0xB2	; 178
     a08:	71 e0       	ldi	r23, 0x01	; 1
     a0a:	88 e6       	ldi	r24, 0x68	; 104
     a0c:	92 e0       	ldi	r25, 0x02	; 2
     a0e:	0e 94 a0 14 	call	0x2940	; 0x2940 <_ZN5Print5printEPKc>
     a12:	68 eb       	ldi	r22, 0xB8	; 184
     a14:	7b e0       	ldi	r23, 0x0B	; 11
     a16:	80 e0       	ldi	r24, 0x00	; 0
     a18:	90 e0       	ldi	r25, 0x00	; 0
     a1a:	0e 94 1c 15 	call	0x2a38	; 0x2a38 <delay>
     a1e:	88 e6       	ldi	r24, 0x68	; 104
     a20:	92 e0       	ldi	r25, 0x02	; 2
     a22:	5c d3       	rcall	.+1720   	; 0x10dc <_ZN17LiquidCrystal_I2C5clearEv>
     a24:	40 e0       	ldi	r20, 0x00	; 0
     a26:	60 e0       	ldi	r22, 0x00	; 0
     a28:	88 e6       	ldi	r24, 0x68	; 104
     a2a:	92 e0       	ldi	r25, 0x02	; 2
     a2c:	df 91       	pop	r29
     a2e:	cf 91       	pop	r28
     a30:	61 c3       	rjmp	.+1730   	; 0x10f4 <_ZN17LiquidCrystal_I2C9setCursorEhh>

00000a32 <loop>:
     a32:	ff 92       	push	r15
     a34:	0f 93       	push	r16
     a36:	1f 93       	push	r17
     a38:	cf 93       	push	r28
     a3a:	df 93       	push	r29
     a3c:	0e 94 eb 14 	call	0x29d6	; 0x29d6 <millis>
     a40:	20 91 66 02 	lds	r18, 0x0266	; 0x800266 <motor_t>
     a44:	30 91 67 02 	lds	r19, 0x0267	; 0x800267 <motor_t+0x1>
     a48:	dc 01       	movw	r26, r24
     a4a:	cb 01       	movw	r24, r22
     a4c:	82 1b       	sub	r24, r18
     a4e:	93 0b       	sbc	r25, r19
     a50:	a1 09       	sbc	r26, r1
     a52:	b1 09       	sbc	r27, r1
     a54:	89 3e       	cpi	r24, 0xE9	; 233
     a56:	93 40       	sbci	r25, 0x03	; 3
     a58:	a1 05       	cpc	r26, r1
     a5a:	b1 05       	cpc	r27, r1
     a5c:	48 f0       	brcs	.+18     	; 0xa70 <loop+0x3e>
     a5e:	80 91 53 02 	lds	r24, 0x0253	; 0x800253 <fanspeed_v>
     a62:	2c dc       	rcall	.-1960   	; 0x2bc <_Z20controlHeaterElementh>
     a64:	0e 94 eb 14 	call	0x29d6	; 0x29d6 <millis>
     a68:	70 93 67 02 	sts	0x0267, r23	; 0x800267 <motor_t+0x1>
     a6c:	60 93 66 02 	sts	0x0266, r22	; 0x800266 <motor_t>
     a70:	0e 94 eb 14 	call	0x29d6	; 0x29d6 <millis>
     a74:	20 91 64 02 	lds	r18, 0x0264	; 0x800264 <temperatureelement_t>
     a78:	30 91 65 02 	lds	r19, 0x0265	; 0x800265 <temperatureelement_t+0x1>
     a7c:	dc 01       	movw	r26, r24
     a7e:	cb 01       	movw	r24, r22
     a80:	82 1b       	sub	r24, r18
     a82:	93 0b       	sbc	r25, r19
     a84:	a1 09       	sbc	r26, r1
     a86:	b1 09       	sbc	r27, r1
     a88:	89 3e       	cpi	r24, 0xE9	; 233
     a8a:	93 40       	sbci	r25, 0x03	; 3
     a8c:	a1 05       	cpc	r26, r1
     a8e:	b1 05       	cpc	r27, r1
     a90:	f8 f0       	brcs	.+62     	; 0xad0 <loop+0x9e>
     a92:	80 e0       	ldi	r24, 0x00	; 0
     a94:	e2 db       	rcall	.-2108   	; 0x25a <_Z15readTemperatureh>
     a96:	20 e0       	ldi	r18, 0x00	; 0
     a98:	30 e0       	ldi	r19, 0x00	; 0
     a9a:	4c e0       	ldi	r20, 0x0C	; 12
     a9c:	52 e4       	ldi	r21, 0x42	; 66
     a9e:	0e 94 d5 10 	call	0x21aa	; 0x21aa <__gesf2>
     aa2:	18 16       	cp	r1, r24
     aa4:	14 f4       	brge	.+4      	; 0xaaa <loop+0x78>
     aa6:	80 e0       	ldi	r24, 0x00	; 0
     aa8:	0c c0       	rjmp	.+24     	; 0xac2 <loop+0x90>
     aaa:	80 91 52 02 	lds	r24, 0x0252	; 0x800252 <tempelement_v>
     aae:	83 52       	subi	r24, 0x23	; 35
     ab0:	94 e6       	ldi	r25, 0x64	; 100
     ab2:	89 9f       	mul	r24, r25
     ab4:	80 2d       	mov	r24, r0
     ab6:	11 24       	eor	r1, r1
     ab8:	63 e2       	ldi	r22, 0x23	; 35
     aba:	0e 94 80 17 	call	0x2f00	; 0x2f00 <__udivmodqi4>
     abe:	80 93 52 02 	sts	0x0252, r24	; 0x800252 <tempelement_v>
     ac2:	fc db       	rcall	.-2056   	; 0x2bc <_Z20controlHeaterElementh>
     ac4:	0e 94 eb 14 	call	0x29d6	; 0x29d6 <millis>
     ac8:	70 93 65 02 	sts	0x0265, r23	; 0x800265 <temperatureelement_t+0x1>
     acc:	60 93 64 02 	sts	0x0264, r22	; 0x800264 <temperatureelement_t>
     ad0:	0e 94 eb 14 	call	0x29d6	; 0x29d6 <millis>
     ad4:	20 91 62 02 	lds	r18, 0x0262	; 0x800262 <temphumidity_t>
     ad8:	30 91 63 02 	lds	r19, 0x0263	; 0x800263 <temphumidity_t+0x1>
     adc:	dc 01       	movw	r26, r24
     ade:	cb 01       	movw	r24, r22
     ae0:	82 1b       	sub	r24, r18
     ae2:	93 0b       	sbc	r25, r19
     ae4:	a1 09       	sbc	r26, r1
     ae6:	b1 09       	sbc	r27, r1
     ae8:	89 3e       	cpi	r24, 0xE9	; 233
     aea:	93 40       	sbci	r25, 0x03	; 3
     aec:	a1 05       	cpc	r26, r1
     aee:	b1 05       	cpc	r27, r1
     af0:	78 f0       	brcs	.+30     	; 0xb10 <loop+0xde>
     af2:	c2 db       	rcall	.-2172   	; 0x278 <_Z23readTemptratureHumidityv>
     af4:	88 23       	and	r24, r24
     af6:	31 f0       	breq	.+12     	; 0xb04 <loop+0xd2>
     af8:	80 91 8e 02 	lds	r24, 0x028E	; 0x80028e <temperature>
     afc:	85 32       	cpi	r24, 0x25	; 37
     afe:	10 f4       	brcc	.+4      	; 0xb04 <loop+0xd2>
     b00:	10 92 53 02 	sts	0x0253, r1	; 0x800253 <fanspeed_v>
     b04:	0e 94 eb 14 	call	0x29d6	; 0x29d6 <millis>
     b08:	70 93 63 02 	sts	0x0263, r23	; 0x800263 <temphumidity_t+0x1>
     b0c:	60 93 62 02 	sts	0x0262, r22	; 0x800262 <temphumidity_t>
     b10:	0e 94 eb 14 	call	0x29d6	; 0x29d6 <millis>
     b14:	20 91 60 02 	lds	r18, 0x0260	; 0x800260 <light_t>
     b18:	30 91 61 02 	lds	r19, 0x0261	; 0x800261 <light_t+0x1>
     b1c:	dc 01       	movw	r26, r24
     b1e:	cb 01       	movw	r24, r22
     b20:	82 1b       	sub	r24, r18
     b22:	93 0b       	sbc	r25, r19
     b24:	a1 09       	sbc	r26, r1
     b26:	b1 09       	sbc	r27, r1
     b28:	89 3e       	cpi	r24, 0xE9	; 233
     b2a:	93 40       	sbci	r25, 0x03	; 3
     b2c:	a1 05       	cpc	r26, r1
     b2e:	b1 05       	cpc	r27, r1
     b30:	30 f0       	brcs	.+12     	; 0xb3e <loop+0x10c>
     b32:	0e 94 eb 14 	call	0x29d6	; 0x29d6 <millis>
     b36:	70 93 61 02 	sts	0x0261, r23	; 0x800261 <light_t+0x1>
     b3a:	60 93 60 02 	sts	0x0260, r22	; 0x800260 <light_t>
     b3e:	0e 94 eb 14 	call	0x29d6	; 0x29d6 <millis>
     b42:	20 91 5e 02 	lds	r18, 0x025E	; 0x80025e <pulse_t>
     b46:	30 91 5f 02 	lds	r19, 0x025F	; 0x80025f <pulse_t+0x1>
     b4a:	dc 01       	movw	r26, r24
     b4c:	cb 01       	movw	r24, r22
     b4e:	82 1b       	sub	r24, r18
     b50:	93 0b       	sbc	r25, r19
     b52:	a1 09       	sbc	r26, r1
     b54:	b1 09       	sbc	r27, r1
     b56:	89 3e       	cpi	r24, 0xE9	; 233
     b58:	93 40       	sbci	r25, 0x03	; 3
     b5a:	a1 05       	cpc	r26, r1
     b5c:	b1 05       	cpc	r27, r1
     b5e:	a8 f0       	brcs	.+42     	; 0xb8a <loop+0x158>
     b60:	60 e0       	ldi	r22, 0x00	; 0
     b62:	70 e0       	ldi	r23, 0x00	; 0
     b64:	84 e7       	ldi	r24, 0x74	; 116
     b66:	92 e0       	ldi	r25, 0x02	; 2
     b68:	1d d4       	rcall	.+2106   	; 0x13a4 <_ZN21PulseSensorPlayground17getBeatsPerMinuteEi>
     b6a:	80 93 51 02 	sts	0x0251, r24	; 0x800251 <pulse_v>
     b6e:	85 36       	cpi	r24, 0x65	; 101
     b70:	20 f0       	brcs	.+8      	; 0xb7a <loop+0x148>
     b72:	81 e0       	ldi	r24, 0x01	; 1
     b74:	80 93 3c 02 	sts	0x023C, r24	; 0x80023c <__data_end>
     b78:	02 c0       	rjmp	.+4      	; 0xb7e <loop+0x14c>
     b7a:	10 92 3c 02 	sts	0x023C, r1	; 0x80023c <__data_end>
     b7e:	0e 94 eb 14 	call	0x29d6	; 0x29d6 <millis>
     b82:	70 93 5f 02 	sts	0x025F, r23	; 0x80025f <pulse_t+0x1>
     b86:	60 93 5e 02 	sts	0x025E, r22	; 0x80025e <pulse_t>
     b8a:	0e 94 eb 14 	call	0x29d6	; 0x29d6 <millis>
     b8e:	20 91 5c 02 	lds	r18, 0x025C	; 0x80025c <weight_t>
     b92:	30 91 5d 02 	lds	r19, 0x025D	; 0x80025d <weight_t+0x1>
     b96:	dc 01       	movw	r26, r24
     b98:	cb 01       	movw	r24, r22
     b9a:	82 1b       	sub	r24, r18
     b9c:	93 0b       	sbc	r25, r19
     b9e:	a1 09       	sbc	r26, r1
     ba0:	b1 09       	sbc	r27, r1
     ba2:	89 3e       	cpi	r24, 0xE9	; 233
     ba4:	93 40       	sbci	r25, 0x03	; 3
     ba6:	a1 05       	cpc	r26, r1
     ba8:	b1 05       	cpc	r27, r1
     baa:	68 f0       	brcs	.+26     	; 0xbc6 <loop+0x194>
     bac:	8f e8       	ldi	r24, 0x8F	; 143
     bae:	92 e0       	ldi	r25, 0x02	; 2
     bb0:	31 d2       	rcall	.+1122   	; 0x1014 <_ZN5HX7119get_scaleEv>
     bb2:	0e 94 1b 10 	call	0x2036	; 0x2036 <__fixunssfsi>
     bb6:	60 93 50 02 	sts	0x0250, r22	; 0x800250 <weight_v>
     bba:	0e 94 eb 14 	call	0x29d6	; 0x29d6 <millis>
     bbe:	70 93 5d 02 	sts	0x025D, r23	; 0x80025d <weight_t+0x1>
     bc2:	60 93 5c 02 	sts	0x025C, r22	; 0x80025c <weight_t>
     bc6:	0e 94 eb 14 	call	0x29d6	; 0x29d6 <millis>
     bca:	20 91 5a 02 	lds	r18, 0x025A	; 0x80025a <oxygen_t>
     bce:	30 91 5b 02 	lds	r19, 0x025B	; 0x80025b <oxygen_t+0x1>
     bd2:	dc 01       	movw	r26, r24
     bd4:	cb 01       	movw	r24, r22
     bd6:	82 1b       	sub	r24, r18
     bd8:	93 0b       	sbc	r25, r19
     bda:	a1 09       	sbc	r26, r1
     bdc:	b1 09       	sbc	r27, r1
     bde:	89 3e       	cpi	r24, 0xE9	; 233
     be0:	93 40       	sbci	r25, 0x03	; 3
     be2:	a1 05       	cpc	r26, r1
     be4:	b1 05       	cpc	r27, r1
     be6:	98 f0       	brcs	.+38     	; 0xc0e <loop+0x1dc>
     be8:	71 de       	rcall	.-798    	; 0x8cc <_Z10oxygenReadv>
     bea:	0e 94 1b 10 	call	0x2036	; 0x2036 <__fixunssfsi>
     bee:	60 93 4f 02 	sts	0x024F, r22	; 0x80024f <oxygen_v>
     bf2:	66 31       	cpi	r22, 0x16	; 22
     bf4:	20 f0       	brcs	.+8      	; 0xbfe <loop+0x1cc>
     bf6:	81 e0       	ldi	r24, 0x01	; 1
     bf8:	80 93 3c 02 	sts	0x023C, r24	; 0x80023c <__data_end>
     bfc:	02 c0       	rjmp	.+4      	; 0xc02 <loop+0x1d0>
     bfe:	10 92 3c 02 	sts	0x023C, r1	; 0x80023c <__data_end>
     c02:	0e 94 eb 14 	call	0x29d6	; 0x29d6 <millis>
     c06:	70 93 5b 02 	sts	0x025B, r23	; 0x80025b <oxygen_t+0x1>
     c0a:	60 93 5a 02 	sts	0x025A, r22	; 0x80025a <oxygen_t>
     c0e:	0e 94 eb 14 	call	0x29d6	; 0x29d6 <millis>
     c12:	20 91 58 02 	lds	r18, 0x0258	; 0x800258 <carbondiaoxide_t>
     c16:	30 91 59 02 	lds	r19, 0x0259	; 0x800259 <carbondiaoxide_t+0x1>
     c1a:	dc 01       	movw	r26, r24
     c1c:	cb 01       	movw	r24, r22
     c1e:	82 1b       	sub	r24, r18
     c20:	93 0b       	sbc	r25, r19
     c22:	a1 09       	sbc	r26, r1
     c24:	b1 09       	sbc	r27, r1
     c26:	89 3e       	cpi	r24, 0xE9	; 233
     c28:	93 40       	sbci	r25, 0x03	; 3
     c2a:	a1 05       	cpc	r26, r1
     c2c:	b1 05       	cpc	r27, r1
     c2e:	98 f0       	brcs	.+38     	; 0xc56 <loop+0x224>
     c30:	68 de       	rcall	.-816    	; 0x902 <_Z18carbondiaoxideReadv>
     c32:	0e 94 1b 10 	call	0x2036	; 0x2036 <__fixunssfsi>
     c36:	60 93 4e 02 	sts	0x024E, r22	; 0x80024e <co2_v>
     c3a:	66 31       	cpi	r22, 0x16	; 22
     c3c:	20 f0       	brcs	.+8      	; 0xc46 <loop+0x214>
     c3e:	81 e0       	ldi	r24, 0x01	; 1
     c40:	80 93 3c 02 	sts	0x023C, r24	; 0x80023c <__data_end>
     c44:	02 c0       	rjmp	.+4      	; 0xc4a <loop+0x218>
     c46:	10 92 3c 02 	sts	0x023C, r1	; 0x80023c <__data_end>
     c4a:	0e 94 eb 14 	call	0x29d6	; 0x29d6 <millis>
     c4e:	70 93 59 02 	sts	0x0259, r23	; 0x800259 <carbondiaoxide_t+0x1>
     c52:	60 93 58 02 	sts	0x0258, r22	; 0x800258 <carbondiaoxide_t>
     c56:	0e 94 eb 14 	call	0x29d6	; 0x29d6 <millis>
     c5a:	20 91 54 02 	lds	r18, 0x0254	; 0x800254 <alarm_t>
     c5e:	30 91 55 02 	lds	r19, 0x0255	; 0x800255 <alarm_t+0x1>
     c62:	dc 01       	movw	r26, r24
     c64:	cb 01       	movw	r24, r22
     c66:	82 1b       	sub	r24, r18
     c68:	93 0b       	sbc	r25, r19
     c6a:	a1 09       	sbc	r26, r1
     c6c:	b1 09       	sbc	r27, r1
     c6e:	89 3e       	cpi	r24, 0xE9	; 233
     c70:	93 40       	sbci	r25, 0x03	; 3
     c72:	a1 05       	cpc	r26, r1
     c74:	b1 05       	cpc	r27, r1
     c76:	20 f0       	brcs	.+8      	; 0xc80 <loop+0x24e>
     c78:	80 91 3c 02 	lds	r24, 0x023C	; 0x80023c <__data_end>
     c7c:	81 11       	cpse	r24, r1
     c7e:	ec c0       	rjmp	.+472    	; 0xe58 <loop+0x426>
     c80:	0e 94 eb 14 	call	0x29d6	; 0x29d6 <millis>
     c84:	20 91 56 02 	lds	r18, 0x0256	; 0x800256 <display_t>
     c88:	30 91 57 02 	lds	r19, 0x0257	; 0x800257 <display_t+0x1>
     c8c:	dc 01       	movw	r26, r24
     c8e:	cb 01       	movw	r24, r22
     c90:	82 1b       	sub	r24, r18
     c92:	93 0b       	sbc	r25, r19
     c94:	a1 09       	sbc	r26, r1
     c96:	b1 09       	sbc	r27, r1
     c98:	89 3e       	cpi	r24, 0xE9	; 233
     c9a:	93 40       	sbci	r25, 0x03	; 3
     c9c:	a1 05       	cpc	r26, r1
     c9e:	b1 05       	cpc	r27, r1
     ca0:	08 f4       	brcc	.+2      	; 0xca4 <loop+0x272>
     ca2:	e1 c0       	rjmp	.+450    	; 0xe66 <loop+0x434>
     ca4:	80 91 4d 02 	lds	r24, 0x024D	; 0x80024d <display_counter>
     ca8:	83 30       	cpi	r24, 0x03	; 3
     caa:	08 f0       	brcs	.+2      	; 0xcae <loop+0x27c>
     cac:	80 e0       	ldi	r24, 0x00	; 0
     cae:	80 93 4d 02 	sts	0x024D, r24	; 0x80024d <display_counter>
     cb2:	88 e6       	ldi	r24, 0x68	; 104
     cb4:	92 e0       	ldi	r25, 0x02	; 2
     cb6:	12 d2       	rcall	.+1060   	; 0x10dc <_ZN17LiquidCrystal_I2C5clearEv>
     cb8:	80 91 4d 02 	lds	r24, 0x024D	; 0x80024d <display_counter>
     cbc:	81 30       	cpi	r24, 0x01	; 1
     cbe:	09 f4       	brne	.+2      	; 0xcc2 <loop+0x290>
     cc0:	88 c0       	rjmp	.+272    	; 0xdd2 <loop+0x3a0>
     cc2:	08 f4       	brcc	.+2      	; 0xcc6 <loop+0x294>
     cc4:	40 c0       	rjmp	.+128    	; 0xd46 <loop+0x314>
     cc6:	82 30       	cpi	r24, 0x02	; 2
     cc8:	09 f0       	breq	.+2      	; 0xccc <loop+0x29a>
     cca:	bf c0       	rjmp	.+382    	; 0xe4a <loop+0x418>
     ccc:	cd e3       	ldi	r28, 0x3D	; 61
     cce:	d2 e0       	ldi	r29, 0x02	; 2
     cd0:	80 e1       	ldi	r24, 0x10	; 16
     cd2:	f8 2e       	mov	r15, r24
     cd4:	fe 01       	movw	r30, r28
     cd6:	2f 2d       	mov	r18, r15
     cd8:	11 92       	st	Z+, r1
     cda:	2a 95       	dec	r18
     cdc:	e9 f7       	brne	.-6      	; 0xcd8 <loop+0x2a6>
     cde:	01 ee       	ldi	r16, 0xE1	; 225
     ce0:	11 e0       	ldi	r17, 0x01	; 1
     ce2:	1f 93       	push	r17
     ce4:	0f 93       	push	r16
     ce6:	df 93       	push	r29
     ce8:	cf 93       	push	r28
     cea:	0e 94 34 19 	call	0x3268	; 0x3268 <sprintf>
     cee:	40 e0       	ldi	r20, 0x00	; 0
     cf0:	60 e0       	ldi	r22, 0x00	; 0
     cf2:	88 e6       	ldi	r24, 0x68	; 104
     cf4:	92 e0       	ldi	r25, 0x02	; 2
     cf6:	fe d1       	rcall	.+1020   	; 0x10f4 <_ZN17LiquidCrystal_I2C9setCursorEhh>
     cf8:	be 01       	movw	r22, r28
     cfa:	88 e6       	ldi	r24, 0x68	; 104
     cfc:	92 e0       	ldi	r25, 0x02	; 2
     cfe:	0e 94 a0 14 	call	0x2940	; 0x2940 <_ZN5Print5printEPKc>
     d02:	fe 01       	movw	r30, r28
     d04:	11 92       	st	Z+, r1
     d06:	fa 94       	dec	r15
     d08:	e9 f7       	brne	.-6      	; 0xd04 <loop+0x2d2>
     d0a:	1f 93       	push	r17
     d0c:	0f 93       	push	r16
     d0e:	df 93       	push	r29
     d10:	cf 93       	push	r28
     d12:	0e 94 34 19 	call	0x3268	; 0x3268 <sprintf>
     d16:	41 e0       	ldi	r20, 0x01	; 1
     d18:	60 e0       	ldi	r22, 0x00	; 0
     d1a:	88 e6       	ldi	r24, 0x68	; 104
     d1c:	92 e0       	ldi	r25, 0x02	; 2
     d1e:	ea d1       	rcall	.+980    	; 0x10f4 <_ZN17LiquidCrystal_I2C9setCursorEhh>
     d20:	be 01       	movw	r22, r28
     d22:	88 e6       	ldi	r24, 0x68	; 104
     d24:	92 e0       	ldi	r25, 0x02	; 2
     d26:	0e 94 a0 14 	call	0x2940	; 0x2940 <_ZN5Print5printEPKc>
     d2a:	80 91 4d 02 	lds	r24, 0x024D	; 0x80024d <display_counter>
     d2e:	8f 5f       	subi	r24, 0xFF	; 255
     d30:	80 93 4d 02 	sts	0x024D, r24	; 0x80024d <display_counter>
     d34:	8d b7       	in	r24, 0x3d	; 61
     d36:	9e b7       	in	r25, 0x3e	; 62
     d38:	08 96       	adiw	r24, 0x08	; 8
     d3a:	0f b6       	in	r0, 0x3f	; 63
     d3c:	f8 94       	cli
     d3e:	9e bf       	out	0x3e, r25	; 62
     d40:	0f be       	out	0x3f, r0	; 63
     d42:	8d bf       	out	0x3d, r24	; 61
     d44:	82 c0       	rjmp	.+260    	; 0xe4a <loop+0x418>
     d46:	cd e3       	ldi	r28, 0x3D	; 61
     d48:	d2 e0       	ldi	r29, 0x02	; 2
     d4a:	10 e1       	ldi	r17, 0x10	; 16
     d4c:	fe 01       	movw	r30, r28
     d4e:	21 2f       	mov	r18, r17
     d50:	11 92       	st	Z+, r1
     d52:	2a 95       	dec	r18
     d54:	e9 f7       	brne	.-6      	; 0xd50 <loop+0x31e>
     d56:	80 91 51 02 	lds	r24, 0x0251	; 0x800251 <pulse_v>
     d5a:	1f 92       	push	r1
     d5c:	8f 93       	push	r24
     d5e:	83 ec       	ldi	r24, 0xC3	; 195
     d60:	91 e0       	ldi	r25, 0x01	; 1
     d62:	9f 93       	push	r25
     d64:	8f 93       	push	r24
     d66:	df 93       	push	r29
     d68:	cf 93       	push	r28
     d6a:	0e 94 34 19 	call	0x3268	; 0x3268 <sprintf>
     d6e:	40 e0       	ldi	r20, 0x00	; 0
     d70:	60 e0       	ldi	r22, 0x00	; 0
     d72:	88 e6       	ldi	r24, 0x68	; 104
     d74:	92 e0       	ldi	r25, 0x02	; 2
     d76:	be d1       	rcall	.+892    	; 0x10f4 <_ZN17LiquidCrystal_I2C9setCursorEhh>
     d78:	be 01       	movw	r22, r28
     d7a:	88 e6       	ldi	r24, 0x68	; 104
     d7c:	92 e0       	ldi	r25, 0x02	; 2
     d7e:	0e 94 a0 14 	call	0x2940	; 0x2940 <_ZN5Print5printEPKc>
     d82:	fe 01       	movw	r30, r28
     d84:	11 92       	st	Z+, r1
     d86:	1a 95       	dec	r17
     d88:	e9 f7       	brne	.-6      	; 0xd84 <loop+0x352>
     d8a:	80 91 50 02 	lds	r24, 0x0250	; 0x800250 <weight_v>
     d8e:	1f 92       	push	r1
     d90:	8f 93       	push	r24
     d92:	84 ed       	ldi	r24, 0xD4	; 212
     d94:	91 e0       	ldi	r25, 0x01	; 1
     d96:	9f 93       	push	r25
     d98:	8f 93       	push	r24
     d9a:	df 93       	push	r29
     d9c:	cf 93       	push	r28
     d9e:	0e 94 34 19 	call	0x3268	; 0x3268 <sprintf>
     da2:	41 e0       	ldi	r20, 0x01	; 1
     da4:	60 e0       	ldi	r22, 0x00	; 0
     da6:	88 e6       	ldi	r24, 0x68	; 104
     da8:	92 e0       	ldi	r25, 0x02	; 2
     daa:	a4 d1       	rcall	.+840    	; 0x10f4 <_ZN17LiquidCrystal_I2C9setCursorEhh>
     dac:	be 01       	movw	r22, r28
     dae:	88 e6       	ldi	r24, 0x68	; 104
     db0:	92 e0       	ldi	r25, 0x02	; 2
     db2:	0e 94 a0 14 	call	0x2940	; 0x2940 <_ZN5Print5printEPKc>
     db6:	80 91 4d 02 	lds	r24, 0x024D	; 0x80024d <display_counter>
     dba:	8f 5f       	subi	r24, 0xFF	; 255
     dbc:	80 93 4d 02 	sts	0x024D, r24	; 0x80024d <display_counter>
     dc0:	8d b7       	in	r24, 0x3d	; 61
     dc2:	9e b7       	in	r25, 0x3e	; 62
     dc4:	0c 96       	adiw	r24, 0x0c	; 12
     dc6:	0f b6       	in	r0, 0x3f	; 63
     dc8:	f8 94       	cli
     dca:	9e bf       	out	0x3e, r25	; 62
     dcc:	0f be       	out	0x3f, r0	; 63
     dce:	8d bf       	out	0x3d, r24	; 61
     dd0:	3c c0       	rjmp	.+120    	; 0xe4a <loop+0x418>
     dd2:	cd e3       	ldi	r28, 0x3D	; 61
     dd4:	d2 e0       	ldi	r29, 0x02	; 2
     dd6:	90 e1       	ldi	r25, 0x10	; 16
     dd8:	f9 2e       	mov	r15, r25
     dda:	fe 01       	movw	r30, r28
     ddc:	2f 2d       	mov	r18, r15
     dde:	11 92       	st	Z+, r1
     de0:	2a 95       	dec	r18
     de2:	e9 f7       	brne	.-6      	; 0xdde <loop+0x3ac>
     de4:	01 ee       	ldi	r16, 0xE1	; 225
     de6:	11 e0       	ldi	r17, 0x01	; 1
     de8:	1f 93       	push	r17
     dea:	0f 93       	push	r16
     dec:	df 93       	push	r29
     dee:	cf 93       	push	r28
     df0:	0e 94 34 19 	call	0x3268	; 0x3268 <sprintf>
     df4:	40 e0       	ldi	r20, 0x00	; 0
     df6:	60 e0       	ldi	r22, 0x00	; 0
     df8:	88 e6       	ldi	r24, 0x68	; 104
     dfa:	92 e0       	ldi	r25, 0x02	; 2
     dfc:	7b d1       	rcall	.+758    	; 0x10f4 <_ZN17LiquidCrystal_I2C9setCursorEhh>
     dfe:	be 01       	movw	r22, r28
     e00:	88 e6       	ldi	r24, 0x68	; 104
     e02:	92 e0       	ldi	r25, 0x02	; 2
     e04:	0e 94 a0 14 	call	0x2940	; 0x2940 <_ZN5Print5printEPKc>
     e08:	fe 01       	movw	r30, r28
     e0a:	11 92       	st	Z+, r1
     e0c:	fa 94       	dec	r15
     e0e:	e9 f7       	brne	.-6      	; 0xe0a <loop+0x3d8>
     e10:	1f 93       	push	r17
     e12:	0f 93       	push	r16
     e14:	df 93       	push	r29
     e16:	cf 93       	push	r28
     e18:	0e 94 34 19 	call	0x3268	; 0x3268 <sprintf>
     e1c:	41 e0       	ldi	r20, 0x01	; 1
     e1e:	60 e0       	ldi	r22, 0x00	; 0
     e20:	88 e6       	ldi	r24, 0x68	; 104
     e22:	92 e0       	ldi	r25, 0x02	; 2
     e24:	67 d1       	rcall	.+718    	; 0x10f4 <_ZN17LiquidCrystal_I2C9setCursorEhh>
     e26:	be 01       	movw	r22, r28
     e28:	88 e6       	ldi	r24, 0x68	; 104
     e2a:	92 e0       	ldi	r25, 0x02	; 2
     e2c:	0e 94 a0 14 	call	0x2940	; 0x2940 <_ZN5Print5printEPKc>
     e30:	80 91 4d 02 	lds	r24, 0x024D	; 0x80024d <display_counter>
     e34:	8f 5f       	subi	r24, 0xFF	; 255
     e36:	80 93 4d 02 	sts	0x024D, r24	; 0x80024d <display_counter>
     e3a:	8d b7       	in	r24, 0x3d	; 61
     e3c:	9e b7       	in	r25, 0x3e	; 62
     e3e:	08 96       	adiw	r24, 0x08	; 8
     e40:	0f b6       	in	r0, 0x3f	; 63
     e42:	f8 94       	cli
     e44:	9e bf       	out	0x3e, r25	; 62
     e46:	0f be       	out	0x3f, r0	; 63
     e48:	8d bf       	out	0x3d, r24	; 61
     e4a:	0e 94 eb 14 	call	0x29d6	; 0x29d6 <millis>
     e4e:	70 93 57 02 	sts	0x0257, r23	; 0x800257 <display_t+0x1>
     e52:	60 93 56 02 	sts	0x0256, r22	; 0x800256 <display_t>
     e56:	07 c0       	rjmp	.+14     	; 0xe66 <loop+0x434>
     e58:	0e 94 eb 14 	call	0x29d6	; 0x29d6 <millis>
     e5c:	70 93 55 02 	sts	0x0255, r23	; 0x800255 <alarm_t+0x1>
     e60:	60 93 54 02 	sts	0x0254, r22	; 0x800254 <alarm_t>
     e64:	0d cf       	rjmp	.-486    	; 0xc80 <loop+0x24e>
     e66:	df 91       	pop	r29
     e68:	cf 91       	pop	r28
     e6a:	1f 91       	pop	r17
     e6c:	0f 91       	pop	r16
     e6e:	ff 90       	pop	r15
     e70:	08 95       	ret

00000e72 <_GLOBAL__sub_I__ZN21PulseSensorPlayground15UsingInterruptsE>:
     e72:	8f e8       	ldi	r24, 0x8F	; 143
     e74:	92 e0       	ldi	r25, 0x02	; 2
     e76:	11 d0       	rcall	.+34     	; 0xe9a <_ZN5HX711C1Ev>
     e78:	61 e0       	ldi	r22, 0x01	; 1
     e7a:	70 e0       	ldi	r23, 0x00	; 0
     e7c:	84 e7       	ldi	r24, 0x74	; 116
     e7e:	92 e0       	ldi	r25, 0x02	; 2
     e80:	cb d1       	rcall	.+918    	; 0x1218 <_ZN21PulseSensorPlaygroundC1Ei>
     e82:	22 e0       	ldi	r18, 0x02	; 2
     e84:	40 e1       	ldi	r20, 0x10	; 16
     e86:	67 e2       	ldi	r22, 0x27	; 39
     e88:	88 e6       	ldi	r24, 0x68	; 104
     e8a:	92 e0       	ldi	r25, 0x02	; 2
     e8c:	c9 c0       	rjmp	.+402    	; 0x1020 <_ZN17LiquidCrystal_I2CC1Ehhh>

00000e8e <_GLOBAL__sub_D__ZN21PulseSensorPlayground15UsingInterruptsE>:
const int LM35Pin = 0;
const int MQ131Pin = 0;
const int MQ135Pin = 0;

SimpleDHT11 myDHT;
HX711 scale;
     e8e:	8f e8       	ldi	r24, 0x8F	; 143
     e90:	92 e0       	ldi	r25, 0x02	; 2
     e92:	00 c0       	rjmp	.+0      	; 0xe94 <_ZN5HX711D1Ev>

00000e94 <_ZN5HX711D1Ev>:
	double sum = read_average(times);
	set_offset(sum);
}

void HX711::set_scale(float scale) {
	SCALE = scale;
     e94:	08 95       	ret

00000e96 <_ZN5HX711D0Ev>:
     e96:	0c 94 3c 14 	jmp	0x2878	; 0x2878 <_ZdlPv>

00000e9a <_ZN5HX711C1Ev>:
     e9a:	fc 01       	movw	r30, r24
     e9c:	8f ef       	ldi	r24, 0xFF	; 255
     e9e:	91 e0       	ldi	r25, 0x01	; 1
     ea0:	91 83       	std	Z+1, r25	; 0x01
     ea2:	80 83       	st	Z, r24
     ea4:	15 82       	std	Z+5, r1	; 0x05
     ea6:	16 82       	std	Z+6, r1	; 0x06
     ea8:	17 82       	std	Z+7, r1	; 0x07
     eaa:	10 86       	std	Z+8, r1	; 0x08
     eac:	80 e0       	ldi	r24, 0x00	; 0
     eae:	90 e0       	ldi	r25, 0x00	; 0
     eb0:	a0 e8       	ldi	r26, 0x80	; 128
     eb2:	bf e3       	ldi	r27, 0x3F	; 63
     eb4:	81 87       	std	Z+9, r24	; 0x09
     eb6:	92 87       	std	Z+10, r25	; 0x0a
     eb8:	a3 87       	std	Z+11, r26	; 0x0b
     eba:	b4 87       	std	Z+12, r27	; 0x0c
     ebc:	08 95       	ret

00000ebe <_ZN5HX7118is_readyEv>:
     ebe:	fc 01       	movw	r30, r24
     ec0:	83 81       	ldd	r24, Z+3	; 0x03
     ec2:	0e 94 d2 16 	call	0x2da4	; 0x2da4 <digitalRead>
     ec6:	21 e0       	ldi	r18, 0x01	; 1
     ec8:	89 2b       	or	r24, r25
     eca:	09 f0       	breq	.+2      	; 0xece <_ZN5HX7118is_readyEv+0x10>
     ecc:	20 e0       	ldi	r18, 0x00	; 0
     ece:	82 2f       	mov	r24, r18
     ed0:	08 95       	ret

00000ed2 <_ZN5HX71110wait_readyEm>:
     ed2:	cf 92       	push	r12
     ed4:	df 92       	push	r13
     ed6:	ef 92       	push	r14
     ed8:	ff 92       	push	r15
     eda:	cf 93       	push	r28
     edc:	df 93       	push	r29
     ede:	ec 01       	movw	r28, r24
     ee0:	6a 01       	movw	r12, r20
     ee2:	7b 01       	movw	r14, r22
     ee4:	ce 01       	movw	r24, r28
     ee6:	eb df       	rcall	.-42     	; 0xebe <_ZN5HX7118is_readyEv>
     ee8:	81 11       	cpse	r24, r1
     eea:	05 c0       	rjmp	.+10     	; 0xef6 <_ZN5HX71110wait_readyEm+0x24>
     eec:	c7 01       	movw	r24, r14
     eee:	b6 01       	movw	r22, r12
     ef0:	0e 94 1c 15 	call	0x2a38	; 0x2a38 <delay>
     ef4:	f7 cf       	rjmp	.-18     	; 0xee4 <_ZN5HX71110wait_readyEm+0x12>
     ef6:	df 91       	pop	r29
     ef8:	cf 91       	pop	r28
     efa:	ff 90       	pop	r15
     efc:	ef 90       	pop	r14
     efe:	df 90       	pop	r13
     f00:	cf 90       	pop	r12
     f02:	08 95       	ret

00000f04 <_ZN5HX7114readEv>:
     f04:	cf 92       	push	r12
     f06:	df 92       	push	r13
     f08:	ef 92       	push	r14
     f0a:	ff 92       	push	r15
     f0c:	0f 93       	push	r16
     f0e:	1f 93       	push	r17
     f10:	cf 93       	push	r28
     f12:	df 93       	push	r29
     f14:	ec 01       	movw	r28, r24
     f16:	40 e0       	ldi	r20, 0x00	; 0
     f18:	50 e0       	ldi	r21, 0x00	; 0
     f1a:	ba 01       	movw	r22, r20
     f1c:	da df       	rcall	.-76     	; 0xed2 <_ZN5HX71110wait_readyEm>
     f1e:	ef b6       	in	r14, 0x3f	; 63
     f20:	f8 94       	cli
     f22:	41 e0       	ldi	r20, 0x01	; 1
     f24:	6a 81       	ldd	r22, Y+2	; 0x02
     f26:	8b 81       	ldd	r24, Y+3	; 0x03
     f28:	0e 94 fa 16 	call	0x2df4	; 0x2df4 <shiftIn>
     f2c:	08 2f       	mov	r16, r24
     f2e:	41 e0       	ldi	r20, 0x01	; 1
     f30:	6a 81       	ldd	r22, Y+2	; 0x02
     f32:	8b 81       	ldd	r24, Y+3	; 0x03
     f34:	0e 94 fa 16 	call	0x2df4	; 0x2df4 <shiftIn>
     f38:	18 2f       	mov	r17, r24
     f3a:	41 e0       	ldi	r20, 0x01	; 1
     f3c:	6a 81       	ldd	r22, Y+2	; 0x02
     f3e:	8b 81       	ldd	r24, Y+3	; 0x03
     f40:	0e 94 fa 16 	call	0x2df4	; 0x2df4 <shiftIn>
     f44:	f8 2e       	mov	r15, r24
     f46:	c1 2c       	mov	r12, r1
     f48:	d1 2c       	mov	r13, r1
     f4a:	8c 81       	ldd	r24, Y+4	; 0x04
     f4c:	90 e0       	ldi	r25, 0x00	; 0
     f4e:	c8 16       	cp	r12, r24
     f50:	d9 06       	cpc	r13, r25
     f52:	60 f4       	brcc	.+24     	; 0xf6c <_ZN5HX7114readEv+0x68>
     f54:	61 e0       	ldi	r22, 0x01	; 1
     f56:	8a 81       	ldd	r24, Y+2	; 0x02
     f58:	0e 94 a4 16 	call	0x2d48	; 0x2d48 <digitalWrite>
     f5c:	60 e0       	ldi	r22, 0x00	; 0
     f5e:	8a 81       	ldd	r24, Y+2	; 0x02
     f60:	0e 94 a4 16 	call	0x2d48	; 0x2d48 <digitalWrite>
     f64:	2f ef       	ldi	r18, 0xFF	; 255
     f66:	c2 1a       	sub	r12, r18
     f68:	d2 0a       	sbc	r13, r18
     f6a:	ef cf       	rjmp	.-34     	; 0xf4a <_ZN5HX7114readEv+0x46>
     f6c:	ef be       	out	0x3f, r14	; 63
     f6e:	81 2f       	mov	r24, r17
     f70:	90 e0       	ldi	r25, 0x00	; 0
     f72:	a0 e0       	ldi	r26, 0x00	; 0
     f74:	b0 e0       	ldi	r27, 0x00	; 0
     f76:	ba 2f       	mov	r27, r26
     f78:	a9 2f       	mov	r26, r25
     f7a:	98 2f       	mov	r25, r24
     f7c:	88 27       	eor	r24, r24
     f7e:	a0 2b       	or	r26, r16
     f80:	ac 01       	movw	r20, r24
     f82:	bd 01       	movw	r22, r26
     f84:	4f 29       	or	r20, r15
     f86:	80 2f       	mov	r24, r16
     f88:	88 0f       	add	r24, r24
     f8a:	88 0b       	sbc	r24, r24
     f8c:	90 e0       	ldi	r25, 0x00	; 0
     f8e:	a0 e0       	ldi	r26, 0x00	; 0
     f90:	b0 e0       	ldi	r27, 0x00	; 0
     f92:	b8 2f       	mov	r27, r24
     f94:	aa 27       	eor	r26, r26
     f96:	99 27       	eor	r25, r25
     f98:	88 27       	eor	r24, r24
     f9a:	8a 01       	movw	r16, r20
     f9c:	9b 01       	movw	r18, r22
     f9e:	08 2b       	or	r16, r24
     fa0:	19 2b       	or	r17, r25
     fa2:	2a 2b       	or	r18, r26
     fa4:	3b 2b       	or	r19, r27
     fa6:	c9 01       	movw	r24, r18
     fa8:	b8 01       	movw	r22, r16
     faa:	df 91       	pop	r29
     fac:	cf 91       	pop	r28
     fae:	1f 91       	pop	r17
     fb0:	0f 91       	pop	r16
     fb2:	ff 90       	pop	r15
     fb4:	ef 90       	pop	r14
     fb6:	df 90       	pop	r13
     fb8:	cf 90       	pop	r12
     fba:	08 95       	ret

00000fbc <_ZN5HX7118set_gainEh>:
     fbc:	cf 93       	push	r28
     fbe:	df 93       	push	r29
     fc0:	ec 01       	movw	r28, r24
     fc2:	60 34       	cpi	r22, 0x40	; 64
     fc4:	41 f0       	breq	.+16     	; 0xfd6 <_ZN5HX7118set_gainEh+0x1a>
     fc6:	60 38       	cpi	r22, 0x80	; 128
     fc8:	21 f0       	breq	.+8      	; 0xfd2 <_ZN5HX7118set_gainEh+0x16>
     fca:	60 32       	cpi	r22, 0x20	; 32
     fcc:	31 f4       	brne	.+12     	; 0xfda <_ZN5HX7118set_gainEh+0x1e>
     fce:	82 e0       	ldi	r24, 0x02	; 2
     fd0:	03 c0       	rjmp	.+6      	; 0xfd8 <_ZN5HX7118set_gainEh+0x1c>
     fd2:	81 e0       	ldi	r24, 0x01	; 1
     fd4:	01 c0       	rjmp	.+2      	; 0xfd8 <_ZN5HX7118set_gainEh+0x1c>
     fd6:	83 e0       	ldi	r24, 0x03	; 3
     fd8:	8c 83       	std	Y+4, r24	; 0x04
     fda:	60 e0       	ldi	r22, 0x00	; 0
     fdc:	8a 81       	ldd	r24, Y+2	; 0x02
     fde:	0e 94 a4 16 	call	0x2d48	; 0x2d48 <digitalWrite>
     fe2:	ce 01       	movw	r24, r28
     fe4:	df 91       	pop	r29
     fe6:	cf 91       	pop	r28
     fe8:	8d cf       	rjmp	.-230    	; 0xf04 <_ZN5HX7114readEv>

00000fea <_ZN5HX7115beginEhhh>:
     fea:	1f 93       	push	r17
     fec:	cf 93       	push	r28
     fee:	df 93       	push	r29
     ff0:	ec 01       	movw	r28, r24
     ff2:	84 2f       	mov	r24, r20
     ff4:	12 2f       	mov	r17, r18
     ff6:	4a 83       	std	Y+2, r20	; 0x02
     ff8:	6b 83       	std	Y+3, r22	; 0x03
     ffa:	61 e0       	ldi	r22, 0x01	; 1
     ffc:	0e 94 68 16 	call	0x2cd0	; 0x2cd0 <pinMode>
    1000:	60 e0       	ldi	r22, 0x00	; 0
    1002:	8b 81       	ldd	r24, Y+3	; 0x03
    1004:	0e 94 68 16 	call	0x2cd0	; 0x2cd0 <pinMode>
    1008:	61 2f       	mov	r22, r17
    100a:	ce 01       	movw	r24, r28
    100c:	df 91       	pop	r29
    100e:	cf 91       	pop	r28
    1010:	1f 91       	pop	r17
    1012:	d4 cf       	rjmp	.-88     	; 0xfbc <_ZN5HX7118set_gainEh>

00001014 <_ZN5HX7119get_scaleEv>:
}

float HX711::get_scale() {
	return SCALE;
    1014:	fc 01       	movw	r30, r24
    1016:	61 85       	ldd	r22, Z+9	; 0x09
    1018:	72 85       	ldd	r23, Z+10	; 0x0a
    101a:	83 85       	ldd	r24, Z+11	; 0x0b
    101c:	94 85       	ldd	r25, Z+12	; 0x0c
}
    101e:	08 95       	ret

00001020 <_ZN17LiquidCrystal_I2CC1Ehhh>:
void LiquidCrystal_I2C::blink_off(){
	noBlink();
}

void LiquidCrystal_I2C::load_custom_character(uint8_t char_num, uint8_t *rows){
		createChar(char_num, rows);
    1020:	fc 01       	movw	r30, r24
    1022:	13 82       	std	Z+3, r1	; 0x03
    1024:	12 82       	std	Z+2, r1	; 0x02
    1026:	87 e0       	ldi	r24, 0x07	; 7
    1028:	92 e0       	ldi	r25, 0x02	; 2
    102a:	91 83       	std	Z+1, r25	; 0x01
    102c:	80 83       	st	Z, r24
    102e:	64 83       	std	Z+4, r22	; 0x04
    1030:	41 87       	std	Z+9, r20	; 0x09
    1032:	22 87       	std	Z+10, r18	; 0x0a
    1034:	13 86       	std	Z+11, r1	; 0x0b
    1036:	08 95       	ret

00001038 <_ZN17LiquidCrystal_I2C13expanderWriteEh>:
    1038:	1f 93       	push	r17
    103a:	cf 93       	push	r28
    103c:	df 93       	push	r29
    103e:	ec 01       	movw	r28, r24
    1040:	16 2f       	mov	r17, r22
    1042:	6c 81       	ldd	r22, Y+4	; 0x04
    1044:	8c e0       	ldi	r24, 0x0C	; 12
    1046:	93 e0       	ldi	r25, 0x03	; 3
    1048:	03 d7       	rcall	.+3590   	; 0x1e50 <_ZN7TwoWire17beginTransmissionEh>
    104a:	6b 85       	ldd	r22, Y+11	; 0x0b
    104c:	61 2b       	or	r22, r17
    104e:	8c e0       	ldi	r24, 0x0C	; 12
    1050:	93 e0       	ldi	r25, 0x03	; 3
    1052:	b7 d6       	rcall	.+3438   	; 0x1dc2 <_ZN7TwoWire5writeEh>
    1054:	8c e0       	ldi	r24, 0x0C	; 12
    1056:	93 e0       	ldi	r25, 0x03	; 3
    1058:	df 91       	pop	r29
    105a:	cf 91       	pop	r28
    105c:	1f 91       	pop	r17
    105e:	14 c7       	rjmp	.+3624   	; 0x1e88 <_ZN7TwoWire15endTransmissionEv>

00001060 <_ZN17LiquidCrystal_I2C9backlightEv>:
    1060:	28 e0       	ldi	r18, 0x08	; 8
    1062:	fc 01       	movw	r30, r24
    1064:	23 87       	std	Z+11, r18	; 0x0b
    1066:	60 e0       	ldi	r22, 0x00	; 0
    1068:	e7 cf       	rjmp	.-50     	; 0x1038 <_ZN17LiquidCrystal_I2C13expanderWriteEh>

0000106a <_ZN17LiquidCrystal_I2C11pulseEnableEh>:
    106a:	0f 93       	push	r16
    106c:	1f 93       	push	r17
    106e:	cf 93       	push	r28
    1070:	8c 01       	movw	r16, r24
    1072:	c6 2f       	mov	r28, r22
    1074:	64 60       	ori	r22, 0x04	; 4
    1076:	e0 df       	rcall	.-64     	; 0x1038 <_ZN17LiquidCrystal_I2C13expanderWriteEh>
    1078:	81 e0       	ldi	r24, 0x01	; 1
    107a:	90 e0       	ldi	r25, 0x00	; 0
    107c:	0e 94 55 15 	call	0x2aaa	; 0x2aaa <delayMicroseconds>
    1080:	6c 2f       	mov	r22, r28
    1082:	6b 7f       	andi	r22, 0xFB	; 251
    1084:	c8 01       	movw	r24, r16
    1086:	d8 df       	rcall	.-80     	; 0x1038 <_ZN17LiquidCrystal_I2C13expanderWriteEh>
    1088:	82 e3       	ldi	r24, 0x32	; 50
    108a:	90 e0       	ldi	r25, 0x00	; 0
    108c:	cf 91       	pop	r28
    108e:	1f 91       	pop	r17
    1090:	0f 91       	pop	r16
    1092:	0c 94 55 15 	jmp	0x2aaa	; 0x2aaa <delayMicroseconds>

00001096 <_ZN17LiquidCrystal_I2C10write4bitsEh>:
    1096:	1f 93       	push	r17
    1098:	cf 93       	push	r28
    109a:	df 93       	push	r29
    109c:	ec 01       	movw	r28, r24
    109e:	16 2f       	mov	r17, r22
    10a0:	cb df       	rcall	.-106    	; 0x1038 <_ZN17LiquidCrystal_I2C13expanderWriteEh>
    10a2:	61 2f       	mov	r22, r17
    10a4:	ce 01       	movw	r24, r28
    10a6:	df 91       	pop	r29
    10a8:	cf 91       	pop	r28
    10aa:	1f 91       	pop	r17
    10ac:	de cf       	rjmp	.-68     	; 0x106a <_ZN17LiquidCrystal_I2C11pulseEnableEh>

000010ae <_ZN17LiquidCrystal_I2C4sendEhh>:
    10ae:	0f 93       	push	r16
    10b0:	1f 93       	push	r17
    10b2:	cf 93       	push	r28
    10b4:	df 93       	push	r29
    10b6:	8c 01       	movw	r16, r24
    10b8:	c6 2f       	mov	r28, r22
    10ba:	d4 2f       	mov	r29, r20
    10bc:	60 7f       	andi	r22, 0xF0	; 240
    10be:	64 2b       	or	r22, r20
    10c0:	ea df       	rcall	.-44     	; 0x1096 <_ZN17LiquidCrystal_I2C10write4bitsEh>
    10c2:	80 e1       	ldi	r24, 0x10	; 16
    10c4:	c8 9f       	mul	r28, r24
    10c6:	b0 01       	movw	r22, r0
    10c8:	11 24       	eor	r1, r1
    10ca:	6d 2b       	or	r22, r29
    10cc:	c8 01       	movw	r24, r16
    10ce:	df 91       	pop	r29
    10d0:	cf 91       	pop	r28
    10d2:	1f 91       	pop	r17
    10d4:	0f 91       	pop	r16
    10d6:	df cf       	rjmp	.-66     	; 0x1096 <_ZN17LiquidCrystal_I2C10write4bitsEh>

000010d8 <_ZN17LiquidCrystal_I2C7commandEh>:
    10d8:	40 e0       	ldi	r20, 0x00	; 0
    10da:	e9 cf       	rjmp	.-46     	; 0x10ae <_ZN17LiquidCrystal_I2C4sendEhh>

000010dc <_ZN17LiquidCrystal_I2C5clearEv>:
    10dc:	61 e0       	ldi	r22, 0x01	; 1
    10de:	fc df       	rcall	.-8      	; 0x10d8 <_ZN17LiquidCrystal_I2C7commandEh>
    10e0:	80 ed       	ldi	r24, 0xD0	; 208
    10e2:	97 e0       	ldi	r25, 0x07	; 7
    10e4:	0c 94 55 15 	jmp	0x2aaa	; 0x2aaa <delayMicroseconds>

000010e8 <_ZN17LiquidCrystal_I2C4homeEv>:
    10e8:	62 e0       	ldi	r22, 0x02	; 2
    10ea:	f6 df       	rcall	.-20     	; 0x10d8 <_ZN17LiquidCrystal_I2C7commandEh>
    10ec:	80 ed       	ldi	r24, 0xD0	; 208
    10ee:	97 e0       	ldi	r25, 0x07	; 7
    10f0:	0c 94 55 15 	jmp	0x2aaa	; 0x2aaa <delayMicroseconds>

000010f4 <_ZN17LiquidCrystal_I2C9setCursorEhh>:
    10f4:	cf 93       	push	r28
    10f6:	df 93       	push	r29
    10f8:	cd b7       	in	r28, 0x3d	; 61
    10fa:	de b7       	in	r29, 0x3e	; 62
    10fc:	28 97       	sbiw	r28, 0x08	; 8
    10fe:	0f b6       	in	r0, 0x3f	; 63
    1100:	f8 94       	cli
    1102:	de bf       	out	0x3e, r29	; 62
    1104:	0f be       	out	0x3f, r0	; 63
    1106:	cd bf       	out	0x3d, r28	; 61
    1108:	9c 01       	movw	r18, r24
    110a:	88 e0       	ldi	r24, 0x08	; 8
    110c:	ea ea       	ldi	r30, 0xAA	; 170
    110e:	f1 e0       	ldi	r31, 0x01	; 1
    1110:	de 01       	movw	r26, r28
    1112:	11 96       	adiw	r26, 0x01	; 1
    1114:	01 90       	ld	r0, Z+
    1116:	0d 92       	st	X+, r0
    1118:	8a 95       	dec	r24
    111a:	e1 f7       	brne	.-8      	; 0x1114 <_ZN17LiquidCrystal_I2C9setCursorEhh+0x20>
    111c:	f9 01       	movw	r30, r18
    111e:	80 85       	ldd	r24, Z+8	; 0x08
    1120:	84 17       	cp	r24, r20
    1122:	10 f4       	brcc	.+4      	; 0x1128 <_ZN17LiquidCrystal_I2C9setCursorEhh+0x34>
    1124:	4f ef       	ldi	r20, 0xFF	; 255
    1126:	48 0f       	add	r20, r24
    1128:	fe 01       	movw	r30, r28
    112a:	31 96       	adiw	r30, 0x01	; 1
    112c:	e4 0f       	add	r30, r20
    112e:	f1 1d       	adc	r31, r1
    1130:	e4 0f       	add	r30, r20
    1132:	f1 1d       	adc	r31, r1
    1134:	90 81       	ld	r25, Z
    1136:	69 0f       	add	r22, r25
    1138:	60 68       	ori	r22, 0x80	; 128
    113a:	c9 01       	movw	r24, r18
    113c:	28 96       	adiw	r28, 0x08	; 8
    113e:	0f b6       	in	r0, 0x3f	; 63
    1140:	f8 94       	cli
    1142:	de bf       	out	0x3e, r29	; 62
    1144:	0f be       	out	0x3f, r0	; 63
    1146:	cd bf       	out	0x3d, r28	; 61
    1148:	df 91       	pop	r29
    114a:	cf 91       	pop	r28
    114c:	c5 cf       	rjmp	.-118    	; 0x10d8 <_ZN17LiquidCrystal_I2C7commandEh>

0000114e <_ZN17LiquidCrystal_I2C7displayEv>:
    114e:	fc 01       	movw	r30, r24
    1150:	66 81       	ldd	r22, Z+6	; 0x06
    1152:	26 2f       	mov	r18, r22
    1154:	24 60       	ori	r18, 0x04	; 4
    1156:	26 83       	std	Z+6, r18	; 0x06
    1158:	6c 60       	ori	r22, 0x0C	; 12
    115a:	be cf       	rjmp	.-132    	; 0x10d8 <_ZN17LiquidCrystal_I2C7commandEh>

0000115c <_ZN17LiquidCrystal_I2C5writeEh>:

#include "Arduino.h"

#define printIIC(args)	Wire.write(args)
inline size_t LiquidCrystal_I2C::write(uint8_t value) {
	send(value, Rs);
    115c:	41 e0       	ldi	r20, 0x01	; 1
    115e:	a7 df       	rcall	.-178    	; 0x10ae <_ZN17LiquidCrystal_I2C4sendEhh>
	return 1;
}
    1160:	81 e0       	ldi	r24, 0x01	; 1
    1162:	90 e0       	ldi	r25, 0x00	; 0
    1164:	08 95       	ret

00001166 <_ZN17LiquidCrystal_I2C5beginEhhh>:
	Wire.begin();
	_displayfunction = LCD_4BITMODE | LCD_1LINE | LCD_5x8DOTS;
	begin(_cols, _rows);  
}

void LiquidCrystal_I2C::begin(uint8_t cols, uint8_t lines, uint8_t dotsize) {
    1166:	cf 93       	push	r28
    1168:	df 93       	push	r29
    116a:	ec 01       	movw	r28, r24
	if (lines > 1) {
    116c:	42 30       	cpi	r20, 0x02	; 2
    116e:	18 f0       	brcs	.+6      	; 0x1176 <_ZN17LiquidCrystal_I2C5beginEhhh+0x10>
		_displayfunction |= LCD_2LINE;
    1170:	8d 81       	ldd	r24, Y+5	; 0x05
    1172:	88 60       	ori	r24, 0x08	; 8
    1174:	8d 83       	std	Y+5, r24	; 0x05
	}
	_numlines = lines;
    1176:	48 87       	std	Y+8, r20	; 0x08

	// for some 1 line displays you can select a 10 pixel high font
	if ((dotsize != 0) && (lines == 1)) {
    1178:	22 23       	and	r18, r18
    117a:	29 f0       	breq	.+10     	; 0x1186 <_ZN17LiquidCrystal_I2C5beginEhhh+0x20>
    117c:	41 30       	cpi	r20, 0x01	; 1
    117e:	19 f4       	brne	.+6      	; 0x1186 <_ZN17LiquidCrystal_I2C5beginEhhh+0x20>
		_displayfunction |= LCD_5x10DOTS;
    1180:	8d 81       	ldd	r24, Y+5	; 0x05
    1182:	84 60       	ori	r24, 0x04	; 4
    1184:	8d 83       	std	Y+5, r24	; 0x05
	}

	// SEE PAGE 45/46 FOR INITIALIZATION SPECIFICATION!
	// according to datasheet, we need at least 40ms after power rises above 2.7V
	// before sending commands. Arduino can turn on way befer 4.5V so we'll wait 50
	delay(50); 
    1186:	62 e3       	ldi	r22, 0x32	; 50
    1188:	70 e0       	ldi	r23, 0x00	; 0
    118a:	80 e0       	ldi	r24, 0x00	; 0
    118c:	90 e0       	ldi	r25, 0x00	; 0
    118e:	0e 94 1c 15 	call	0x2a38	; 0x2a38 <delay>
  
	// Now we pull both RS and R/W low to begin commands
	expanderWrite(_backlightval);	// reset expanderand turn backlight off (Bit 8 =1)
    1192:	6b 85       	ldd	r22, Y+11	; 0x0b
    1194:	ce 01       	movw	r24, r28
    1196:	50 df       	rcall	.-352    	; 0x1038 <_ZN17LiquidCrystal_I2C13expanderWriteEh>
	delay(1000);
    1198:	68 ee       	ldi	r22, 0xE8	; 232
    119a:	73 e0       	ldi	r23, 0x03	; 3
    119c:	80 e0       	ldi	r24, 0x00	; 0
    119e:	90 e0       	ldi	r25, 0x00	; 0
    11a0:	0e 94 1c 15 	call	0x2a38	; 0x2a38 <delay>
  	//put the LCD into 4 bit mode
	// this is according to the hitachi HD44780 datasheet
	// figure 24, pg 46
	
	  // we start in 8bit mode, try to set 4 bit mode
   write4bits(0x03 << 4);
    11a4:	60 e3       	ldi	r22, 0x30	; 48
    11a6:	ce 01       	movw	r24, r28
    11a8:	76 df       	rcall	.-276    	; 0x1096 <_ZN17LiquidCrystal_I2C10write4bitsEh>
   delayMicroseconds(4500); // wait min 4.1ms
    11aa:	84 e9       	ldi	r24, 0x94	; 148
    11ac:	91 e1       	ldi	r25, 0x11	; 17
    11ae:	0e 94 55 15 	call	0x2aaa	; 0x2aaa <delayMicroseconds>
   
   // second try
   write4bits(0x03 << 4);
    11b2:	60 e3       	ldi	r22, 0x30	; 48
    11b4:	ce 01       	movw	r24, r28
    11b6:	6f df       	rcall	.-290    	; 0x1096 <_ZN17LiquidCrystal_I2C10write4bitsEh>
   delayMicroseconds(4500); // wait min 4.1ms
    11b8:	84 e9       	ldi	r24, 0x94	; 148
    11ba:	91 e1       	ldi	r25, 0x11	; 17
    11bc:	0e 94 55 15 	call	0x2aaa	; 0x2aaa <delayMicroseconds>
   
   // third go!
   write4bits(0x03 << 4); 
    11c0:	60 e3       	ldi	r22, 0x30	; 48
    11c2:	ce 01       	movw	r24, r28
    11c4:	68 df       	rcall	.-304    	; 0x1096 <_ZN17LiquidCrystal_I2C10write4bitsEh>
   delayMicroseconds(150);
    11c6:	86 e9       	ldi	r24, 0x96	; 150
    11c8:	90 e0       	ldi	r25, 0x00	; 0
    11ca:	0e 94 55 15 	call	0x2aaa	; 0x2aaa <delayMicroseconds>
   
   // finally, set to 4-bit interface
   write4bits(0x02 << 4); 
    11ce:	60 e2       	ldi	r22, 0x20	; 32
    11d0:	ce 01       	movw	r24, r28


	// set # lines, font size, etc.
	command(LCD_FUNCTIONSET | _displayfunction);  
    11d2:	61 df       	rcall	.-318    	; 0x1096 <_ZN17LiquidCrystal_I2C10write4bitsEh>
    11d4:	6d 81       	ldd	r22, Y+5	; 0x05
    11d6:	60 62       	ori	r22, 0x20	; 32
    11d8:	ce 01       	movw	r24, r28
	
	// turn the display on with no cursor or blinking default
	_displaycontrol = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;
    11da:	7e df       	rcall	.-260    	; 0x10d8 <_ZN17LiquidCrystal_I2C7commandEh>
    11dc:	84 e0       	ldi	r24, 0x04	; 4
	display();
    11de:	8e 83       	std	Y+6, r24	; 0x06
    11e0:	ce 01       	movw	r24, r28
	
	// clear it off
	clear();
    11e2:	b5 df       	rcall	.-150    	; 0x114e <_ZN17LiquidCrystal_I2C7displayEv>
    11e4:	ce 01       	movw	r24, r28
    11e6:	7a df       	rcall	.-268    	; 0x10dc <_ZN17LiquidCrystal_I2C5clearEv>
	
	// Initialize to default text direction (for roman languages)
	_displaymode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
    11e8:	82 e0       	ldi	r24, 0x02	; 2
	
	// set the entry mode
	command(LCD_ENTRYMODESET | _displaymode);
    11ea:	8f 83       	std	Y+7, r24	; 0x07
    11ec:	66 e0       	ldi	r22, 0x06	; 6
    11ee:	ce 01       	movw	r24, r28
    11f0:	73 df       	rcall	.-282    	; 0x10d8 <_ZN17LiquidCrystal_I2C7commandEh>
	
	home();
    11f2:	ce 01       	movw	r24, r28
  
}
    11f4:	df 91       	pop	r29
    11f6:	cf 91       	pop	r28
	_displaymode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
	
	// set the entry mode
	command(LCD_ENTRYMODESET | _displaymode);
	
	home();
    11f8:	77 cf       	rjmp	.-274    	; 0x10e8 <_ZN17LiquidCrystal_I2C4homeEv>

000011fa <_ZN17LiquidCrystal_I2C9init_privEv>:
    11fa:	cf 93       	push	r28
void LiquidCrystal_I2C::init(){
	init_priv();
}

void LiquidCrystal_I2C::init_priv()
{
    11fc:	df 93       	push	r29
    11fe:	ec 01       	movw	r28, r24
	Wire.begin();
    1200:	8c e0       	ldi	r24, 0x0C	; 12
    1202:	93 e0       	ldi	r25, 0x03	; 3
    1204:	1c d6       	rcall	.+3128   	; 0x1e3e <_ZN7TwoWire5beginEv>
	_displayfunction = LCD_4BITMODE | LCD_1LINE | LCD_5x8DOTS;
    1206:	1d 82       	std	Y+5, r1	; 0x05
	begin(_cols, _rows);  
    1208:	20 e0       	ldi	r18, 0x00	; 0
    120a:	4a 85       	ldd	r20, Y+10	; 0x0a
    120c:	69 85       	ldd	r22, Y+9	; 0x09
    120e:	ce 01       	movw	r24, r28
}
    1210:	df 91       	pop	r29

void LiquidCrystal_I2C::init_priv()
{
	Wire.begin();
	_displayfunction = LCD_4BITMODE | LCD_1LINE | LCD_5x8DOTS;
	begin(_cols, _rows);  
    1212:	cf 91       	pop	r28
    1214:	a8 cf       	rjmp	.-176    	; 0x1166 <_ZN17LiquidCrystal_I2C5beginEhhh>

00001216 <_ZN17LiquidCrystal_I2C4initEv>:
  _rows = lcd_rows;
  _backlightval = LCD_NOBACKLIGHT;
}

void LiquidCrystal_I2C::init(){
	init_priv();
    1216:	f1 cf       	rjmp	.-30     	; 0x11fa <_ZN17LiquidCrystal_I2C9init_privEv>

00001218 <_ZN21PulseSensorPlaygroundC1Ei>:
boolean PulseSensorPlayground::isInsideBeat(int sensorIndex) {
  if (sensorIndex != constrain(sensorIndex, 0, SensorCount)) {
    return false; // out of range.
  }
  return Sensors[sensorIndex].isInsideBeat();
}
    1218:	af 92       	push	r10
    121a:	bf 92       	push	r11
    121c:	cf 92       	push	r12
    121e:	df 92       	push	r13
    1220:	ef 92       	push	r14
    1222:	ff 92       	push	r15
    1224:	0f 93       	push	r16
    1226:	1f 93       	push	r17
    1228:	cf 93       	push	r28
    122a:	df 93       	push	r29
    122c:	ec 01       	movw	r28, r24
    122e:	8b 01       	movw	r16, r22
    1230:	09 96       	adiw	r24, 0x09	; 9
    1232:	68 d1       	rcall	.+720    	; 0x1504 <_ZN23PulseSensorSerialOutputC1Ev>
    1234:	d0 93 9d 02 	sts	0x029D, r29	; 0x80029d <_ZN21PulseSensorPlayground7OurThisE+0x1>
    1238:	c0 93 9c 02 	sts	0x029C, r28	; 0x80029c <_ZN21PulseSensorPlayground7OurThisE>
    123c:	09 83       	std	Y+1, r16	; 0x01
    123e:	58 01       	movw	r10, r16
    1240:	bb 24       	eor	r11, r11
    1242:	2c e3       	ldi	r18, 0x3C	; 60
    1244:	02 9f       	mul	r16, r18
    1246:	c0 01       	movw	r24, r0
    1248:	11 24       	eor	r1, r1
    124a:	0e 94 3b 14 	call	0x2876	; 0x2876 <_Znaj>
    124e:	6c 01       	movw	r12, r24
    1250:	8c 01       	movw	r16, r24
    1252:	e1 2c       	mov	r14, r1
    1254:	f1 2c       	mov	r15, r1
    1256:	ea 14       	cp	r14, r10
    1258:	fb 04       	cpc	r15, r11
    125a:	41 f0       	breq	.+16     	; 0x126c <_ZN21PulseSensorPlaygroundC1Ei+0x54>
    125c:	c8 01       	movw	r24, r16
    125e:	07 d1       	rcall	.+526    	; 0x146e <_ZN11PulseSensorC1Ev>
    1260:	04 5c       	subi	r16, 0xC4	; 196
    1262:	1f 4f       	sbci	r17, 0xFF	; 255
    1264:	8f ef       	ldi	r24, 0xFF	; 255
    1266:	e8 1a       	sub	r14, r24
    1268:	f8 0a       	sbc	r15, r24
    126a:	f5 cf       	rjmp	.-22     	; 0x1256 <_ZN21PulseSensorPlaygroundC1Ei+0x3e>
    126c:	ca 82       	std	Y+2, r12	; 0x02
    126e:	db 82       	std	Y+3, r13	; 0x03
    1270:	df 91       	pop	r29
    1272:	cf 91       	pop	r28
    1274:	1f 91       	pop	r17
    1276:	0f 91       	pop	r16
    1278:	ff 90       	pop	r15
    127a:	ef 90       	pop	r14
    127c:	df 90       	pop	r13
    127e:	cf 90       	pop	r12
    1280:	bf 90       	pop	r11
    1282:	af 90       	pop	r10
    1284:	08 95       	ret

00001286 <_ZN21PulseSensorPlayground5beginEv>:
    1286:	ef 92       	push	r14
    1288:	ff 92       	push	r15
    128a:	0f 93       	push	r16
    128c:	1f 93       	push	r17
    128e:	cf 93       	push	r28
    1290:	df 93       	push	r29
    1292:	ec 01       	movw	r28, r24
    1294:	00 e0       	ldi	r16, 0x00	; 0
    1296:	10 e0       	ldi	r17, 0x00	; 0
    1298:	e1 2c       	mov	r14, r1
    129a:	f1 2c       	mov	r15, r1
    129c:	89 81       	ldd	r24, Y+1	; 0x01
    129e:	90 e0       	ldi	r25, 0x00	; 0
    12a0:	e8 16       	cp	r14, r24
    12a2:	f9 06       	cpc	r15, r25
    12a4:	5c f4       	brge	.+22     	; 0x12bc <_ZN21PulseSensorPlayground5beginEv+0x36>
    12a6:	8a 81       	ldd	r24, Y+2	; 0x02
    12a8:	9b 81       	ldd	r25, Y+3	; 0x03
    12aa:	80 0f       	add	r24, r16
    12ac:	91 1f       	adc	r25, r17
    12ae:	0b d1       	rcall	.+534    	; 0x14c6 <_ZN11PulseSensor14initializeLEDsEv>
    12b0:	8f ef       	ldi	r24, 0xFF	; 255
    12b2:	e8 1a       	sub	r14, r24
    12b4:	f8 0a       	sbc	r15, r24
    12b6:	04 5c       	subi	r16, 0xC4	; 196
    12b8:	1f 4f       	sbci	r17, 0xFF	; 255
    12ba:	f0 cf       	rjmp	.-32     	; 0x129c <_ZN21PulseSensorPlayground5beginEv+0x16>
    12bc:	0e 94 f7 14 	call	0x29ee	; 0x29ee <micros>
    12c0:	dc 01       	movw	r26, r24
    12c2:	cb 01       	movw	r24, r22
    12c4:	80 53       	subi	r24, 0x30	; 48
    12c6:	98 4f       	sbci	r25, 0xF8	; 248
    12c8:	af 4f       	sbci	r26, 0xFF	; 255
    12ca:	bf 4f       	sbci	r27, 0xFF	; 255
    12cc:	8c 83       	std	Y+4, r24	; 0x04
    12ce:	9d 83       	std	Y+5, r25	; 0x05
    12d0:	ae 83       	std	Y+6, r26	; 0x06
    12d2:	bf 83       	std	Y+7, r27	; 0x07
    12d4:	18 86       	std	Y+8, r1	; 0x08
    12d6:	18 82       	st	Y, r1
    12d8:	80 91 a8 01 	lds	r24, 0x01A8	; 0x8001a8 <_ZN21PulseSensorPlayground15UsingInterruptsE>
    12dc:	81 11       	cpse	r24, r1
    12de:	02 c0       	rjmp	.+4      	; 0x12e4 <_ZN21PulseSensorPlayground5beginEv+0x5e>
    12e0:	11 e0       	ldi	r17, 0x01	; 1
    12e2:	10 c0       	rjmp	.+32     	; 0x1304 <_ZN21PulseSensorPlayground5beginEv+0x7e>
    12e4:	0e 94 2b 01 	call	0x256	; 0x256 <_Z35PulseSensorPlaygroundSetupInterruptv>
    12e8:	18 2f       	mov	r17, r24
    12ea:	81 11       	cpse	r24, r1
    12ec:	f9 cf       	rjmp	.-14     	; 0x12e0 <_ZN21PulseSensorPlayground5beginEv+0x5a>
    12ee:	ce 01       	movw	r24, r28
    12f0:	09 96       	adiw	r24, 0x09	; 9
    12f2:	14 d1       	rcall	.+552    	; 0x151c <_ZN23PulseSensorSerialOutput9getSerialEv>
    12f4:	00 97       	sbiw	r24, 0x00	; 0
    12f6:	21 f0       	breq	.+8      	; 0x1300 <_ZN21PulseSensorPlayground5beginEv+0x7a>
    12f8:	6e e4       	ldi	r22, 0x4E	; 78
    12fa:	71 e0       	ldi	r23, 0x01	; 1
    12fc:	0e 94 7c 14 	call	0x28f8	; 0x28f8 <_ZN5Print5printEPK19__FlashStringHelper>
    1300:	81 e0       	ldi	r24, 0x01	; 1
    1302:	88 83       	st	Y, r24
    1304:	81 2f       	mov	r24, r17
    1306:	df 91       	pop	r29
    1308:	cf 91       	pop	r28
    130a:	1f 91       	pop	r17
    130c:	0f 91       	pop	r16
    130e:	ff 90       	pop	r15
    1310:	ef 90       	pop	r14
    1312:	08 95       	ret

00001314 <_ZN21PulseSensorPlayground11analogInputEii>:
    1314:	fc 01       	movw	r30, r24
    1316:	57 fd       	sbrc	r21, 7
    1318:	14 c0       	rjmp	.+40     	; 0x1342 <_ZN21PulseSensorPlayground11analogInputEii+0x2e>
    131a:	21 81       	ldd	r18, Z+1	; 0x01
    131c:	30 e0       	ldi	r19, 0x00	; 0
    131e:	42 17       	cp	r20, r18
    1320:	53 07       	cpc	r21, r19
    1322:	0c f4       	brge	.+2      	; 0x1326 <_ZN21PulseSensorPlayground11analogInputEii+0x12>
    1324:	9a 01       	movw	r18, r20
    1326:	42 17       	cp	r20, r18
    1328:	53 07       	cpc	r21, r19
    132a:	59 f4       	brne	.+22     	; 0x1342 <_ZN21PulseSensorPlayground11analogInputEii+0x2e>
    132c:	2c e3       	ldi	r18, 0x3C	; 60
    132e:	24 9f       	mul	r18, r20
    1330:	c0 01       	movw	r24, r0
    1332:	25 9f       	mul	r18, r21
    1334:	90 0d       	add	r25, r0
    1336:	11 24       	eor	r1, r1
    1338:	22 81       	ldd	r18, Z+2	; 0x02
    133a:	33 81       	ldd	r19, Z+3	; 0x03
    133c:	82 0f       	add	r24, r18
    133e:	93 1f       	adc	r25, r19
    1340:	aa c0       	rjmp	.+340    	; 0x1496 <_ZN11PulseSensor11analogInputEi>
    1342:	08 95       	ret

00001344 <_ZN21PulseSensorPlayground12blinkOnPulseEii>:
    1344:	fc 01       	movw	r30, r24
    1346:	57 fd       	sbrc	r21, 7
    1348:	14 c0       	rjmp	.+40     	; 0x1372 <_ZN21PulseSensorPlayground12blinkOnPulseEii+0x2e>
    134a:	21 81       	ldd	r18, Z+1	; 0x01
    134c:	30 e0       	ldi	r19, 0x00	; 0
    134e:	42 17       	cp	r20, r18
    1350:	53 07       	cpc	r21, r19
    1352:	0c f4       	brge	.+2      	; 0x1356 <_ZN21PulseSensorPlayground12blinkOnPulseEii+0x12>
    1354:	9a 01       	movw	r18, r20
    1356:	42 17       	cp	r20, r18
    1358:	53 07       	cpc	r21, r19
    135a:	59 f4       	brne	.+22     	; 0x1372 <_ZN21PulseSensorPlayground12blinkOnPulseEii+0x2e>
    135c:	2c e3       	ldi	r18, 0x3C	; 60
    135e:	24 9f       	mul	r18, r20
    1360:	c0 01       	movw	r24, r0
    1362:	25 9f       	mul	r18, r21
    1364:	90 0d       	add	r25, r0
    1366:	11 24       	eor	r1, r1
    1368:	22 81       	ldd	r18, Z+2	; 0x02
    136a:	33 81       	ldd	r19, Z+3	; 0x03
    136c:	82 0f       	add	r24, r18
    136e:	93 1f       	adc	r25, r19
    1370:	96 c0       	rjmp	.+300    	; 0x149e <_ZN11PulseSensor12blinkOnPulseEi>
    1372:	08 95       	ret

00001374 <_ZN21PulseSensorPlayground11fadeOnPulseEii>:
    1374:	fc 01       	movw	r30, r24
    1376:	57 fd       	sbrc	r21, 7
    1378:	14 c0       	rjmp	.+40     	; 0x13a2 <_ZN21PulseSensorPlayground11fadeOnPulseEii+0x2e>
    137a:	21 81       	ldd	r18, Z+1	; 0x01
    137c:	30 e0       	ldi	r19, 0x00	; 0
    137e:	42 17       	cp	r20, r18
    1380:	53 07       	cpc	r21, r19
    1382:	0c f4       	brge	.+2      	; 0x1386 <_ZN21PulseSensorPlayground11fadeOnPulseEii+0x12>
    1384:	9a 01       	movw	r18, r20
    1386:	42 17       	cp	r20, r18
    1388:	53 07       	cpc	r21, r19
    138a:	59 f4       	brne	.+22     	; 0x13a2 <_ZN21PulseSensorPlayground11fadeOnPulseEii+0x2e>
    138c:	2c e3       	ldi	r18, 0x3C	; 60
    138e:	24 9f       	mul	r18, r20
    1390:	c0 01       	movw	r24, r0
    1392:	25 9f       	mul	r18, r21
    1394:	90 0d       	add	r25, r0
    1396:	11 24       	eor	r1, r1
    1398:	22 81       	ldd	r18, Z+2	; 0x02
    139a:	33 81       	ldd	r19, Z+3	; 0x03
    139c:	82 0f       	add	r24, r18
    139e:	93 1f       	adc	r25, r19
    13a0:	82 c0       	rjmp	.+260    	; 0x14a6 <_ZN11PulseSensor11fadeOnPulseEi>
    13a2:	08 95       	ret

000013a4 <_ZN21PulseSensorPlayground17getBeatsPerMinuteEi>:
    13a4:	fc 01       	movw	r30, r24
    13a6:	77 fd       	sbrc	r23, 7
    13a8:	14 c0       	rjmp	.+40     	; 0x13d2 <_ZN21PulseSensorPlayground17getBeatsPerMinuteEi+0x2e>
    13aa:	21 81       	ldd	r18, Z+1	; 0x01
    13ac:	30 e0       	ldi	r19, 0x00	; 0
    13ae:	62 17       	cp	r22, r18
    13b0:	73 07       	cpc	r23, r19
    13b2:	0c f4       	brge	.+2      	; 0x13b6 <_ZN21PulseSensorPlayground17getBeatsPerMinuteEi+0x12>
    13b4:	9b 01       	movw	r18, r22
    13b6:	62 17       	cp	r22, r18
    13b8:	73 07       	cpc	r23, r19
    13ba:	59 f4       	brne	.+22     	; 0x13d2 <_ZN21PulseSensorPlayground17getBeatsPerMinuteEi+0x2e>
    13bc:	2c e3       	ldi	r18, 0x3C	; 60
    13be:	26 9f       	mul	r18, r22
    13c0:	c0 01       	movw	r24, r0
    13c2:	27 9f       	mul	r18, r23
    13c4:	90 0d       	add	r25, r0
    13c6:	11 24       	eor	r1, r1
    13c8:	22 81       	ldd	r18, Z+2	; 0x02
    13ca:	33 81       	ldd	r19, Z+3	; 0x03
    13cc:	82 0f       	add	r24, r18
    13ce:	93 1f       	adc	r25, r19
    13d0:	76 c0       	rjmp	.+236    	; 0x14be <_ZN11PulseSensor17getBeatsPerMinuteEv>
    13d2:	8f ef       	ldi	r24, 0xFF	; 255
    13d4:	9f ef       	ldi	r25, 0xFF	; 255
    13d6:	08 95       	ret

000013d8 <_ZN21PulseSensorPlayground9setSerialER6Stream>:

void PulseSensorPlayground::setSerial(Stream &output) {
  SerialOutput.setSerial(output);
    13d8:	09 96       	adiw	r24, 0x09	; 9
    13da:	9c c0       	rjmp	.+312    	; 0x1514 <_ZN23PulseSensorSerialOutput9setSerialER6Stream>

000013dc <_ZN21PulseSensorPlayground13setOutputTypeEh>:
}

void PulseSensorPlayground::setOutputType(byte outputType) {
  SerialOutput.setOutputType(outputType);
    13dc:	09 96       	adiw	r24, 0x09	; 9
    13de:	a2 c0       	rjmp	.+324    	; 0x1524 <_ZN23PulseSensorSerialOutput13setOutputTypeEh>

000013e0 <_ZN21PulseSensorPlayground12setThresholdEii>:
}

void PulseSensorPlayground::setThreshold(int threshold, int sensorIndex) {
    13e0:	fc 01       	movw	r30, r24
  if (sensorIndex != constrain(sensorIndex, 0, SensorCount)) {
    13e2:	57 fd       	sbrc	r21, 7
    13e4:	14 c0       	rjmp	.+40     	; 0x140e <_ZN21PulseSensorPlayground12setThresholdEii+0x2e>
    13e6:	21 81       	ldd	r18, Z+1	; 0x01
    13e8:	30 e0       	ldi	r19, 0x00	; 0
    13ea:	42 17       	cp	r20, r18
    13ec:	53 07       	cpc	r21, r19
    13ee:	0c f4       	brge	.+2      	; 0x13f2 <_ZN21PulseSensorPlayground12setThresholdEii+0x12>
    13f0:	9a 01       	movw	r18, r20
    13f2:	42 17       	cp	r20, r18
    13f4:	53 07       	cpc	r21, r19
    13f6:	59 f4       	brne	.+22     	; 0x140e <_ZN21PulseSensorPlayground12setThresholdEii+0x2e>
    return; // out of range.
  }
  Sensors[sensorIndex].setThreshold(threshold);
    13f8:	2c e3       	ldi	r18, 0x3C	; 60
    13fa:	24 9f       	mul	r18, r20
    13fc:	c0 01       	movw	r24, r0
    13fe:	25 9f       	mul	r18, r21
    1400:	90 0d       	add	r25, r0
    1402:	11 24       	eor	r1, r1
    1404:	22 81       	ldd	r18, Z+2	; 0x02
    1406:	33 81       	ldd	r19, Z+3	; 0x03
    1408:	82 0f       	add	r24, r18
    140a:	93 1f       	adc	r25, r19
    140c:	50 c0       	rjmp	.+160    	; 0x14ae <_ZN11PulseSensor12setThresholdEi>
    140e:	08 95       	ret

00001410 <_ZN11PulseSensor14resetVariablesEv>:
    IBI = 600;                  // 600ms per beat = 100 Beats Per Minute (BPM)
    Pulse = false;
    amp = 100;                  // beat amplitude 1/10 of input range.

  }
}
    1410:	fc 01       	movw	r30, r24
    1412:	dc 01       	movw	r26, r24
    1414:	5c 96       	adiw	r26, 0x1c	; 28
    1416:	c0 96       	adiw	r24, 0x30	; 48
    1418:	1d 92       	st	X+, r1
    141a:	1d 92       	st	X+, r1
    141c:	a8 17       	cp	r26, r24
    141e:	b9 07       	cpc	r27, r25
    1420:	d9 f7       	brne	.-10     	; 0x1418 <_ZN11PulseSensor14resetVariablesEv+0x8>
    1422:	15 86       	std	Z+13, r1	; 0x0d
    1424:	17 82       	std	Z+7, r1	; 0x07
    1426:	16 82       	std	Z+6, r1	; 0x06
    1428:	8e ee       	ldi	r24, 0xEE	; 238
    142a:	92 e0       	ldi	r25, 0x02	; 2
    142c:	93 87       	std	Z+11, r25	; 0x0b
    142e:	82 87       	std	Z+10, r24	; 0x0a
    1430:	14 86       	std	Z+12, r1	; 0x0c
    1432:	10 aa       	std	Z+48, r1	; 0x30
    1434:	11 aa       	std	Z+49, r1	; 0x31
    1436:	12 aa       	std	Z+50, r1	; 0x32
    1438:	13 aa       	std	Z+51, r1	; 0x33
    143a:	14 8a       	std	Z+20, r1	; 0x14
    143c:	15 8a       	std	Z+21, r1	; 0x15
    143e:	16 8a       	std	Z+22, r1	; 0x16
    1440:	17 8a       	std	Z+23, r1	; 0x17
    1442:	80 e0       	ldi	r24, 0x00	; 0
    1444:	92 e0       	ldi	r25, 0x02	; 2
    1446:	95 ab       	std	Z+53, r25	; 0x35
    1448:	84 ab       	std	Z+52, r24	; 0x34
    144a:	97 ab       	std	Z+55, r25	; 0x37
    144c:	86 ab       	std	Z+54, r24	; 0x36
    144e:	86 e2       	ldi	r24, 0x26	; 38
    1450:	92 e0       	ldi	r25, 0x02	; 2
    1452:	91 8b       	std	Z+17, r25	; 0x11
    1454:	80 8b       	std	Z+16, r24	; 0x10
    1456:	91 af       	std	Z+57, r25	; 0x39
    1458:	80 af       	std	Z+56, r24	; 0x38
    145a:	84 e6       	ldi	r24, 0x64	; 100
    145c:	90 e0       	ldi	r25, 0x00	; 0
    145e:	93 8b       	std	Z+19, r25	; 0x13
    1460:	82 8b       	std	Z+18, r24	; 0x12
    1462:	81 e0       	ldi	r24, 0x01	; 1
    1464:	82 af       	std	Z+58, r24	; 0x3a
    1466:	13 ae       	std	Z+59, r1	; 0x3b
    1468:	17 86       	std	Z+15, r1	; 0x0f
    146a:	16 86       	std	Z+14, r1	; 0x0e
    146c:	08 95       	ret

0000146e <_ZN11PulseSensorC1Ev>:
    146e:	2f e1       	ldi	r18, 0x1F	; 31
    1470:	30 e0       	ldi	r19, 0x00	; 0
    1472:	fc 01       	movw	r30, r24
    1474:	31 83       	std	Z+1, r19	; 0x01
    1476:	20 83       	st	Z, r18
    1478:	2f ef       	ldi	r18, 0xFF	; 255
    147a:	3f ef       	ldi	r19, 0xFF	; 255
    147c:	33 83       	std	Z+3, r19	; 0x03
    147e:	22 83       	std	Z+2, r18	; 0x02
    1480:	35 83       	std	Z+5, r19	; 0x05
    1482:	24 83       	std	Z+4, r18	; 0x04
    1484:	42 e0       	ldi	r20, 0x02	; 2
    1486:	50 e0       	ldi	r21, 0x00	; 0
    1488:	60 e0       	ldi	r22, 0x00	; 0
    148a:	70 e0       	ldi	r23, 0x00	; 0
    148c:	40 8f       	std	Z+24, r20	; 0x18
    148e:	51 8f       	std	Z+25, r21	; 0x19
    1490:	62 8f       	std	Z+26, r22	; 0x1a
    1492:	73 8f       	std	Z+27, r23	; 0x1b
    1494:	bd cf       	rjmp	.-134    	; 0x1410 <_ZN11PulseSensor14resetVariablesEv>

00001496 <_ZN11PulseSensor11analogInputEi>:
    1496:	fc 01       	movw	r30, r24
    1498:	71 83       	std	Z+1, r23	; 0x01
    149a:	60 83       	st	Z, r22
    149c:	08 95       	ret

0000149e <_ZN11PulseSensor12blinkOnPulseEi>:
    149e:	fc 01       	movw	r30, r24
    14a0:	73 83       	std	Z+3, r23	; 0x03
    14a2:	62 83       	std	Z+2, r22	; 0x02
    14a4:	08 95       	ret

000014a6 <_ZN11PulseSensor11fadeOnPulseEi>:
    14a6:	fc 01       	movw	r30, r24
    14a8:	75 83       	std	Z+5, r23	; 0x05
    14aa:	64 83       	std	Z+4, r22	; 0x04
    14ac:	08 95       	ret

000014ae <_ZN11PulseSensor12setThresholdEi>:
    14ae:	f8 94       	cli
    14b0:	fc 01       	movw	r30, r24
    14b2:	71 8b       	std	Z+17, r23	; 0x11
    14b4:	60 8b       	std	Z+16, r22	; 0x10
    14b6:	71 af       	std	Z+57, r23	; 0x39
    14b8:	60 af       	std	Z+56, r22	; 0x38
    14ba:	78 94       	sei
    14bc:	08 95       	ret

000014be <_ZN11PulseSensor17getBeatsPerMinuteEv>:
    14be:	fc 01       	movw	r30, r24
    14c0:	86 81       	ldd	r24, Z+6	; 0x06
    14c2:	97 81       	ldd	r25, Z+7	; 0x07
    14c4:	08 95       	ret

000014c6 <_ZN11PulseSensor14initializeLEDsEv>:

void PulseSensor::initializeLEDs() {
    14c6:	cf 93       	push	r28
    14c8:	df 93       	push	r29
    14ca:	ec 01       	movw	r28, r24
  if (BlinkPin >= 0) {
    14cc:	8a 81       	ldd	r24, Y+2	; 0x02
    14ce:	9b 81       	ldd	r25, Y+3	; 0x03
    14d0:	97 fd       	sbrc	r25, 7
    14d2:	07 c0       	rjmp	.+14     	; 0x14e2 <_ZN11PulseSensor14initializeLEDsEv+0x1c>
    pinMode(BlinkPin, OUTPUT);
    14d4:	61 e0       	ldi	r22, 0x01	; 1
    14d6:	0e 94 68 16 	call	0x2cd0	; 0x2cd0 <pinMode>
    digitalWrite(BlinkPin, LOW);
    14da:	60 e0       	ldi	r22, 0x00	; 0
    14dc:	8a 81       	ldd	r24, Y+2	; 0x02
    14de:	0e 94 a4 16 	call	0x2d48	; 0x2d48 <digitalWrite>
  }
  if (FadePin >= 0) {
    14e2:	8c 81       	ldd	r24, Y+4	; 0x04
    14e4:	9d 81       	ldd	r25, Y+5	; 0x05
    14e6:	97 fd       	sbrc	r25, 7
    14e8:	0a c0       	rjmp	.+20     	; 0x14fe <_ZN11PulseSensor14initializeLEDsEv+0x38>
	#ifndef NO_ANALOG_WRITE
    pinMode(FadePin, OUTPUT);
    14ea:	61 e0       	ldi	r22, 0x01	; 1
    14ec:	0e 94 68 16 	call	0x2cd0	; 0x2cd0 <pinMode>
    analogWrite(FadePin, 0); // turn off the LED.
    14f0:	60 e0       	ldi	r22, 0x00	; 0
    14f2:	70 e0       	ldi	r23, 0x00	; 0
    14f4:	8c 81       	ldd	r24, Y+4	; 0x04
	#endif
  }
}
    14f6:	df 91       	pop	r29
    14f8:	cf 91       	pop	r28
    digitalWrite(BlinkPin, LOW);
  }
  if (FadePin >= 0) {
	#ifndef NO_ANALOG_WRITE
    pinMode(FadePin, OUTPUT);
    analogWrite(FadePin, 0); // turn off the LED.
    14fa:	0c 94 cb 15 	jmp	0x2b96	; 0x2b96 <analogWrite>
	#endif
  }
}
    14fe:	df 91       	pop	r29
    1500:	cf 91       	pop	r28
    1502:	08 95       	ret

00001504 <_ZN23PulseSensorSerialOutputC1Ev>:
   This software is not intended for medical use.
*/
#include "PulseSensorSerialOutput.h"

PulseSensorSerialOutput::PulseSensorSerialOutput() {
  pOutput = NULL;
    1504:	fc 01       	movw	r30, r24
    1506:	11 82       	std	Z+1, r1	; 0x01
    1508:	10 82       	st	Z, r1
  OutputType = SERIAL_PLOTTER;
    150a:	22 e0       	ldi	r18, 0x02	; 2
    150c:	30 e0       	ldi	r19, 0x00	; 0
    150e:	33 83       	std	Z+3, r19	; 0x03
    1510:	22 83       	std	Z+2, r18	; 0x02
    1512:	08 95       	ret

00001514 <_ZN23PulseSensorSerialOutput9setSerialER6Stream>:
}

void PulseSensorSerialOutput::setSerial(Stream &output) {
  pOutput = &output;
    1514:	fc 01       	movw	r30, r24
    1516:	71 83       	std	Z+1, r23	; 0x01
    1518:	60 83       	st	Z, r22
    151a:	08 95       	ret

0000151c <_ZN23PulseSensorSerialOutput9getSerialEv>:
}

Stream *PulseSensorSerialOutput::getSerial() {
  return pOutput;
}
    151c:	fc 01       	movw	r30, r24
    151e:	80 81       	ld	r24, Z
    1520:	91 81       	ldd	r25, Z+1	; 0x01
    1522:	08 95       	ret

00001524 <_ZN23PulseSensorSerialOutput13setOutputTypeEh>:

void PulseSensorSerialOutput::setOutputType(byte outputType) {
  OutputType = outputType;
    1524:	70 e0       	ldi	r23, 0x00	; 0
    1526:	fc 01       	movw	r30, r24
    1528:	73 83       	std	Z+3, r23	; 0x03
    152a:	62 83       	std	Z+2, r22	; 0x02
    152c:	08 95       	ret

0000152e <_ZN9SimpleDHT4readEiPhS0_S0_>:
    if (confirm(pin, 60, LOW)) {
        return SimpleDHTErrDataEOF;
    }

    return SimpleDHTErrSuccess;
}
    152e:	cf 92       	push	r12
    1530:	df 92       	push	r13
    1532:	ef 92       	push	r14
    1534:	ff 92       	push	r15
    1536:	0f 93       	push	r16
    1538:	1f 93       	push	r17
    153a:	cf 93       	push	r28
    153c:	df 93       	push	r29
    153e:	cd b7       	in	r28, 0x3d	; 61
    1540:	de b7       	in	r29, 0x3e	; 62
    1542:	28 97       	sbiw	r28, 0x08	; 8
    1544:	0f b6       	in	r0, 0x3f	; 63
    1546:	f8 94       	cli
    1548:	de bf       	out	0x3e, r29	; 62
    154a:	0f be       	out	0x3f, r0	; 63
    154c:	cd bf       	out	0x3d, r28	; 61
    154e:	6a 01       	movw	r12, r20
    1550:	79 01       	movw	r14, r18
    1552:	1d 82       	std	Y+5, r1	; 0x05
    1554:	1e 82       	std	Y+6, r1	; 0x06
    1556:	1f 82       	std	Y+7, r1	; 0x07
    1558:	18 86       	std	Y+8, r1	; 0x08
    155a:	19 82       	std	Y+1, r1	; 0x01
    155c:	1a 82       	std	Y+2, r1	; 0x02
    155e:	1b 82       	std	Y+3, r1	; 0x03
    1560:	1c 82       	std	Y+4, r1	; 0x04
    1562:	dc 01       	movw	r26, r24
    1564:	ed 91       	ld	r30, X+
    1566:	fc 91       	ld	r31, X
    1568:	02 80       	ldd	r0, Z+2	; 0x02
    156a:	f3 81       	ldd	r31, Z+3	; 0x03
    156c:	e0 2d       	mov	r30, r0
    156e:	9e 01       	movw	r18, r28
    1570:	2f 5f       	subi	r18, 0xFF	; 255
    1572:	3f 4f       	sbci	r19, 0xFF	; 255
    1574:	ae 01       	movw	r20, r28
    1576:	4b 5f       	subi	r20, 0xFB	; 251
    1578:	5f 4f       	sbci	r21, 0xFF	; 255
    157a:	09 95       	icall
    157c:	8c 01       	movw	r16, r24
    157e:	89 2b       	or	r24, r25
    1580:	a1 f4       	brne	.+40     	; 0x15aa <_ZN9SimpleDHT4readEiPhS0_S0_+0x7c>
    1582:	c1 14       	cp	r12, r1
    1584:	d1 04       	cpc	r13, r1
    1586:	39 f0       	breq	.+14     	; 0x1596 <_ZN9SimpleDHT4readEiPhS0_S0_+0x68>
    1588:	6d 81       	ldd	r22, Y+5	; 0x05
    158a:	7e 81       	ldd	r23, Y+6	; 0x06
    158c:	8f 81       	ldd	r24, Y+7	; 0x07
    158e:	98 85       	ldd	r25, Y+8	; 0x08
    1590:	4d d5       	rcall	.+2714   	; 0x202c <__fixsfsi>
    1592:	f6 01       	movw	r30, r12
    1594:	60 83       	st	Z, r22
    1596:	e1 14       	cp	r14, r1
    1598:	f1 04       	cpc	r15, r1
    159a:	39 f0       	breq	.+14     	; 0x15aa <_ZN9SimpleDHT4readEiPhS0_S0_+0x7c>
    159c:	69 81       	ldd	r22, Y+1	; 0x01
    159e:	7a 81       	ldd	r23, Y+2	; 0x02
    15a0:	8b 81       	ldd	r24, Y+3	; 0x03
    15a2:	9c 81       	ldd	r25, Y+4	; 0x04
    15a4:	43 d5       	rcall	.+2694   	; 0x202c <__fixsfsi>
    15a6:	d7 01       	movw	r26, r14
    15a8:	6c 93       	st	X, r22
    15aa:	c8 01       	movw	r24, r16
    15ac:	28 96       	adiw	r28, 0x08	; 8
    15ae:	0f b6       	in	r0, 0x3f	; 63
    15b0:	f8 94       	cli
    15b2:	de bf       	out	0x3e, r29	; 62
    15b4:	0f be       	out	0x3f, r0	; 63
    15b6:	cd bf       	out	0x3d, r28	; 61
    15b8:	df 91       	pop	r29
    15ba:	cf 91       	pop	r28
    15bc:	1f 91       	pop	r17
    15be:	0f 91       	pop	r16
    15c0:	ff 90       	pop	r15
    15c2:	ef 90       	pop	r14
    15c4:	df 90       	pop	r13
    15c6:	cf 90       	pop	r12
    15c8:	08 95       	ret

000015ca <_ZN9SimpleDHT9bits2byteEPh>:
    15ca:	47 e0       	ldi	r20, 0x07	; 7
    15cc:	50 e0       	ldi	r21, 0x00	; 0
    15ce:	80 e0       	ldi	r24, 0x00	; 0
    15d0:	fb 01       	movw	r30, r22
    15d2:	21 91       	ld	r18, Z+
    15d4:	bf 01       	movw	r22, r30
    15d6:	04 2e       	mov	r0, r20
    15d8:	01 c0       	rjmp	.+2      	; 0x15dc <_ZN9SimpleDHT9bits2byteEPh+0x12>
    15da:	22 0f       	add	r18, r18
    15dc:	0a 94       	dec	r0
    15de:	ea f7       	brpl	.-6      	; 0x15da <_ZN9SimpleDHT9bits2byteEPh+0x10>
    15e0:	82 0f       	add	r24, r18
    15e2:	41 50       	subi	r20, 0x01	; 1
    15e4:	51 09       	sbc	r21, r1
    15e6:	a0 f7       	brcc	.-24     	; 0x15d0 <_ZN9SimpleDHT9bits2byteEPh+0x6>
    15e8:	08 95       	ret

000015ea <_ZN9SimpleDHT5parseEPhPsS1_>:
    15ea:	8f 92       	push	r8
    15ec:	9f 92       	push	r9
    15ee:	af 92       	push	r10
    15f0:	bf 92       	push	r11
    15f2:	cf 92       	push	r12
    15f4:	df 92       	push	r13
    15f6:	ef 92       	push	r14
    15f8:	ff 92       	push	r15
    15fa:	0f 93       	push	r16
    15fc:	1f 93       	push	r17
    15fe:	cf 93       	push	r28
    1600:	df 93       	push	r29
    1602:	ec 01       	movw	r28, r24
    1604:	8b 01       	movw	r16, r22
    1606:	5a 01       	movw	r10, r20
    1608:	79 01       	movw	r14, r18
    160a:	e8 81       	ld	r30, Y
    160c:	f9 81       	ldd	r31, Y+1	; 0x01
    160e:	06 80       	ldd	r0, Z+6	; 0x06
    1610:	f7 81       	ldd	r31, Z+7	; 0x07
    1612:	e0 2d       	mov	r30, r0
    1614:	09 95       	icall
    1616:	c8 2e       	mov	r12, r24
    1618:	b8 01       	movw	r22, r16
    161a:	68 5f       	subi	r22, 0xF8	; 248
    161c:	7f 4f       	sbci	r23, 0xFF	; 255
    161e:	e8 81       	ld	r30, Y
    1620:	f9 81       	ldd	r31, Y+1	; 0x01
    1622:	06 80       	ldd	r0, Z+6	; 0x06
    1624:	f7 81       	ldd	r31, Z+7	; 0x07
    1626:	e0 2d       	mov	r30, r0
    1628:	ce 01       	movw	r24, r28
    162a:	09 95       	icall
    162c:	d8 2e       	mov	r13, r24
    162e:	b8 01       	movw	r22, r16
    1630:	60 5f       	subi	r22, 0xF0	; 240
    1632:	7f 4f       	sbci	r23, 0xFF	; 255
    1634:	e8 81       	ld	r30, Y
    1636:	f9 81       	ldd	r31, Y+1	; 0x01
    1638:	06 80       	ldd	r0, Z+6	; 0x06
    163a:	f7 81       	ldd	r31, Z+7	; 0x07
    163c:	e0 2d       	mov	r30, r0
    163e:	ce 01       	movw	r24, r28
    1640:	09 95       	icall
    1642:	88 2e       	mov	r8, r24
    1644:	b8 01       	movw	r22, r16
    1646:	68 5e       	subi	r22, 0xE8	; 232
    1648:	7f 4f       	sbci	r23, 0xFF	; 255
    164a:	e8 81       	ld	r30, Y
    164c:	f9 81       	ldd	r31, Y+1	; 0x01
    164e:	06 80       	ldd	r0, Z+6	; 0x06
    1650:	f7 81       	ldd	r31, Z+7	; 0x07
    1652:	e0 2d       	mov	r30, r0
    1654:	ce 01       	movw	r24, r28
    1656:	09 95       	icall
    1658:	98 2e       	mov	r9, r24
    165a:	b8 01       	movw	r22, r16
    165c:	60 5e       	subi	r22, 0xE0	; 224
    165e:	7f 4f       	sbci	r23, 0xFF	; 255
    1660:	e8 81       	ld	r30, Y
    1662:	f9 81       	ldd	r31, Y+1	; 0x01
    1664:	06 80       	ldd	r0, Z+6	; 0x06
    1666:	f7 81       	ldd	r31, Z+7	; 0x07
    1668:	e0 2d       	mov	r30, r0
    166a:	ce 01       	movw	r24, r28
    166c:	09 95       	icall
    166e:	9c 2d       	mov	r25, r12
    1670:	9d 0d       	add	r25, r13
    1672:	98 0d       	add	r25, r8
    1674:	99 0d       	add	r25, r9
    1676:	89 13       	cpse	r24, r25
    1678:	0f c0       	rjmp	.+30     	; 0x1698 <_ZN9SimpleDHT5parseEPhPsS1_+0xae>
    167a:	89 2d       	mov	r24, r9
    167c:	90 e0       	ldi	r25, 0x00	; 0
    167e:	98 29       	or	r25, r8
    1680:	f5 01       	movw	r30, r10
    1682:	91 83       	std	Z+1, r25	; 0x01
    1684:	80 83       	st	Z, r24
    1686:	8d 2d       	mov	r24, r13
    1688:	90 e0       	ldi	r25, 0x00	; 0
    168a:	9c 29       	or	r25, r12
    168c:	f7 01       	movw	r30, r14
    168e:	91 83       	std	Z+1, r25	; 0x01
    1690:	80 83       	st	Z, r24
    1692:	80 e0       	ldi	r24, 0x00	; 0
    1694:	90 e0       	ldi	r25, 0x00	; 0
    1696:	02 c0       	rjmp	.+4      	; 0x169c <_ZN9SimpleDHT5parseEPhPsS1_+0xb2>
    1698:	89 e6       	ldi	r24, 0x69	; 105
    169a:	90 e0       	ldi	r25, 0x00	; 0
    169c:	df 91       	pop	r29
    169e:	cf 91       	pop	r28
    16a0:	1f 91       	pop	r17
    16a2:	0f 91       	pop	r16
    16a4:	ff 90       	pop	r15
    16a6:	ef 90       	pop	r14
    16a8:	df 90       	pop	r13
    16aa:	cf 90       	pop	r12
    16ac:	bf 90       	pop	r11
    16ae:	af 90       	pop	r10
    16b0:	9f 90       	pop	r9
    16b2:	8f 90       	pop	r8
    16b4:	08 95       	ret

000016b6 <_ZN11SimpleDHT115read2EiPfS0_Ph>:
    16b6:	8f 92       	push	r8
    16b8:	9f 92       	push	r9
    16ba:	af 92       	push	r10
    16bc:	bf 92       	push	r11
    16be:	cf 92       	push	r12
    16c0:	df 92       	push	r13
    16c2:	ef 92       	push	r14
    16c4:	ff 92       	push	r15
    16c6:	0f 93       	push	r16
    16c8:	1f 93       	push	r17
    16ca:	cf 93       	push	r28
    16cc:	df 93       	push	r29
    16ce:	cd b7       	in	r28, 0x3d	; 61
    16d0:	de b7       	in	r29, 0x3e	; 62
    16d2:	ac 97       	sbiw	r28, 0x2c	; 44
    16d4:	0f b6       	in	r0, 0x3f	; 63
    16d6:	f8 94       	cli
    16d8:	de bf       	out	0x3e, r29	; 62
    16da:	0f be       	out	0x3f, r0	; 63
    16dc:	cd bf       	out	0x3d, r28	; 61
    16de:	4c 01       	movw	r8, r24
    16e0:	6a 01       	movw	r12, r20
    16e2:	79 01       	movw	r14, r18
    16e4:	ce 01       	movw	r24, r28
    16e6:	01 96       	adiw	r24, 0x01	; 1
    16e8:	5c 01       	movw	r10, r24
    16ea:	88 e2       	ldi	r24, 0x28	; 40
    16ec:	d5 01       	movw	r26, r10
    16ee:	1d 92       	st	X+, r1
    16f0:	8a 95       	dec	r24
    16f2:	e9 f7       	brne	.-6      	; 0x16ee <_ZN11SimpleDHT115read2EiPfS0_Ph+0x38>
    16f4:	d4 01       	movw	r26, r8
    16f6:	ed 91       	ld	r30, X+
    16f8:	fc 91       	ld	r31, X
    16fa:	00 84       	ldd	r0, Z+8	; 0x08
    16fc:	f1 85       	ldd	r31, Z+9	; 0x09
    16fe:	e0 2d       	mov	r30, r0
    1700:	a5 01       	movw	r20, r10
    1702:	c4 01       	movw	r24, r8
    1704:	09 95       	icall
    1706:	00 97       	sbiw	r24, 0x00	; 0
    1708:	09 f0       	breq	.+2      	; 0x170c <_ZN11SimpleDHT115read2EiPfS0_Ph+0x56>
    170a:	4e c0       	rjmp	.+156    	; 0x17a8 <_ZN11SimpleDHT115read2EiPfS0_Ph+0xf2>
    170c:	1c a6       	std	Y+44, r1	; 0x2c
    170e:	1b a6       	std	Y+43, r1	; 0x2b
    1710:	1a a6       	std	Y+42, r1	; 0x2a
    1712:	19 a6       	std	Y+41, r1	; 0x29
    1714:	d4 01       	movw	r26, r8
    1716:	ed 91       	ld	r30, X+
    1718:	fc 91       	ld	r31, X
    171a:	02 84       	ldd	r0, Z+10	; 0x0a
    171c:	f3 85       	ldd	r31, Z+11	; 0x0b
    171e:	e0 2d       	mov	r30, r0
    1720:	9e 01       	movw	r18, r28
    1722:	27 5d       	subi	r18, 0xD7	; 215
    1724:	3f 4f       	sbci	r19, 0xFF	; 255
    1726:	ae 01       	movw	r20, r28
    1728:	45 5d       	subi	r20, 0xD5	; 213
    172a:	5f 4f       	sbci	r21, 0xFF	; 255
    172c:	b5 01       	movw	r22, r10
    172e:	c4 01       	movw	r24, r8
    1730:	09 95       	icall
    1732:	00 97       	sbiw	r24, 0x00	; 0
    1734:	c9 f5       	brne	.+114    	; 0x17a8 <_ZN11SimpleDHT115read2EiPfS0_Ph+0xf2>
    1736:	01 15       	cp	r16, r1
    1738:	11 05       	cpc	r17, r1
    173a:	39 f0       	breq	.+14     	; 0x174a <_ZN11SimpleDHT115read2EiPfS0_Ph+0x94>
    173c:	88 e2       	ldi	r24, 0x28	; 40
    173e:	f5 01       	movw	r30, r10
    1740:	d8 01       	movw	r26, r16
    1742:	01 90       	ld	r0, Z+
    1744:	0d 92       	st	X+, r0
    1746:	8a 95       	dec	r24
    1748:	e1 f7       	brne	.-8      	; 0x1742 <_ZN11SimpleDHT115read2EiPfS0_Ph+0x8c>
    174a:	c1 14       	cp	r12, r1
    174c:	d1 04       	cpc	r13, r1
    174e:	79 f0       	breq	.+30     	; 0x176e <_ZN11SimpleDHT115read2EiPfS0_Ph+0xb8>
    1750:	8c a5       	ldd	r24, Y+44	; 0x2c
    1752:	68 2f       	mov	r22, r24
    1754:	78 2f       	mov	r23, r24
    1756:	77 0f       	add	r23, r23
    1758:	77 0b       	sbc	r23, r23
    175a:	07 2e       	mov	r0, r23
    175c:	00 0c       	add	r0, r0
    175e:	88 0b       	sbc	r24, r24
    1760:	99 0b       	sbc	r25, r25
    1762:	97 d4       	rcall	.+2350   	; 0x2092 <__floatsisf>
    1764:	f6 01       	movw	r30, r12
    1766:	60 83       	st	Z, r22
    1768:	71 83       	std	Z+1, r23	; 0x01
    176a:	82 83       	std	Z+2, r24	; 0x02
    176c:	93 83       	std	Z+3, r25	; 0x03
    176e:	e1 14       	cp	r14, r1
    1770:	f1 04       	cpc	r15, r1
    1772:	81 f0       	breq	.+32     	; 0x1794 <_ZN11SimpleDHT115read2EiPfS0_Ph+0xde>
    1774:	8a a5       	ldd	r24, Y+42	; 0x2a
    1776:	68 2f       	mov	r22, r24
    1778:	78 2f       	mov	r23, r24
    177a:	77 0f       	add	r23, r23
    177c:	77 0b       	sbc	r23, r23
    177e:	07 2e       	mov	r0, r23
    1780:	00 0c       	add	r0, r0
    1782:	88 0b       	sbc	r24, r24
    1784:	99 0b       	sbc	r25, r25
    1786:	85 d4       	rcall	.+2314   	; 0x2092 <__floatsisf>
    1788:	d7 01       	movw	r26, r14
    178a:	6d 93       	st	X+, r22
    178c:	7d 93       	st	X+, r23
    178e:	8d 93       	st	X+, r24
    1790:	9c 93       	st	X, r25
    1792:	13 97       	sbiw	r26, 0x03	; 3
    1794:	8b a5       	ldd	r24, Y+43	; 0x2b
    1796:	9c a5       	ldd	r25, Y+44	; 0x2c
    1798:	89 2b       	or	r24, r25
    179a:	41 f4       	brne	.+16     	; 0x17ac <_ZN11SimpleDHT115read2EiPfS0_Ph+0xf6>
    179c:	89 a5       	ldd	r24, Y+41	; 0x29
    179e:	9a a5       	ldd	r25, Y+42	; 0x2a
    17a0:	89 2b       	or	r24, r25
    17a2:	21 f4       	brne	.+8      	; 0x17ac <_ZN11SimpleDHT115read2EiPfS0_Ph+0xf6>
    17a4:	2a e6       	ldi	r18, 0x6A	; 106
    17a6:	03 c0       	rjmp	.+6      	; 0x17ae <_ZN11SimpleDHT115read2EiPfS0_Ph+0xf8>
    17a8:	28 2f       	mov	r18, r24
    17aa:	02 c0       	rjmp	.+4      	; 0x17b0 <_ZN11SimpleDHT115read2EiPfS0_Ph+0xfa>
    17ac:	20 e0       	ldi	r18, 0x00	; 0
    17ae:	90 e0       	ldi	r25, 0x00	; 0
    17b0:	82 2f       	mov	r24, r18
    17b2:	ac 96       	adiw	r28, 0x2c	; 44
    17b4:	0f b6       	in	r0, 0x3f	; 63
    17b6:	f8 94       	cli
    17b8:	de bf       	out	0x3e, r29	; 62
    17ba:	0f be       	out	0x3f, r0	; 63
    17bc:	cd bf       	out	0x3d, r28	; 61
    17be:	df 91       	pop	r29
    17c0:	cf 91       	pop	r28
    17c2:	1f 91       	pop	r17
    17c4:	0f 91       	pop	r16
    17c6:	ff 90       	pop	r15
    17c8:	ef 90       	pop	r14
    17ca:	df 90       	pop	r13
    17cc:	cf 90       	pop	r12
    17ce:	bf 90       	pop	r11
    17d0:	af 90       	pop	r10
    17d2:	9f 90       	pop	r9
    17d4:	8f 90       	pop	r8
    17d6:	08 95       	ret

000017d8 <_ZN9SimpleDHT7confirmEiih>:
    17d8:	df 92       	push	r13
    17da:	ef 92       	push	r14
    17dc:	ff 92       	push	r15
    17de:	0f 93       	push	r16
    17e0:	1f 93       	push	r17
    17e2:	cf 93       	push	r28
    17e4:	df 93       	push	r29
    17e6:	d6 2e       	mov	r13, r22
    17e8:	ca 01       	movw	r24, r20
    17ea:	6a e0       	ldi	r22, 0x0A	; 10
    17ec:	70 e0       	ldi	r23, 0x00	; 0
    17ee:	0e 94 a0 17 	call	0x2f40	; 0x2f40 <__divmodhi4>
    17f2:	8b 01       	movw	r16, r22
    17f4:	18 16       	cp	r1, r24
    17f6:	19 06       	cpc	r1, r25
    17f8:	14 f4       	brge	.+4      	; 0x17fe <_ZN9SimpleDHT7confirmEiih+0x26>
    17fa:	0f 5f       	subi	r16, 0xFF	; 255
    17fc:	1f 4f       	sbci	r17, 0xFF	; 255
    17fe:	c0 e0       	ldi	r28, 0x00	; 0
    1800:	d0 e0       	ldi	r29, 0x00	; 0
    1802:	e2 2e       	mov	r14, r18
    1804:	f1 2c       	mov	r15, r1
    1806:	c0 17       	cp	r28, r16
    1808:	d1 07       	cpc	r29, r17
    180a:	64 f4       	brge	.+24     	; 0x1824 <_ZN9SimpleDHT7confirmEiih+0x4c>
    180c:	8a e0       	ldi	r24, 0x0A	; 10
    180e:	90 e0       	ldi	r25, 0x00	; 0
    1810:	0e 94 55 15 	call	0x2aaa	; 0x2aaa <delayMicroseconds>
    1814:	8d 2d       	mov	r24, r13
    1816:	0e 94 d2 16 	call	0x2da4	; 0x2da4 <digitalRead>
    181a:	8e 15       	cp	r24, r14
    181c:	9f 05       	cpc	r25, r15
    181e:	29 f4       	brne	.+10     	; 0x182a <_ZN9SimpleDHT7confirmEiih+0x52>
    1820:	21 96       	adiw	r28, 0x01	; 1
    1822:	f1 cf       	rjmp	.-30     	; 0x1806 <_ZN9SimpleDHT7confirmEiih+0x2e>
    1824:	8f ef       	ldi	r24, 0xFF	; 255
    1826:	9f ef       	ldi	r25, 0xFF	; 255
    1828:	02 c0       	rjmp	.+4      	; 0x182e <_ZN9SimpleDHT7confirmEiih+0x56>
    182a:	80 e0       	ldi	r24, 0x00	; 0
    182c:	90 e0       	ldi	r25, 0x00	; 0
    182e:	df 91       	pop	r29
    1830:	cf 91       	pop	r28
    1832:	1f 91       	pop	r17
    1834:	0f 91       	pop	r16
    1836:	ff 90       	pop	r15
    1838:	ef 90       	pop	r14
    183a:	df 90       	pop	r13
    183c:	08 95       	ret

0000183e <_ZN11SimpleDHT116sampleEiPh>:
    }

    return ret;
}

int SimpleDHT11::sample(int pin, byte data[40]) {
    183e:	af 92       	push	r10
    1840:	bf 92       	push	r11
    1842:	cf 92       	push	r12
    1844:	df 92       	push	r13
    1846:	ef 92       	push	r14
    1848:	ff 92       	push	r15
    184a:	0f 93       	push	r16
    184c:	1f 93       	push	r17
    184e:	cf 93       	push	r28
    1850:	df 93       	push	r29
    1852:	8c 01       	movw	r16, r24
    1854:	eb 01       	movw	r28, r22
    1856:	7a 01       	movw	r14, r20
    // empty output data.
    memset(data, 0, 40);
    1858:	88 e2       	ldi	r24, 0x28	; 40
    185a:	da 01       	movw	r26, r20
    185c:	1d 92       	st	X+, r1
    185e:	8a 95       	dec	r24
    1860:	e9 f7       	brne	.-6      	; 0x185c <_ZN11SimpleDHT116sampleEiPh+0x1e>
    // According to protocol: https://akizukidenshi.com/download/ds/aosong/DHT11.pdf
    // notify DHT11 to start:
    //    1. PULL LOW 20ms.
    //    2. PULL HIGH 20-40us.
    //    3. SET TO INPUT.
    pinMode(pin, OUTPUT);
    1862:	61 e0       	ldi	r22, 0x01	; 1
    1864:	8c 2f       	mov	r24, r28
    1866:	0e 94 68 16 	call	0x2cd0	; 0x2cd0 <pinMode>
    digitalWrite(pin, LOW);
    186a:	60 e0       	ldi	r22, 0x00	; 0
    186c:	8c 2f       	mov	r24, r28
    186e:	0e 94 a4 16 	call	0x2d48	; 0x2d48 <digitalWrite>
    delay(20);
    1872:	64 e1       	ldi	r22, 0x14	; 20
    1874:	70 e0       	ldi	r23, 0x00	; 0
    1876:	80 e0       	ldi	r24, 0x00	; 0
    1878:	90 e0       	ldi	r25, 0x00	; 0
    187a:	0e 94 1c 15 	call	0x2a38	; 0x2a38 <delay>
    digitalWrite(pin, HIGH);
    187e:	61 e0       	ldi	r22, 0x01	; 1
    1880:	8c 2f       	mov	r24, r28
    1882:	0e 94 a4 16 	call	0x2d48	; 0x2d48 <digitalWrite>
    pinMode(pin, INPUT);
    1886:	60 e0       	ldi	r22, 0x00	; 0
    1888:	8c 2f       	mov	r24, r28
    188a:	0e 94 68 16 	call	0x2cd0	; 0x2cd0 <pinMode>
    delayMicroseconds(30);
    188e:	8e e1       	ldi	r24, 0x1E	; 30
    1890:	90 e0       	ldi	r25, 0x00	; 0
    1892:	0e 94 55 15 	call	0x2aaa	; 0x2aaa <delayMicroseconds>
    // DHT11 starting:
    //    1. PULL LOW 80us
    //    2. PULL HIGH 80us
    if (confirm(pin, 80, LOW)) {
    1896:	d8 01       	movw	r26, r16
    1898:	ed 91       	ld	r30, X+
    189a:	fc 91       	ld	r31, X
    189c:	04 80       	ldd	r0, Z+4	; 0x04
    189e:	f5 81       	ldd	r31, Z+5	; 0x05
    18a0:	e0 2d       	mov	r30, r0
    18a2:	20 e0       	ldi	r18, 0x00	; 0
    18a4:	40 e5       	ldi	r20, 0x50	; 80
    18a6:	50 e0       	ldi	r21, 0x00	; 0
    18a8:	be 01       	movw	r22, r28
    18aa:	c8 01       	movw	r24, r16
    18ac:	09 95       	icall
    18ae:	89 2b       	or	r24, r25
    18b0:	a9 f5       	brne	.+106    	; 0x191c <_ZN11SimpleDHT116sampleEiPh+0xde>
        return SimpleDHTErrStartLow;
    }
    if (confirm(pin, 80, HIGH)) {
    18b2:	d8 01       	movw	r26, r16
    18b4:	ed 91       	ld	r30, X+
    18b6:	fc 91       	ld	r31, X
    18b8:	04 80       	ldd	r0, Z+4	; 0x04
    18ba:	f5 81       	ldd	r31, Z+5	; 0x05
    18bc:	e0 2d       	mov	r30, r0
    18be:	21 e0       	ldi	r18, 0x01	; 1
    18c0:	40 e5       	ldi	r20, 0x50	; 80
    18c2:	50 e0       	ldi	r21, 0x00	; 0
    18c4:	be 01       	movw	r22, r28
    18c6:	c8 01       	movw	r24, r16
    18c8:	09 95       	icall
    18ca:	89 2b       	or	r24, r25
    18cc:	51 f5       	brne	.+84     	; 0x1922 <_ZN11SimpleDHT116sampleEiPh+0xe4>
    18ce:	57 01       	movw	r10, r14
    18d0:	b8 e2       	ldi	r27, 0x28	; 40
    18d2:	ab 0e       	add	r10, r27
    18d4:	b1 1c       	adc	r11, r1
    // DHT11 data transmite:
    //    1. 1bit start, PULL LOW 50us
    //    2. PULL HIGH 26-28us, bit(0)
    //    3. PULL HIGH 70us, bit(1)
    for (int j = 0; j < 40; j++) {
        if (confirm(pin, 50, LOW)) {
    18d6:	d8 01       	movw	r26, r16
    18d8:	ed 91       	ld	r30, X+
    18da:	fc 91       	ld	r31, X
    18dc:	04 80       	ldd	r0, Z+4	; 0x04
    18de:	f5 81       	ldd	r31, Z+5	; 0x05
    18e0:	e0 2d       	mov	r30, r0
    18e2:	20 e0       	ldi	r18, 0x00	; 0
    18e4:	42 e3       	ldi	r20, 0x32	; 50
    18e6:	50 e0       	ldi	r21, 0x00	; 0
    18e8:	be 01       	movw	r22, r28
    18ea:	c8 01       	movw	r24, r16
    18ec:	09 95       	icall
    18ee:	89 2b       	or	r24, r25
    18f0:	d9 f4       	brne	.+54     	; 0x1928 <_ZN11SimpleDHT116sampleEiPh+0xea>
    18f2:	c1 2c       	mov	r12, r1
    18f4:	d1 2c       	mov	r13, r1
        // for the method call use more than 20us,
        // so it maybe failed to detect the bit0.
        bool ok = false;
        int tick = 0;
        for (int i = 0; i < 8; i++, tick++) {
            if (digitalRead(pin) != HIGH) {
    18f6:	8c 2f       	mov	r24, r28
    18f8:	0e 94 d2 16 	call	0x2da4	; 0x2da4 <digitalRead>
    18fc:	01 97       	sbiw	r24, 0x01	; 1
    18fe:	b9 f4       	brne	.+46     	; 0x192e <_ZN11SimpleDHT116sampleEiPh+0xf0>
                ok = true;
                break;
            }
            delayMicroseconds(10);
    1900:	8a e0       	ldi	r24, 0x0A	; 10
    1902:	90 e0       	ldi	r25, 0x00	; 0
    1904:	0e 94 55 15 	call	0x2aaa	; 0x2aaa <delayMicroseconds>
        // read a bit, should never call method,
        // for the method call use more than 20us,
        // so it maybe failed to detect the bit0.
        bool ok = false;
        int tick = 0;
        for (int i = 0; i < 8; i++, tick++) {
    1908:	bf ef       	ldi	r27, 0xFF	; 255
    190a:	cb 1a       	sub	r12, r27
    190c:	db 0a       	sbc	r13, r27
    190e:	e8 e0       	ldi	r30, 0x08	; 8
    1910:	ce 16       	cp	r12, r30
    1912:	d1 04       	cpc	r13, r1
    1914:	81 f7       	brne	.-32     	; 0x18f6 <_ZN11SimpleDHT116sampleEiPh+0xb8>
                break;
            }
            delayMicroseconds(10);
        }
        if (!ok) {
            return SimpleDHTErrDataRead;
    1916:	87 e6       	ldi	r24, 0x67	; 103
    1918:	90 e0       	ldi	r25, 0x00	; 0
    191a:	25 c0       	rjmp	.+74     	; 0x1966 <_ZN11SimpleDHT116sampleEiPh+0x128>
    delayMicroseconds(30);
    // DHT11 starting:
    //    1. PULL LOW 80us
    //    2. PULL HIGH 80us
    if (confirm(pin, 80, LOW)) {
        return SimpleDHTErrStartLow;
    191c:	84 e6       	ldi	r24, 0x64	; 100
    191e:	90 e0       	ldi	r25, 0x00	; 0
    1920:	22 c0       	rjmp	.+68     	; 0x1966 <_ZN11SimpleDHT116sampleEiPh+0x128>
    }
    if (confirm(pin, 80, HIGH)) {
        return SimpleDHTErrStartHigh;
    1922:	85 e6       	ldi	r24, 0x65	; 101
    1924:	90 e0       	ldi	r25, 0x00	; 0
    1926:	1f c0       	rjmp	.+62     	; 0x1966 <_ZN11SimpleDHT116sampleEiPh+0x128>
    //    1. 1bit start, PULL LOW 50us
    //    2. PULL HIGH 26-28us, bit(0)
    //    3. PULL HIGH 70us, bit(1)
    for (int j = 0; j < 40; j++) {
        if (confirm(pin, 50, LOW)) {
            return SimpleDHTErrDataLow;
    1928:	86 e6       	ldi	r24, 0x66	; 102
    192a:	90 e0       	ldi	r25, 0x00	; 0
    192c:	1c c0       	rjmp	.+56     	; 0x1966 <_ZN11SimpleDHT116sampleEiPh+0x128>
            delayMicroseconds(10);
        }
        if (!ok) {
            return SimpleDHTErrDataRead;
        }
        data[j] = (tick > 3? 1:0);
    192e:	81 e0       	ldi	r24, 0x01	; 1
    1930:	b4 e0       	ldi	r27, 0x04	; 4
    1932:	cb 16       	cp	r12, r27
    1934:	d1 04       	cpc	r13, r1
    1936:	0c f4       	brge	.+2      	; 0x193a <_ZN11SimpleDHT116sampleEiPh+0xfc>
    1938:	80 e0       	ldi	r24, 0x00	; 0
    193a:	f7 01       	movw	r30, r14
    193c:	81 93       	st	Z+, r24
    193e:	7f 01       	movw	r14, r30

    // DHT11 data transmite:
    //    1. 1bit start, PULL LOW 50us
    //    2. PULL HIGH 26-28us, bit(0)
    //    3. PULL HIGH 70us, bit(1)
    for (int j = 0; j < 40; j++) {
    1940:	ae 16       	cp	r10, r30
    1942:	bf 06       	cpc	r11, r31
    1944:	41 f6       	brne	.-112    	; 0x18d6 <_ZN11SimpleDHT116sampleEiPh+0x98>
        data[j] = (tick > 3? 1:0);
    }

    // DHT11 EOF:
    //    1. PULL LOW 50us.
    if (confirm(pin, 50, LOW)) {
    1946:	d8 01       	movw	r26, r16
    1948:	ed 91       	ld	r30, X+
    194a:	fc 91       	ld	r31, X
    194c:	04 80       	ldd	r0, Z+4	; 0x04
    194e:	f5 81       	ldd	r31, Z+5	; 0x05
    1950:	e0 2d       	mov	r30, r0
    1952:	20 e0       	ldi	r18, 0x00	; 0
    1954:	42 e3       	ldi	r20, 0x32	; 50
    1956:	50 e0       	ldi	r21, 0x00	; 0
    1958:	be 01       	movw	r22, r28
    195a:	c8 01       	movw	r24, r16
    195c:	09 95       	icall
    195e:	00 97       	sbiw	r24, 0x00	; 0
    1960:	11 f0       	breq	.+4      	; 0x1966 <_ZN11SimpleDHT116sampleEiPh+0x128>
        return SimpleDHTErrDataEOF;
    1962:	88 e6       	ldi	r24, 0x68	; 104
    1964:	90 e0       	ldi	r25, 0x00	; 0
    }

    return SimpleDHTErrSuccess;
}
    1966:	df 91       	pop	r29
    1968:	cf 91       	pop	r28
    196a:	1f 91       	pop	r17
    196c:	0f 91       	pop	r16
    196e:	ff 90       	pop	r15
    1970:	ef 90       	pop	r14
    1972:	df 90       	pop	r13
    1974:	cf 90       	pop	r12
    1976:	bf 90       	pop	r11
    1978:	af 90       	pop	r10
    197a:	08 95       	ret

0000197c <twi_init>:
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    197c:	10 92 0b 03 	sts	0x030B, r1	; 0x80030b <twi_state>
    1980:	81 e0       	ldi	r24, 0x01	; 1
    1982:	80 93 09 03 	sts	0x0309, r24	; 0x800309 <twi_sendStop>
    1986:	10 92 08 03 	sts	0x0308, r1	; 0x800308 <twi_inRepStart>
    198a:	61 e0       	ldi	r22, 0x01	; 1
    198c:	81 e1       	ldi	r24, 0x11	; 17
    198e:	0e 94 a4 16 	call	0x2d48	; 0x2d48 <digitalWrite>
    1992:	61 e0       	ldi	r22, 0x01	; 1
    1994:	80 e1       	ldi	r24, 0x10	; 16
    1996:	0e 94 a4 16 	call	0x2d48	; 0x2d48 <digitalWrite>
    199a:	e9 eb       	ldi	r30, 0xB9	; 185
    199c:	f0 e0       	ldi	r31, 0x00	; 0
    199e:	80 81       	ld	r24, Z
    19a0:	8e 7f       	andi	r24, 0xFE	; 254
    19a2:	80 83       	st	Z, r24
    19a4:	80 81       	ld	r24, Z
    19a6:	8d 7f       	andi	r24, 0xFD	; 253
    19a8:	80 83       	st	Z, r24
    19aa:	88 e4       	ldi	r24, 0x48	; 72
    19ac:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>
    19b0:	85 e4       	ldi	r24, 0x45	; 69
    19b2:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    19b6:	08 95       	ret

000019b8 <twi_writeTo>:
    19b8:	0f 93       	push	r16
    19ba:	41 32       	cpi	r20, 0x21	; 33
    19bc:	08 f0       	brcs	.+2      	; 0x19c0 <twi_writeTo+0x8>
    19be:	4a c0       	rjmp	.+148    	; 0x1a54 <twi_writeTo+0x9c>
    19c0:	90 91 0b 03 	lds	r25, 0x030B	; 0x80030b <twi_state>
    19c4:	91 11       	cpse	r25, r1
    19c6:	fc cf       	rjmp	.-8      	; 0x19c0 <twi_writeTo+0x8>
    19c8:	32 e0       	ldi	r19, 0x02	; 2
    19ca:	30 93 0b 03 	sts	0x030B, r19	; 0x80030b <twi_state>
    19ce:	00 93 09 03 	sts	0x0309, r16	; 0x800309 <twi_sendStop>
    19d2:	3f ef       	ldi	r19, 0xFF	; 255
    19d4:	30 93 9e 02 	sts	0x029E, r19	; 0x80029e <twi_error>
    19d8:	10 92 e3 02 	sts	0x02E3, r1	; 0x8002e3 <twi_masterBufferIndex>
    19dc:	40 93 e2 02 	sts	0x02E2, r20	; 0x8002e2 <twi_masterBufferLength>
    19e0:	56 2f       	mov	r21, r22
    19e2:	a4 ee       	ldi	r26, 0xE4	; 228
    19e4:	b2 e0       	ldi	r27, 0x02	; 2
    19e6:	fb 01       	movw	r30, r22
    19e8:	3e 2f       	mov	r19, r30
    19ea:	35 1b       	sub	r19, r21
    19ec:	34 17       	cp	r19, r20
    19ee:	18 f4       	brcc	.+6      	; 0x19f6 <twi_writeTo+0x3e>
    19f0:	31 91       	ld	r19, Z+
    19f2:	3d 93       	st	X+, r19
    19f4:	f9 cf       	rjmp	.-14     	; 0x19e8 <twi_writeTo+0x30>
    19f6:	10 92 0a 03 	sts	0x030A, r1	; 0x80030a <twi_slarw>
    19fa:	30 91 0a 03 	lds	r19, 0x030A	; 0x80030a <twi_slarw>
    19fe:	88 0f       	add	r24, r24
    1a00:	83 2b       	or	r24, r19
    1a02:	80 93 0a 03 	sts	0x030A, r24	; 0x80030a <twi_slarw>
    1a06:	80 91 08 03 	lds	r24, 0x0308	; 0x800308 <twi_inRepStart>
    1a0a:	81 30       	cpi	r24, 0x01	; 1
    1a0c:	61 f4       	brne	.+24     	; 0x1a26 <twi_writeTo+0x6e>
    1a0e:	10 92 08 03 	sts	0x0308, r1	; 0x800308 <twi_inRepStart>
    1a12:	80 91 0a 03 	lds	r24, 0x030A	; 0x80030a <twi_slarw>
    1a16:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    1a1a:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    1a1e:	83 fd       	sbrc	r24, 3
    1a20:	f8 cf       	rjmp	.-16     	; 0x1a12 <twi_writeTo+0x5a>
    1a22:	85 ec       	ldi	r24, 0xC5	; 197
    1a24:	01 c0       	rjmp	.+2      	; 0x1a28 <twi_writeTo+0x70>
    1a26:	85 ee       	ldi	r24, 0xE5	; 229
    1a28:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    1a2c:	22 23       	and	r18, r18
    1a2e:	21 f0       	breq	.+8      	; 0x1a38 <twi_writeTo+0x80>
    1a30:	80 91 0b 03 	lds	r24, 0x030B	; 0x80030b <twi_state>
    1a34:	82 30       	cpi	r24, 0x02	; 2
    1a36:	d1 f3       	breq	.-12     	; 0x1a2c <twi_writeTo+0x74>
    1a38:	80 91 9e 02 	lds	r24, 0x029E	; 0x80029e <twi_error>
    1a3c:	8f 3f       	cpi	r24, 0xFF	; 255
    1a3e:	79 f0       	breq	.+30     	; 0x1a5e <twi_writeTo+0xa6>
    1a40:	80 91 9e 02 	lds	r24, 0x029E	; 0x80029e <twi_error>
    1a44:	80 32       	cpi	r24, 0x20	; 32
    1a46:	41 f0       	breq	.+16     	; 0x1a58 <twi_writeTo+0xa0>
    1a48:	80 91 9e 02 	lds	r24, 0x029E	; 0x80029e <twi_error>
    1a4c:	80 33       	cpi	r24, 0x30	; 48
    1a4e:	31 f0       	breq	.+12     	; 0x1a5c <twi_writeTo+0xa4>
    1a50:	94 e0       	ldi	r25, 0x04	; 4
    1a52:	05 c0       	rjmp	.+10     	; 0x1a5e <twi_writeTo+0xa6>
    1a54:	91 e0       	ldi	r25, 0x01	; 1
    1a56:	03 c0       	rjmp	.+6      	; 0x1a5e <twi_writeTo+0xa6>
    1a58:	92 e0       	ldi	r25, 0x02	; 2
    1a5a:	01 c0       	rjmp	.+2      	; 0x1a5e <twi_writeTo+0xa6>
    1a5c:	93 e0       	ldi	r25, 0x03	; 3
    1a5e:	89 2f       	mov	r24, r25
    1a60:	0f 91       	pop	r16
    1a62:	08 95       	ret

00001a64 <twi_transmit>:
    1a64:	61 32       	cpi	r22, 0x21	; 33
    1a66:	98 f4       	brcc	.+38     	; 0x1a8e <twi_transmit+0x2a>
    1a68:	20 91 0b 03 	lds	r18, 0x030B	; 0x80030b <twi_state>
    1a6c:	24 30       	cpi	r18, 0x04	; 4
    1a6e:	89 f4       	brne	.+34     	; 0x1a92 <twi_transmit+0x2e>
    1a70:	60 93 c0 02 	sts	0x02C0, r22	; 0x8002c0 <twi_txBufferLength>
    1a74:	28 2f       	mov	r18, r24
    1a76:	a2 ec       	ldi	r26, 0xC2	; 194
    1a78:	b2 e0       	ldi	r27, 0x02	; 2
    1a7a:	fc 01       	movw	r30, r24
    1a7c:	8e 2f       	mov	r24, r30
    1a7e:	82 1b       	sub	r24, r18
    1a80:	86 17       	cp	r24, r22
    1a82:	18 f4       	brcc	.+6      	; 0x1a8a <twi_transmit+0x26>
    1a84:	81 91       	ld	r24, Z+
    1a86:	8d 93       	st	X+, r24
    1a88:	f9 cf       	rjmp	.-14     	; 0x1a7c <twi_transmit+0x18>
    1a8a:	80 e0       	ldi	r24, 0x00	; 0
    1a8c:	08 95       	ret
    1a8e:	81 e0       	ldi	r24, 0x01	; 1
    1a90:	08 95       	ret
    1a92:	82 e0       	ldi	r24, 0x02	; 2
    1a94:	08 95       	ret

00001a96 <twi_stop>:
 * Output   none
 */
void twi_stop(void)
{
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
    1a96:	85 ed       	ldi	r24, 0xD5	; 213
    1a98:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>

  // wait for stop condition to be exectued on bus
  // TWINT is not set after a stop condition!
  while(TWCR & _BV(TWSTO)){
    1a9c:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    1aa0:	84 fd       	sbrc	r24, 4
    1aa2:	fc cf       	rjmp	.-8      	; 0x1a9c <twi_stop+0x6>
    continue;
  }

  // update twi state
  twi_state = TWI_READY;
    1aa4:	10 92 0b 03 	sts	0x030B, r1	; 0x80030b <twi_state>
    1aa8:	08 95       	ret

00001aaa <twi_releaseBus>:
 * Output   none
 */
void twi_releaseBus(void)
{
  // release bus
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT);
    1aaa:	85 ec       	ldi	r24, 0xC5	; 197
    1aac:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>

  // update twi state
  twi_state = TWI_READY;
    1ab0:	10 92 0b 03 	sts	0x030B, r1	; 0x80030b <twi_state>
    1ab4:	08 95       	ret

00001ab6 <__vector_26>:
}

ISR(TWI_vect)
{
    1ab6:	1f 92       	push	r1
    1ab8:	0f 92       	push	r0
    1aba:	0f b6       	in	r0, 0x3f	; 63
    1abc:	0f 92       	push	r0
    1abe:	11 24       	eor	r1, r1
    1ac0:	0b b6       	in	r0, 0x3b	; 59
    1ac2:	0f 92       	push	r0
    1ac4:	2f 93       	push	r18
    1ac6:	3f 93       	push	r19
    1ac8:	4f 93       	push	r20
    1aca:	5f 93       	push	r21
    1acc:	6f 93       	push	r22
    1ace:	7f 93       	push	r23
    1ad0:	8f 93       	push	r24
    1ad2:	9f 93       	push	r25
    1ad4:	af 93       	push	r26
    1ad6:	bf 93       	push	r27
    1ad8:	ef 93       	push	r30
    1ada:	ff 93       	push	r31
  switch(TW_STATUS){
    1adc:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
    1ae0:	88 7f       	andi	r24, 0xF8	; 248
    1ae2:	80 36       	cpi	r24, 0x60	; 96
    1ae4:	09 f4       	brne	.+2      	; 0x1ae8 <__vector_26+0x32>
    1ae6:	9d c0       	rjmp	.+314    	; 0x1c22 <__vector_26+0x16c>
    1ae8:	70 f5       	brcc	.+92     	; 0x1b46 <__vector_26+0x90>
    1aea:	88 32       	cpi	r24, 0x28	; 40
    1aec:	09 f4       	brne	.+2      	; 0x1af0 <__vector_26+0x3a>
    1aee:	5c c0       	rjmp	.+184    	; 0x1ba8 <__vector_26+0xf2>
    1af0:	90 f4       	brcc	.+36     	; 0x1b16 <__vector_26+0x60>
    1af2:	80 31       	cpi	r24, 0x10	; 16
    1af4:	09 f4       	brne	.+2      	; 0x1af8 <__vector_26+0x42>
    1af6:	55 c0       	rjmp	.+170    	; 0x1ba2 <__vector_26+0xec>
    1af8:	38 f4       	brcc	.+14     	; 0x1b08 <__vector_26+0x52>
    1afa:	88 23       	and	r24, r24
    1afc:	09 f4       	brne	.+2      	; 0x1b00 <__vector_26+0x4a>
    1afe:	f3 c0       	rjmp	.+486    	; 0x1ce6 <__vector_26+0x230>
    1b00:	88 30       	cpi	r24, 0x08	; 8
    1b02:	09 f4       	brne	.+2      	; 0x1b06 <__vector_26+0x50>
    1b04:	4e c0       	rjmp	.+156    	; 0x1ba2 <__vector_26+0xec>
    1b06:	f2 c0       	rjmp	.+484    	; 0x1cec <__vector_26+0x236>
    1b08:	88 31       	cpi	r24, 0x18	; 24
    1b0a:	09 f4       	brne	.+2      	; 0x1b0e <__vector_26+0x58>
    1b0c:	4d c0       	rjmp	.+154    	; 0x1ba8 <__vector_26+0xf2>
    1b0e:	80 32       	cpi	r24, 0x20	; 32
    1b10:	09 f4       	brne	.+2      	; 0x1b14 <__vector_26+0x5e>
    1b12:	5e c0       	rjmp	.+188    	; 0x1bd0 <__vector_26+0x11a>
    1b14:	eb c0       	rjmp	.+470    	; 0x1cec <__vector_26+0x236>
    1b16:	80 34       	cpi	r24, 0x40	; 64
    1b18:	09 f4       	brne	.+2      	; 0x1b1c <__vector_26+0x66>
    1b1a:	69 c0       	rjmp	.+210    	; 0x1bee <__vector_26+0x138>
    1b1c:	50 f4       	brcc	.+20     	; 0x1b32 <__vector_26+0x7c>
    1b1e:	80 33       	cpi	r24, 0x30	; 48
    1b20:	09 f4       	brne	.+2      	; 0x1b24 <__vector_26+0x6e>
    1b22:	56 c0       	rjmp	.+172    	; 0x1bd0 <__vector_26+0x11a>
    1b24:	88 33       	cpi	r24, 0x38	; 56
    1b26:	09 f0       	breq	.+2      	; 0x1b2a <__vector_26+0x74>
    1b28:	e1 c0       	rjmp	.+450    	; 0x1cec <__vector_26+0x236>
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
      twi_stop();
      break;
    case TW_MT_ARB_LOST: // lost bus arbitration
      twi_error = TW_MT_ARB_LOST;
    1b2a:	80 93 9e 02 	sts	0x029E, r24	; 0x80029e <twi_error>
      twi_releaseBus();
    1b2e:	bd df       	rcall	.-134    	; 0x1aaa <twi_releaseBus>
      break;
    1b30:	dd c0       	rjmp	.+442    	; 0x1cec <__vector_26+0x236>
  twi_state = TWI_READY;
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    1b32:	80 35       	cpi	r24, 0x50	; 80
    1b34:	09 f4       	brne	.+2      	; 0x1b38 <__vector_26+0x82>
    1b36:	4f c0       	rjmp	.+158    	; 0x1bd6 <__vector_26+0x120>
    1b38:	88 35       	cpi	r24, 0x58	; 88
    1b3a:	09 f4       	brne	.+2      	; 0x1b3e <__vector_26+0x88>
    1b3c:	5d c0       	rjmp	.+186    	; 0x1bf8 <__vector_26+0x142>
    1b3e:	88 34       	cpi	r24, 0x48	; 72
    1b40:	09 f0       	breq	.+2      	; 0x1b44 <__vector_26+0x8e>
    1b42:	d4 c0       	rjmp	.+424    	; 0x1cec <__vector_26+0x236>
    1b44:	d2 c0       	rjmp	.+420    	; 0x1cea <__vector_26+0x234>
    1b46:	88 39       	cpi	r24, 0x98	; 152
    1b48:	09 f4       	brne	.+2      	; 0x1b4c <__vector_26+0x96>
    1b4a:	c3 c0       	rjmp	.+390    	; 0x1cd2 <__vector_26+0x21c>
    1b4c:	a8 f4       	brcc	.+42     	; 0x1b78 <__vector_26+0xc2>
    1b4e:	88 37       	cpi	r24, 0x78	; 120
    1b50:	09 f4       	brne	.+2      	; 0x1b54 <__vector_26+0x9e>
    1b52:	67 c0       	rjmp	.+206    	; 0x1c22 <__vector_26+0x16c>
    1b54:	38 f4       	brcc	.+14     	; 0x1b64 <__vector_26+0xae>
    1b56:	88 36       	cpi	r24, 0x68	; 104
    1b58:	09 f4       	brne	.+2      	; 0x1b5c <__vector_26+0xa6>
    1b5a:	63 c0       	rjmp	.+198    	; 0x1c22 <__vector_26+0x16c>
    1b5c:	80 37       	cpi	r24, 0x70	; 112
    1b5e:	09 f4       	brne	.+2      	; 0x1b62 <__vector_26+0xac>
    1b60:	60 c0       	rjmp	.+192    	; 0x1c22 <__vector_26+0x16c>
    1b62:	c4 c0       	rjmp	.+392    	; 0x1cec <__vector_26+0x236>
    1b64:	88 38       	cpi	r24, 0x88	; 136
    1b66:	09 f4       	brne	.+2      	; 0x1b6a <__vector_26+0xb4>
    1b68:	b4 c0       	rjmp	.+360    	; 0x1cd2 <__vector_26+0x21c>
    1b6a:	80 39       	cpi	r24, 0x90	; 144
    1b6c:	09 f4       	brne	.+2      	; 0x1b70 <__vector_26+0xba>
    1b6e:	5f c0       	rjmp	.+190    	; 0x1c2e <__vector_26+0x178>
    1b70:	80 38       	cpi	r24, 0x80	; 128
    1b72:	09 f0       	breq	.+2      	; 0x1b76 <__vector_26+0xc0>
    1b74:	bb c0       	rjmp	.+374    	; 0x1cec <__vector_26+0x236>
    1b76:	5b c0       	rjmp	.+182    	; 0x1c2e <__vector_26+0x178>
    1b78:	80 3b       	cpi	r24, 0xB0	; 176
    1b7a:	09 f4       	brne	.+2      	; 0x1b7e <__vector_26+0xc8>
    1b7c:	82 c0       	rjmp	.+260    	; 0x1c82 <__vector_26+0x1cc>
    1b7e:	38 f4       	brcc	.+14     	; 0x1b8e <__vector_26+0xd8>
    1b80:	80 3a       	cpi	r24, 0xA0	; 160
    1b82:	09 f4       	brne	.+2      	; 0x1b86 <__vector_26+0xd0>
    1b84:	66 c0       	rjmp	.+204    	; 0x1c52 <__vector_26+0x19c>
    1b86:	88 3a       	cpi	r24, 0xA8	; 168
    1b88:	09 f4       	brne	.+2      	; 0x1b8c <__vector_26+0xd6>
    1b8a:	7b c0       	rjmp	.+246    	; 0x1c82 <__vector_26+0x1cc>
    1b8c:	af c0       	rjmp	.+350    	; 0x1cec <__vector_26+0x236>
    1b8e:	80 3c       	cpi	r24, 0xC0	; 192
    1b90:	09 f4       	brne	.+2      	; 0x1b94 <__vector_26+0xde>
    1b92:	a3 c0       	rjmp	.+326    	; 0x1cda <__vector_26+0x224>
    1b94:	88 3c       	cpi	r24, 0xC8	; 200
    1b96:	09 f4       	brne	.+2      	; 0x1b9a <__vector_26+0xe4>
    1b98:	a0 c0       	rjmp	.+320    	; 0x1cda <__vector_26+0x224>
    1b9a:	88 3b       	cpi	r24, 0xB8	; 184
    1b9c:	09 f4       	brne	.+2      	; 0x1ba0 <__vector_26+0xea>
    1b9e:	86 c0       	rjmp	.+268    	; 0x1cac <__vector_26+0x1f6>
    1ba0:	a5 c0       	rjmp	.+330    	; 0x1cec <__vector_26+0x236>
    // All Master
    case TW_START:     // sent start condition
    case TW_REP_START: // sent repeated start condition
      // copy device address and r/w bit to output register and ack
      TWDR = twi_slarw;
    1ba2:	80 91 0a 03 	lds	r24, 0x030A	; 0x80030a <twi_slarw>
    1ba6:	10 c0       	rjmp	.+32     	; 0x1bc8 <__vector_26+0x112>

    // Master Transmitter
    case TW_MT_SLA_ACK:  // slave receiver acked address
    case TW_MT_DATA_ACK: // slave receiver acked data
      // if there is data to send, send it, otherwise stop 
      if(twi_masterBufferIndex < twi_masterBufferLength){
    1ba8:	90 91 e3 02 	lds	r25, 0x02E3	; 0x8002e3 <twi_masterBufferIndex>
    1bac:	80 91 e2 02 	lds	r24, 0x02E2	; 0x8002e2 <twi_masterBufferLength>
    1bb0:	98 17       	cp	r25, r24
    1bb2:	70 f5       	brcc	.+92     	; 0x1c10 <__vector_26+0x15a>
        // copy data to output register and ack
        TWDR = twi_masterBuffer[twi_masterBufferIndex++];
    1bb4:	e0 91 e3 02 	lds	r30, 0x02E3	; 0x8002e3 <twi_masterBufferIndex>
    1bb8:	81 e0       	ldi	r24, 0x01	; 1
    1bba:	8e 0f       	add	r24, r30
    1bbc:	80 93 e3 02 	sts	0x02E3, r24	; 0x8002e3 <twi_masterBufferIndex>
    1bc0:	f0 e0       	ldi	r31, 0x00	; 0
    1bc2:	ec 51       	subi	r30, 0x1C	; 28
    1bc4:	fd 4f       	sbci	r31, 0xFD	; 253
    1bc6:	80 81       	ld	r24, Z
    1bc8:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    1bcc:	85 ec       	ldi	r24, 0xC5	; 197
    1bce:	82 c0       	rjmp	.+260    	; 0x1cd4 <__vector_26+0x21e>
    case TW_MT_SLA_NACK:  // address sent, nack received
      twi_error = TW_MT_SLA_NACK;
      twi_stop();
      break;
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
    1bd0:	80 93 9e 02 	sts	0x029E, r24	; 0x80029e <twi_error>
    1bd4:	8a c0       	rjmp	.+276    	; 0x1cea <__vector_26+0x234>
      break;

    // Master Receiver
    case TW_MR_DATA_ACK: // data received, ack sent
      // put byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    1bd6:	e0 91 e3 02 	lds	r30, 0x02E3	; 0x8002e3 <twi_masterBufferIndex>
    1bda:	81 e0       	ldi	r24, 0x01	; 1
    1bdc:	8e 0f       	add	r24, r30
    1bde:	80 93 e3 02 	sts	0x02E3, r24	; 0x8002e3 <twi_masterBufferIndex>
    1be2:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    1be6:	f0 e0       	ldi	r31, 0x00	; 0
    1be8:	ec 51       	subi	r30, 0x1C	; 28
    1bea:	fd 4f       	sbci	r31, 0xFD	; 253
    1bec:	80 83       	st	Z, r24
    case TW_MR_SLA_ACK:  // address sent, ack received
      // ack if more bytes are expected, otherwise nack
      if(twi_masterBufferIndex < twi_masterBufferLength){
    1bee:	90 91 e3 02 	lds	r25, 0x02E3	; 0x8002e3 <twi_masterBufferIndex>
    1bf2:	80 91 e2 02 	lds	r24, 0x02E2	; 0x8002e2 <twi_masterBufferLength>
    1bf6:	6a c0       	rjmp	.+212    	; 0x1ccc <__vector_26+0x216>
        twi_reply(0);
      }
      break;
    case TW_MR_DATA_NACK: // data received, nack sent
      // put final byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    1bf8:	e0 91 e3 02 	lds	r30, 0x02E3	; 0x8002e3 <twi_masterBufferIndex>
    1bfc:	81 e0       	ldi	r24, 0x01	; 1
    1bfe:	8e 0f       	add	r24, r30
    1c00:	80 93 e3 02 	sts	0x02E3, r24	; 0x8002e3 <twi_masterBufferIndex>
    1c04:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    1c08:	f0 e0       	ldi	r31, 0x00	; 0
    1c0a:	ec 51       	subi	r30, 0x1C	; 28
    1c0c:	fd 4f       	sbci	r31, 0xFD	; 253
    1c0e:	80 83       	st	Z, r24
	if (twi_sendStop)
    1c10:	80 91 09 03 	lds	r24, 0x0309	; 0x800309 <twi_sendStop>
    1c14:	81 11       	cpse	r24, r1
    1c16:	69 c0       	rjmp	.+210    	; 0x1cea <__vector_26+0x234>
          twi_stop();
	else {
	  twi_inRepStart = true;	// we're gonna send the START
    1c18:	81 e0       	ldi	r24, 0x01	; 1
    1c1a:	80 93 08 03 	sts	0x0308, r24	; 0x800308 <twi_inRepStart>
	  // don't enable the interrupt. We'll generate the start, but we 
	  // avoid handling the interrupt until we're in the next transaction,
	  // at the point where we would normally issue the start.
	  TWCR = _BV(TWINT) | _BV(TWSTA)| _BV(TWEN) ;
    1c1e:	84 ea       	ldi	r24, 0xA4	; 164
    1c20:	5d c0       	rjmp	.+186    	; 0x1cdc <__vector_26+0x226>
    case TW_SR_SLA_ACK:   // addressed, returned ack
    case TW_SR_GCALL_ACK: // addressed generally, returned ack
    case TW_SR_ARB_LOST_SLA_ACK:   // lost arbitration, returned ack
    case TW_SR_ARB_LOST_GCALL_ACK: // lost arbitration, returned ack
      // enter slave receiver mode
      twi_state = TWI_SRX;
    1c22:	83 e0       	ldi	r24, 0x03	; 3
    1c24:	80 93 0b 03 	sts	0x030B, r24	; 0x80030b <twi_state>
      // indicate that rx buffer can be overwritten and ack
      twi_rxBufferIndex = 0;
    1c28:	10 92 9f 02 	sts	0x029F, r1	; 0x80029f <twi_rxBufferIndex>
    1c2c:	cf cf       	rjmp	.-98     	; 0x1bcc <__vector_26+0x116>
      twi_reply(1);
      break;
    case TW_SR_DATA_ACK:       // data received, returned ack
    case TW_SR_GCALL_DATA_ACK: // data received generally, returned ack
      // if there is still room in the rx buffer
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    1c2e:	80 91 9f 02 	lds	r24, 0x029F	; 0x80029f <twi_rxBufferIndex>
    1c32:	80 32       	cpi	r24, 0x20	; 32
    1c34:	08 f0       	brcs	.+2      	; 0x1c38 <__vector_26+0x182>
    1c36:	4d c0       	rjmp	.+154    	; 0x1cd2 <__vector_26+0x21c>
        // put byte in buffer and ack
        twi_rxBuffer[twi_rxBufferIndex++] = TWDR;
    1c38:	e0 91 9f 02 	lds	r30, 0x029F	; 0x80029f <twi_rxBufferIndex>
    1c3c:	81 e0       	ldi	r24, 0x01	; 1
    1c3e:	8e 0f       	add	r24, r30
    1c40:	80 93 9f 02 	sts	0x029F, r24	; 0x80029f <twi_rxBufferIndex>
    1c44:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    1c48:	f0 e0       	ldi	r31, 0x00	; 0
    1c4a:	e0 56       	subi	r30, 0x60	; 96
    1c4c:	fd 4f       	sbci	r31, 0xFD	; 253
    1c4e:	80 83       	st	Z, r24
        twi_reply(0);
      }
      break;
    case TW_SR_STOP: // stop or repeated start condition received
      // ack future responses and leave slave receiver state
      twi_releaseBus();
    1c50:	bd cf       	rjmp	.-134    	; 0x1bcc <__vector_26+0x116>
    1c52:	2b df       	rcall	.-426    	; 0x1aaa <twi_releaseBus>
      // put a null char after data if there's room
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    1c54:	80 91 9f 02 	lds	r24, 0x029F	; 0x80029f <twi_rxBufferIndex>
    1c58:	80 32       	cpi	r24, 0x20	; 32
    1c5a:	30 f4       	brcc	.+12     	; 0x1c68 <__vector_26+0x1b2>
        twi_rxBuffer[twi_rxBufferIndex] = '\0';
    1c5c:	e0 91 9f 02 	lds	r30, 0x029F	; 0x80029f <twi_rxBufferIndex>
    1c60:	f0 e0       	ldi	r31, 0x00	; 0
    1c62:	e0 56       	subi	r30, 0x60	; 96
    1c64:	fd 4f       	sbci	r31, 0xFD	; 253
    1c66:	10 82       	st	Z, r1
      }
      // callback to user defined callback
      twi_onSlaveReceive(twi_rxBuffer, twi_rxBufferIndex);
    1c68:	60 91 9f 02 	lds	r22, 0x029F	; 0x80029f <twi_rxBufferIndex>
    1c6c:	70 e0       	ldi	r23, 0x00	; 0
    1c6e:	e0 91 04 03 	lds	r30, 0x0304	; 0x800304 <twi_onSlaveReceive>
    1c72:	f0 91 05 03 	lds	r31, 0x0305	; 0x800305 <twi_onSlaveReceive+0x1>
    1c76:	80 ea       	ldi	r24, 0xA0	; 160
    1c78:	92 e0       	ldi	r25, 0x02	; 2
    1c7a:	09 95       	icall
      // since we submit rx buffer to "wire" library, we can reset it
      twi_rxBufferIndex = 0;
    1c7c:	10 92 9f 02 	sts	0x029F, r1	; 0x80029f <twi_rxBufferIndex>
      break;
    1c80:	35 c0       	rjmp	.+106    	; 0x1cec <__vector_26+0x236>
    
    // Slave Transmitter
    case TW_ST_SLA_ACK:          // addressed, returned ack
    case TW_ST_ARB_LOST_SLA_ACK: // arbitration lost, returned ack
      // enter slave transmitter mode
      twi_state = TWI_STX;
    1c82:	84 e0       	ldi	r24, 0x04	; 4
    1c84:	80 93 0b 03 	sts	0x030B, r24	; 0x80030b <twi_state>
      // ready the tx buffer index for iteration
      twi_txBufferIndex = 0;
    1c88:	10 92 c1 02 	sts	0x02C1, r1	; 0x8002c1 <twi_txBufferIndex>
      // set tx buffer length to be zero, to verify if user changes it
      twi_txBufferLength = 0;
    1c8c:	10 92 c0 02 	sts	0x02C0, r1	; 0x8002c0 <twi_txBufferLength>
      // request for txBuffer to be filled and length to be set
      // note: user must call twi_transmit(bytes, length) to do this
      twi_onSlaveTransmit();
    1c90:	e0 91 06 03 	lds	r30, 0x0306	; 0x800306 <twi_onSlaveTransmit>
    1c94:	f0 91 07 03 	lds	r31, 0x0307	; 0x800307 <twi_onSlaveTransmit+0x1>
    1c98:	09 95       	icall
      // if they didn't change buffer & length, initialize it
      if(0 == twi_txBufferLength){
    1c9a:	80 91 c0 02 	lds	r24, 0x02C0	; 0x8002c0 <twi_txBufferLength>
    1c9e:	81 11       	cpse	r24, r1
    1ca0:	05 c0       	rjmp	.+10     	; 0x1cac <__vector_26+0x1f6>
        twi_txBufferLength = 1;
    1ca2:	81 e0       	ldi	r24, 0x01	; 1
    1ca4:	80 93 c0 02 	sts	0x02C0, r24	; 0x8002c0 <twi_txBufferLength>
        twi_txBuffer[0] = 0x00;
    1ca8:	10 92 c2 02 	sts	0x02C2, r1	; 0x8002c2 <twi_txBuffer>
      }
      // transmit first byte from buffer, fall
    case TW_ST_DATA_ACK: // byte sent, ack returned
      // copy data to output register
      TWDR = twi_txBuffer[twi_txBufferIndex++];
    1cac:	e0 91 c1 02 	lds	r30, 0x02C1	; 0x8002c1 <twi_txBufferIndex>
    1cb0:	81 e0       	ldi	r24, 0x01	; 1
    1cb2:	8e 0f       	add	r24, r30
    1cb4:	80 93 c1 02 	sts	0x02C1, r24	; 0x8002c1 <twi_txBufferIndex>
    1cb8:	f0 e0       	ldi	r31, 0x00	; 0
    1cba:	ee 53       	subi	r30, 0x3E	; 62
    1cbc:	fd 4f       	sbci	r31, 0xFD	; 253
    1cbe:	80 81       	ld	r24, Z
    1cc0:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
      // if there is more to send, ack, otherwise nack
      if(twi_txBufferIndex < twi_txBufferLength){
    1cc4:	90 91 c1 02 	lds	r25, 0x02C1	; 0x8002c1 <twi_txBufferIndex>
    1cc8:	80 91 c0 02 	lds	r24, 0x02C0	; 0x8002c0 <twi_txBufferLength>
    1ccc:	98 17       	cp	r25, r24
    1cce:	08 f4       	brcc	.+2      	; 0x1cd2 <__vector_26+0x21c>
    1cd0:	7d cf       	rjmp	.-262    	; 0x1bcc <__vector_26+0x116>
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    1cd2:	85 e8       	ldi	r24, 0x85	; 133
    1cd4:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    1cd8:	09 c0       	rjmp	.+18     	; 0x1cec <__vector_26+0x236>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    1cda:	85 ec       	ldi	r24, 0xC5	; 197
    1cdc:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    case TW_ST_DATA_NACK: // received nack, we are done 
    case TW_ST_LAST_DATA: // received ack, but we are done already!
      // ack future responses
      twi_reply(1);
      // leave slave receiver state
      twi_state = TWI_READY;
    1ce0:	10 92 0b 03 	sts	0x030B, r1	; 0x80030b <twi_state>
      break;
    1ce4:	03 c0       	rjmp	.+6      	; 0x1cec <__vector_26+0x236>

    // All
    case TW_NO_INFO:   // no state information
      break;
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
    1ce6:	10 92 9e 02 	sts	0x029E, r1	; 0x80029e <twi_error>
      twi_stop();
    1cea:	d5 de       	rcall	.-598    	; 0x1a96 <twi_stop>
      break;
  }
}
    1cec:	ff 91       	pop	r31
    1cee:	ef 91       	pop	r30
    1cf0:	bf 91       	pop	r27
    1cf2:	af 91       	pop	r26
    1cf4:	9f 91       	pop	r25
    1cf6:	8f 91       	pop	r24
    1cf8:	7f 91       	pop	r23
    1cfa:	6f 91       	pop	r22
    1cfc:	5f 91       	pop	r21
    1cfe:	4f 91       	pop	r20
    1d00:	3f 91       	pop	r19
    1d02:	2f 91       	pop	r18
    1d04:	0f 90       	pop	r0
    1d06:	0b be       	out	0x3b, r0	; 59
    1d08:	0f 90       	pop	r0
    1d0a:	0f be       	out	0x3f, r0	; 63
    1d0c:	0f 90       	pop	r0
    1d0e:	1f 90       	pop	r1
    1d10:	18 95       	reti

00001d12 <_ZN7TwoWire9availableEv>:
}

// sets function called on slave read
void TwoWire::onRequest( void (*function)(void) )
{
  user_onRequest = function;
    1d12:	80 91 3c 03 	lds	r24, 0x033C	; 0x80033c <_ZN7TwoWire14rxBufferLengthE>
    1d16:	90 e0       	ldi	r25, 0x00	; 0
    1d18:	20 91 3d 03 	lds	r18, 0x033D	; 0x80033d <_ZN7TwoWire13rxBufferIndexE>
    1d1c:	82 1b       	sub	r24, r18
    1d1e:	91 09       	sbc	r25, r1
    1d20:	08 95       	ret

00001d22 <_ZN7TwoWire4readEv>:
    1d22:	90 91 3d 03 	lds	r25, 0x033D	; 0x80033d <_ZN7TwoWire13rxBufferIndexE>
    1d26:	80 91 3c 03 	lds	r24, 0x033C	; 0x80033c <_ZN7TwoWire14rxBufferLengthE>
    1d2a:	98 17       	cp	r25, r24
    1d2c:	50 f4       	brcc	.+20     	; 0x1d42 <_ZN7TwoWire4readEv+0x20>
    1d2e:	e9 2f       	mov	r30, r25
    1d30:	f0 e0       	ldi	r31, 0x00	; 0
    1d32:	e2 5c       	subi	r30, 0xC2	; 194
    1d34:	fc 4f       	sbci	r31, 0xFC	; 252
    1d36:	20 81       	ld	r18, Z
    1d38:	30 e0       	ldi	r19, 0x00	; 0
    1d3a:	9f 5f       	subi	r25, 0xFF	; 255
    1d3c:	90 93 3d 03 	sts	0x033D, r25	; 0x80033d <_ZN7TwoWire13rxBufferIndexE>
    1d40:	02 c0       	rjmp	.+4      	; 0x1d46 <_ZN7TwoWire4readEv+0x24>
    1d42:	2f ef       	ldi	r18, 0xFF	; 255
    1d44:	3f ef       	ldi	r19, 0xFF	; 255
    1d46:	c9 01       	movw	r24, r18
    1d48:	08 95       	ret

00001d4a <_ZN7TwoWire4peekEv>:
    1d4a:	e0 91 3d 03 	lds	r30, 0x033D	; 0x80033d <_ZN7TwoWire13rxBufferIndexE>
    1d4e:	80 91 3c 03 	lds	r24, 0x033C	; 0x80033c <_ZN7TwoWire14rxBufferLengthE>
    1d52:	e8 17       	cp	r30, r24
    1d54:	30 f4       	brcc	.+12     	; 0x1d62 <_ZN7TwoWire4peekEv+0x18>
    1d56:	f0 e0       	ldi	r31, 0x00	; 0
    1d58:	e2 5c       	subi	r30, 0xC2	; 194
    1d5a:	fc 4f       	sbci	r31, 0xFC	; 252
    1d5c:	80 81       	ld	r24, Z
    1d5e:	90 e0       	ldi	r25, 0x00	; 0
    1d60:	08 95       	ret
    1d62:	8f ef       	ldi	r24, 0xFF	; 255
    1d64:	9f ef       	ldi	r25, 0xFF	; 255
    1d66:	08 95       	ret

00001d68 <_ZN7TwoWire5flushEv>:
    1d68:	08 95       	ret

00001d6a <_ZN7TwoWire5writeEPKhj>:
    1d6a:	cf 92       	push	r12
    1d6c:	df 92       	push	r13
    1d6e:	ef 92       	push	r14
    1d70:	ff 92       	push	r15
    1d72:	0f 93       	push	r16
    1d74:	1f 93       	push	r17
    1d76:	cf 93       	push	r28
    1d78:	df 93       	push	r29
    1d7a:	7c 01       	movw	r14, r24
    1d7c:	cb 01       	movw	r24, r22
    1d7e:	8a 01       	movw	r16, r20
    1d80:	20 91 18 03 	lds	r18, 0x0318	; 0x800318 <_ZN7TwoWire12transmittingE>
    1d84:	22 23       	and	r18, r18
    1d86:	89 f0       	breq	.+34     	; 0x1daa <_ZN7TwoWire5writeEPKhj+0x40>
    1d88:	eb 01       	movw	r28, r22
    1d8a:	6b 01       	movw	r12, r22
    1d8c:	c4 0e       	add	r12, r20
    1d8e:	d5 1e       	adc	r13, r21
    1d90:	cc 15       	cp	r28, r12
    1d92:	dd 05       	cpc	r29, r13
    1d94:	61 f0       	breq	.+24     	; 0x1dae <_ZN7TwoWire5writeEPKhj+0x44>
    1d96:	69 91       	ld	r22, Y+
    1d98:	d7 01       	movw	r26, r14
    1d9a:	ed 91       	ld	r30, X+
    1d9c:	fc 91       	ld	r31, X
    1d9e:	01 90       	ld	r0, Z+
    1da0:	f0 81       	ld	r31, Z
    1da2:	e0 2d       	mov	r30, r0
    1da4:	c7 01       	movw	r24, r14
    1da6:	09 95       	icall
    1da8:	f3 cf       	rjmp	.-26     	; 0x1d90 <_ZN7TwoWire5writeEPKhj+0x26>
    1daa:	64 2f       	mov	r22, r20
    1dac:	5b de       	rcall	.-842    	; 0x1a64 <twi_transmit>
    1dae:	c8 01       	movw	r24, r16
    1db0:	df 91       	pop	r29
    1db2:	cf 91       	pop	r28
    1db4:	1f 91       	pop	r17
    1db6:	0f 91       	pop	r16
    1db8:	ff 90       	pop	r15
    1dba:	ef 90       	pop	r14
    1dbc:	df 90       	pop	r13
    1dbe:	cf 90       	pop	r12
    1dc0:	08 95       	ret

00001dc2 <_ZN7TwoWire5writeEh>:
    1dc2:	cf 93       	push	r28
    1dc4:	df 93       	push	r29
    1dc6:	1f 92       	push	r1
    1dc8:	cd b7       	in	r28, 0x3d	; 61
    1dca:	de b7       	in	r29, 0x3e	; 62
    1dcc:	69 83       	std	Y+1, r22	; 0x01
    1dce:	20 91 18 03 	lds	r18, 0x0318	; 0x800318 <_ZN7TwoWire12transmittingE>
    1dd2:	22 23       	and	r18, r18
    1dd4:	d1 f0       	breq	.+52     	; 0x1e0a <_ZN7TwoWire5writeEh+0x48>
    1dd6:	20 91 19 03 	lds	r18, 0x0319	; 0x800319 <_ZN7TwoWire14txBufferLengthE>
    1dda:	20 32       	cpi	r18, 0x20	; 32
    1ddc:	40 f0       	brcs	.+16     	; 0x1dee <_ZN7TwoWire5writeEh+0x2c>
    1dde:	21 e0       	ldi	r18, 0x01	; 1
    1de0:	30 e0       	ldi	r19, 0x00	; 0
    1de2:	fc 01       	movw	r30, r24
    1de4:	33 83       	std	Z+3, r19	; 0x03
    1de6:	22 83       	std	Z+2, r18	; 0x02
    1de8:	80 e0       	ldi	r24, 0x00	; 0
    1dea:	90 e0       	ldi	r25, 0x00	; 0
    1dec:	14 c0       	rjmp	.+40     	; 0x1e16 <_ZN7TwoWire5writeEh+0x54>
    1dee:	80 91 1a 03 	lds	r24, 0x031A	; 0x80031a <_ZN7TwoWire13txBufferIndexE>
    1df2:	e8 2f       	mov	r30, r24
    1df4:	f0 e0       	ldi	r31, 0x00	; 0
    1df6:	e5 5e       	subi	r30, 0xE5	; 229
    1df8:	fc 4f       	sbci	r31, 0xFC	; 252
    1dfa:	99 81       	ldd	r25, Y+1	; 0x01
    1dfc:	90 83       	st	Z, r25
    1dfe:	8f 5f       	subi	r24, 0xFF	; 255
    1e00:	80 93 1a 03 	sts	0x031A, r24	; 0x80031a <_ZN7TwoWire13txBufferIndexE>
    1e04:	80 93 19 03 	sts	0x0319, r24	; 0x800319 <_ZN7TwoWire14txBufferLengthE>
    1e08:	04 c0       	rjmp	.+8      	; 0x1e12 <_ZN7TwoWire5writeEh+0x50>
    1e0a:	61 e0       	ldi	r22, 0x01	; 1
    1e0c:	ce 01       	movw	r24, r28
    1e0e:	01 96       	adiw	r24, 0x01	; 1
    1e10:	29 de       	rcall	.-942    	; 0x1a64 <twi_transmit>
    1e12:	81 e0       	ldi	r24, 0x01	; 1
    1e14:	90 e0       	ldi	r25, 0x00	; 0
    1e16:	0f 90       	pop	r0
    1e18:	df 91       	pop	r29
    1e1a:	cf 91       	pop	r28
    1e1c:	08 95       	ret

00001e1e <_ZN7TwoWireC1Ev>:
    1e1e:	fc 01       	movw	r30, r24
    1e20:	13 82       	std	Z+3, r1	; 0x03
    1e22:	12 82       	std	Z+2, r1	; 0x02
    1e24:	88 ee       	ldi	r24, 0xE8	; 232
    1e26:	93 e0       	ldi	r25, 0x03	; 3
    1e28:	a0 e0       	ldi	r26, 0x00	; 0
    1e2a:	b0 e0       	ldi	r27, 0x00	; 0
    1e2c:	84 83       	std	Z+4, r24	; 0x04
    1e2e:	95 83       	std	Z+5, r25	; 0x05
    1e30:	a6 83       	std	Z+6, r26	; 0x06
    1e32:	b7 83       	std	Z+7, r27	; 0x07
    1e34:	8f e1       	ldi	r24, 0x1F	; 31
    1e36:	92 e0       	ldi	r25, 0x02	; 2
    1e38:	91 83       	std	Z+1, r25	; 0x01
    1e3a:	80 83       	st	Z, r24
    1e3c:	08 95       	ret

00001e3e <_ZN7TwoWire5beginEv>:
    1e3e:	10 92 3d 03 	sts	0x033D, r1	; 0x80033d <_ZN7TwoWire13rxBufferIndexE>
    1e42:	10 92 3c 03 	sts	0x033C, r1	; 0x80033c <_ZN7TwoWire14rxBufferLengthE>
    1e46:	10 92 1a 03 	sts	0x031A, r1	; 0x80031a <_ZN7TwoWire13txBufferIndexE>
    1e4a:	10 92 19 03 	sts	0x0319, r1	; 0x800319 <_ZN7TwoWire14txBufferLengthE>
    1e4e:	96 cd       	rjmp	.-1236   	; 0x197c <twi_init>

00001e50 <_ZN7TwoWire17beginTransmissionEh>:
    1e50:	81 e0       	ldi	r24, 0x01	; 1
    1e52:	80 93 18 03 	sts	0x0318, r24	; 0x800318 <_ZN7TwoWire12transmittingE>
    1e56:	60 93 3b 03 	sts	0x033B, r22	; 0x80033b <_ZN7TwoWire9txAddressE>
    1e5a:	10 92 1a 03 	sts	0x031A, r1	; 0x80031a <_ZN7TwoWire13txBufferIndexE>
    1e5e:	10 92 19 03 	sts	0x0319, r1	; 0x800319 <_ZN7TwoWire14txBufferLengthE>
    1e62:	08 95       	ret

00001e64 <_ZN7TwoWire15endTransmissionEh>:
    1e64:	0f 93       	push	r16
    1e66:	06 2f       	mov	r16, r22
    1e68:	21 e0       	ldi	r18, 0x01	; 1
    1e6a:	40 91 19 03 	lds	r20, 0x0319	; 0x800319 <_ZN7TwoWire14txBufferLengthE>
    1e6e:	6b e1       	ldi	r22, 0x1B	; 27
    1e70:	73 e0       	ldi	r23, 0x03	; 3
    1e72:	80 91 3b 03 	lds	r24, 0x033B	; 0x80033b <_ZN7TwoWire9txAddressE>
    1e76:	a0 dd       	rcall	.-1216   	; 0x19b8 <twi_writeTo>
    1e78:	10 92 1a 03 	sts	0x031A, r1	; 0x80031a <_ZN7TwoWire13txBufferIndexE>
    1e7c:	10 92 19 03 	sts	0x0319, r1	; 0x800319 <_ZN7TwoWire14txBufferLengthE>
    1e80:	10 92 18 03 	sts	0x0318, r1	; 0x800318 <_ZN7TwoWire12transmittingE>
    1e84:	0f 91       	pop	r16
    1e86:	08 95       	ret

00001e88 <_ZN7TwoWire15endTransmissionEv>:
    1e88:	61 e0       	ldi	r22, 0x01	; 1
    1e8a:	ec cf       	rjmp	.-40     	; 0x1e64 <_ZN7TwoWire15endTransmissionEh>

00001e8c <_GLOBAL__sub_I__ZN7TwoWire8rxBufferE>:
}

// Preinstantiate Objects //////////////////////////////////////////////////////

TwoWire Wire = TwoWire();
    1e8c:	8c e0       	ldi	r24, 0x0C	; 12
    1e8e:	93 e0       	ldi	r25, 0x03	; 3
    1e90:	c6 cf       	rjmp	.-116    	; 0x1e1e <_ZN7TwoWireC1Ev>

00001e92 <__subsf3>:
    1e92:	50 58       	subi	r21, 0x80	; 128

00001e94 <__addsf3>:
    1e94:	bb 27       	eor	r27, r27
    1e96:	aa 27       	eor	r26, r26
    1e98:	0e d0       	rcall	.+28     	; 0x1eb6 <__addsf3x>
    1e9a:	4d c1       	rjmp	.+666    	; 0x2136 <__fp_round>
    1e9c:	3e d1       	rcall	.+636    	; 0x211a <__fp_pscA>
    1e9e:	30 f0       	brcs	.+12     	; 0x1eac <__addsf3+0x18>
    1ea0:	43 d1       	rcall	.+646    	; 0x2128 <__fp_pscB>
    1ea2:	20 f0       	brcs	.+8      	; 0x1eac <__addsf3+0x18>
    1ea4:	31 f4       	brne	.+12     	; 0x1eb2 <__addsf3+0x1e>
    1ea6:	9f 3f       	cpi	r25, 0xFF	; 255
    1ea8:	11 f4       	brne	.+4      	; 0x1eae <__addsf3+0x1a>
    1eaa:	1e f4       	brtc	.+6      	; 0x1eb2 <__addsf3+0x1e>
    1eac:	33 c1       	rjmp	.+614    	; 0x2114 <__fp_nan>
    1eae:	0e f4       	brtc	.+2      	; 0x1eb2 <__addsf3+0x1e>
    1eb0:	e0 95       	com	r30
    1eb2:	e7 fb       	bst	r30, 7
    1eb4:	29 c1       	rjmp	.+594    	; 0x2108 <__fp_inf>

00001eb6 <__addsf3x>:
    1eb6:	e9 2f       	mov	r30, r25
    1eb8:	4f d1       	rcall	.+670    	; 0x2158 <__fp_split3>
    1eba:	80 f3       	brcs	.-32     	; 0x1e9c <__addsf3+0x8>
    1ebc:	ba 17       	cp	r27, r26
    1ebe:	62 07       	cpc	r22, r18
    1ec0:	73 07       	cpc	r23, r19
    1ec2:	84 07       	cpc	r24, r20
    1ec4:	95 07       	cpc	r25, r21
    1ec6:	18 f0       	brcs	.+6      	; 0x1ece <__addsf3x+0x18>
    1ec8:	71 f4       	brne	.+28     	; 0x1ee6 <__addsf3x+0x30>
    1eca:	9e f5       	brtc	.+102    	; 0x1f32 <__addsf3x+0x7c>
    1ecc:	67 c1       	rjmp	.+718    	; 0x219c <__fp_zero>
    1ece:	0e f4       	brtc	.+2      	; 0x1ed2 <__addsf3x+0x1c>
    1ed0:	e0 95       	com	r30
    1ed2:	0b 2e       	mov	r0, r27
    1ed4:	ba 2f       	mov	r27, r26
    1ed6:	a0 2d       	mov	r26, r0
    1ed8:	0b 01       	movw	r0, r22
    1eda:	b9 01       	movw	r22, r18
    1edc:	90 01       	movw	r18, r0
    1ede:	0c 01       	movw	r0, r24
    1ee0:	ca 01       	movw	r24, r20
    1ee2:	a0 01       	movw	r20, r0
    1ee4:	11 24       	eor	r1, r1
    1ee6:	ff 27       	eor	r31, r31
    1ee8:	59 1b       	sub	r21, r25
    1eea:	99 f0       	breq	.+38     	; 0x1f12 <__addsf3x+0x5c>
    1eec:	59 3f       	cpi	r21, 0xF9	; 249
    1eee:	50 f4       	brcc	.+20     	; 0x1f04 <__addsf3x+0x4e>
    1ef0:	50 3e       	cpi	r21, 0xE0	; 224
    1ef2:	68 f1       	brcs	.+90     	; 0x1f4e <__addsf3x+0x98>
    1ef4:	1a 16       	cp	r1, r26
    1ef6:	f0 40       	sbci	r31, 0x00	; 0
    1ef8:	a2 2f       	mov	r26, r18
    1efa:	23 2f       	mov	r18, r19
    1efc:	34 2f       	mov	r19, r20
    1efe:	44 27       	eor	r20, r20
    1f00:	58 5f       	subi	r21, 0xF8	; 248
    1f02:	f3 cf       	rjmp	.-26     	; 0x1eea <__addsf3x+0x34>
    1f04:	46 95       	lsr	r20
    1f06:	37 95       	ror	r19
    1f08:	27 95       	ror	r18
    1f0a:	a7 95       	ror	r26
    1f0c:	f0 40       	sbci	r31, 0x00	; 0
    1f0e:	53 95       	inc	r21
    1f10:	c9 f7       	brne	.-14     	; 0x1f04 <__addsf3x+0x4e>
    1f12:	7e f4       	brtc	.+30     	; 0x1f32 <__addsf3x+0x7c>
    1f14:	1f 16       	cp	r1, r31
    1f16:	ba 0b       	sbc	r27, r26
    1f18:	62 0b       	sbc	r22, r18
    1f1a:	73 0b       	sbc	r23, r19
    1f1c:	84 0b       	sbc	r24, r20
    1f1e:	ba f0       	brmi	.+46     	; 0x1f4e <__addsf3x+0x98>
    1f20:	91 50       	subi	r25, 0x01	; 1
    1f22:	a1 f0       	breq	.+40     	; 0x1f4c <__addsf3x+0x96>
    1f24:	ff 0f       	add	r31, r31
    1f26:	bb 1f       	adc	r27, r27
    1f28:	66 1f       	adc	r22, r22
    1f2a:	77 1f       	adc	r23, r23
    1f2c:	88 1f       	adc	r24, r24
    1f2e:	c2 f7       	brpl	.-16     	; 0x1f20 <__addsf3x+0x6a>
    1f30:	0e c0       	rjmp	.+28     	; 0x1f4e <__addsf3x+0x98>
    1f32:	ba 0f       	add	r27, r26
    1f34:	62 1f       	adc	r22, r18
    1f36:	73 1f       	adc	r23, r19
    1f38:	84 1f       	adc	r24, r20
    1f3a:	48 f4       	brcc	.+18     	; 0x1f4e <__addsf3x+0x98>
    1f3c:	87 95       	ror	r24
    1f3e:	77 95       	ror	r23
    1f40:	67 95       	ror	r22
    1f42:	b7 95       	ror	r27
    1f44:	f7 95       	ror	r31
    1f46:	9e 3f       	cpi	r25, 0xFE	; 254
    1f48:	08 f0       	brcs	.+2      	; 0x1f4c <__addsf3x+0x96>
    1f4a:	b3 cf       	rjmp	.-154    	; 0x1eb2 <__addsf3+0x1e>
    1f4c:	93 95       	inc	r25
    1f4e:	88 0f       	add	r24, r24
    1f50:	08 f0       	brcs	.+2      	; 0x1f54 <__addsf3x+0x9e>
    1f52:	99 27       	eor	r25, r25
    1f54:	ee 0f       	add	r30, r30
    1f56:	97 95       	ror	r25
    1f58:	87 95       	ror	r24
    1f5a:	08 95       	ret

00001f5c <__divsf3>:
    1f5c:	0c d0       	rcall	.+24     	; 0x1f76 <__divsf3x>
    1f5e:	eb c0       	rjmp	.+470    	; 0x2136 <__fp_round>
    1f60:	e3 d0       	rcall	.+454    	; 0x2128 <__fp_pscB>
    1f62:	40 f0       	brcs	.+16     	; 0x1f74 <__divsf3+0x18>
    1f64:	da d0       	rcall	.+436    	; 0x211a <__fp_pscA>
    1f66:	30 f0       	brcs	.+12     	; 0x1f74 <__divsf3+0x18>
    1f68:	21 f4       	brne	.+8      	; 0x1f72 <__divsf3+0x16>
    1f6a:	5f 3f       	cpi	r21, 0xFF	; 255
    1f6c:	19 f0       	breq	.+6      	; 0x1f74 <__divsf3+0x18>
    1f6e:	cc c0       	rjmp	.+408    	; 0x2108 <__fp_inf>
    1f70:	51 11       	cpse	r21, r1
    1f72:	15 c1       	rjmp	.+554    	; 0x219e <__fp_szero>
    1f74:	cf c0       	rjmp	.+414    	; 0x2114 <__fp_nan>

00001f76 <__divsf3x>:
    1f76:	f0 d0       	rcall	.+480    	; 0x2158 <__fp_split3>
    1f78:	98 f3       	brcs	.-26     	; 0x1f60 <__divsf3+0x4>

00001f7a <__divsf3_pse>:
    1f7a:	99 23       	and	r25, r25
    1f7c:	c9 f3       	breq	.-14     	; 0x1f70 <__divsf3+0x14>
    1f7e:	55 23       	and	r21, r21
    1f80:	b1 f3       	breq	.-20     	; 0x1f6e <__divsf3+0x12>
    1f82:	95 1b       	sub	r25, r21
    1f84:	55 0b       	sbc	r21, r21
    1f86:	bb 27       	eor	r27, r27
    1f88:	aa 27       	eor	r26, r26
    1f8a:	62 17       	cp	r22, r18
    1f8c:	73 07       	cpc	r23, r19
    1f8e:	84 07       	cpc	r24, r20
    1f90:	38 f0       	brcs	.+14     	; 0x1fa0 <__divsf3_pse+0x26>
    1f92:	9f 5f       	subi	r25, 0xFF	; 255
    1f94:	5f 4f       	sbci	r21, 0xFF	; 255
    1f96:	22 0f       	add	r18, r18
    1f98:	33 1f       	adc	r19, r19
    1f9a:	44 1f       	adc	r20, r20
    1f9c:	aa 1f       	adc	r26, r26
    1f9e:	a9 f3       	breq	.-22     	; 0x1f8a <__divsf3_pse+0x10>
    1fa0:	33 d0       	rcall	.+102    	; 0x2008 <__divsf3_pse+0x8e>
    1fa2:	0e 2e       	mov	r0, r30
    1fa4:	3a f0       	brmi	.+14     	; 0x1fb4 <__divsf3_pse+0x3a>
    1fa6:	e0 e8       	ldi	r30, 0x80	; 128
    1fa8:	30 d0       	rcall	.+96     	; 0x200a <__divsf3_pse+0x90>
    1faa:	91 50       	subi	r25, 0x01	; 1
    1fac:	50 40       	sbci	r21, 0x00	; 0
    1fae:	e6 95       	lsr	r30
    1fb0:	00 1c       	adc	r0, r0
    1fb2:	ca f7       	brpl	.-14     	; 0x1fa6 <__divsf3_pse+0x2c>
    1fb4:	29 d0       	rcall	.+82     	; 0x2008 <__divsf3_pse+0x8e>
    1fb6:	fe 2f       	mov	r31, r30
    1fb8:	27 d0       	rcall	.+78     	; 0x2008 <__divsf3_pse+0x8e>
    1fba:	66 0f       	add	r22, r22
    1fbc:	77 1f       	adc	r23, r23
    1fbe:	88 1f       	adc	r24, r24
    1fc0:	bb 1f       	adc	r27, r27
    1fc2:	26 17       	cp	r18, r22
    1fc4:	37 07       	cpc	r19, r23
    1fc6:	48 07       	cpc	r20, r24
    1fc8:	ab 07       	cpc	r26, r27
    1fca:	b0 e8       	ldi	r27, 0x80	; 128
    1fcc:	09 f0       	breq	.+2      	; 0x1fd0 <__divsf3_pse+0x56>
    1fce:	bb 0b       	sbc	r27, r27
    1fd0:	80 2d       	mov	r24, r0
    1fd2:	bf 01       	movw	r22, r30
    1fd4:	ff 27       	eor	r31, r31
    1fd6:	93 58       	subi	r25, 0x83	; 131
    1fd8:	5f 4f       	sbci	r21, 0xFF	; 255
    1fda:	2a f0       	brmi	.+10     	; 0x1fe6 <__divsf3_pse+0x6c>
    1fdc:	9e 3f       	cpi	r25, 0xFE	; 254
    1fde:	51 05       	cpc	r21, r1
    1fe0:	68 f0       	brcs	.+26     	; 0x1ffc <__divsf3_pse+0x82>
    1fe2:	92 c0       	rjmp	.+292    	; 0x2108 <__fp_inf>
    1fe4:	dc c0       	rjmp	.+440    	; 0x219e <__fp_szero>
    1fe6:	5f 3f       	cpi	r21, 0xFF	; 255
    1fe8:	ec f3       	brlt	.-6      	; 0x1fe4 <__divsf3_pse+0x6a>
    1fea:	98 3e       	cpi	r25, 0xE8	; 232
    1fec:	dc f3       	brlt	.-10     	; 0x1fe4 <__divsf3_pse+0x6a>
    1fee:	86 95       	lsr	r24
    1ff0:	77 95       	ror	r23
    1ff2:	67 95       	ror	r22
    1ff4:	b7 95       	ror	r27
    1ff6:	f7 95       	ror	r31
    1ff8:	9f 5f       	subi	r25, 0xFF	; 255
    1ffa:	c9 f7       	brne	.-14     	; 0x1fee <__divsf3_pse+0x74>
    1ffc:	88 0f       	add	r24, r24
    1ffe:	91 1d       	adc	r25, r1
    2000:	96 95       	lsr	r25
    2002:	87 95       	ror	r24
    2004:	97 f9       	bld	r25, 7
    2006:	08 95       	ret
    2008:	e1 e0       	ldi	r30, 0x01	; 1
    200a:	66 0f       	add	r22, r22
    200c:	77 1f       	adc	r23, r23
    200e:	88 1f       	adc	r24, r24
    2010:	bb 1f       	adc	r27, r27
    2012:	62 17       	cp	r22, r18
    2014:	73 07       	cpc	r23, r19
    2016:	84 07       	cpc	r24, r20
    2018:	ba 07       	cpc	r27, r26
    201a:	20 f0       	brcs	.+8      	; 0x2024 <__divsf3_pse+0xaa>
    201c:	62 1b       	sub	r22, r18
    201e:	73 0b       	sbc	r23, r19
    2020:	84 0b       	sbc	r24, r20
    2022:	ba 0b       	sbc	r27, r26
    2024:	ee 1f       	adc	r30, r30
    2026:	88 f7       	brcc	.-30     	; 0x200a <__divsf3_pse+0x90>
    2028:	e0 95       	com	r30
    202a:	08 95       	ret

0000202c <__fixsfsi>:
    202c:	04 d0       	rcall	.+8      	; 0x2036 <__fixunssfsi>
    202e:	68 94       	set
    2030:	b1 11       	cpse	r27, r1
    2032:	b5 c0       	rjmp	.+362    	; 0x219e <__fp_szero>
    2034:	08 95       	ret

00002036 <__fixunssfsi>:
    2036:	98 d0       	rcall	.+304    	; 0x2168 <__fp_splitA>
    2038:	88 f0       	brcs	.+34     	; 0x205c <__fixunssfsi+0x26>
    203a:	9f 57       	subi	r25, 0x7F	; 127
    203c:	90 f0       	brcs	.+36     	; 0x2062 <__fixunssfsi+0x2c>
    203e:	b9 2f       	mov	r27, r25
    2040:	99 27       	eor	r25, r25
    2042:	b7 51       	subi	r27, 0x17	; 23
    2044:	a0 f0       	brcs	.+40     	; 0x206e <__fixunssfsi+0x38>
    2046:	d1 f0       	breq	.+52     	; 0x207c <__fixunssfsi+0x46>
    2048:	66 0f       	add	r22, r22
    204a:	77 1f       	adc	r23, r23
    204c:	88 1f       	adc	r24, r24
    204e:	99 1f       	adc	r25, r25
    2050:	1a f0       	brmi	.+6      	; 0x2058 <__fixunssfsi+0x22>
    2052:	ba 95       	dec	r27
    2054:	c9 f7       	brne	.-14     	; 0x2048 <__fixunssfsi+0x12>
    2056:	12 c0       	rjmp	.+36     	; 0x207c <__fixunssfsi+0x46>
    2058:	b1 30       	cpi	r27, 0x01	; 1
    205a:	81 f0       	breq	.+32     	; 0x207c <__fixunssfsi+0x46>
    205c:	9f d0       	rcall	.+318    	; 0x219c <__fp_zero>
    205e:	b1 e0       	ldi	r27, 0x01	; 1
    2060:	08 95       	ret
    2062:	9c c0       	rjmp	.+312    	; 0x219c <__fp_zero>
    2064:	67 2f       	mov	r22, r23
    2066:	78 2f       	mov	r23, r24
    2068:	88 27       	eor	r24, r24
    206a:	b8 5f       	subi	r27, 0xF8	; 248
    206c:	39 f0       	breq	.+14     	; 0x207c <__fixunssfsi+0x46>
    206e:	b9 3f       	cpi	r27, 0xF9	; 249
    2070:	cc f3       	brlt	.-14     	; 0x2064 <__fixunssfsi+0x2e>
    2072:	86 95       	lsr	r24
    2074:	77 95       	ror	r23
    2076:	67 95       	ror	r22
    2078:	b3 95       	inc	r27
    207a:	d9 f7       	brne	.-10     	; 0x2072 <__fixunssfsi+0x3c>
    207c:	3e f4       	brtc	.+14     	; 0x208c <__fixunssfsi+0x56>
    207e:	90 95       	com	r25
    2080:	80 95       	com	r24
    2082:	70 95       	com	r23
    2084:	61 95       	neg	r22
    2086:	7f 4f       	sbci	r23, 0xFF	; 255
    2088:	8f 4f       	sbci	r24, 0xFF	; 255
    208a:	9f 4f       	sbci	r25, 0xFF	; 255
    208c:	08 95       	ret

0000208e <__floatunsisf>:
    208e:	e8 94       	clt
    2090:	09 c0       	rjmp	.+18     	; 0x20a4 <__floatsisf+0x12>

00002092 <__floatsisf>:
    2092:	97 fb       	bst	r25, 7
    2094:	3e f4       	brtc	.+14     	; 0x20a4 <__floatsisf+0x12>
    2096:	90 95       	com	r25
    2098:	80 95       	com	r24
    209a:	70 95       	com	r23
    209c:	61 95       	neg	r22
    209e:	7f 4f       	sbci	r23, 0xFF	; 255
    20a0:	8f 4f       	sbci	r24, 0xFF	; 255
    20a2:	9f 4f       	sbci	r25, 0xFF	; 255
    20a4:	99 23       	and	r25, r25
    20a6:	a9 f0       	breq	.+42     	; 0x20d2 <__floatsisf+0x40>
    20a8:	f9 2f       	mov	r31, r25
    20aa:	96 e9       	ldi	r25, 0x96	; 150
    20ac:	bb 27       	eor	r27, r27
    20ae:	93 95       	inc	r25
    20b0:	f6 95       	lsr	r31
    20b2:	87 95       	ror	r24
    20b4:	77 95       	ror	r23
    20b6:	67 95       	ror	r22
    20b8:	b7 95       	ror	r27
    20ba:	f1 11       	cpse	r31, r1
    20bc:	f8 cf       	rjmp	.-16     	; 0x20ae <__floatsisf+0x1c>
    20be:	fa f4       	brpl	.+62     	; 0x20fe <__floatsisf+0x6c>
    20c0:	bb 0f       	add	r27, r27
    20c2:	11 f4       	brne	.+4      	; 0x20c8 <__floatsisf+0x36>
    20c4:	60 ff       	sbrs	r22, 0
    20c6:	1b c0       	rjmp	.+54     	; 0x20fe <__floatsisf+0x6c>
    20c8:	6f 5f       	subi	r22, 0xFF	; 255
    20ca:	7f 4f       	sbci	r23, 0xFF	; 255
    20cc:	8f 4f       	sbci	r24, 0xFF	; 255
    20ce:	9f 4f       	sbci	r25, 0xFF	; 255
    20d0:	16 c0       	rjmp	.+44     	; 0x20fe <__floatsisf+0x6c>
    20d2:	88 23       	and	r24, r24
    20d4:	11 f0       	breq	.+4      	; 0x20da <__floatsisf+0x48>
    20d6:	96 e9       	ldi	r25, 0x96	; 150
    20d8:	11 c0       	rjmp	.+34     	; 0x20fc <__floatsisf+0x6a>
    20da:	77 23       	and	r23, r23
    20dc:	21 f0       	breq	.+8      	; 0x20e6 <__floatsisf+0x54>
    20de:	9e e8       	ldi	r25, 0x8E	; 142
    20e0:	87 2f       	mov	r24, r23
    20e2:	76 2f       	mov	r23, r22
    20e4:	05 c0       	rjmp	.+10     	; 0x20f0 <__floatsisf+0x5e>
    20e6:	66 23       	and	r22, r22
    20e8:	71 f0       	breq	.+28     	; 0x2106 <__floatsisf+0x74>
    20ea:	96 e8       	ldi	r25, 0x86	; 134
    20ec:	86 2f       	mov	r24, r22
    20ee:	70 e0       	ldi	r23, 0x00	; 0
    20f0:	60 e0       	ldi	r22, 0x00	; 0
    20f2:	2a f0       	brmi	.+10     	; 0x20fe <__floatsisf+0x6c>
    20f4:	9a 95       	dec	r25
    20f6:	66 0f       	add	r22, r22
    20f8:	77 1f       	adc	r23, r23
    20fa:	88 1f       	adc	r24, r24
    20fc:	da f7       	brpl	.-10     	; 0x20f4 <__floatsisf+0x62>
    20fe:	88 0f       	add	r24, r24
    2100:	96 95       	lsr	r25
    2102:	87 95       	ror	r24
    2104:	97 f9       	bld	r25, 7
    2106:	08 95       	ret

00002108 <__fp_inf>:
    2108:	97 f9       	bld	r25, 7
    210a:	9f 67       	ori	r25, 0x7F	; 127
    210c:	80 e8       	ldi	r24, 0x80	; 128
    210e:	70 e0       	ldi	r23, 0x00	; 0
    2110:	60 e0       	ldi	r22, 0x00	; 0
    2112:	08 95       	ret

00002114 <__fp_nan>:
    2114:	9f ef       	ldi	r25, 0xFF	; 255
    2116:	80 ec       	ldi	r24, 0xC0	; 192
    2118:	08 95       	ret

0000211a <__fp_pscA>:
    211a:	00 24       	eor	r0, r0
    211c:	0a 94       	dec	r0
    211e:	16 16       	cp	r1, r22
    2120:	17 06       	cpc	r1, r23
    2122:	18 06       	cpc	r1, r24
    2124:	09 06       	cpc	r0, r25
    2126:	08 95       	ret

00002128 <__fp_pscB>:
    2128:	00 24       	eor	r0, r0
    212a:	0a 94       	dec	r0
    212c:	12 16       	cp	r1, r18
    212e:	13 06       	cpc	r1, r19
    2130:	14 06       	cpc	r1, r20
    2132:	05 06       	cpc	r0, r21
    2134:	08 95       	ret

00002136 <__fp_round>:
    2136:	09 2e       	mov	r0, r25
    2138:	03 94       	inc	r0
    213a:	00 0c       	add	r0, r0
    213c:	11 f4       	brne	.+4      	; 0x2142 <__fp_round+0xc>
    213e:	88 23       	and	r24, r24
    2140:	52 f0       	brmi	.+20     	; 0x2156 <__fp_round+0x20>
    2142:	bb 0f       	add	r27, r27
    2144:	40 f4       	brcc	.+16     	; 0x2156 <__fp_round+0x20>
    2146:	bf 2b       	or	r27, r31
    2148:	11 f4       	brne	.+4      	; 0x214e <__fp_round+0x18>
    214a:	60 ff       	sbrs	r22, 0
    214c:	04 c0       	rjmp	.+8      	; 0x2156 <__fp_round+0x20>
    214e:	6f 5f       	subi	r22, 0xFF	; 255
    2150:	7f 4f       	sbci	r23, 0xFF	; 255
    2152:	8f 4f       	sbci	r24, 0xFF	; 255
    2154:	9f 4f       	sbci	r25, 0xFF	; 255
    2156:	08 95       	ret

00002158 <__fp_split3>:
    2158:	57 fd       	sbrc	r21, 7
    215a:	90 58       	subi	r25, 0x80	; 128
    215c:	44 0f       	add	r20, r20
    215e:	55 1f       	adc	r21, r21
    2160:	59 f0       	breq	.+22     	; 0x2178 <__fp_splitA+0x10>
    2162:	5f 3f       	cpi	r21, 0xFF	; 255
    2164:	71 f0       	breq	.+28     	; 0x2182 <__fp_splitA+0x1a>
    2166:	47 95       	ror	r20

00002168 <__fp_splitA>:
    2168:	88 0f       	add	r24, r24
    216a:	97 fb       	bst	r25, 7
    216c:	99 1f       	adc	r25, r25
    216e:	61 f0       	breq	.+24     	; 0x2188 <__fp_splitA+0x20>
    2170:	9f 3f       	cpi	r25, 0xFF	; 255
    2172:	79 f0       	breq	.+30     	; 0x2192 <__fp_splitA+0x2a>
    2174:	87 95       	ror	r24
    2176:	08 95       	ret
    2178:	12 16       	cp	r1, r18
    217a:	13 06       	cpc	r1, r19
    217c:	14 06       	cpc	r1, r20
    217e:	55 1f       	adc	r21, r21
    2180:	f2 cf       	rjmp	.-28     	; 0x2166 <__fp_split3+0xe>
    2182:	46 95       	lsr	r20
    2184:	f1 df       	rcall	.-30     	; 0x2168 <__fp_splitA>
    2186:	08 c0       	rjmp	.+16     	; 0x2198 <__fp_splitA+0x30>
    2188:	16 16       	cp	r1, r22
    218a:	17 06       	cpc	r1, r23
    218c:	18 06       	cpc	r1, r24
    218e:	99 1f       	adc	r25, r25
    2190:	f1 cf       	rjmp	.-30     	; 0x2174 <__fp_splitA+0xc>
    2192:	86 95       	lsr	r24
    2194:	71 05       	cpc	r23, r1
    2196:	61 05       	cpc	r22, r1
    2198:	08 94       	sec
    219a:	08 95       	ret

0000219c <__fp_zero>:
    219c:	e8 94       	clt

0000219e <__fp_szero>:
    219e:	bb 27       	eor	r27, r27
    21a0:	66 27       	eor	r22, r22
    21a2:	77 27       	eor	r23, r23
    21a4:	cb 01       	movw	r24, r22
    21a6:	97 f9       	bld	r25, 7
    21a8:	08 95       	ret

000021aa <__gesf2>:
    21aa:	28 d1       	rcall	.+592    	; 0x23fc <__fp_cmp>
    21ac:	08 f4       	brcc	.+2      	; 0x21b0 <__gesf2+0x6>
    21ae:	8f ef       	ldi	r24, 0xFF	; 255
    21b0:	08 95       	ret
    21b2:	0e f0       	brts	.+2      	; 0x21b6 <__gesf2+0xc>
    21b4:	47 c1       	rjmp	.+654    	; 0x2444 <__fp_mpack>
    21b6:	ae cf       	rjmp	.-164    	; 0x2114 <__fp_nan>
    21b8:	68 94       	set
    21ba:	a6 cf       	rjmp	.-180    	; 0x2108 <__fp_inf>

000021bc <log>:
    21bc:	d5 df       	rcall	.-86     	; 0x2168 <__fp_splitA>
    21be:	c8 f3       	brcs	.-14     	; 0x21b2 <__gesf2+0x8>
    21c0:	99 23       	and	r25, r25
    21c2:	d1 f3       	breq	.-12     	; 0x21b8 <__gesf2+0xe>
    21c4:	c6 f3       	brts	.-16     	; 0x21b6 <__gesf2+0xc>
    21c6:	df 93       	push	r29
    21c8:	cf 93       	push	r28
    21ca:	1f 93       	push	r17
    21cc:	0f 93       	push	r16
    21ce:	ff 92       	push	r15
    21d0:	c9 2f       	mov	r28, r25
    21d2:	dd 27       	eor	r29, r29
    21d4:	88 23       	and	r24, r24
    21d6:	2a f0       	brmi	.+10     	; 0x21e2 <log+0x26>
    21d8:	21 97       	sbiw	r28, 0x01	; 1
    21da:	66 0f       	add	r22, r22
    21dc:	77 1f       	adc	r23, r23
    21de:	88 1f       	adc	r24, r24
    21e0:	da f7       	brpl	.-10     	; 0x21d8 <log+0x1c>
    21e2:	20 e0       	ldi	r18, 0x00	; 0
    21e4:	30 e0       	ldi	r19, 0x00	; 0
    21e6:	40 e8       	ldi	r20, 0x80	; 128
    21e8:	5f eb       	ldi	r21, 0xBF	; 191
    21ea:	9f e3       	ldi	r25, 0x3F	; 63
    21ec:	88 39       	cpi	r24, 0x98	; 152
    21ee:	20 f0       	brcs	.+8      	; 0x21f8 <log+0x3c>
    21f0:	80 3e       	cpi	r24, 0xE0	; 224
    21f2:	30 f0       	brcs	.+12     	; 0x2200 <log+0x44>
    21f4:	21 96       	adiw	r28, 0x01	; 1
    21f6:	8f 77       	andi	r24, 0x7F	; 127
    21f8:	4d de       	rcall	.-870    	; 0x1e94 <__addsf3>
    21fa:	e4 ea       	ldi	r30, 0xA4	; 164
    21fc:	f0 e0       	ldi	r31, 0x00	; 0
    21fe:	03 c0       	rjmp	.+6      	; 0x2206 <log+0x4a>
    2200:	49 de       	rcall	.-878    	; 0x1e94 <__addsf3>
    2202:	e1 ed       	ldi	r30, 0xD1	; 209
    2204:	f0 e0       	ldi	r31, 0x00	; 0
    2206:	2c d1       	rcall	.+600    	; 0x2460 <__fp_powser>
    2208:	8b 01       	movw	r16, r22
    220a:	be 01       	movw	r22, r28
    220c:	ec 01       	movw	r28, r24
    220e:	fb 2e       	mov	r15, r27
    2210:	6f 57       	subi	r22, 0x7F	; 127
    2212:	71 09       	sbc	r23, r1
    2214:	75 95       	asr	r23
    2216:	77 1f       	adc	r23, r23
    2218:	88 0b       	sbc	r24, r24
    221a:	99 0b       	sbc	r25, r25
    221c:	3a df       	rcall	.-396    	; 0x2092 <__floatsisf>
    221e:	28 e1       	ldi	r18, 0x18	; 24
    2220:	32 e7       	ldi	r19, 0x72	; 114
    2222:	41 e3       	ldi	r20, 0x31	; 49
    2224:	5f e3       	ldi	r21, 0x3F	; 63
    2226:	16 d0       	rcall	.+44     	; 0x2254 <__mulsf3x>
    2228:	af 2d       	mov	r26, r15
    222a:	98 01       	movw	r18, r16
    222c:	ae 01       	movw	r20, r28
    222e:	ff 90       	pop	r15
    2230:	0f 91       	pop	r16
    2232:	1f 91       	pop	r17
    2234:	cf 91       	pop	r28
    2236:	df 91       	pop	r29
    2238:	3e de       	rcall	.-900    	; 0x1eb6 <__addsf3x>
    223a:	7d cf       	rjmp	.-262    	; 0x2136 <__fp_round>

0000223c <__mulsf3>:
    223c:	0b d0       	rcall	.+22     	; 0x2254 <__mulsf3x>
    223e:	7b cf       	rjmp	.-266    	; 0x2136 <__fp_round>
    2240:	6c df       	rcall	.-296    	; 0x211a <__fp_pscA>
    2242:	28 f0       	brcs	.+10     	; 0x224e <__mulsf3+0x12>
    2244:	71 df       	rcall	.-286    	; 0x2128 <__fp_pscB>
    2246:	18 f0       	brcs	.+6      	; 0x224e <__mulsf3+0x12>
    2248:	95 23       	and	r25, r21
    224a:	09 f0       	breq	.+2      	; 0x224e <__mulsf3+0x12>
    224c:	5d cf       	rjmp	.-326    	; 0x2108 <__fp_inf>
    224e:	62 cf       	rjmp	.-316    	; 0x2114 <__fp_nan>
    2250:	11 24       	eor	r1, r1
    2252:	a5 cf       	rjmp	.-182    	; 0x219e <__fp_szero>

00002254 <__mulsf3x>:
    2254:	81 df       	rcall	.-254    	; 0x2158 <__fp_split3>
    2256:	a0 f3       	brcs	.-24     	; 0x2240 <__mulsf3+0x4>

00002258 <__mulsf3_pse>:
    2258:	95 9f       	mul	r25, r21
    225a:	d1 f3       	breq	.-12     	; 0x2250 <__mulsf3+0x14>
    225c:	95 0f       	add	r25, r21
    225e:	50 e0       	ldi	r21, 0x00	; 0
    2260:	55 1f       	adc	r21, r21
    2262:	62 9f       	mul	r22, r18
    2264:	f0 01       	movw	r30, r0
    2266:	72 9f       	mul	r23, r18
    2268:	bb 27       	eor	r27, r27
    226a:	f0 0d       	add	r31, r0
    226c:	b1 1d       	adc	r27, r1
    226e:	63 9f       	mul	r22, r19
    2270:	aa 27       	eor	r26, r26
    2272:	f0 0d       	add	r31, r0
    2274:	b1 1d       	adc	r27, r1
    2276:	aa 1f       	adc	r26, r26
    2278:	64 9f       	mul	r22, r20
    227a:	66 27       	eor	r22, r22
    227c:	b0 0d       	add	r27, r0
    227e:	a1 1d       	adc	r26, r1
    2280:	66 1f       	adc	r22, r22
    2282:	82 9f       	mul	r24, r18
    2284:	22 27       	eor	r18, r18
    2286:	b0 0d       	add	r27, r0
    2288:	a1 1d       	adc	r26, r1
    228a:	62 1f       	adc	r22, r18
    228c:	73 9f       	mul	r23, r19
    228e:	b0 0d       	add	r27, r0
    2290:	a1 1d       	adc	r26, r1
    2292:	62 1f       	adc	r22, r18
    2294:	83 9f       	mul	r24, r19
    2296:	a0 0d       	add	r26, r0
    2298:	61 1d       	adc	r22, r1
    229a:	22 1f       	adc	r18, r18
    229c:	74 9f       	mul	r23, r20
    229e:	33 27       	eor	r19, r19
    22a0:	a0 0d       	add	r26, r0
    22a2:	61 1d       	adc	r22, r1
    22a4:	23 1f       	adc	r18, r19
    22a6:	84 9f       	mul	r24, r20
    22a8:	60 0d       	add	r22, r0
    22aa:	21 1d       	adc	r18, r1
    22ac:	82 2f       	mov	r24, r18
    22ae:	76 2f       	mov	r23, r22
    22b0:	6a 2f       	mov	r22, r26
    22b2:	11 24       	eor	r1, r1
    22b4:	9f 57       	subi	r25, 0x7F	; 127
    22b6:	50 40       	sbci	r21, 0x00	; 0
    22b8:	8a f0       	brmi	.+34     	; 0x22dc <__mulsf3_pse+0x84>
    22ba:	e1 f0       	breq	.+56     	; 0x22f4 <__mulsf3_pse+0x9c>
    22bc:	88 23       	and	r24, r24
    22be:	4a f0       	brmi	.+18     	; 0x22d2 <__mulsf3_pse+0x7a>
    22c0:	ee 0f       	add	r30, r30
    22c2:	ff 1f       	adc	r31, r31
    22c4:	bb 1f       	adc	r27, r27
    22c6:	66 1f       	adc	r22, r22
    22c8:	77 1f       	adc	r23, r23
    22ca:	88 1f       	adc	r24, r24
    22cc:	91 50       	subi	r25, 0x01	; 1
    22ce:	50 40       	sbci	r21, 0x00	; 0
    22d0:	a9 f7       	brne	.-22     	; 0x22bc <__mulsf3_pse+0x64>
    22d2:	9e 3f       	cpi	r25, 0xFE	; 254
    22d4:	51 05       	cpc	r21, r1
    22d6:	70 f0       	brcs	.+28     	; 0x22f4 <__mulsf3_pse+0x9c>
    22d8:	17 cf       	rjmp	.-466    	; 0x2108 <__fp_inf>
    22da:	61 cf       	rjmp	.-318    	; 0x219e <__fp_szero>
    22dc:	5f 3f       	cpi	r21, 0xFF	; 255
    22de:	ec f3       	brlt	.-6      	; 0x22da <__mulsf3_pse+0x82>
    22e0:	98 3e       	cpi	r25, 0xE8	; 232
    22e2:	dc f3       	brlt	.-10     	; 0x22da <__mulsf3_pse+0x82>
    22e4:	86 95       	lsr	r24
    22e6:	77 95       	ror	r23
    22e8:	67 95       	ror	r22
    22ea:	b7 95       	ror	r27
    22ec:	f7 95       	ror	r31
    22ee:	e7 95       	ror	r30
    22f0:	9f 5f       	subi	r25, 0xFF	; 255
    22f2:	c1 f7       	brne	.-16     	; 0x22e4 <__mulsf3_pse+0x8c>
    22f4:	fe 2b       	or	r31, r30
    22f6:	88 0f       	add	r24, r24
    22f8:	91 1d       	adc	r25, r1
    22fa:	96 95       	lsr	r25
    22fc:	87 95       	ror	r24
    22fe:	97 f9       	bld	r25, 7
    2300:	08 95       	ret

00002302 <pow>:
    2302:	fa 01       	movw	r30, r20
    2304:	ee 0f       	add	r30, r30
    2306:	ff 1f       	adc	r31, r31
    2308:	30 96       	adiw	r30, 0x00	; 0
    230a:	21 05       	cpc	r18, r1
    230c:	31 05       	cpc	r19, r1
    230e:	99 f1       	breq	.+102    	; 0x2376 <pow+0x74>
    2310:	61 15       	cp	r22, r1
    2312:	71 05       	cpc	r23, r1
    2314:	61 f4       	brne	.+24     	; 0x232e <pow+0x2c>
    2316:	80 38       	cpi	r24, 0x80	; 128
    2318:	bf e3       	ldi	r27, 0x3F	; 63
    231a:	9b 07       	cpc	r25, r27
    231c:	49 f1       	breq	.+82     	; 0x2370 <pow+0x6e>
    231e:	68 94       	set
    2320:	90 38       	cpi	r25, 0x80	; 128
    2322:	81 05       	cpc	r24, r1
    2324:	61 f0       	breq	.+24     	; 0x233e <pow+0x3c>
    2326:	80 38       	cpi	r24, 0x80	; 128
    2328:	bf ef       	ldi	r27, 0xFF	; 255
    232a:	9b 07       	cpc	r25, r27
    232c:	41 f0       	breq	.+16     	; 0x233e <pow+0x3c>
    232e:	99 23       	and	r25, r25
    2330:	42 f5       	brpl	.+80     	; 0x2382 <pow+0x80>
    2332:	ff 3f       	cpi	r31, 0xFF	; 255
    2334:	e1 05       	cpc	r30, r1
    2336:	31 05       	cpc	r19, r1
    2338:	21 05       	cpc	r18, r1
    233a:	11 f1       	breq	.+68     	; 0x2380 <pow+0x7e>
    233c:	e8 94       	clt
    233e:	08 94       	sec
    2340:	e7 95       	ror	r30
    2342:	d9 01       	movw	r26, r18
    2344:	aa 23       	and	r26, r26
    2346:	29 f4       	brne	.+10     	; 0x2352 <pow+0x50>
    2348:	ab 2f       	mov	r26, r27
    234a:	be 2f       	mov	r27, r30
    234c:	f8 5f       	subi	r31, 0xF8	; 248
    234e:	d0 f3       	brcs	.-12     	; 0x2344 <pow+0x42>
    2350:	10 c0       	rjmp	.+32     	; 0x2372 <pow+0x70>
    2352:	ff 5f       	subi	r31, 0xFF	; 255
    2354:	70 f4       	brcc	.+28     	; 0x2372 <pow+0x70>
    2356:	a6 95       	lsr	r26
    2358:	e0 f7       	brcc	.-8      	; 0x2352 <pow+0x50>
    235a:	f7 39       	cpi	r31, 0x97	; 151
    235c:	50 f0       	brcs	.+20     	; 0x2372 <pow+0x70>
    235e:	19 f0       	breq	.+6      	; 0x2366 <pow+0x64>
    2360:	ff 3a       	cpi	r31, 0xAF	; 175
    2362:	38 f4       	brcc	.+14     	; 0x2372 <pow+0x70>
    2364:	9f 77       	andi	r25, 0x7F	; 127
    2366:	9f 93       	push	r25
    2368:	0c d0       	rcall	.+24     	; 0x2382 <pow+0x80>
    236a:	0f 90       	pop	r0
    236c:	07 fc       	sbrc	r0, 7
    236e:	90 58       	subi	r25, 0x80	; 128
    2370:	08 95       	ret
    2372:	3e f0       	brts	.+14     	; 0x2382 <pow+0x80>
    2374:	cf ce       	rjmp	.-610    	; 0x2114 <__fp_nan>
    2376:	60 e0       	ldi	r22, 0x00	; 0
    2378:	70 e0       	ldi	r23, 0x00	; 0
    237a:	80 e8       	ldi	r24, 0x80	; 128
    237c:	9f e3       	ldi	r25, 0x3F	; 63
    237e:	08 95       	ret
    2380:	4f e7       	ldi	r20, 0x7F	; 127
    2382:	9f 77       	andi	r25, 0x7F	; 127
    2384:	5f 93       	push	r21
    2386:	4f 93       	push	r20
    2388:	3f 93       	push	r19
    238a:	2f 93       	push	r18
    238c:	17 df       	rcall	.-466    	; 0x21bc <log>
    238e:	2f 91       	pop	r18
    2390:	3f 91       	pop	r19
    2392:	4f 91       	pop	r20
    2394:	5f 91       	pop	r21
    2396:	52 df       	rcall	.-348    	; 0x223c <__mulsf3>
    2398:	05 c0       	rjmp	.+10     	; 0x23a4 <exp>
    239a:	19 f4       	brne	.+6      	; 0x23a2 <pow+0xa0>
    239c:	0e f0       	brts	.+2      	; 0x23a0 <pow+0x9e>
    239e:	b4 ce       	rjmp	.-664    	; 0x2108 <__fp_inf>
    23a0:	fd ce       	rjmp	.-518    	; 0x219c <__fp_zero>
    23a2:	b8 ce       	rjmp	.-656    	; 0x2114 <__fp_nan>

000023a4 <exp>:
    23a4:	e1 de       	rcall	.-574    	; 0x2168 <__fp_splitA>
    23a6:	c8 f3       	brcs	.-14     	; 0x239a <pow+0x98>
    23a8:	96 38       	cpi	r25, 0x86	; 134
    23aa:	c0 f7       	brcc	.-16     	; 0x239c <pow+0x9a>
    23ac:	07 f8       	bld	r0, 7
    23ae:	0f 92       	push	r0
    23b0:	e8 94       	clt
    23b2:	2b e3       	ldi	r18, 0x3B	; 59
    23b4:	3a ea       	ldi	r19, 0xAA	; 170
    23b6:	48 eb       	ldi	r20, 0xB8	; 184
    23b8:	5f e7       	ldi	r21, 0x7F	; 127
    23ba:	4e df       	rcall	.-356    	; 0x2258 <__mulsf3_pse>
    23bc:	0f 92       	push	r0
    23be:	0f 92       	push	r0
    23c0:	0f 92       	push	r0
    23c2:	4d b7       	in	r20, 0x3d	; 61
    23c4:	5e b7       	in	r21, 0x3e	; 62
    23c6:	0f 92       	push	r0
    23c8:	ad d0       	rcall	.+346    	; 0x2524 <modf>
    23ca:	ee ef       	ldi	r30, 0xFE	; 254
    23cc:	f0 e0       	ldi	r31, 0x00	; 0
    23ce:	48 d0       	rcall	.+144    	; 0x2460 <__fp_powser>
    23d0:	4f 91       	pop	r20
    23d2:	5f 91       	pop	r21
    23d4:	ef 91       	pop	r30
    23d6:	ff 91       	pop	r31
    23d8:	e5 95       	asr	r30
    23da:	ee 1f       	adc	r30, r30
    23dc:	ff 1f       	adc	r31, r31
    23de:	49 f0       	breq	.+18     	; 0x23f2 <exp+0x4e>
    23e0:	fe 57       	subi	r31, 0x7E	; 126
    23e2:	e0 68       	ori	r30, 0x80	; 128
    23e4:	44 27       	eor	r20, r20
    23e6:	ee 0f       	add	r30, r30
    23e8:	44 1f       	adc	r20, r20
    23ea:	fa 95       	dec	r31
    23ec:	e1 f7       	brne	.-8      	; 0x23e6 <exp+0x42>
    23ee:	41 95       	neg	r20
    23f0:	55 0b       	sbc	r21, r21
    23f2:	64 d0       	rcall	.+200    	; 0x24bc <ldexp>
    23f4:	0f 90       	pop	r0
    23f6:	07 fe       	sbrs	r0, 7
    23f8:	58 c0       	rjmp	.+176    	; 0x24aa <inverse>
    23fa:	08 95       	ret

000023fc <__fp_cmp>:
    23fc:	99 0f       	add	r25, r25
    23fe:	00 08       	sbc	r0, r0
    2400:	55 0f       	add	r21, r21
    2402:	aa 0b       	sbc	r26, r26
    2404:	e0 e8       	ldi	r30, 0x80	; 128
    2406:	fe ef       	ldi	r31, 0xFE	; 254
    2408:	16 16       	cp	r1, r22
    240a:	17 06       	cpc	r1, r23
    240c:	e8 07       	cpc	r30, r24
    240e:	f9 07       	cpc	r31, r25
    2410:	c0 f0       	brcs	.+48     	; 0x2442 <__fp_cmp+0x46>
    2412:	12 16       	cp	r1, r18
    2414:	13 06       	cpc	r1, r19
    2416:	e4 07       	cpc	r30, r20
    2418:	f5 07       	cpc	r31, r21
    241a:	98 f0       	brcs	.+38     	; 0x2442 <__fp_cmp+0x46>
    241c:	62 1b       	sub	r22, r18
    241e:	73 0b       	sbc	r23, r19
    2420:	84 0b       	sbc	r24, r20
    2422:	95 0b       	sbc	r25, r21
    2424:	39 f4       	brne	.+14     	; 0x2434 <__fp_cmp+0x38>
    2426:	0a 26       	eor	r0, r26
    2428:	61 f0       	breq	.+24     	; 0x2442 <__fp_cmp+0x46>
    242a:	23 2b       	or	r18, r19
    242c:	24 2b       	or	r18, r20
    242e:	25 2b       	or	r18, r21
    2430:	21 f4       	brne	.+8      	; 0x243a <__fp_cmp+0x3e>
    2432:	08 95       	ret
    2434:	0a 26       	eor	r0, r26
    2436:	09 f4       	brne	.+2      	; 0x243a <__fp_cmp+0x3e>
    2438:	a1 40       	sbci	r26, 0x01	; 1
    243a:	a6 95       	lsr	r26
    243c:	8f ef       	ldi	r24, 0xFF	; 255
    243e:	81 1d       	adc	r24, r1
    2440:	81 1d       	adc	r24, r1
    2442:	08 95       	ret

00002444 <__fp_mpack>:
    2444:	9f 3f       	cpi	r25, 0xFF	; 255
    2446:	31 f0       	breq	.+12     	; 0x2454 <__fp_mpack_finite+0xc>

00002448 <__fp_mpack_finite>:
    2448:	91 50       	subi	r25, 0x01	; 1
    244a:	20 f4       	brcc	.+8      	; 0x2454 <__fp_mpack_finite+0xc>
    244c:	87 95       	ror	r24
    244e:	77 95       	ror	r23
    2450:	67 95       	ror	r22
    2452:	b7 95       	ror	r27
    2454:	88 0f       	add	r24, r24
    2456:	91 1d       	adc	r25, r1
    2458:	96 95       	lsr	r25
    245a:	87 95       	ror	r24
    245c:	97 f9       	bld	r25, 7
    245e:	08 95       	ret

00002460 <__fp_powser>:
    2460:	df 93       	push	r29
    2462:	cf 93       	push	r28
    2464:	1f 93       	push	r17
    2466:	0f 93       	push	r16
    2468:	ff 92       	push	r15
    246a:	ef 92       	push	r14
    246c:	df 92       	push	r13
    246e:	7b 01       	movw	r14, r22
    2470:	8c 01       	movw	r16, r24
    2472:	68 94       	set
    2474:	05 c0       	rjmp	.+10     	; 0x2480 <__fp_powser+0x20>
    2476:	da 2e       	mov	r13, r26
    2478:	ef 01       	movw	r28, r30
    247a:	ec de       	rcall	.-552    	; 0x2254 <__mulsf3x>
    247c:	fe 01       	movw	r30, r28
    247e:	e8 94       	clt
    2480:	a5 91       	lpm	r26, Z+
    2482:	25 91       	lpm	r18, Z+
    2484:	35 91       	lpm	r19, Z+
    2486:	45 91       	lpm	r20, Z+
    2488:	55 91       	lpm	r21, Z+
    248a:	ae f3       	brts	.-22     	; 0x2476 <__fp_powser+0x16>
    248c:	ef 01       	movw	r28, r30
    248e:	13 dd       	rcall	.-1498   	; 0x1eb6 <__addsf3x>
    2490:	fe 01       	movw	r30, r28
    2492:	97 01       	movw	r18, r14
    2494:	a8 01       	movw	r20, r16
    2496:	da 94       	dec	r13
    2498:	79 f7       	brne	.-34     	; 0x2478 <__fp_powser+0x18>
    249a:	df 90       	pop	r13
    249c:	ef 90       	pop	r14
    249e:	ff 90       	pop	r15
    24a0:	0f 91       	pop	r16
    24a2:	1f 91       	pop	r17
    24a4:	cf 91       	pop	r28
    24a6:	df 91       	pop	r29
    24a8:	08 95       	ret

000024aa <inverse>:
    24aa:	9b 01       	movw	r18, r22
    24ac:	ac 01       	movw	r20, r24
    24ae:	60 e0       	ldi	r22, 0x00	; 0
    24b0:	70 e0       	ldi	r23, 0x00	; 0
    24b2:	80 e8       	ldi	r24, 0x80	; 128
    24b4:	9f e3       	ldi	r25, 0x3F	; 63
    24b6:	52 cd       	rjmp	.-1372   	; 0x1f5c <__divsf3>
    24b8:	27 ce       	rjmp	.-946    	; 0x2108 <__fp_inf>
    24ba:	c4 cf       	rjmp	.-120    	; 0x2444 <__fp_mpack>

000024bc <ldexp>:
    24bc:	55 de       	rcall	.-854    	; 0x2168 <__fp_splitA>
    24be:	e8 f3       	brcs	.-6      	; 0x24ba <inverse+0x10>
    24c0:	99 23       	and	r25, r25
    24c2:	d9 f3       	breq	.-10     	; 0x24ba <inverse+0x10>
    24c4:	94 0f       	add	r25, r20
    24c6:	51 1d       	adc	r21, r1
    24c8:	bb f3       	brvs	.-18     	; 0x24b8 <inverse+0xe>
    24ca:	91 50       	subi	r25, 0x01	; 1
    24cc:	50 40       	sbci	r21, 0x00	; 0
    24ce:	94 f0       	brlt	.+36     	; 0x24f4 <ldexp+0x38>
    24d0:	59 f0       	breq	.+22     	; 0x24e8 <ldexp+0x2c>
    24d2:	88 23       	and	r24, r24
    24d4:	32 f0       	brmi	.+12     	; 0x24e2 <ldexp+0x26>
    24d6:	66 0f       	add	r22, r22
    24d8:	77 1f       	adc	r23, r23
    24da:	88 1f       	adc	r24, r24
    24dc:	91 50       	subi	r25, 0x01	; 1
    24de:	50 40       	sbci	r21, 0x00	; 0
    24e0:	c1 f7       	brne	.-16     	; 0x24d2 <ldexp+0x16>
    24e2:	9e 3f       	cpi	r25, 0xFE	; 254
    24e4:	51 05       	cpc	r21, r1
    24e6:	44 f7       	brge	.-48     	; 0x24b8 <inverse+0xe>
    24e8:	88 0f       	add	r24, r24
    24ea:	91 1d       	adc	r25, r1
    24ec:	96 95       	lsr	r25
    24ee:	87 95       	ror	r24
    24f0:	97 f9       	bld	r25, 7
    24f2:	08 95       	ret
    24f4:	5f 3f       	cpi	r21, 0xFF	; 255
    24f6:	ac f0       	brlt	.+42     	; 0x2522 <ldexp+0x66>
    24f8:	98 3e       	cpi	r25, 0xE8	; 232
    24fa:	9c f0       	brlt	.+38     	; 0x2522 <ldexp+0x66>
    24fc:	bb 27       	eor	r27, r27
    24fe:	86 95       	lsr	r24
    2500:	77 95       	ror	r23
    2502:	67 95       	ror	r22
    2504:	b7 95       	ror	r27
    2506:	08 f4       	brcc	.+2      	; 0x250a <ldexp+0x4e>
    2508:	b1 60       	ori	r27, 0x01	; 1
    250a:	93 95       	inc	r25
    250c:	c1 f7       	brne	.-16     	; 0x24fe <ldexp+0x42>
    250e:	bb 0f       	add	r27, r27
    2510:	58 f7       	brcc	.-42     	; 0x24e8 <ldexp+0x2c>
    2512:	11 f4       	brne	.+4      	; 0x2518 <ldexp+0x5c>
    2514:	60 ff       	sbrs	r22, 0
    2516:	e8 cf       	rjmp	.-48     	; 0x24e8 <ldexp+0x2c>
    2518:	6f 5f       	subi	r22, 0xFF	; 255
    251a:	7f 4f       	sbci	r23, 0xFF	; 255
    251c:	8f 4f       	sbci	r24, 0xFF	; 255
    251e:	9f 4f       	sbci	r25, 0xFF	; 255
    2520:	e3 cf       	rjmp	.-58     	; 0x24e8 <ldexp+0x2c>
    2522:	3d ce       	rjmp	.-902    	; 0x219e <__fp_szero>

00002524 <modf>:
    2524:	fa 01       	movw	r30, r20
    2526:	dc 01       	movw	r26, r24
    2528:	aa 0f       	add	r26, r26
    252a:	bb 1f       	adc	r27, r27
    252c:	9b 01       	movw	r18, r22
    252e:	ac 01       	movw	r20, r24
    2530:	bf 57       	subi	r27, 0x7F	; 127
    2532:	28 f4       	brcc	.+10     	; 0x253e <modf+0x1a>
    2534:	22 27       	eor	r18, r18
    2536:	33 27       	eor	r19, r19
    2538:	44 27       	eor	r20, r20
    253a:	50 78       	andi	r21, 0x80	; 128
    253c:	1f c0       	rjmp	.+62     	; 0x257c <modf+0x58>
    253e:	b7 51       	subi	r27, 0x17	; 23
    2540:	88 f4       	brcc	.+34     	; 0x2564 <modf+0x40>
    2542:	ab 2f       	mov	r26, r27
    2544:	00 24       	eor	r0, r0
    2546:	46 95       	lsr	r20
    2548:	37 95       	ror	r19
    254a:	27 95       	ror	r18
    254c:	01 1c       	adc	r0, r1
    254e:	a3 95       	inc	r26
    2550:	d2 f3       	brmi	.-12     	; 0x2546 <modf+0x22>
    2552:	00 20       	and	r0, r0
    2554:	69 f0       	breq	.+26     	; 0x2570 <modf+0x4c>
    2556:	22 0f       	add	r18, r18
    2558:	33 1f       	adc	r19, r19
    255a:	44 1f       	adc	r20, r20
    255c:	b3 95       	inc	r27
    255e:	da f3       	brmi	.-10     	; 0x2556 <modf+0x32>
    2560:	0d d0       	rcall	.+26     	; 0x257c <modf+0x58>
    2562:	97 cc       	rjmp	.-1746   	; 0x1e92 <__subsf3>
    2564:	61 30       	cpi	r22, 0x01	; 1
    2566:	71 05       	cpc	r23, r1
    2568:	a0 e8       	ldi	r26, 0x80	; 128
    256a:	8a 07       	cpc	r24, r26
    256c:	b9 46       	sbci	r27, 0x69	; 105
    256e:	30 f4       	brcc	.+12     	; 0x257c <modf+0x58>
    2570:	9b 01       	movw	r18, r22
    2572:	ac 01       	movw	r20, r24
    2574:	66 27       	eor	r22, r22
    2576:	77 27       	eor	r23, r23
    2578:	88 27       	eor	r24, r24
    257a:	90 78       	andi	r25, 0x80	; 128
    257c:	30 96       	adiw	r30, 0x00	; 0
    257e:	21 f0       	breq	.+8      	; 0x2588 <modf+0x64>
    2580:	20 83       	st	Z, r18
    2582:	31 83       	std	Z+1, r19	; 0x01
    2584:	42 83       	std	Z+2, r20	; 0x02
    2586:	53 83       	std	Z+3, r21	; 0x03
    2588:	08 95       	ret

0000258a <_ZN14HardwareSerial9availableEv>:
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
}

int HardwareSerial::available(void)
{
    258a:	fc 01       	movw	r30, r24
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
    258c:	91 8d       	ldd	r25, Z+25	; 0x19
    258e:	22 8d       	ldd	r18, Z+26	; 0x1a
    2590:	89 2f       	mov	r24, r25
    2592:	90 e0       	ldi	r25, 0x00	; 0
    2594:	80 5c       	subi	r24, 0xC0	; 192
    2596:	9f 4f       	sbci	r25, 0xFF	; 255
    2598:	82 1b       	sub	r24, r18
    259a:	91 09       	sbc	r25, r1
}
    259c:	8f 73       	andi	r24, 0x3F	; 63
    259e:	99 27       	eor	r25, r25
    25a0:	08 95       	ret

000025a2 <_ZN14HardwareSerial4peekEv>:

int HardwareSerial::peek(void)
{
    25a2:	fc 01       	movw	r30, r24
  if (_rx_buffer_head == _rx_buffer_tail) {
    25a4:	91 8d       	ldd	r25, Z+25	; 0x19
    25a6:	82 8d       	ldd	r24, Z+26	; 0x1a
    25a8:	98 17       	cp	r25, r24
    25aa:	31 f0       	breq	.+12     	; 0x25b8 <_ZN14HardwareSerial4peekEv+0x16>
    return -1;
  } else {
    return _rx_buffer[_rx_buffer_tail];
    25ac:	82 8d       	ldd	r24, Z+26	; 0x1a
    25ae:	e8 0f       	add	r30, r24
    25b0:	f1 1d       	adc	r31, r1
    25b2:	85 8d       	ldd	r24, Z+29	; 0x1d
    25b4:	90 e0       	ldi	r25, 0x00	; 0
    25b6:	08 95       	ret
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    25b8:	8f ef       	ldi	r24, 0xFF	; 255
    25ba:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    return _rx_buffer[_rx_buffer_tail];
  }
}
    25bc:	08 95       	ret

000025be <_ZN14HardwareSerial4readEv>:

int HardwareSerial::read(void)
{
    25be:	fc 01       	movw	r30, r24
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    25c0:	91 8d       	ldd	r25, Z+25	; 0x19
    25c2:	82 8d       	ldd	r24, Z+26	; 0x1a
    25c4:	98 17       	cp	r25, r24
    25c6:	61 f0       	breq	.+24     	; 0x25e0 <_ZN14HardwareSerial4readEv+0x22>
    return -1;
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    25c8:	82 8d       	ldd	r24, Z+26	; 0x1a
    25ca:	df 01       	movw	r26, r30
    25cc:	a8 0f       	add	r26, r24
    25ce:	b1 1d       	adc	r27, r1
    25d0:	5d 96       	adiw	r26, 0x1d	; 29
    25d2:	8c 91       	ld	r24, X
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    25d4:	92 8d       	ldd	r25, Z+26	; 0x1a
    25d6:	9f 5f       	subi	r25, 0xFF	; 255
    25d8:	9f 73       	andi	r25, 0x3F	; 63
    25da:	92 8f       	std	Z+26, r25	; 0x1a
    return c;
    25dc:	90 e0       	ldi	r25, 0x00	; 0
    25de:	08 95       	ret

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    25e0:	8f ef       	ldi	r24, 0xFF	; 255
    25e2:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    return c;
  }
}
    25e4:	08 95       	ret

000025e6 <_Z14serialEventRunv>:
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
    25e6:	88 ef       	ldi	r24, 0xF8	; 248
    25e8:	93 e1       	ldi	r25, 0x13	; 19
    25ea:	89 2b       	or	r24, r25
    25ec:	39 f0       	breq	.+14     	; 0x25fc <_Z14serialEventRunv+0x16>
    25ee:	80 e0       	ldi	r24, 0x00	; 0
    25f0:	90 e0       	ldi	r25, 0x00	; 0
    25f2:	89 2b       	or	r24, r25
    25f4:	19 f0       	breq	.+6      	; 0x25fc <_Z14serialEventRunv+0x16>
    25f6:	fc d0       	rcall	.+504    	; 0x27f0 <_Z17Serial0_availablev>
    25f8:	81 11       	cpse	r24, r1
    25fa:	0d c0       	rjmp	.+26     	; 0x2616 <_Z14serialEventRunv+0x30>
#endif
#if defined(HAVE_HWSERIAL1)
  if (Serial1_available && serialEvent1 && Serial1_available()) serialEvent1();
    25fc:	80 e0       	ldi	r24, 0x00	; 0
    25fe:	90 e0       	ldi	r25, 0x00	; 0
    2600:	89 2b       	or	r24, r25
    2602:	71 f0       	breq	.+28     	; 0x2620 <_Z14serialEventRunv+0x3a>
    2604:	80 e0       	ldi	r24, 0x00	; 0
    2606:	90 e0       	ldi	r25, 0x00	; 0
    2608:	89 2b       	or	r24, r25
    260a:	51 f0       	breq	.+20     	; 0x2620 <_Z14serialEventRunv+0x3a>
    260c:	0e 94 00 00 	call	0	; 0x0 <__vectors>
    2610:	81 11       	cpse	r24, r1
    2612:	04 c0       	rjmp	.+8      	; 0x261c <_Z14serialEventRunv+0x36>
    2614:	08 95       	ret
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
    2616:	0e 94 00 00 	call	0	; 0x0 <__vectors>
    261a:	f0 cf       	rjmp	.-32     	; 0x25fc <_Z14serialEventRunv+0x16>
#endif
#if defined(HAVE_HWSERIAL1)
  if (Serial1_available && serialEvent1 && Serial1_available()) serialEvent1();
    261c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
    2620:	08 95       	ret

00002622 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>:
}

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
    2622:	fc 01       	movw	r30, r24
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
    2624:	84 8d       	ldd	r24, Z+28	; 0x1c
    2626:	df 01       	movw	r26, r30
    2628:	a8 0f       	add	r26, r24
    262a:	b1 1d       	adc	r27, r1
    262c:	a3 5a       	subi	r26, 0xA3	; 163
    262e:	bf 4f       	sbci	r27, 0xFF	; 255
    2630:	2c 91       	ld	r18, X
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
    2632:	84 8d       	ldd	r24, Z+28	; 0x1c
    2634:	90 e0       	ldi	r25, 0x00	; 0
    2636:	01 96       	adiw	r24, 0x01	; 1
    2638:	8f 73       	andi	r24, 0x3F	; 63
    263a:	99 27       	eor	r25, r25
    263c:	84 8f       	std	Z+28, r24	; 0x1c

  *_udr = c;
    263e:	a6 89       	ldd	r26, Z+22	; 0x16
    2640:	b7 89       	ldd	r27, Z+23	; 0x17
    2642:	2c 93       	st	X, r18

  // clear the TXC bit -- "can be cleared by writing a one to its bit
  // location". This makes sure flush() won't return until the bytes
  // actually got written
  sbi(*_ucsra, TXC0);
    2644:	a0 89       	ldd	r26, Z+16	; 0x10
    2646:	b1 89       	ldd	r27, Z+17	; 0x11
    2648:	8c 91       	ld	r24, X
    264a:	80 64       	ori	r24, 0x40	; 64
    264c:	8c 93       	st	X, r24

  if (_tx_buffer_head == _tx_buffer_tail) {
    264e:	93 8d       	ldd	r25, Z+27	; 0x1b
    2650:	84 8d       	ldd	r24, Z+28	; 0x1c
    2652:	98 13       	cpse	r25, r24
    2654:	06 c0       	rjmp	.+12     	; 0x2662 <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x40>
    // Buffer empty, so disable interrupts
    cbi(*_ucsrb, UDRIE0);
    2656:	02 88       	ldd	r0, Z+18	; 0x12
    2658:	f3 89       	ldd	r31, Z+19	; 0x13
    265a:	e0 2d       	mov	r30, r0
    265c:	80 81       	ld	r24, Z
    265e:	8f 7d       	andi	r24, 0xDF	; 223
    2660:	80 83       	st	Z, r24
    2662:	08 95       	ret

00002664 <_ZN14HardwareSerial5writeEh>:
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}

size_t HardwareSerial::write(uint8_t c)
{
    2664:	ef 92       	push	r14
    2666:	ff 92       	push	r15
    2668:	0f 93       	push	r16
    266a:	1f 93       	push	r17
    266c:	cf 93       	push	r28
    266e:	df 93       	push	r29
    2670:	ec 01       	movw	r28, r24
  _written = true;
    2672:	81 e0       	ldi	r24, 0x01	; 1
    2674:	88 8f       	std	Y+24, r24	; 0x18
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    2676:	9b 8d       	ldd	r25, Y+27	; 0x1b
    2678:	8c 8d       	ldd	r24, Y+28	; 0x1c
    267a:	98 13       	cpse	r25, r24
    267c:	05 c0       	rjmp	.+10     	; 0x2688 <_ZN14HardwareSerial5writeEh+0x24>
    267e:	e8 89       	ldd	r30, Y+16	; 0x10
    2680:	f9 89       	ldd	r31, Y+17	; 0x11
    2682:	80 81       	ld	r24, Z
    2684:	85 fd       	sbrc	r24, 5
    2686:	23 c0       	rjmp	.+70     	; 0x26ce <_ZN14HardwareSerial5writeEh+0x6a>
    2688:	f6 2e       	mov	r15, r22
    *_udr = c;
    sbi(*_ucsra, TXC0);
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
    268a:	0b 8d       	ldd	r16, Y+27	; 0x1b
    268c:	10 e0       	ldi	r17, 0x00	; 0
    268e:	0f 5f       	subi	r16, 0xFF	; 255
    2690:	1f 4f       	sbci	r17, 0xFF	; 255
    2692:	0f 73       	andi	r16, 0x3F	; 63
    2694:	11 27       	eor	r17, r17
    2696:	e0 2e       	mov	r14, r16
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
    2698:	8c 8d       	ldd	r24, Y+28	; 0x1c
    269a:	e8 12       	cpse	r14, r24
    269c:	0b c0       	rjmp	.+22     	; 0x26b4 <_ZN14HardwareSerial5writeEh+0x50>
    if (bit_is_clear(SREG, SREG_I)) {
    269e:	0f b6       	in	r0, 0x3f	; 63
    26a0:	07 fc       	sbrc	r0, 7
    26a2:	fa cf       	rjmp	.-12     	; 0x2698 <_ZN14HardwareSerial5writeEh+0x34>
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
    26a4:	e8 89       	ldd	r30, Y+16	; 0x10
    26a6:	f9 89       	ldd	r31, Y+17	; 0x11
    26a8:	80 81       	ld	r24, Z
    26aa:	85 ff       	sbrs	r24, 5
    26ac:	f5 cf       	rjmp	.-22     	; 0x2698 <_ZN14HardwareSerial5writeEh+0x34>
	_tx_udr_empty_irq();
    26ae:	ce 01       	movw	r24, r28
    26b0:	b8 df       	rcall	.-144    	; 0x2622 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    26b2:	f2 cf       	rjmp	.-28     	; 0x2698 <_ZN14HardwareSerial5writeEh+0x34>
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
    26b4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    26b6:	fe 01       	movw	r30, r28
    26b8:	e8 0f       	add	r30, r24
    26ba:	f1 1d       	adc	r31, r1
    26bc:	e3 5a       	subi	r30, 0xA3	; 163
    26be:	ff 4f       	sbci	r31, 0xFF	; 255
    26c0:	f0 82       	st	Z, r15
  _tx_buffer_head = i;
    26c2:	0b 8f       	std	Y+27, r16	; 0x1b
	
  sbi(*_ucsrb, UDRIE0);
    26c4:	ea 89       	ldd	r30, Y+18	; 0x12
    26c6:	fb 89       	ldd	r31, Y+19	; 0x13
    26c8:	80 81       	ld	r24, Z
    26ca:	80 62       	ori	r24, 0x20	; 32
    26cc:	07 c0       	rjmp	.+14     	; 0x26dc <_ZN14HardwareSerial5writeEh+0x78>
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    *_udr = c;
    26ce:	ee 89       	ldd	r30, Y+22	; 0x16
    26d0:	ff 89       	ldd	r31, Y+23	; 0x17
    26d2:	60 83       	st	Z, r22
    sbi(*_ucsra, TXC0);
    26d4:	e8 89       	ldd	r30, Y+16	; 0x10
    26d6:	f9 89       	ldd	r31, Y+17	; 0x11
    26d8:	80 81       	ld	r24, Z
    26da:	80 64       	ori	r24, 0x40	; 64
    26dc:	80 83       	st	Z, r24
  _tx_buffer_head = i;
	
  sbi(*_ucsrb, UDRIE0);
  
  return 1;
}
    26de:	81 e0       	ldi	r24, 0x01	; 1
    26e0:	90 e0       	ldi	r25, 0x00	; 0
    26e2:	df 91       	pop	r29
    26e4:	cf 91       	pop	r28
    26e6:	1f 91       	pop	r17
    26e8:	0f 91       	pop	r16
    26ea:	ff 90       	pop	r15
    26ec:	ef 90       	pop	r14
    26ee:	08 95       	ret

000026f0 <_ZN14HardwareSerial5flushEv>:
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
    26f0:	cf 93       	push	r28
    26f2:	df 93       	push	r29
    26f4:	ec 01       	movw	r28, r24
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
    26f6:	88 8d       	ldd	r24, Y+24	; 0x18
    26f8:	88 23       	and	r24, r24
    26fa:	c1 f0       	breq	.+48     	; 0x272c <_ZN14HardwareSerial5flushEv+0x3c>
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
    26fc:	ea 89       	ldd	r30, Y+18	; 0x12
    26fe:	fb 89       	ldd	r31, Y+19	; 0x13
    2700:	80 81       	ld	r24, Z
    2702:	85 fd       	sbrc	r24, 5
    2704:	05 c0       	rjmp	.+10     	; 0x2710 <_ZN14HardwareSerial5flushEv+0x20>
    2706:	a8 89       	ldd	r26, Y+16	; 0x10
    2708:	b9 89       	ldd	r27, Y+17	; 0x11
    270a:	8c 91       	ld	r24, X
    270c:	86 fd       	sbrc	r24, 6
    270e:	0e c0       	rjmp	.+28     	; 0x272c <_ZN14HardwareSerial5flushEv+0x3c>
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
    2710:	0f b6       	in	r0, 0x3f	; 63
    2712:	07 fc       	sbrc	r0, 7
    2714:	f5 cf       	rjmp	.-22     	; 0x2700 <_ZN14HardwareSerial5flushEv+0x10>
    2716:	80 81       	ld	r24, Z
    2718:	85 ff       	sbrs	r24, 5
    271a:	f2 cf       	rjmp	.-28     	; 0x2700 <_ZN14HardwareSerial5flushEv+0x10>
	// Interrupts are globally disabled, but the DR empty
	// interrupt should be enabled, so poll the DR empty flag to
	// prevent deadlock
	if (bit_is_set(*_ucsra, UDRE0))
    271c:	a8 89       	ldd	r26, Y+16	; 0x10
    271e:	b9 89       	ldd	r27, Y+17	; 0x11
    2720:	8c 91       	ld	r24, X
    2722:	85 ff       	sbrs	r24, 5
    2724:	ed cf       	rjmp	.-38     	; 0x2700 <_ZN14HardwareSerial5flushEv+0x10>
	  _tx_udr_empty_irq();
    2726:	ce 01       	movw	r24, r28
    2728:	7c df       	rcall	.-264    	; 0x2622 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    272a:	e8 cf       	rjmp	.-48     	; 0x26fc <_ZN14HardwareSerial5flushEv+0xc>
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
    272c:	df 91       	pop	r29
    272e:	cf 91       	pop	r28
    2730:	08 95       	ret

00002732 <__vector_20>:
#elif defined(USART_RXC_vect)
  ISR(USART_RXC_vect) // ATmega8
#else
  #error "Don't know what the Data Received vector is called for Serial"
#endif
  {
    2732:	1f 92       	push	r1
    2734:	0f 92       	push	r0
    2736:	0f b6       	in	r0, 0x3f	; 63
    2738:	0f 92       	push	r0
    273a:	11 24       	eor	r1, r1
    273c:	0b b6       	in	r0, 0x3b	; 59
    273e:	0f 92       	push	r0
    2740:	2f 93       	push	r18
    2742:	8f 93       	push	r24
    2744:	9f 93       	push	r25
    2746:	ef 93       	push	r30
    2748:	ff 93       	push	r31

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
    274a:	e0 91 6e 03 	lds	r30, 0x036E	; 0x80036e <Serial+0x10>
    274e:	f0 91 6f 03 	lds	r31, 0x036F	; 0x80036f <Serial+0x11>
    2752:	80 81       	ld	r24, Z
    2754:	e0 91 74 03 	lds	r30, 0x0374	; 0x800374 <Serial+0x16>
    2758:	f0 91 75 03 	lds	r31, 0x0375	; 0x800375 <Serial+0x17>
    275c:	82 fd       	sbrc	r24, 2
    275e:	12 c0       	rjmp	.+36     	; 0x2784 <__vector_20+0x52>
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
    2760:	90 81       	ld	r25, Z
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
    2762:	80 91 77 03 	lds	r24, 0x0377	; 0x800377 <Serial+0x19>
    2766:	8f 5f       	subi	r24, 0xFF	; 255
    2768:	8f 73       	andi	r24, 0x3F	; 63

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
    276a:	20 91 78 03 	lds	r18, 0x0378	; 0x800378 <Serial+0x1a>
    276e:	82 17       	cp	r24, r18
    2770:	51 f0       	breq	.+20     	; 0x2786 <__vector_20+0x54>
      _rx_buffer[_rx_buffer_head] = c;
    2772:	e0 91 77 03 	lds	r30, 0x0377	; 0x800377 <Serial+0x19>
    2776:	f0 e0       	ldi	r31, 0x00	; 0
    2778:	e2 5a       	subi	r30, 0xA2	; 162
    277a:	fc 4f       	sbci	r31, 0xFC	; 252
    277c:	95 8f       	std	Z+29, r25	; 0x1d
      _rx_buffer_head = i;
    277e:	80 93 77 03 	sts	0x0377, r24	; 0x800377 <Serial+0x19>
    2782:	01 c0       	rjmp	.+2      	; 0x2786 <__vector_20+0x54>
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
    2784:	80 81       	ld	r24, Z
    Serial._rx_complete_irq();
  }
    2786:	ff 91       	pop	r31
    2788:	ef 91       	pop	r30
    278a:	9f 91       	pop	r25
    278c:	8f 91       	pop	r24
    278e:	2f 91       	pop	r18
    2790:	0f 90       	pop	r0
    2792:	0b be       	out	0x3b, r0	; 59
    2794:	0f 90       	pop	r0
    2796:	0f be       	out	0x3f, r0	; 63
    2798:	0f 90       	pop	r0
    279a:	1f 90       	pop	r1
    279c:	18 95       	reti

0000279e <__vector_21>:
#elif defined(USART_UDRE_vect)
ISR(USART_UDRE_vect)
#else
  #error "Don't know what the Data Register Empty vector is called for Serial"
#endif
{
    279e:	1f 92       	push	r1
    27a0:	0f 92       	push	r0
    27a2:	0f b6       	in	r0, 0x3f	; 63
    27a4:	0f 92       	push	r0
    27a6:	11 24       	eor	r1, r1
    27a8:	0b b6       	in	r0, 0x3b	; 59
    27aa:	0f 92       	push	r0
    27ac:	2f 93       	push	r18
    27ae:	3f 93       	push	r19
    27b0:	4f 93       	push	r20
    27b2:	5f 93       	push	r21
    27b4:	6f 93       	push	r22
    27b6:	7f 93       	push	r23
    27b8:	8f 93       	push	r24
    27ba:	9f 93       	push	r25
    27bc:	af 93       	push	r26
    27be:	bf 93       	push	r27
    27c0:	ef 93       	push	r30
    27c2:	ff 93       	push	r31
  Serial._tx_udr_empty_irq();
    27c4:	8e e5       	ldi	r24, 0x5E	; 94
    27c6:	93 e0       	ldi	r25, 0x03	; 3
    27c8:	2c df       	rcall	.-424    	; 0x2622 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
}
    27ca:	ff 91       	pop	r31
    27cc:	ef 91       	pop	r30
    27ce:	bf 91       	pop	r27
    27d0:	af 91       	pop	r26
    27d2:	9f 91       	pop	r25
    27d4:	8f 91       	pop	r24
    27d6:	7f 91       	pop	r23
    27d8:	6f 91       	pop	r22
    27da:	5f 91       	pop	r21
    27dc:	4f 91       	pop	r20
    27de:	3f 91       	pop	r19
    27e0:	2f 91       	pop	r18
    27e2:	0f 90       	pop	r0
    27e4:	0b be       	out	0x3b, r0	; 59
    27e6:	0f 90       	pop	r0
    27e8:	0f be       	out	0x3f, r0	; 63
    27ea:	0f 90       	pop	r0
    27ec:	1f 90       	pop	r1
    27ee:	18 95       	reti

000027f0 <_Z17Serial0_availablev>:
#endif

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
    27f0:	8e e5       	ldi	r24, 0x5E	; 94
    27f2:	93 e0       	ldi	r25, 0x03	; 3
    27f4:	ca de       	rcall	.-620    	; 0x258a <_ZN14HardwareSerial9availableEv>
    27f6:	21 e0       	ldi	r18, 0x01	; 1
    27f8:	89 2b       	or	r24, r25
    27fa:	09 f4       	brne	.+2      	; 0x27fe <_Z17Serial0_availablev+0xe>
    27fc:	20 e0       	ldi	r18, 0x00	; 0
}
    27fe:	82 2f       	mov	r24, r18
    2800:	08 95       	ret

00002802 <_GLOBAL__sub_I___vector_20>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
    2802:	ee e5       	ldi	r30, 0x5E	; 94
    2804:	f3 e0       	ldi	r31, 0x03	; 3
    2806:	13 82       	std	Z+3, r1	; 0x03
    2808:	12 82       	std	Z+2, r1	; 0x02
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
    280a:	88 ee       	ldi	r24, 0xE8	; 232
    280c:	93 e0       	ldi	r25, 0x03	; 3
    280e:	a0 e0       	ldi	r26, 0x00	; 0
    2810:	b0 e0       	ldi	r27, 0x00	; 0
    2812:	84 83       	std	Z+4, r24	; 0x04
    2814:	95 83       	std	Z+5, r25	; 0x05
    2816:	a6 83       	std	Z+6, r26	; 0x06
    2818:	b7 83       	std	Z+7, r27	; 0x07
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
    281a:	8f e2       	ldi	r24, 0x2F	; 47
    281c:	92 e0       	ldi	r25, 0x02	; 2
    281e:	91 83       	std	Z+1, r25	; 0x01
    2820:	80 83       	st	Z, r24
    2822:	85 ec       	ldi	r24, 0xC5	; 197
    2824:	90 e0       	ldi	r25, 0x00	; 0
    2826:	95 87       	std	Z+13, r25	; 0x0d
    2828:	84 87       	std	Z+12, r24	; 0x0c
    282a:	84 ec       	ldi	r24, 0xC4	; 196
    282c:	90 e0       	ldi	r25, 0x00	; 0
    282e:	97 87       	std	Z+15, r25	; 0x0f
    2830:	86 87       	std	Z+14, r24	; 0x0e
    2832:	80 ec       	ldi	r24, 0xC0	; 192
    2834:	90 e0       	ldi	r25, 0x00	; 0
    2836:	91 8b       	std	Z+17, r25	; 0x11
    2838:	80 8b       	std	Z+16, r24	; 0x10
    283a:	81 ec       	ldi	r24, 0xC1	; 193
    283c:	90 e0       	ldi	r25, 0x00	; 0
    283e:	93 8b       	std	Z+19, r25	; 0x13
    2840:	82 8b       	std	Z+18, r24	; 0x12
    2842:	82 ec       	ldi	r24, 0xC2	; 194
    2844:	90 e0       	ldi	r25, 0x00	; 0
    2846:	95 8b       	std	Z+21, r25	; 0x15
    2848:	84 8b       	std	Z+20, r24	; 0x14
    284a:	86 ec       	ldi	r24, 0xC6	; 198
    284c:	90 e0       	ldi	r25, 0x00	; 0
    284e:	97 8b       	std	Z+23, r25	; 0x17
    2850:	86 8b       	std	Z+22, r24	; 0x16
    2852:	11 8e       	std	Z+25, r1	; 0x19
    2854:	12 8e       	std	Z+26, r1	; 0x1a
    2856:	13 8e       	std	Z+27, r1	; 0x1b
    2858:	14 8e       	std	Z+28, r1	; 0x1c
    285a:	08 95       	ret

0000285c <initVariant>:
    285c:	08 95       	ret

0000285e <main>:
void setupUSB() __attribute__((weak));
void setupUSB() { }

int main(void)
{
	init();
    285e:	30 d1       	rcall	.+608    	; 0x2ac0 <init>

	initVariant();
    2860:	fd df       	rcall	.-6      	; 0x285c <initVariant>
    2862:	0e 94 9c 04 	call	0x938	; 0x938 <setup>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
    2866:	c3 ef       	ldi	r28, 0xF3	; 243
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
    2868:	d2 e1       	ldi	r29, 0x12	; 18
    286a:	0e 94 19 05 	call	0xa32	; 0xa32 <loop>
#endif
	
	setup();
    
	for (;;) {
		loop();
    286e:	20 97       	sbiw	r28, 0x00	; 0
		if (serialEventRun) serialEventRun();
    2870:	e1 f3       	breq	.-8      	; 0x286a <main+0xc>
    2872:	b9 de       	rcall	.-654    	; 0x25e6 <_Z14serialEventRunv>
    2874:	fa cf       	rjmp	.-12     	; 0x286a <main+0xc>

00002876 <_Znaj>:
void *operator new(size_t size) {
  return malloc(size);
}

void *operator new[](size_t size) {
  return malloc(size);
    2876:	d7 c3       	rjmp	.+1966   	; 0x3026 <malloc>

00002878 <_ZdlPv>:
    2878:	6e c4       	rjmp	.+2268   	; 0x3156 <free>

0000287a <_ZN5Print5writeEPKhj>:
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
    }
    virtual size_t write(const uint8_t *buffer, size_t size);
    size_t write(const char *buffer, size_t size) {
      return write((const uint8_t *)buffer, size);
    287a:	cf 92       	push	r12
    287c:	df 92       	push	r13
    287e:	ef 92       	push	r14
    2880:	ff 92       	push	r15
    2882:	0f 93       	push	r16
    2884:	1f 93       	push	r17
    2886:	cf 93       	push	r28
    2888:	df 93       	push	r29
    288a:	6c 01       	movw	r12, r24
    288c:	7a 01       	movw	r14, r20
    288e:	8b 01       	movw	r16, r22
    2890:	c0 e0       	ldi	r28, 0x00	; 0
    2892:	d0 e0       	ldi	r29, 0x00	; 0
    2894:	ce 15       	cp	r28, r14
    2896:	df 05       	cpc	r29, r15
    2898:	81 f0       	breq	.+32     	; 0x28ba <_ZN5Print5writeEPKhj+0x40>
    289a:	d8 01       	movw	r26, r16
    289c:	6d 91       	ld	r22, X+
    289e:	8d 01       	movw	r16, r26
    28a0:	d6 01       	movw	r26, r12
    28a2:	ed 91       	ld	r30, X+
    28a4:	fc 91       	ld	r31, X
    28a6:	01 90       	ld	r0, Z+
    28a8:	f0 81       	ld	r31, Z
    28aa:	e0 2d       	mov	r30, r0
    28ac:	c6 01       	movw	r24, r12
    28ae:	09 95       	icall
    28b0:	89 2b       	or	r24, r25
    28b2:	11 f0       	breq	.+4      	; 0x28b8 <_ZN5Print5writeEPKhj+0x3e>
    28b4:	21 96       	adiw	r28, 0x01	; 1
    28b6:	ee cf       	rjmp	.-36     	; 0x2894 <_ZN5Print5writeEPKhj+0x1a>
    28b8:	7e 01       	movw	r14, r28
    28ba:	c7 01       	movw	r24, r14
    28bc:	df 91       	pop	r29
    28be:	cf 91       	pop	r28
    28c0:	1f 91       	pop	r17
    28c2:	0f 91       	pop	r16
    28c4:	ff 90       	pop	r15
    28c6:	ef 90       	pop	r14
    28c8:	df 90       	pop	r13
    28ca:	cf 90       	pop	r12
    28cc:	08 95       	ret

000028ce <_ZN5Print5writeEPKc>:
    28ce:	61 15       	cp	r22, r1
    28d0:	71 05       	cpc	r23, r1
    28d2:	79 f0       	breq	.+30     	; 0x28f2 <_ZN5Print5writeEPKc+0x24>
    28d4:	fb 01       	movw	r30, r22
    28d6:	01 90       	ld	r0, Z+
    28d8:	00 20       	and	r0, r0
    28da:	e9 f7       	brne	.-6      	; 0x28d6 <_ZN5Print5writeEPKc+0x8>
    28dc:	31 97       	sbiw	r30, 0x01	; 1
    28de:	af 01       	movw	r20, r30
    28e0:	46 1b       	sub	r20, r22
    28e2:	57 0b       	sbc	r21, r23
    28e4:	dc 01       	movw	r26, r24
    28e6:	ed 91       	ld	r30, X+
    28e8:	fc 91       	ld	r31, X
    28ea:	02 80       	ldd	r0, Z+2	; 0x02
    28ec:	f3 81       	ldd	r31, Z+3	; 0x03
    28ee:	e0 2d       	mov	r30, r0
    28f0:	09 94       	ijmp
    28f2:	80 e0       	ldi	r24, 0x00	; 0
    28f4:	90 e0       	ldi	r25, 0x00	; 0
    28f6:	08 95       	ret

000028f8 <_ZN5Print5printEPK19__FlashStringHelper>:
    28f8:	ef 92       	push	r14
    28fa:	ff 92       	push	r15
    28fc:	0f 93       	push	r16
    28fe:	1f 93       	push	r17
    2900:	cf 93       	push	r28
    2902:	df 93       	push	r29
    2904:	8c 01       	movw	r16, r24
    2906:	7b 01       	movw	r14, r22
    2908:	c0 e0       	ldi	r28, 0x00	; 0
    290a:	d0 e0       	ldi	r29, 0x00	; 0
    290c:	f7 01       	movw	r30, r14
    290e:	ec 0f       	add	r30, r28
    2910:	fd 1f       	adc	r31, r29
    2912:	64 91       	lpm	r22, Z
    2914:	66 23       	and	r22, r22
    2916:	61 f0       	breq	.+24     	; 0x2930 <_ZN5Print5printEPK19__FlashStringHelper+0x38>
    2918:	d8 01       	movw	r26, r16
    291a:	ed 91       	ld	r30, X+
    291c:	fc 91       	ld	r31, X
    291e:	01 90       	ld	r0, Z+
    2920:	f0 81       	ld	r31, Z
    2922:	e0 2d       	mov	r30, r0
    2924:	c8 01       	movw	r24, r16
    2926:	09 95       	icall
    2928:	89 2b       	or	r24, r25
    292a:	11 f0       	breq	.+4      	; 0x2930 <_ZN5Print5printEPK19__FlashStringHelper+0x38>
    292c:	21 96       	adiw	r28, 0x01	; 1
    292e:	ee cf       	rjmp	.-36     	; 0x290c <_ZN5Print5printEPK19__FlashStringHelper+0x14>
    2930:	ce 01       	movw	r24, r28
    2932:	df 91       	pop	r29
    2934:	cf 91       	pop	r28
    2936:	1f 91       	pop	r17
    2938:	0f 91       	pop	r16
    293a:	ff 90       	pop	r15
    293c:	ef 90       	pop	r14
    293e:	08 95       	ret

00002940 <_ZN5Print5printEPKc>:
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
  return write(str);
    2940:	c6 cf       	rjmp	.-116    	; 0x28ce <_ZN5Print5writeEPKc>

00002942 <__vector_18>:
#if defined(__AVR_ATtiny24__) || defined(__AVR_ATtiny44__) || defined(__AVR_ATtiny84__)
ISR(TIM0_OVF_vect)
#else
ISR(TIMER0_OVF_vect)
#endif
{
    2942:	1f 92       	push	r1
    2944:	0f 92       	push	r0
    2946:	0f b6       	in	r0, 0x3f	; 63
    2948:	0f 92       	push	r0
    294a:	11 24       	eor	r1, r1
    294c:	2f 93       	push	r18
    294e:	3f 93       	push	r19
    2950:	8f 93       	push	r24
    2952:	9f 93       	push	r25
    2954:	af 93       	push	r26
    2956:	bf 93       	push	r27
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
    2958:	80 91 fc 03 	lds	r24, 0x03FC	; 0x8003fc <timer0_millis>
    295c:	90 91 fd 03 	lds	r25, 0x03FD	; 0x8003fd <timer0_millis+0x1>
    2960:	a0 91 fe 03 	lds	r26, 0x03FE	; 0x8003fe <timer0_millis+0x2>
    2964:	b0 91 ff 03 	lds	r27, 0x03FF	; 0x8003ff <timer0_millis+0x3>
	unsigned char f = timer0_fract;
    2968:	30 91 fb 03 	lds	r19, 0x03FB	; 0x8003fb <timer0_fract>

	m += MILLIS_INC;
	f += FRACT_INC;
    296c:	23 e0       	ldi	r18, 0x03	; 3
    296e:	23 0f       	add	r18, r19
	if (f >= FRACT_MAX) {
    2970:	2d 37       	cpi	r18, 0x7D	; 125
    2972:	20 f4       	brcc	.+8      	; 0x297c <__vector_18+0x3a>
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
	unsigned char f = timer0_fract;

	m += MILLIS_INC;
    2974:	01 96       	adiw	r24, 0x01	; 1
    2976:	a1 1d       	adc	r26, r1
    2978:	b1 1d       	adc	r27, r1
    297a:	05 c0       	rjmp	.+10     	; 0x2986 <__vector_18+0x44>
	f += FRACT_INC;
	if (f >= FRACT_MAX) {
		f -= FRACT_MAX;
    297c:	26 e8       	ldi	r18, 0x86	; 134
    297e:	23 0f       	add	r18, r19
		m += 1;
    2980:	02 96       	adiw	r24, 0x02	; 2
    2982:	a1 1d       	adc	r26, r1
    2984:	b1 1d       	adc	r27, r1
	}

	timer0_fract = f;
    2986:	20 93 fb 03 	sts	0x03FB, r18	; 0x8003fb <timer0_fract>
	timer0_millis = m;
    298a:	80 93 fc 03 	sts	0x03FC, r24	; 0x8003fc <timer0_millis>
    298e:	90 93 fd 03 	sts	0x03FD, r25	; 0x8003fd <timer0_millis+0x1>
    2992:	a0 93 fe 03 	sts	0x03FE, r26	; 0x8003fe <timer0_millis+0x2>
    2996:	b0 93 ff 03 	sts	0x03FF, r27	; 0x8003ff <timer0_millis+0x3>
	timer0_overflow_count++;
    299a:	80 91 00 04 	lds	r24, 0x0400	; 0x800400 <timer0_overflow_count>
    299e:	90 91 01 04 	lds	r25, 0x0401	; 0x800401 <timer0_overflow_count+0x1>
    29a2:	a0 91 02 04 	lds	r26, 0x0402	; 0x800402 <timer0_overflow_count+0x2>
    29a6:	b0 91 03 04 	lds	r27, 0x0403	; 0x800403 <timer0_overflow_count+0x3>
    29aa:	01 96       	adiw	r24, 0x01	; 1
    29ac:	a1 1d       	adc	r26, r1
    29ae:	b1 1d       	adc	r27, r1
    29b0:	80 93 00 04 	sts	0x0400, r24	; 0x800400 <timer0_overflow_count>
    29b4:	90 93 01 04 	sts	0x0401, r25	; 0x800401 <timer0_overflow_count+0x1>
    29b8:	a0 93 02 04 	sts	0x0402, r26	; 0x800402 <timer0_overflow_count+0x2>
    29bc:	b0 93 03 04 	sts	0x0403, r27	; 0x800403 <timer0_overflow_count+0x3>
}
    29c0:	bf 91       	pop	r27
    29c2:	af 91       	pop	r26
    29c4:	9f 91       	pop	r25
    29c6:	8f 91       	pop	r24
    29c8:	3f 91       	pop	r19
    29ca:	2f 91       	pop	r18
    29cc:	0f 90       	pop	r0
    29ce:	0f be       	out	0x3f, r0	; 63
    29d0:	0f 90       	pop	r0
    29d2:	1f 90       	pop	r1
    29d4:	18 95       	reti

000029d6 <millis>:

unsigned long millis()
{
	unsigned long m;
	uint8_t oldSREG = SREG;
    29d6:	2f b7       	in	r18, 0x3f	; 63

	// disable interrupts while we read timer0_millis or we might get an
	// inconsistent value (e.g. in the middle of a write to timer0_millis)
	cli();
    29d8:	f8 94       	cli
	m = timer0_millis;
    29da:	60 91 fc 03 	lds	r22, 0x03FC	; 0x8003fc <timer0_millis>
    29de:	70 91 fd 03 	lds	r23, 0x03FD	; 0x8003fd <timer0_millis+0x1>
    29e2:	80 91 fe 03 	lds	r24, 0x03FE	; 0x8003fe <timer0_millis+0x2>
    29e6:	90 91 ff 03 	lds	r25, 0x03FF	; 0x8003ff <timer0_millis+0x3>
	SREG = oldSREG;
    29ea:	2f bf       	out	0x3f, r18	; 63

	return m;
}
    29ec:	08 95       	ret

000029ee <micros>:

unsigned long micros() {
	unsigned long m;
	uint8_t oldSREG = SREG, t;
    29ee:	3f b7       	in	r19, 0x3f	; 63
	
	cli();
    29f0:	f8 94       	cli
	m = timer0_overflow_count;
    29f2:	80 91 00 04 	lds	r24, 0x0400	; 0x800400 <timer0_overflow_count>
    29f6:	90 91 01 04 	lds	r25, 0x0401	; 0x800401 <timer0_overflow_count+0x1>
    29fa:	a0 91 02 04 	lds	r26, 0x0402	; 0x800402 <timer0_overflow_count+0x2>
    29fe:	b0 91 03 04 	lds	r27, 0x0403	; 0x800403 <timer0_overflow_count+0x3>
#if defined(TCNT0)
	t = TCNT0;
    2a02:	26 b5       	in	r18, 0x26	; 38
#else
	#error TIMER 0 not defined
#endif

#ifdef TIFR0
	if ((TIFR0 & _BV(TOV0)) && (t < 255))
    2a04:	a8 9b       	sbis	0x15, 0	; 21
    2a06:	05 c0       	rjmp	.+10     	; 0x2a12 <micros+0x24>
    2a08:	2f 3f       	cpi	r18, 0xFF	; 255
    2a0a:	19 f0       	breq	.+6      	; 0x2a12 <micros+0x24>
		m++;
    2a0c:	01 96       	adiw	r24, 0x01	; 1
    2a0e:	a1 1d       	adc	r26, r1
    2a10:	b1 1d       	adc	r27, r1
#else
	if ((TIFR & _BV(TOV0)) && (t < 255))
		m++;
#endif

	SREG = oldSREG;
    2a12:	3f bf       	out	0x3f, r19	; 63
	
	return ((m << 8) + t) * (64 / clockCyclesPerMicrosecond());
    2a14:	ba 2f       	mov	r27, r26
    2a16:	a9 2f       	mov	r26, r25
    2a18:	98 2f       	mov	r25, r24
    2a1a:	88 27       	eor	r24, r24
    2a1c:	82 0f       	add	r24, r18
    2a1e:	91 1d       	adc	r25, r1
    2a20:	a1 1d       	adc	r26, r1
    2a22:	b1 1d       	adc	r27, r1
    2a24:	bc 01       	movw	r22, r24
    2a26:	cd 01       	movw	r24, r26
    2a28:	42 e0       	ldi	r20, 0x02	; 2
    2a2a:	66 0f       	add	r22, r22
    2a2c:	77 1f       	adc	r23, r23
    2a2e:	88 1f       	adc	r24, r24
    2a30:	99 1f       	adc	r25, r25
    2a32:	4a 95       	dec	r20
    2a34:	d1 f7       	brne	.-12     	; 0x2a2a <micros+0x3c>
}
    2a36:	08 95       	ret

00002a38 <delay>:

void delay(unsigned long ms)
{
    2a38:	8f 92       	push	r8
    2a3a:	9f 92       	push	r9
    2a3c:	af 92       	push	r10
    2a3e:	bf 92       	push	r11
    2a40:	cf 92       	push	r12
    2a42:	df 92       	push	r13
    2a44:	ef 92       	push	r14
    2a46:	ff 92       	push	r15
    2a48:	6b 01       	movw	r12, r22
    2a4a:	7c 01       	movw	r14, r24
	uint32_t start = micros();
    2a4c:	d0 df       	rcall	.-96     	; 0x29ee <micros>
    2a4e:	4b 01       	movw	r8, r22
    2a50:	5c 01       	movw	r10, r24

	while (ms > 0) {
    2a52:	c1 14       	cp	r12, r1
    2a54:	d1 04       	cpc	r13, r1
    2a56:	e1 04       	cpc	r14, r1
    2a58:	f1 04       	cpc	r15, r1
		yield();
    2a5a:	f1 f0       	breq	.+60     	; 0x2a98 <delay+0x60>
		while ( ms > 0 && (micros() - start) >= 1000) {
    2a5c:	41 d2       	rcall	.+1154   	; 0x2ee0 <yield>
    2a5e:	c7 df       	rcall	.-114    	; 0x29ee <micros>
    2a60:	dc 01       	movw	r26, r24
    2a62:	cb 01       	movw	r24, r22
    2a64:	88 19       	sub	r24, r8
    2a66:	99 09       	sbc	r25, r9
    2a68:	aa 09       	sbc	r26, r10
    2a6a:	bb 09       	sbc	r27, r11
    2a6c:	88 3e       	cpi	r24, 0xE8	; 232
    2a6e:	93 40       	sbci	r25, 0x03	; 3
    2a70:	a1 05       	cpc	r26, r1
    2a72:	b1 05       	cpc	r27, r1
    2a74:	70 f3       	brcs	.-36     	; 0x2a52 <delay+0x1a>
			ms--;
    2a76:	21 e0       	ldi	r18, 0x01	; 1
    2a78:	c2 1a       	sub	r12, r18
    2a7a:	d1 08       	sbc	r13, r1
    2a7c:	e1 08       	sbc	r14, r1
    2a7e:	f1 08       	sbc	r15, r1
			start += 1000;
    2a80:	88 ee       	ldi	r24, 0xE8	; 232
    2a82:	88 0e       	add	r8, r24
    2a84:	83 e0       	ldi	r24, 0x03	; 3
    2a86:	98 1e       	adc	r9, r24
    2a88:	a1 1c       	adc	r10, r1
    2a8a:	b1 1c       	adc	r11, r1
{
	uint32_t start = micros();

	while (ms > 0) {
		yield();
		while ( ms > 0 && (micros() - start) >= 1000) {
    2a8c:	c1 14       	cp	r12, r1
    2a8e:	d1 04       	cpc	r13, r1
    2a90:	e1 04       	cpc	r14, r1
    2a92:	f1 04       	cpc	r15, r1
    2a94:	21 f7       	brne	.-56     	; 0x2a5e <delay+0x26>
    2a96:	dd cf       	rjmp	.-70     	; 0x2a52 <delay+0x1a>
			ms--;
			start += 1000;
		}
	}
}
    2a98:	ff 90       	pop	r15
    2a9a:	ef 90       	pop	r14
    2a9c:	df 90       	pop	r13
    2a9e:	cf 90       	pop	r12
    2aa0:	bf 90       	pop	r11
    2aa2:	af 90       	pop	r10
    2aa4:	9f 90       	pop	r9
    2aa6:	8f 90       	pop	r8
    2aa8:	08 95       	ret

00002aaa <delayMicroseconds>:
#elif F_CPU >= 16000000L
	// for the 16 MHz clock on most Arduino boards

	// for a one-microsecond delay, simply return.  the overhead
	// of the function call takes 14 (16) cycles, which is 1us
	if (us <= 1) return; //  = 3 cycles, (4 when true)
    2aaa:	82 30       	cpi	r24, 0x02	; 2
    2aac:	91 05       	cpc	r25, r1
    2aae:	38 f0       	brcs	.+14     	; 0x2abe <delayMicroseconds+0x14>

	// the following loop takes 1/4 of a microsecond (4 cycles)
	// per iteration, so execute it four times for each microsecond of
	// delay requested.
	us <<= 2; // x4 us, = 4 cycles
    2ab0:	88 0f       	add	r24, r24
    2ab2:	99 1f       	adc	r25, r25
    2ab4:	88 0f       	add	r24, r24
    2ab6:	99 1f       	adc	r25, r25

	// account for the time taken in the preceeding commands.
	// we just burned 19 (21) cycles above, remove 5, (5*4=20)
	// us is at least 8 so we can substract 5
	us -= 5; // = 2 cycles,
    2ab8:	05 97       	sbiw	r24, 0x05	; 5
	

#endif

	// busy wait
	__asm__ __volatile__ (
    2aba:	01 97       	sbiw	r24, 0x01	; 1
    2abc:	f1 f7       	brne	.-4      	; 0x2aba <delayMicroseconds+0x10>
    2abe:	08 95       	ret

00002ac0 <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
    2ac0:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
    2ac2:	84 b5       	in	r24, 0x24	; 36
    2ac4:	82 60       	ori	r24, 0x02	; 2
    2ac6:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
    2ac8:	84 b5       	in	r24, 0x24	; 36
    2aca:	81 60       	ori	r24, 0x01	; 1
    2acc:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
    2ace:	85 b5       	in	r24, 0x25	; 37
    2ad0:	82 60       	ori	r24, 0x02	; 2
    2ad2:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
    2ad4:	85 b5       	in	r24, 0x25	; 37
    2ad6:	81 60       	ori	r24, 0x01	; 1
    2ad8:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
    2ada:	ee e6       	ldi	r30, 0x6E	; 110
    2adc:	f0 e0       	ldi	r31, 0x00	; 0
    2ade:	80 81       	ld	r24, Z
    2ae0:	81 60       	ori	r24, 0x01	; 1
    2ae2:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
    2ae4:	e1 e8       	ldi	r30, 0x81	; 129
    2ae6:	f0 e0       	ldi	r31, 0x00	; 0
    2ae8:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
    2aea:	80 81       	ld	r24, Z
    2aec:	82 60       	ori	r24, 0x02	; 2
    2aee:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
    2af0:	80 81       	ld	r24, Z
    2af2:	81 60       	ori	r24, 0x01	; 1
    2af4:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
    2af6:	e0 e8       	ldi	r30, 0x80	; 128
    2af8:	f0 e0       	ldi	r31, 0x00	; 0
    2afa:	80 81       	ld	r24, Z
    2afc:	81 60       	ori	r24, 0x01	; 1
    2afe:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
    2b00:	e1 eb       	ldi	r30, 0xB1	; 177
    2b02:	f0 e0       	ldi	r31, 0x00	; 0
    2b04:	80 81       	ld	r24, Z
    2b06:	84 60       	ori	r24, 0x04	; 4
    2b08:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
    2b0a:	e0 eb       	ldi	r30, 0xB0	; 176
    2b0c:	f0 e0       	ldi	r31, 0x00	; 0
    2b0e:	80 81       	ld	r24, Z
    2b10:	81 60       	ori	r24, 0x01	; 1
    2b12:	80 83       	st	Z, r24
//#else
	// Timer 2 not finished (may not be present on this CPU)
#endif

#if defined(TCCR3B) && defined(CS31) && defined(WGM30)
	sbi(TCCR3B, CS31);		// set timer 3 prescale factor to 64
    2b14:	e1 e9       	ldi	r30, 0x91	; 145
    2b16:	f0 e0       	ldi	r31, 0x00	; 0
    2b18:	80 81       	ld	r24, Z
    2b1a:	82 60       	ori	r24, 0x02	; 2
    2b1c:	80 83       	st	Z, r24
	sbi(TCCR3B, CS30);
    2b1e:	80 81       	ld	r24, Z
    2b20:	81 60       	ori	r24, 0x01	; 1
    2b22:	80 83       	st	Z, r24
	sbi(TCCR3A, WGM30);		// put timer 3 in 8-bit phase correct pwm mode
    2b24:	e0 e9       	ldi	r30, 0x90	; 144
    2b26:	f0 e0       	ldi	r31, 0x00	; 0
    2b28:	80 81       	ld	r24, Z
    2b2a:	81 60       	ori	r24, 0x01	; 1
    2b2c:	80 83       	st	Z, r24
#endif

#if defined(ADCSRA)
	// set a2d prescaler so we are inside the desired 50-200 KHz range.
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
    2b2e:	ea e7       	ldi	r30, 0x7A	; 122
    2b30:	f0 e0       	ldi	r31, 0x00	; 0
    2b32:	80 81       	ld	r24, Z
    2b34:	84 60       	ori	r24, 0x04	; 4
    2b36:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS1);
    2b38:	80 81       	ld	r24, Z
    2b3a:	82 60       	ori	r24, 0x02	; 2
    2b3c:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS0);
    2b3e:	80 81       	ld	r24, Z
    2b40:	81 60       	ori	r24, 0x01	; 1
    2b42:	80 83       	st	Z, r24
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
    2b44:	80 81       	ld	r24, Z
    2b46:	80 68       	ori	r24, 0x80	; 128
    2b48:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
    2b4a:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
    2b4e:	08 95       	ret

00002b50 <analogRead>:

#if defined(analogPinToChannel)
#if defined(__AVR_ATmega32U4__)
	if (pin >= 18) pin -= 18; // allow for channel or pin numbers
#endif
	pin = analogPinToChannel(pin);
    2b50:	88 30       	cpi	r24, 0x08	; 8
    2b52:	38 f0       	brcs	.+14     	; 0x2b62 <analogRead+0x12>
    2b54:	88 31       	cpi	r24, 0x18	; 24
    2b56:	20 f0       	brcs	.+8      	; 0x2b60 <analogRead+0x10>
    2b58:	9f e1       	ldi	r25, 0x1F	; 31
    2b5a:	98 1b       	sub	r25, r24
    2b5c:	89 2f       	mov	r24, r25
    2b5e:	01 c0       	rjmp	.+2      	; 0x2b62 <analogRead+0x12>
    2b60:	8f ef       	ldi	r24, 0xFF	; 255
	// to 0 (the default).
#if defined(ADMUX)
#if defined(__AVR_ATtiny25__) || defined(__AVR_ATtiny45__) || defined(__AVR_ATtiny85__)
	ADMUX = (analog_reference << 4) | (pin & 0x07);
#else
	ADMUX = (analog_reference << 6) | (pin & 0x07);
    2b62:	20 91 a9 01 	lds	r18, 0x01A9	; 0x8001a9 <analog_reference>
    2b66:	90 e4       	ldi	r25, 0x40	; 64
    2b68:	29 9f       	mul	r18, r25
    2b6a:	90 01       	movw	r18, r0
    2b6c:	11 24       	eor	r1, r1
    2b6e:	87 70       	andi	r24, 0x07	; 7
    2b70:	82 2b       	or	r24, r18
    2b72:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
	// without a delay, we seem to read from the wrong channel
	//delay(1);

#if defined(ADCSRA) && defined(ADCL)
	// start the conversion
	sbi(ADCSRA, ADSC);
    2b76:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    2b7a:	80 64       	ori	r24, 0x40	; 64
    2b7c:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>

	// ADSC is cleared when the conversion finishes
	while (bit_is_set(ADCSRA, ADSC));
    2b80:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    2b84:	86 fd       	sbrc	r24, 6
    2b86:	fc cf       	rjmp	.-8      	; 0x2b80 <analogRead+0x30>

	// we have to read ADCL first; doing so locks both ADCL
	// and ADCH until ADCH is read.  reading ADCL second would
	// cause the results of each conversion to be discarded,
	// as ADCL and ADCH would be locked when it completed.
	low  = ADCL;
    2b88:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
	high = ADCH;
    2b8c:	20 91 79 00 	lds	r18, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
	low  = 0;
	high = 0;
#endif

	// combine the two bytes
	return (high << 8) | low;
    2b90:	90 e0       	ldi	r25, 0x00	; 0
}
    2b92:	92 2b       	or	r25, r18
    2b94:	08 95       	ret

00002b96 <analogWrite>:
// Right now, PWM output only works on the pins with
// hardware support.  These are defined in the appropriate
// pins_*.c file.  For the rest of the pins, we default
// to digital output.
void analogWrite(uint8_t pin, int val)
{
    2b96:	1f 93       	push	r17
    2b98:	cf 93       	push	r28
    2b9a:	df 93       	push	r29
    2b9c:	18 2f       	mov	r17, r24
    2b9e:	eb 01       	movw	r28, r22
	// We need to make sure the PWM output is enabled for those pins
	// that support it, as we turn it off when digitally reading or
	// writing with them.  Also, make sure the pin is in output mode
	// for consistenty with Wiring, which doesn't require a pinMode
	// call for the analog output pins.
	pinMode(pin, OUTPUT);
    2ba0:	61 e0       	ldi	r22, 0x01	; 1
    2ba2:	96 d0       	rcall	.+300    	; 0x2cd0 <pinMode>
	if (val == 0)
    2ba4:	20 97       	sbiw	r28, 0x00	; 0
    2ba6:	11 f4       	brne	.+4      	; 0x2bac <analogWrite+0x16>
	{
		digitalWrite(pin, LOW);
    2ba8:	60 e0       	ldi	r22, 0x00	; 0
    2baa:	04 c0       	rjmp	.+8      	; 0x2bb4 <analogWrite+0x1e>
	}
	else if (val == 255)
    2bac:	cf 3f       	cpi	r28, 0xFF	; 255
    2bae:	d1 05       	cpc	r29, r1
    2bb0:	31 f4       	brne	.+12     	; 0x2bbe <analogWrite+0x28>
	{
		digitalWrite(pin, HIGH);
    2bb2:	61 e0       	ldi	r22, 0x01	; 1
    2bb4:	81 2f       	mov	r24, r17
				} else {
					digitalWrite(pin, HIGH);
				}
		}
	}
}
    2bb6:	df 91       	pop	r29
    2bb8:	cf 91       	pop	r28
	{
		digitalWrite(pin, LOW);
	}
	else if (val == 255)
	{
		digitalWrite(pin, HIGH);
    2bba:	1f 91       	pop	r17
    2bbc:	c5 c0       	rjmp	.+394    	; 0x2d48 <digitalWrite>
	}
	else
	{
		switch(digitalPinToTimer(pin))
    2bbe:	e1 2f       	mov	r30, r17
    2bc0:	f0 e0       	ldi	r31, 0x00	; 0
    2bc2:	e7 58       	subi	r30, 0x87	; 135
    2bc4:	fe 4f       	sbci	r31, 0xFE	; 254
    2bc6:	e4 91       	lpm	r30, Z
    2bc8:	8e 2f       	mov	r24, r30
    2bca:	90 e0       	ldi	r25, 0x00	; 0
    2bcc:	fc 01       	movw	r30, r24
    2bce:	31 97       	sbiw	r30, 0x01	; 1
    2bd0:	ea 30       	cpi	r30, 0x0A	; 10
    2bd2:	f1 05       	cpc	r31, r1
    2bd4:	08 f0       	brcs	.+2      	; 0x2bd8 <analogWrite+0x42>
    2bd6:	45 c0       	rjmp	.+138    	; 0x2c62 <analogWrite+0xcc>
    2bd8:	ed 56       	subi	r30, 0x6D	; 109
    2bda:	ff 4f       	sbci	r31, 0xFF	; 255
    2bdc:	02 c2       	rjmp	.+1028   	; 0x2fe2 <__tablejump2__>
			#endif

			#if defined(TCCR0A) && defined(COM0A1)
			case TIMER0A:
				// connect pwm to pin on timer 0, channel A
				sbi(TCCR0A, COM0A1);
    2bde:	84 b5       	in	r24, 0x24	; 36
    2be0:	80 68       	ori	r24, 0x80	; 128
    2be2:	84 bd       	out	0x24, r24	; 36
				OCR0A = val; // set pwm duty
    2be4:	c7 bd       	out	0x27, r28	; 39
				break;
    2be6:	42 c0       	rjmp	.+132    	; 0x2c6c <analogWrite+0xd6>
			#endif

			#if defined(TCCR0A) && defined(COM0B1)
			case TIMER0B:
				// connect pwm to pin on timer 0, channel B
				sbi(TCCR0A, COM0B1);
    2be8:	84 b5       	in	r24, 0x24	; 36
    2bea:	80 62       	ori	r24, 0x20	; 32
    2bec:	84 bd       	out	0x24, r24	; 36
				OCR0B = val; // set pwm duty
    2bee:	c8 bd       	out	0x28, r28	; 40
				break;
    2bf0:	3d c0       	rjmp	.+122    	; 0x2c6c <analogWrite+0xd6>
			#endif

			#if defined(TCCR1A) && defined(COM1A1)
			case TIMER1A:
				// connect pwm to pin on timer 1, channel A
				sbi(TCCR1A, COM1A1);
    2bf2:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    2bf6:	80 68       	ori	r24, 0x80	; 128
    2bf8:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
				OCR1A = val; // set pwm duty
    2bfc:	d0 93 89 00 	sts	0x0089, r29	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
    2c00:	c0 93 88 00 	sts	0x0088, r28	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
				break;
    2c04:	33 c0       	rjmp	.+102    	; 0x2c6c <analogWrite+0xd6>
			#endif

			#if defined(TCCR1A) && defined(COM1B1)
			case TIMER1B:
				// connect pwm to pin on timer 1, channel B
				sbi(TCCR1A, COM1B1);
    2c06:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    2c0a:	80 62       	ori	r24, 0x20	; 32
    2c0c:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
				OCR1B = val; // set pwm duty
    2c10:	d0 93 8b 00 	sts	0x008B, r29	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
    2c14:	c0 93 8a 00 	sts	0x008A, r28	; 0x80008a <__TEXT_REGION_LENGTH__+0x7e008a>
				break;
    2c18:	29 c0       	rjmp	.+82     	; 0x2c6c <analogWrite+0xd6>
			#endif

			#if defined(TCCR2A) && defined(COM2A1)
			case TIMER2A:
				// connect pwm to pin on timer 2, channel A
				sbi(TCCR2A, COM2A1);
    2c1a:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    2c1e:	80 68       	ori	r24, 0x80	; 128
    2c20:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
				OCR2A = val; // set pwm duty
    2c24:	c0 93 b3 00 	sts	0x00B3, r28	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
				break;
    2c28:	21 c0       	rjmp	.+66     	; 0x2c6c <analogWrite+0xd6>
			#endif

			#if defined(TCCR2A) && defined(COM2B1)
			case TIMER2B:
				// connect pwm to pin on timer 2, channel B
				sbi(TCCR2A, COM2B1);
    2c2a:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    2c2e:	80 62       	ori	r24, 0x20	; 32
    2c30:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
				OCR2B = val; // set pwm duty
    2c34:	c0 93 b4 00 	sts	0x00B4, r28	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7e00b4>
				break;
    2c38:	19 c0       	rjmp	.+50     	; 0x2c6c <analogWrite+0xd6>
			#endif

			#if defined(TCCR3A) && defined(COM3A1)
			case TIMER3A:
				// connect pwm to pin on timer 3, channel A
				sbi(TCCR3A, COM3A1);
    2c3a:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
    2c3e:	80 68       	ori	r24, 0x80	; 128
    2c40:	80 93 90 00 	sts	0x0090, r24	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
				OCR3A = val; // set pwm duty
    2c44:	d0 93 99 00 	sts	0x0099, r29	; 0x800099 <__TEXT_REGION_LENGTH__+0x7e0099>
    2c48:	c0 93 98 00 	sts	0x0098, r28	; 0x800098 <__TEXT_REGION_LENGTH__+0x7e0098>
				break;
    2c4c:	0f c0       	rjmp	.+30     	; 0x2c6c <analogWrite+0xd6>
			#endif

			#if defined(TCCR3A) && defined(COM3B1)
			case TIMER3B:
				// connect pwm to pin on timer 3, channel B
				sbi(TCCR3A, COM3B1);
    2c4e:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
    2c52:	80 62       	ori	r24, 0x20	; 32
    2c54:	80 93 90 00 	sts	0x0090, r24	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
				OCR3B = val; // set pwm duty
    2c58:	d0 93 9b 00 	sts	0x009B, r29	; 0x80009b <__TEXT_REGION_LENGTH__+0x7e009b>
    2c5c:	c0 93 9a 00 	sts	0x009A, r28	; 0x80009a <__TEXT_REGION_LENGTH__+0x7e009a>
				break;
    2c60:	05 c0       	rjmp	.+10     	; 0x2c6c <analogWrite+0xd6>
				break;
			#endif

			case NOT_ON_TIMER:
			default:
				if (val < 128) {
    2c62:	c0 38       	cpi	r28, 0x80	; 128
    2c64:	d1 05       	cpc	r29, r1
    2c66:	0c f0       	brlt	.+2      	; 0x2c6a <analogWrite+0xd4>
    2c68:	a4 cf       	rjmp	.-184    	; 0x2bb2 <analogWrite+0x1c>
    2c6a:	9e cf       	rjmp	.-196    	; 0x2ba8 <analogWrite+0x12>
				} else {
					digitalWrite(pin, HIGH);
				}
		}
	}
}
    2c6c:	df 91       	pop	r29
    2c6e:	cf 91       	pop	r28
    2c70:	1f 91       	pop	r17
    2c72:	08 95       	ret

00002c74 <turnOffPWM>:
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
    2c74:	90 e0       	ldi	r25, 0x00	; 0
    2c76:	fc 01       	movw	r30, r24
    2c78:	31 97       	sbiw	r30, 0x01	; 1
    2c7a:	ea 30       	cpi	r30, 0x0A	; 10
    2c7c:	f1 05       	cpc	r31, r1
    2c7e:	38 f5       	brcc	.+78     	; 0x2cce <turnOffPWM+0x5a>
    2c80:	e3 56       	subi	r30, 0x63	; 99
    2c82:	ff 4f       	sbci	r31, 0xFF	; 255
    2c84:	ae c1       	rjmp	.+860    	; 0x2fe2 <__tablejump2__>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
    2c86:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    2c8a:	8f 77       	andi	r24, 0x7F	; 127
    2c8c:	03 c0       	rjmp	.+6      	; 0x2c94 <turnOffPWM+0x20>
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    2c8e:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    2c92:	8f 7d       	andi	r24, 0xDF	; 223
    2c94:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    2c98:	08 95       	ret
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
    2c9a:	84 b5       	in	r24, 0x24	; 36
    2c9c:	8f 77       	andi	r24, 0x7F	; 127
    2c9e:	02 c0       	rjmp	.+4      	; 0x2ca4 <turnOffPWM+0x30>
		#endif
		
		#if defined(TCCR0A) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
    2ca0:	84 b5       	in	r24, 0x24	; 36
    2ca2:	8f 7d       	andi	r24, 0xDF	; 223
    2ca4:	84 bd       	out	0x24, r24	; 36
    2ca6:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
    2ca8:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    2cac:	8f 77       	andi	r24, 0x7F	; 127
    2cae:	03 c0       	rjmp	.+6      	; 0x2cb6 <turnOffPWM+0x42>
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
    2cb0:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    2cb4:	8f 7d       	andi	r24, 0xDF	; 223
    2cb6:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    2cba:	08 95       	ret
		#endif
		
		#if defined(TCCR3A) && defined(COM3A1)
		case  TIMER3A:  cbi(TCCR3A, COM3A1);    break;
    2cbc:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
    2cc0:	8f 77       	andi	r24, 0x7F	; 127
    2cc2:	03 c0       	rjmp	.+6      	; 0x2cca <turnOffPWM+0x56>
		#endif
		#if defined(TCCR3A) && defined(COM3B1)
		case  TIMER3B:  cbi(TCCR3A, COM3B1);    break;
    2cc4:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
    2cc8:	8f 7d       	andi	r24, 0xDF	; 223
    2cca:	80 93 90 00 	sts	0x0090, r24	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
    2cce:	08 95       	ret

00002cd0 <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
    2cd0:	cf 93       	push	r28
    2cd2:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
    2cd4:	90 e0       	ldi	r25, 0x00	; 0
    2cd6:	fc 01       	movw	r30, r24
    2cd8:	e7 56       	subi	r30, 0x67	; 103
    2cda:	fe 4f       	sbci	r31, 0xFE	; 254
    2cdc:	24 91       	lpm	r18, Z
	uint8_t port = digitalPinToPort(pin);
    2cde:	fc 01       	movw	r30, r24
    2ce0:	e7 54       	subi	r30, 0x47	; 71
    2ce2:	fe 4f       	sbci	r31, 0xFE	; 254
    2ce4:	84 91       	lpm	r24, Z
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
    2ce6:	88 23       	and	r24, r24
    2ce8:	61 f1       	breq	.+88     	; 0x2d42 <pinMode+0x72>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
    2cea:	90 e0       	ldi	r25, 0x00	; 0
    2cec:	88 0f       	add	r24, r24
    2cee:	99 1f       	adc	r25, r25
    2cf0:	fc 01       	movw	r30, r24
    2cf2:	e3 51       	subi	r30, 0x13	; 19
    2cf4:	fe 4f       	sbci	r31, 0xFE	; 254
    2cf6:	c5 91       	lpm	r28, Z+
    2cf8:	d4 91       	lpm	r29, Z
	out = portOutputRegister(port);
    2cfa:	fc 01       	movw	r30, r24
    2cfc:	ed 51       	subi	r30, 0x1D	; 29
    2cfe:	fe 4f       	sbci	r31, 0xFE	; 254
    2d00:	a5 91       	lpm	r26, Z+
    2d02:	b4 91       	lpm	r27, Z

	if (mode == INPUT) { 
    2d04:	61 11       	cpse	r22, r1
    2d06:	09 c0       	rjmp	.+18     	; 0x2d1a <pinMode+0x4a>
		uint8_t oldSREG = SREG;
    2d08:	9f b7       	in	r25, 0x3f	; 63
                cli();
    2d0a:	f8 94       	cli
		*reg &= ~bit;
    2d0c:	88 81       	ld	r24, Y
    2d0e:	20 95       	com	r18
    2d10:	82 23       	and	r24, r18
    2d12:	88 83       	st	Y, r24
		*out &= ~bit;
    2d14:	ec 91       	ld	r30, X
    2d16:	2e 23       	and	r18, r30
    2d18:	0b c0       	rjmp	.+22     	; 0x2d30 <pinMode+0x60>
		SREG = oldSREG;
	} else if (mode == INPUT_PULLUP) {
    2d1a:	62 30       	cpi	r22, 0x02	; 2
    2d1c:	61 f4       	brne	.+24     	; 0x2d36 <pinMode+0x66>
		uint8_t oldSREG = SREG;
    2d1e:	9f b7       	in	r25, 0x3f	; 63
                cli();
    2d20:	f8 94       	cli
		*reg &= ~bit;
    2d22:	88 81       	ld	r24, Y
    2d24:	32 2f       	mov	r19, r18
    2d26:	30 95       	com	r19
    2d28:	83 23       	and	r24, r19
    2d2a:	88 83       	st	Y, r24
		*out |= bit;
    2d2c:	ec 91       	ld	r30, X
    2d2e:	2e 2b       	or	r18, r30
    2d30:	2c 93       	st	X, r18
		SREG = oldSREG;
    2d32:	9f bf       	out	0x3f, r25	; 63
    2d34:	06 c0       	rjmp	.+12     	; 0x2d42 <pinMode+0x72>
	} else {
		uint8_t oldSREG = SREG;
    2d36:	8f b7       	in	r24, 0x3f	; 63
                cli();
    2d38:	f8 94       	cli
		*reg |= bit;
    2d3a:	e8 81       	ld	r30, Y
    2d3c:	2e 2b       	or	r18, r30
    2d3e:	28 83       	st	Y, r18
		SREG = oldSREG;
    2d40:	8f bf       	out	0x3f, r24	; 63
	}
}
    2d42:	df 91       	pop	r29
    2d44:	cf 91       	pop	r28
    2d46:	08 95       	ret

00002d48 <digitalWrite>:
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
    2d48:	1f 93       	push	r17
    2d4a:	cf 93       	push	r28
    2d4c:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
    2d4e:	28 2f       	mov	r18, r24
    2d50:	30 e0       	ldi	r19, 0x00	; 0
    2d52:	f9 01       	movw	r30, r18
    2d54:	e7 58       	subi	r30, 0x87	; 135
    2d56:	fe 4f       	sbci	r31, 0xFE	; 254
    2d58:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
    2d5a:	f9 01       	movw	r30, r18
    2d5c:	e7 56       	subi	r30, 0x67	; 103
    2d5e:	fe 4f       	sbci	r31, 0xFE	; 254
    2d60:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
    2d62:	f9 01       	movw	r30, r18
    2d64:	e7 54       	subi	r30, 0x47	; 71
    2d66:	fe 4f       	sbci	r31, 0xFE	; 254
    2d68:	c4 91       	lpm	r28, Z
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
    2d6a:	cc 23       	and	r28, r28
    2d6c:	b9 f0       	breq	.+46     	; 0x2d9c <digitalWrite+0x54>
    2d6e:	16 2f       	mov	r17, r22

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    2d70:	81 11       	cpse	r24, r1
    2d72:	80 df       	rcall	.-256    	; 0x2c74 <turnOffPWM>

	out = portOutputRegister(port);
    2d74:	ec 2f       	mov	r30, r28
    2d76:	f0 e0       	ldi	r31, 0x00	; 0
    2d78:	ee 0f       	add	r30, r30
    2d7a:	ff 1f       	adc	r31, r31
    2d7c:	ed 51       	subi	r30, 0x1D	; 29
    2d7e:	fe 4f       	sbci	r31, 0xFE	; 254
    2d80:	a5 91       	lpm	r26, Z+
    2d82:	b4 91       	lpm	r27, Z

	uint8_t oldSREG = SREG;
    2d84:	9f b7       	in	r25, 0x3f	; 63
	cli();
    2d86:	f8 94       	cli

	if (val == LOW) {
    2d88:	11 11       	cpse	r17, r1
    2d8a:	04 c0       	rjmp	.+8      	; 0x2d94 <digitalWrite+0x4c>
		*out &= ~bit;
    2d8c:	8c 91       	ld	r24, X
    2d8e:	d0 95       	com	r29
    2d90:	d8 23       	and	r29, r24
    2d92:	02 c0       	rjmp	.+4      	; 0x2d98 <digitalWrite+0x50>
	} else {
		*out |= bit;
    2d94:	ec 91       	ld	r30, X
    2d96:	de 2b       	or	r29, r30
    2d98:	dc 93       	st	X, r29
	}

	SREG = oldSREG;
    2d9a:	9f bf       	out	0x3f, r25	; 63
}
    2d9c:	df 91       	pop	r29
    2d9e:	cf 91       	pop	r28
    2da0:	1f 91       	pop	r17
    2da2:	08 95       	ret

00002da4 <digitalRead>:

int digitalRead(uint8_t pin)
{
    2da4:	cf 93       	push	r28
    2da6:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
    2da8:	28 2f       	mov	r18, r24
    2daa:	30 e0       	ldi	r19, 0x00	; 0
    2dac:	f9 01       	movw	r30, r18
    2dae:	e7 58       	subi	r30, 0x87	; 135
    2db0:	fe 4f       	sbci	r31, 0xFE	; 254
    2db2:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
    2db4:	f9 01       	movw	r30, r18
    2db6:	e7 56       	subi	r30, 0x67	; 103
    2db8:	fe 4f       	sbci	r31, 0xFE	; 254
    2dba:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
    2dbc:	f9 01       	movw	r30, r18
    2dbe:	e7 54       	subi	r30, 0x47	; 71
    2dc0:	fe 4f       	sbci	r31, 0xFE	; 254
    2dc2:	c4 91       	lpm	r28, Z

	if (port == NOT_A_PIN) return LOW;
    2dc4:	cc 23       	and	r28, r28
    2dc6:	89 f0       	breq	.+34     	; 0x2dea <digitalRead+0x46>

	// If the pin that support PWM output, we need to turn it off
	// before getting a digital reading.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    2dc8:	81 11       	cpse	r24, r1
    2dca:	54 df       	rcall	.-344    	; 0x2c74 <turnOffPWM>

	if (*portInputRegister(port) & bit) return HIGH;
    2dcc:	ec 2f       	mov	r30, r28
    2dce:	f0 e0       	ldi	r31, 0x00	; 0
    2dd0:	ee 0f       	add	r30, r30
    2dd2:	ff 1f       	adc	r31, r31
    2dd4:	e7 52       	subi	r30, 0x27	; 39
    2dd6:	fe 4f       	sbci	r31, 0xFE	; 254
    2dd8:	a5 91       	lpm	r26, Z+
    2dda:	b4 91       	lpm	r27, Z
    2ddc:	ec 91       	ld	r30, X
{
	uint8_t timer = digitalPinToTimer(pin);
	uint8_t bit = digitalPinToBitMask(pin);
	uint8_t port = digitalPinToPort(pin);

	if (port == NOT_A_PIN) return LOW;
    2dde:	ed 23       	and	r30, r29
    2de0:	81 e0       	ldi	r24, 0x01	; 1
    2de2:	90 e0       	ldi	r25, 0x00	; 0
    2de4:	21 f4       	brne	.+8      	; 0x2dee <digitalRead+0x4a>
    2de6:	80 e0       	ldi	r24, 0x00	; 0
    2de8:	02 c0       	rjmp	.+4      	; 0x2dee <digitalRead+0x4a>
    2dea:	80 e0       	ldi	r24, 0x00	; 0
    2dec:	90 e0       	ldi	r25, 0x00	; 0
	// before getting a digital reading.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);

	if (*portInputRegister(port) & bit) return HIGH;
	return LOW;
}
    2dee:	df 91       	pop	r29
    2df0:	cf 91       	pop	r28
    2df2:	08 95       	ret

00002df4 <shiftIn>:
  Boston, MA  02111-1307  USA
*/

#include "wiring_private.h"

uint8_t shiftIn(uint8_t dataPin, uint8_t clockPin, uint8_t bitOrder) {
    2df4:	cf 92       	push	r12
    2df6:	df 92       	push	r13
    2df8:	ef 92       	push	r14
    2dfa:	ff 92       	push	r15
    2dfc:	0f 93       	push	r16
    2dfe:	1f 93       	push	r17
    2e00:	cf 93       	push	r28
    2e02:	df 93       	push	r29
    2e04:	f8 2e       	mov	r15, r24
    2e06:	d6 2f       	mov	r29, r22
    2e08:	e4 2e       	mov	r14, r20
    2e0a:	07 e0       	ldi	r16, 0x07	; 7
    2e0c:	10 e0       	ldi	r17, 0x00	; 0
	uint8_t value = 0;
    2e0e:	c0 e0       	ldi	r28, 0x00	; 0
	uint8_t i;

	for (i = 0; i < 8; ++i) {
		digitalWrite(clockPin, HIGH);
		if (bitOrder == LSBFIRST)
			value |= digitalRead(dataPin) << i;
    2e10:	87 e0       	ldi	r24, 0x07	; 7
    2e12:	c8 2e       	mov	r12, r24
    2e14:	d1 2c       	mov	r13, r1
uint8_t shiftIn(uint8_t dataPin, uint8_t clockPin, uint8_t bitOrder) {
	uint8_t value = 0;
	uint8_t i;

	for (i = 0; i < 8; ++i) {
		digitalWrite(clockPin, HIGH);
    2e16:	61 e0       	ldi	r22, 0x01	; 1
    2e18:	8d 2f       	mov	r24, r29
    2e1a:	96 df       	rcall	.-212    	; 0x2d48 <digitalWrite>
		if (bitOrder == LSBFIRST)
			value |= digitalRead(dataPin) << i;
    2e1c:	8f 2d       	mov	r24, r15
	uint8_t value = 0;
	uint8_t i;

	for (i = 0; i < 8; ++i) {
		digitalWrite(clockPin, HIGH);
		if (bitOrder == LSBFIRST)
    2e1e:	e1 10       	cpse	r14, r1
			value |= digitalRead(dataPin) << i;
    2e20:	09 c0       	rjmp	.+18     	; 0x2e34 <shiftIn+0x40>
    2e22:	c0 df       	rcall	.-128    	; 0x2da4 <digitalRead>
    2e24:	96 01       	movw	r18, r12
    2e26:	20 1b       	sub	r18, r16
    2e28:	31 0b       	sbc	r19, r17
    2e2a:	01 c0       	rjmp	.+2      	; 0x2e2e <shiftIn+0x3a>
    2e2c:	88 0f       	add	r24, r24
    2e2e:	2a 95       	dec	r18
    2e30:	ea f7       	brpl	.-6      	; 0x2e2c <shiftIn+0x38>
		else
			value |= digitalRead(dataPin) << (7 - i);
    2e32:	06 c0       	rjmp	.+12     	; 0x2e40 <shiftIn+0x4c>
    2e34:	b7 df       	rcall	.-146    	; 0x2da4 <digitalRead>
    2e36:	00 2e       	mov	r0, r16
    2e38:	01 c0       	rjmp	.+2      	; 0x2e3c <shiftIn+0x48>
    2e3a:	88 0f       	add	r24, r24
    2e3c:	0a 94       	dec	r0
    2e3e:	ea f7       	brpl	.-6      	; 0x2e3a <shiftIn+0x46>
		digitalWrite(clockPin, LOW);
    2e40:	c8 2b       	or	r28, r24
    2e42:	60 e0       	ldi	r22, 0x00	; 0
    2e44:	8d 2f       	mov	r24, r29
    2e46:	80 df       	rcall	.-256    	; 0x2d48 <digitalWrite>
    2e48:	01 50       	subi	r16, 0x01	; 1
    2e4a:	11 09       	sbc	r17, r1
    2e4c:	20 f7       	brcc	.-56     	; 0x2e16 <shiftIn+0x22>
	}
	return value;
}
    2e4e:	8c 2f       	mov	r24, r28
    2e50:	df 91       	pop	r29
    2e52:	cf 91       	pop	r28
    2e54:	1f 91       	pop	r17
    2e56:	0f 91       	pop	r16
    2e58:	ff 90       	pop	r15
    2e5a:	ef 90       	pop	r14
    2e5c:	df 90       	pop	r13
    2e5e:	cf 90       	pop	r12
    2e60:	08 95       	ret

00002e62 <_Z3maplllll>:
  long diff = howbig - howsmall;
  return random(diff) + howsmall;
}

long map(long x, long in_min, long in_max, long out_min, long out_max)
{
    2e62:	4f 92       	push	r4
    2e64:	5f 92       	push	r5
    2e66:	6f 92       	push	r6
    2e68:	7f 92       	push	r7
    2e6a:	af 92       	push	r10
    2e6c:	bf 92       	push	r11
    2e6e:	cf 92       	push	r12
    2e70:	df 92       	push	r13
    2e72:	ef 92       	push	r14
    2e74:	ff 92       	push	r15
    2e76:	0f 93       	push	r16
    2e78:	1f 93       	push	r17
    2e7a:	cf 93       	push	r28
    2e7c:	df 93       	push	r29
    2e7e:	cd b7       	in	r28, 0x3d	; 61
    2e80:	de b7       	in	r29, 0x3e	; 62
    2e82:	29 01       	movw	r4, r18
    2e84:	3a 01       	movw	r6, r20
  return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
    2e86:	9b 01       	movw	r18, r22
    2e88:	ac 01       	movw	r20, r24
    2e8a:	24 19       	sub	r18, r4
    2e8c:	35 09       	sbc	r19, r5
    2e8e:	46 09       	sbc	r20, r6
    2e90:	57 09       	sbc	r21, r7
    2e92:	89 89       	ldd	r24, Y+17	; 0x11
    2e94:	9a 89       	ldd	r25, Y+18	; 0x12
    2e96:	ab 89       	ldd	r26, Y+19	; 0x13
    2e98:	bc 89       	ldd	r27, Y+20	; 0x14
    2e9a:	bc 01       	movw	r22, r24
    2e9c:	cd 01       	movw	r24, r26
    2e9e:	6a 19       	sub	r22, r10
    2ea0:	7b 09       	sbc	r23, r11
    2ea2:	8c 09       	sbc	r24, r12
    2ea4:	9d 09       	sbc	r25, r13
    2ea6:	1d d0       	rcall	.+58     	; 0x2ee2 <__mulsi3>
    2ea8:	a8 01       	movw	r20, r16
    2eaa:	97 01       	movw	r18, r14
    2eac:	24 19       	sub	r18, r4
    2eae:	35 09       	sbc	r19, r5
    2eb0:	46 09       	sbc	r20, r6
    2eb2:	57 09       	sbc	r21, r7
    2eb4:	7a d0       	rcall	.+244    	; 0x2faa <__divmodsi4>
    2eb6:	ca 01       	movw	r24, r20
    2eb8:	b9 01       	movw	r22, r18
    2eba:	6a 0d       	add	r22, r10
    2ebc:	7b 1d       	adc	r23, r11
    2ebe:	8c 1d       	adc	r24, r12
    2ec0:	9d 1d       	adc	r25, r13
}
    2ec2:	df 91       	pop	r29
    2ec4:	cf 91       	pop	r28
    2ec6:	1f 91       	pop	r17
    2ec8:	0f 91       	pop	r16
    2eca:	ff 90       	pop	r15
    2ecc:	ef 90       	pop	r14
    2ece:	df 90       	pop	r13
    2ed0:	cf 90       	pop	r12
    2ed2:	bf 90       	pop	r11
    2ed4:	af 90       	pop	r10
    2ed6:	7f 90       	pop	r7
    2ed8:	6f 90       	pop	r6
    2eda:	5f 90       	pop	r5
    2edc:	4f 90       	pop	r4
    2ede:	08 95       	ret

00002ee0 <yield>:
 * libraries or sketches that supports cooperative threads.
 *
 * Its defined as a weak symbol and it can be redefined to implement a
 * real cooperative scheduler.
 */
static void __empty() {
    2ee0:	08 95       	ret

00002ee2 <__mulsi3>:
    2ee2:	db 01       	movw	r26, r22
    2ee4:	8f 93       	push	r24
    2ee6:	9f 93       	push	r25
    2ee8:	85 d0       	rcall	.+266    	; 0x2ff4 <__muluhisi3>
    2eea:	bf 91       	pop	r27
    2eec:	af 91       	pop	r26
    2eee:	a2 9f       	mul	r26, r18
    2ef0:	80 0d       	add	r24, r0
    2ef2:	91 1d       	adc	r25, r1
    2ef4:	a3 9f       	mul	r26, r19
    2ef6:	90 0d       	add	r25, r0
    2ef8:	b2 9f       	mul	r27, r18
    2efa:	90 0d       	add	r25, r0
    2efc:	11 24       	eor	r1, r1
    2efe:	08 95       	ret

00002f00 <__udivmodqi4>:
    2f00:	99 1b       	sub	r25, r25
    2f02:	79 e0       	ldi	r23, 0x09	; 9
    2f04:	04 c0       	rjmp	.+8      	; 0x2f0e <__udivmodqi4_ep>

00002f06 <__udivmodqi4_loop>:
    2f06:	99 1f       	adc	r25, r25
    2f08:	96 17       	cp	r25, r22
    2f0a:	08 f0       	brcs	.+2      	; 0x2f0e <__udivmodqi4_ep>
    2f0c:	96 1b       	sub	r25, r22

00002f0e <__udivmodqi4_ep>:
    2f0e:	88 1f       	adc	r24, r24
    2f10:	7a 95       	dec	r23
    2f12:	c9 f7       	brne	.-14     	; 0x2f06 <__udivmodqi4_loop>
    2f14:	80 95       	com	r24
    2f16:	08 95       	ret

00002f18 <__udivmodhi4>:
    2f18:	aa 1b       	sub	r26, r26
    2f1a:	bb 1b       	sub	r27, r27
    2f1c:	51 e1       	ldi	r21, 0x11	; 17
    2f1e:	07 c0       	rjmp	.+14     	; 0x2f2e <__udivmodhi4_ep>

00002f20 <__udivmodhi4_loop>:
    2f20:	aa 1f       	adc	r26, r26
    2f22:	bb 1f       	adc	r27, r27
    2f24:	a6 17       	cp	r26, r22
    2f26:	b7 07       	cpc	r27, r23
    2f28:	10 f0       	brcs	.+4      	; 0x2f2e <__udivmodhi4_ep>
    2f2a:	a6 1b       	sub	r26, r22
    2f2c:	b7 0b       	sbc	r27, r23

00002f2e <__udivmodhi4_ep>:
    2f2e:	88 1f       	adc	r24, r24
    2f30:	99 1f       	adc	r25, r25
    2f32:	5a 95       	dec	r21
    2f34:	a9 f7       	brne	.-22     	; 0x2f20 <__udivmodhi4_loop>
    2f36:	80 95       	com	r24
    2f38:	90 95       	com	r25
    2f3a:	bc 01       	movw	r22, r24
    2f3c:	cd 01       	movw	r24, r26
    2f3e:	08 95       	ret

00002f40 <__divmodhi4>:
    2f40:	97 fb       	bst	r25, 7
    2f42:	07 2e       	mov	r0, r23
    2f44:	16 f4       	brtc	.+4      	; 0x2f4a <__divmodhi4+0xa>
    2f46:	00 94       	com	r0
    2f48:	06 d0       	rcall	.+12     	; 0x2f56 <__divmodhi4_neg1>
    2f4a:	77 fd       	sbrc	r23, 7
    2f4c:	08 d0       	rcall	.+16     	; 0x2f5e <__divmodhi4_neg2>
    2f4e:	e4 df       	rcall	.-56     	; 0x2f18 <__udivmodhi4>
    2f50:	07 fc       	sbrc	r0, 7
    2f52:	05 d0       	rcall	.+10     	; 0x2f5e <__divmodhi4_neg2>
    2f54:	3e f4       	brtc	.+14     	; 0x2f64 <__divmodhi4_exit>

00002f56 <__divmodhi4_neg1>:
    2f56:	90 95       	com	r25
    2f58:	81 95       	neg	r24
    2f5a:	9f 4f       	sbci	r25, 0xFF	; 255
    2f5c:	08 95       	ret

00002f5e <__divmodhi4_neg2>:
    2f5e:	70 95       	com	r23
    2f60:	61 95       	neg	r22
    2f62:	7f 4f       	sbci	r23, 0xFF	; 255

00002f64 <__divmodhi4_exit>:
    2f64:	08 95       	ret

00002f66 <__udivmodsi4>:
    2f66:	a1 e2       	ldi	r26, 0x21	; 33
    2f68:	1a 2e       	mov	r1, r26
    2f6a:	aa 1b       	sub	r26, r26
    2f6c:	bb 1b       	sub	r27, r27
    2f6e:	fd 01       	movw	r30, r26
    2f70:	0d c0       	rjmp	.+26     	; 0x2f8c <__udivmodsi4_ep>

00002f72 <__udivmodsi4_loop>:
    2f72:	aa 1f       	adc	r26, r26
    2f74:	bb 1f       	adc	r27, r27
    2f76:	ee 1f       	adc	r30, r30
    2f78:	ff 1f       	adc	r31, r31
    2f7a:	a2 17       	cp	r26, r18
    2f7c:	b3 07       	cpc	r27, r19
    2f7e:	e4 07       	cpc	r30, r20
    2f80:	f5 07       	cpc	r31, r21
    2f82:	20 f0       	brcs	.+8      	; 0x2f8c <__udivmodsi4_ep>
    2f84:	a2 1b       	sub	r26, r18
    2f86:	b3 0b       	sbc	r27, r19
    2f88:	e4 0b       	sbc	r30, r20
    2f8a:	f5 0b       	sbc	r31, r21

00002f8c <__udivmodsi4_ep>:
    2f8c:	66 1f       	adc	r22, r22
    2f8e:	77 1f       	adc	r23, r23
    2f90:	88 1f       	adc	r24, r24
    2f92:	99 1f       	adc	r25, r25
    2f94:	1a 94       	dec	r1
    2f96:	69 f7       	brne	.-38     	; 0x2f72 <__udivmodsi4_loop>
    2f98:	60 95       	com	r22
    2f9a:	70 95       	com	r23
    2f9c:	80 95       	com	r24
    2f9e:	90 95       	com	r25
    2fa0:	9b 01       	movw	r18, r22
    2fa2:	ac 01       	movw	r20, r24
    2fa4:	bd 01       	movw	r22, r26
    2fa6:	cf 01       	movw	r24, r30
    2fa8:	08 95       	ret

00002faa <__divmodsi4>:
    2faa:	05 2e       	mov	r0, r21
    2fac:	97 fb       	bst	r25, 7
    2fae:	16 f4       	brtc	.+4      	; 0x2fb4 <__divmodsi4+0xa>
    2fb0:	00 94       	com	r0
    2fb2:	0f d0       	rcall	.+30     	; 0x2fd2 <__negsi2>
    2fb4:	57 fd       	sbrc	r21, 7
    2fb6:	05 d0       	rcall	.+10     	; 0x2fc2 <__divmodsi4_neg2>
    2fb8:	d6 df       	rcall	.-84     	; 0x2f66 <__udivmodsi4>
    2fba:	07 fc       	sbrc	r0, 7
    2fbc:	02 d0       	rcall	.+4      	; 0x2fc2 <__divmodsi4_neg2>
    2fbe:	46 f4       	brtc	.+16     	; 0x2fd0 <__divmodsi4_exit>
    2fc0:	08 c0       	rjmp	.+16     	; 0x2fd2 <__negsi2>

00002fc2 <__divmodsi4_neg2>:
    2fc2:	50 95       	com	r21
    2fc4:	40 95       	com	r20
    2fc6:	30 95       	com	r19
    2fc8:	21 95       	neg	r18
    2fca:	3f 4f       	sbci	r19, 0xFF	; 255
    2fcc:	4f 4f       	sbci	r20, 0xFF	; 255
    2fce:	5f 4f       	sbci	r21, 0xFF	; 255

00002fd0 <__divmodsi4_exit>:
    2fd0:	08 95       	ret

00002fd2 <__negsi2>:
    2fd2:	90 95       	com	r25
    2fd4:	80 95       	com	r24
    2fd6:	70 95       	com	r23
    2fd8:	61 95       	neg	r22
    2fda:	7f 4f       	sbci	r23, 0xFF	; 255
    2fdc:	8f 4f       	sbci	r24, 0xFF	; 255
    2fde:	9f 4f       	sbci	r25, 0xFF	; 255
    2fe0:	08 95       	ret

00002fe2 <__tablejump2__>:
    2fe2:	ee 0f       	add	r30, r30
    2fe4:	ff 1f       	adc	r31, r31
    2fe6:	00 24       	eor	r0, r0
    2fe8:	00 1c       	adc	r0, r0
    2fea:	0b be       	out	0x3b, r0	; 59
    2fec:	07 90       	elpm	r0, Z+
    2fee:	f6 91       	elpm	r31, Z
    2ff0:	e0 2d       	mov	r30, r0
    2ff2:	09 94       	ijmp

00002ff4 <__muluhisi3>:
    2ff4:	09 d0       	rcall	.+18     	; 0x3008 <__umulhisi3>
    2ff6:	a5 9f       	mul	r26, r21
    2ff8:	90 0d       	add	r25, r0
    2ffa:	b4 9f       	mul	r27, r20
    2ffc:	90 0d       	add	r25, r0
    2ffe:	a4 9f       	mul	r26, r20
    3000:	80 0d       	add	r24, r0
    3002:	91 1d       	adc	r25, r1
    3004:	11 24       	eor	r1, r1
    3006:	08 95       	ret

00003008 <__umulhisi3>:
    3008:	a2 9f       	mul	r26, r18
    300a:	b0 01       	movw	r22, r0
    300c:	b3 9f       	mul	r27, r19
    300e:	c0 01       	movw	r24, r0
    3010:	a3 9f       	mul	r26, r19
    3012:	70 0d       	add	r23, r0
    3014:	81 1d       	adc	r24, r1
    3016:	11 24       	eor	r1, r1
    3018:	91 1d       	adc	r25, r1
    301a:	b2 9f       	mul	r27, r18
    301c:	70 0d       	add	r23, r0
    301e:	81 1d       	adc	r24, r1
    3020:	11 24       	eor	r1, r1
    3022:	91 1d       	adc	r25, r1
    3024:	08 95       	ret

00003026 <malloc>:
    3026:	0f 93       	push	r16
    3028:	1f 93       	push	r17
    302a:	cf 93       	push	r28
    302c:	df 93       	push	r29
    302e:	82 30       	cpi	r24, 0x02	; 2
    3030:	91 05       	cpc	r25, r1
    3032:	10 f4       	brcc	.+4      	; 0x3038 <malloc+0x12>
    3034:	82 e0       	ldi	r24, 0x02	; 2
    3036:	90 e0       	ldi	r25, 0x00	; 0
    3038:	e0 91 06 04 	lds	r30, 0x0406	; 0x800406 <__flp>
    303c:	f0 91 07 04 	lds	r31, 0x0407	; 0x800407 <__flp+0x1>
    3040:	20 e0       	ldi	r18, 0x00	; 0
    3042:	30 e0       	ldi	r19, 0x00	; 0
    3044:	a0 e0       	ldi	r26, 0x00	; 0
    3046:	b0 e0       	ldi	r27, 0x00	; 0
    3048:	30 97       	sbiw	r30, 0x00	; 0
    304a:	19 f1       	breq	.+70     	; 0x3092 <malloc+0x6c>
    304c:	40 81       	ld	r20, Z
    304e:	51 81       	ldd	r21, Z+1	; 0x01
    3050:	02 81       	ldd	r16, Z+2	; 0x02
    3052:	13 81       	ldd	r17, Z+3	; 0x03
    3054:	48 17       	cp	r20, r24
    3056:	59 07       	cpc	r21, r25
    3058:	c8 f0       	brcs	.+50     	; 0x308c <malloc+0x66>
    305a:	84 17       	cp	r24, r20
    305c:	95 07       	cpc	r25, r21
    305e:	69 f4       	brne	.+26     	; 0x307a <malloc+0x54>
    3060:	10 97       	sbiw	r26, 0x00	; 0
    3062:	31 f0       	breq	.+12     	; 0x3070 <malloc+0x4a>
    3064:	12 96       	adiw	r26, 0x02	; 2
    3066:	0c 93       	st	X, r16
    3068:	12 97       	sbiw	r26, 0x02	; 2
    306a:	13 96       	adiw	r26, 0x03	; 3
    306c:	1c 93       	st	X, r17
    306e:	27 c0       	rjmp	.+78     	; 0x30be <malloc+0x98>
    3070:	00 93 06 04 	sts	0x0406, r16	; 0x800406 <__flp>
    3074:	10 93 07 04 	sts	0x0407, r17	; 0x800407 <__flp+0x1>
    3078:	22 c0       	rjmp	.+68     	; 0x30be <malloc+0x98>
    307a:	21 15       	cp	r18, r1
    307c:	31 05       	cpc	r19, r1
    307e:	19 f0       	breq	.+6      	; 0x3086 <malloc+0x60>
    3080:	42 17       	cp	r20, r18
    3082:	53 07       	cpc	r21, r19
    3084:	18 f4       	brcc	.+6      	; 0x308c <malloc+0x66>
    3086:	9a 01       	movw	r18, r20
    3088:	bd 01       	movw	r22, r26
    308a:	ef 01       	movw	r28, r30
    308c:	df 01       	movw	r26, r30
    308e:	f8 01       	movw	r30, r16
    3090:	db cf       	rjmp	.-74     	; 0x3048 <malloc+0x22>
    3092:	21 15       	cp	r18, r1
    3094:	31 05       	cpc	r19, r1
    3096:	f9 f0       	breq	.+62     	; 0x30d6 <malloc+0xb0>
    3098:	28 1b       	sub	r18, r24
    309a:	39 0b       	sbc	r19, r25
    309c:	24 30       	cpi	r18, 0x04	; 4
    309e:	31 05       	cpc	r19, r1
    30a0:	80 f4       	brcc	.+32     	; 0x30c2 <malloc+0x9c>
    30a2:	8a 81       	ldd	r24, Y+2	; 0x02
    30a4:	9b 81       	ldd	r25, Y+3	; 0x03
    30a6:	61 15       	cp	r22, r1
    30a8:	71 05       	cpc	r23, r1
    30aa:	21 f0       	breq	.+8      	; 0x30b4 <malloc+0x8e>
    30ac:	fb 01       	movw	r30, r22
    30ae:	93 83       	std	Z+3, r25	; 0x03
    30b0:	82 83       	std	Z+2, r24	; 0x02
    30b2:	04 c0       	rjmp	.+8      	; 0x30bc <malloc+0x96>
    30b4:	90 93 07 04 	sts	0x0407, r25	; 0x800407 <__flp+0x1>
    30b8:	80 93 06 04 	sts	0x0406, r24	; 0x800406 <__flp>
    30bc:	fe 01       	movw	r30, r28
    30be:	32 96       	adiw	r30, 0x02	; 2
    30c0:	44 c0       	rjmp	.+136    	; 0x314a <malloc+0x124>
    30c2:	fe 01       	movw	r30, r28
    30c4:	e2 0f       	add	r30, r18
    30c6:	f3 1f       	adc	r31, r19
    30c8:	81 93       	st	Z+, r24
    30ca:	91 93       	st	Z+, r25
    30cc:	22 50       	subi	r18, 0x02	; 2
    30ce:	31 09       	sbc	r19, r1
    30d0:	39 83       	std	Y+1, r19	; 0x01
    30d2:	28 83       	st	Y, r18
    30d4:	3a c0       	rjmp	.+116    	; 0x314a <malloc+0x124>
    30d6:	20 91 04 04 	lds	r18, 0x0404	; 0x800404 <__brkval>
    30da:	30 91 05 04 	lds	r19, 0x0405	; 0x800405 <__brkval+0x1>
    30de:	23 2b       	or	r18, r19
    30e0:	41 f4       	brne	.+16     	; 0x30f2 <malloc+0xcc>
    30e2:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
    30e6:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
    30ea:	30 93 05 04 	sts	0x0405, r19	; 0x800405 <__brkval+0x1>
    30ee:	20 93 04 04 	sts	0x0404, r18	; 0x800404 <__brkval>
    30f2:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
    30f6:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
    30fa:	21 15       	cp	r18, r1
    30fc:	31 05       	cpc	r19, r1
    30fe:	41 f4       	brne	.+16     	; 0x3110 <malloc+0xea>
    3100:	2d b7       	in	r18, 0x3d	; 61
    3102:	3e b7       	in	r19, 0x3e	; 62
    3104:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    3108:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    310c:	24 1b       	sub	r18, r20
    310e:	35 0b       	sbc	r19, r21
    3110:	e0 91 04 04 	lds	r30, 0x0404	; 0x800404 <__brkval>
    3114:	f0 91 05 04 	lds	r31, 0x0405	; 0x800405 <__brkval+0x1>
    3118:	e2 17       	cp	r30, r18
    311a:	f3 07       	cpc	r31, r19
    311c:	a0 f4       	brcc	.+40     	; 0x3146 <malloc+0x120>
    311e:	2e 1b       	sub	r18, r30
    3120:	3f 0b       	sbc	r19, r31
    3122:	28 17       	cp	r18, r24
    3124:	39 07       	cpc	r19, r25
    3126:	78 f0       	brcs	.+30     	; 0x3146 <malloc+0x120>
    3128:	ac 01       	movw	r20, r24
    312a:	4e 5f       	subi	r20, 0xFE	; 254
    312c:	5f 4f       	sbci	r21, 0xFF	; 255
    312e:	24 17       	cp	r18, r20
    3130:	35 07       	cpc	r19, r21
    3132:	48 f0       	brcs	.+18     	; 0x3146 <malloc+0x120>
    3134:	4e 0f       	add	r20, r30
    3136:	5f 1f       	adc	r21, r31
    3138:	50 93 05 04 	sts	0x0405, r21	; 0x800405 <__brkval+0x1>
    313c:	40 93 04 04 	sts	0x0404, r20	; 0x800404 <__brkval>
    3140:	81 93       	st	Z+, r24
    3142:	91 93       	st	Z+, r25
    3144:	02 c0       	rjmp	.+4      	; 0x314a <malloc+0x124>
    3146:	e0 e0       	ldi	r30, 0x00	; 0
    3148:	f0 e0       	ldi	r31, 0x00	; 0
    314a:	cf 01       	movw	r24, r30
    314c:	df 91       	pop	r29
    314e:	cf 91       	pop	r28
    3150:	1f 91       	pop	r17
    3152:	0f 91       	pop	r16
    3154:	08 95       	ret

00003156 <free>:
    3156:	cf 93       	push	r28
    3158:	df 93       	push	r29
    315a:	00 97       	sbiw	r24, 0x00	; 0
    315c:	09 f4       	brne	.+2      	; 0x3160 <free+0xa>
    315e:	81 c0       	rjmp	.+258    	; 0x3262 <free+0x10c>
    3160:	fc 01       	movw	r30, r24
    3162:	32 97       	sbiw	r30, 0x02	; 2
    3164:	13 82       	std	Z+3, r1	; 0x03
    3166:	12 82       	std	Z+2, r1	; 0x02
    3168:	a0 91 06 04 	lds	r26, 0x0406	; 0x800406 <__flp>
    316c:	b0 91 07 04 	lds	r27, 0x0407	; 0x800407 <__flp+0x1>
    3170:	10 97       	sbiw	r26, 0x00	; 0
    3172:	81 f4       	brne	.+32     	; 0x3194 <free+0x3e>
    3174:	20 81       	ld	r18, Z
    3176:	31 81       	ldd	r19, Z+1	; 0x01
    3178:	82 0f       	add	r24, r18
    317a:	93 1f       	adc	r25, r19
    317c:	20 91 04 04 	lds	r18, 0x0404	; 0x800404 <__brkval>
    3180:	30 91 05 04 	lds	r19, 0x0405	; 0x800405 <__brkval+0x1>
    3184:	28 17       	cp	r18, r24
    3186:	39 07       	cpc	r19, r25
    3188:	51 f5       	brne	.+84     	; 0x31de <free+0x88>
    318a:	f0 93 05 04 	sts	0x0405, r31	; 0x800405 <__brkval+0x1>
    318e:	e0 93 04 04 	sts	0x0404, r30	; 0x800404 <__brkval>
    3192:	67 c0       	rjmp	.+206    	; 0x3262 <free+0x10c>
    3194:	ed 01       	movw	r28, r26
    3196:	20 e0       	ldi	r18, 0x00	; 0
    3198:	30 e0       	ldi	r19, 0x00	; 0
    319a:	ce 17       	cp	r28, r30
    319c:	df 07       	cpc	r29, r31
    319e:	40 f4       	brcc	.+16     	; 0x31b0 <free+0x5a>
    31a0:	4a 81       	ldd	r20, Y+2	; 0x02
    31a2:	5b 81       	ldd	r21, Y+3	; 0x03
    31a4:	9e 01       	movw	r18, r28
    31a6:	41 15       	cp	r20, r1
    31a8:	51 05       	cpc	r21, r1
    31aa:	f1 f0       	breq	.+60     	; 0x31e8 <free+0x92>
    31ac:	ea 01       	movw	r28, r20
    31ae:	f5 cf       	rjmp	.-22     	; 0x319a <free+0x44>
    31b0:	d3 83       	std	Z+3, r29	; 0x03
    31b2:	c2 83       	std	Z+2, r28	; 0x02
    31b4:	40 81       	ld	r20, Z
    31b6:	51 81       	ldd	r21, Z+1	; 0x01
    31b8:	84 0f       	add	r24, r20
    31ba:	95 1f       	adc	r25, r21
    31bc:	c8 17       	cp	r28, r24
    31be:	d9 07       	cpc	r29, r25
    31c0:	59 f4       	brne	.+22     	; 0x31d8 <free+0x82>
    31c2:	88 81       	ld	r24, Y
    31c4:	99 81       	ldd	r25, Y+1	; 0x01
    31c6:	84 0f       	add	r24, r20
    31c8:	95 1f       	adc	r25, r21
    31ca:	02 96       	adiw	r24, 0x02	; 2
    31cc:	91 83       	std	Z+1, r25	; 0x01
    31ce:	80 83       	st	Z, r24
    31d0:	8a 81       	ldd	r24, Y+2	; 0x02
    31d2:	9b 81       	ldd	r25, Y+3	; 0x03
    31d4:	93 83       	std	Z+3, r25	; 0x03
    31d6:	82 83       	std	Z+2, r24	; 0x02
    31d8:	21 15       	cp	r18, r1
    31da:	31 05       	cpc	r19, r1
    31dc:	29 f4       	brne	.+10     	; 0x31e8 <free+0x92>
    31de:	f0 93 07 04 	sts	0x0407, r31	; 0x800407 <__flp+0x1>
    31e2:	e0 93 06 04 	sts	0x0406, r30	; 0x800406 <__flp>
    31e6:	3d c0       	rjmp	.+122    	; 0x3262 <free+0x10c>
    31e8:	e9 01       	movw	r28, r18
    31ea:	fb 83       	std	Y+3, r31	; 0x03
    31ec:	ea 83       	std	Y+2, r30	; 0x02
    31ee:	49 91       	ld	r20, Y+
    31f0:	59 91       	ld	r21, Y+
    31f2:	c4 0f       	add	r28, r20
    31f4:	d5 1f       	adc	r29, r21
    31f6:	ec 17       	cp	r30, r28
    31f8:	fd 07       	cpc	r31, r29
    31fa:	61 f4       	brne	.+24     	; 0x3214 <free+0xbe>
    31fc:	80 81       	ld	r24, Z
    31fe:	91 81       	ldd	r25, Z+1	; 0x01
    3200:	84 0f       	add	r24, r20
    3202:	95 1f       	adc	r25, r21
    3204:	02 96       	adiw	r24, 0x02	; 2
    3206:	e9 01       	movw	r28, r18
    3208:	99 83       	std	Y+1, r25	; 0x01
    320a:	88 83       	st	Y, r24
    320c:	82 81       	ldd	r24, Z+2	; 0x02
    320e:	93 81       	ldd	r25, Z+3	; 0x03
    3210:	9b 83       	std	Y+3, r25	; 0x03
    3212:	8a 83       	std	Y+2, r24	; 0x02
    3214:	e0 e0       	ldi	r30, 0x00	; 0
    3216:	f0 e0       	ldi	r31, 0x00	; 0
    3218:	12 96       	adiw	r26, 0x02	; 2
    321a:	8d 91       	ld	r24, X+
    321c:	9c 91       	ld	r25, X
    321e:	13 97       	sbiw	r26, 0x03	; 3
    3220:	00 97       	sbiw	r24, 0x00	; 0
    3222:	19 f0       	breq	.+6      	; 0x322a <free+0xd4>
    3224:	fd 01       	movw	r30, r26
    3226:	dc 01       	movw	r26, r24
    3228:	f7 cf       	rjmp	.-18     	; 0x3218 <free+0xc2>
    322a:	8d 91       	ld	r24, X+
    322c:	9c 91       	ld	r25, X
    322e:	11 97       	sbiw	r26, 0x01	; 1
    3230:	9d 01       	movw	r18, r26
    3232:	2e 5f       	subi	r18, 0xFE	; 254
    3234:	3f 4f       	sbci	r19, 0xFF	; 255
    3236:	82 0f       	add	r24, r18
    3238:	93 1f       	adc	r25, r19
    323a:	20 91 04 04 	lds	r18, 0x0404	; 0x800404 <__brkval>
    323e:	30 91 05 04 	lds	r19, 0x0405	; 0x800405 <__brkval+0x1>
    3242:	28 17       	cp	r18, r24
    3244:	39 07       	cpc	r19, r25
    3246:	69 f4       	brne	.+26     	; 0x3262 <free+0x10c>
    3248:	30 97       	sbiw	r30, 0x00	; 0
    324a:	29 f4       	brne	.+10     	; 0x3256 <free+0x100>
    324c:	10 92 07 04 	sts	0x0407, r1	; 0x800407 <__flp+0x1>
    3250:	10 92 06 04 	sts	0x0406, r1	; 0x800406 <__flp>
    3254:	02 c0       	rjmp	.+4      	; 0x325a <free+0x104>
    3256:	13 82       	std	Z+3, r1	; 0x03
    3258:	12 82       	std	Z+2, r1	; 0x02
    325a:	b0 93 05 04 	sts	0x0405, r27	; 0x800405 <__brkval+0x1>
    325e:	a0 93 04 04 	sts	0x0404, r26	; 0x800404 <__brkval>
    3262:	df 91       	pop	r29
    3264:	cf 91       	pop	r28
    3266:	08 95       	ret

00003268 <sprintf>:
    3268:	0f 93       	push	r16
    326a:	1f 93       	push	r17
    326c:	cf 93       	push	r28
    326e:	df 93       	push	r29
    3270:	cd b7       	in	r28, 0x3d	; 61
    3272:	de b7       	in	r29, 0x3e	; 62
    3274:	2e 97       	sbiw	r28, 0x0e	; 14
    3276:	0f b6       	in	r0, 0x3f	; 63
    3278:	f8 94       	cli
    327a:	de bf       	out	0x3e, r29	; 62
    327c:	0f be       	out	0x3f, r0	; 63
    327e:	cd bf       	out	0x3d, r28	; 61
    3280:	0d 89       	ldd	r16, Y+21	; 0x15
    3282:	1e 89       	ldd	r17, Y+22	; 0x16
    3284:	86 e0       	ldi	r24, 0x06	; 6
    3286:	8c 83       	std	Y+4, r24	; 0x04
    3288:	1a 83       	std	Y+2, r17	; 0x02
    328a:	09 83       	std	Y+1, r16	; 0x01
    328c:	8f ef       	ldi	r24, 0xFF	; 255
    328e:	9f e7       	ldi	r25, 0x7F	; 127
    3290:	9e 83       	std	Y+6, r25	; 0x06
    3292:	8d 83       	std	Y+5, r24	; 0x05
    3294:	ae 01       	movw	r20, r28
    3296:	47 5e       	subi	r20, 0xE7	; 231
    3298:	5f 4f       	sbci	r21, 0xFF	; 255
    329a:	6f 89       	ldd	r22, Y+23	; 0x17
    329c:	78 8d       	ldd	r23, Y+24	; 0x18
    329e:	ce 01       	movw	r24, r28
    32a0:	01 96       	adiw	r24, 0x01	; 1
    32a2:	10 d0       	rcall	.+32     	; 0x32c4 <vfprintf>
    32a4:	ef 81       	ldd	r30, Y+7	; 0x07
    32a6:	f8 85       	ldd	r31, Y+8	; 0x08
    32a8:	e0 0f       	add	r30, r16
    32aa:	f1 1f       	adc	r31, r17
    32ac:	10 82       	st	Z, r1
    32ae:	2e 96       	adiw	r28, 0x0e	; 14
    32b0:	0f b6       	in	r0, 0x3f	; 63
    32b2:	f8 94       	cli
    32b4:	de bf       	out	0x3e, r29	; 62
    32b6:	0f be       	out	0x3f, r0	; 63
    32b8:	cd bf       	out	0x3d, r28	; 61
    32ba:	df 91       	pop	r29
    32bc:	cf 91       	pop	r28
    32be:	1f 91       	pop	r17
    32c0:	0f 91       	pop	r16
    32c2:	08 95       	ret

000032c4 <vfprintf>:
    32c4:	2f 92       	push	r2
    32c6:	3f 92       	push	r3
    32c8:	4f 92       	push	r4
    32ca:	5f 92       	push	r5
    32cc:	6f 92       	push	r6
    32ce:	7f 92       	push	r7
    32d0:	8f 92       	push	r8
    32d2:	9f 92       	push	r9
    32d4:	af 92       	push	r10
    32d6:	bf 92       	push	r11
    32d8:	cf 92       	push	r12
    32da:	df 92       	push	r13
    32dc:	ef 92       	push	r14
    32de:	ff 92       	push	r15
    32e0:	0f 93       	push	r16
    32e2:	1f 93       	push	r17
    32e4:	cf 93       	push	r28
    32e6:	df 93       	push	r29
    32e8:	cd b7       	in	r28, 0x3d	; 61
    32ea:	de b7       	in	r29, 0x3e	; 62
    32ec:	2b 97       	sbiw	r28, 0x0b	; 11
    32ee:	0f b6       	in	r0, 0x3f	; 63
    32f0:	f8 94       	cli
    32f2:	de bf       	out	0x3e, r29	; 62
    32f4:	0f be       	out	0x3f, r0	; 63
    32f6:	cd bf       	out	0x3d, r28	; 61
    32f8:	6c 01       	movw	r12, r24
    32fa:	7b 01       	movw	r14, r22
    32fc:	8a 01       	movw	r16, r20
    32fe:	fc 01       	movw	r30, r24
    3300:	17 82       	std	Z+7, r1	; 0x07
    3302:	16 82       	std	Z+6, r1	; 0x06
    3304:	83 81       	ldd	r24, Z+3	; 0x03
    3306:	81 ff       	sbrs	r24, 1
    3308:	bf c1       	rjmp	.+894    	; 0x3688 <vfprintf+0x3c4>
    330a:	ce 01       	movw	r24, r28
    330c:	01 96       	adiw	r24, 0x01	; 1
    330e:	3c 01       	movw	r6, r24
    3310:	f6 01       	movw	r30, r12
    3312:	93 81       	ldd	r25, Z+3	; 0x03
    3314:	f7 01       	movw	r30, r14
    3316:	93 fd       	sbrc	r25, 3
    3318:	85 91       	lpm	r24, Z+
    331a:	93 ff       	sbrs	r25, 3
    331c:	81 91       	ld	r24, Z+
    331e:	7f 01       	movw	r14, r30
    3320:	88 23       	and	r24, r24
    3322:	09 f4       	brne	.+2      	; 0x3326 <vfprintf+0x62>
    3324:	ad c1       	rjmp	.+858    	; 0x3680 <vfprintf+0x3bc>
    3326:	85 32       	cpi	r24, 0x25	; 37
    3328:	39 f4       	brne	.+14     	; 0x3338 <vfprintf+0x74>
    332a:	93 fd       	sbrc	r25, 3
    332c:	85 91       	lpm	r24, Z+
    332e:	93 ff       	sbrs	r25, 3
    3330:	81 91       	ld	r24, Z+
    3332:	7f 01       	movw	r14, r30
    3334:	85 32       	cpi	r24, 0x25	; 37
    3336:	21 f4       	brne	.+8      	; 0x3340 <vfprintf+0x7c>
    3338:	b6 01       	movw	r22, r12
    333a:	90 e0       	ldi	r25, 0x00	; 0
    333c:	d6 d1       	rcall	.+940    	; 0x36ea <fputc>
    333e:	e8 cf       	rjmp	.-48     	; 0x3310 <vfprintf+0x4c>
    3340:	91 2c       	mov	r9, r1
    3342:	21 2c       	mov	r2, r1
    3344:	31 2c       	mov	r3, r1
    3346:	ff e1       	ldi	r31, 0x1F	; 31
    3348:	f3 15       	cp	r31, r3
    334a:	d8 f0       	brcs	.+54     	; 0x3382 <vfprintf+0xbe>
    334c:	8b 32       	cpi	r24, 0x2B	; 43
    334e:	79 f0       	breq	.+30     	; 0x336e <vfprintf+0xaa>
    3350:	38 f4       	brcc	.+14     	; 0x3360 <vfprintf+0x9c>
    3352:	80 32       	cpi	r24, 0x20	; 32
    3354:	79 f0       	breq	.+30     	; 0x3374 <vfprintf+0xb0>
    3356:	83 32       	cpi	r24, 0x23	; 35
    3358:	a1 f4       	brne	.+40     	; 0x3382 <vfprintf+0xbe>
    335a:	23 2d       	mov	r18, r3
    335c:	20 61       	ori	r18, 0x10	; 16
    335e:	1d c0       	rjmp	.+58     	; 0x339a <vfprintf+0xd6>
    3360:	8d 32       	cpi	r24, 0x2D	; 45
    3362:	61 f0       	breq	.+24     	; 0x337c <vfprintf+0xb8>
    3364:	80 33       	cpi	r24, 0x30	; 48
    3366:	69 f4       	brne	.+26     	; 0x3382 <vfprintf+0xbe>
    3368:	23 2d       	mov	r18, r3
    336a:	21 60       	ori	r18, 0x01	; 1
    336c:	16 c0       	rjmp	.+44     	; 0x339a <vfprintf+0xd6>
    336e:	83 2d       	mov	r24, r3
    3370:	82 60       	ori	r24, 0x02	; 2
    3372:	38 2e       	mov	r3, r24
    3374:	e3 2d       	mov	r30, r3
    3376:	e4 60       	ori	r30, 0x04	; 4
    3378:	3e 2e       	mov	r3, r30
    337a:	2a c0       	rjmp	.+84     	; 0x33d0 <vfprintf+0x10c>
    337c:	f3 2d       	mov	r31, r3
    337e:	f8 60       	ori	r31, 0x08	; 8
    3380:	1d c0       	rjmp	.+58     	; 0x33bc <vfprintf+0xf8>
    3382:	37 fc       	sbrc	r3, 7
    3384:	2d c0       	rjmp	.+90     	; 0x33e0 <vfprintf+0x11c>
    3386:	20 ed       	ldi	r18, 0xD0	; 208
    3388:	28 0f       	add	r18, r24
    338a:	2a 30       	cpi	r18, 0x0A	; 10
    338c:	40 f0       	brcs	.+16     	; 0x339e <vfprintf+0xda>
    338e:	8e 32       	cpi	r24, 0x2E	; 46
    3390:	b9 f4       	brne	.+46     	; 0x33c0 <vfprintf+0xfc>
    3392:	36 fc       	sbrc	r3, 6
    3394:	75 c1       	rjmp	.+746    	; 0x3680 <vfprintf+0x3bc>
    3396:	23 2d       	mov	r18, r3
    3398:	20 64       	ori	r18, 0x40	; 64
    339a:	32 2e       	mov	r3, r18
    339c:	19 c0       	rjmp	.+50     	; 0x33d0 <vfprintf+0x10c>
    339e:	36 fe       	sbrs	r3, 6
    33a0:	06 c0       	rjmp	.+12     	; 0x33ae <vfprintf+0xea>
    33a2:	8a e0       	ldi	r24, 0x0A	; 10
    33a4:	98 9e       	mul	r9, r24
    33a6:	20 0d       	add	r18, r0
    33a8:	11 24       	eor	r1, r1
    33aa:	92 2e       	mov	r9, r18
    33ac:	11 c0       	rjmp	.+34     	; 0x33d0 <vfprintf+0x10c>
    33ae:	ea e0       	ldi	r30, 0x0A	; 10
    33b0:	2e 9e       	mul	r2, r30
    33b2:	20 0d       	add	r18, r0
    33b4:	11 24       	eor	r1, r1
    33b6:	22 2e       	mov	r2, r18
    33b8:	f3 2d       	mov	r31, r3
    33ba:	f0 62       	ori	r31, 0x20	; 32
    33bc:	3f 2e       	mov	r3, r31
    33be:	08 c0       	rjmp	.+16     	; 0x33d0 <vfprintf+0x10c>
    33c0:	8c 36       	cpi	r24, 0x6C	; 108
    33c2:	21 f4       	brne	.+8      	; 0x33cc <vfprintf+0x108>
    33c4:	83 2d       	mov	r24, r3
    33c6:	80 68       	ori	r24, 0x80	; 128
    33c8:	38 2e       	mov	r3, r24
    33ca:	02 c0       	rjmp	.+4      	; 0x33d0 <vfprintf+0x10c>
    33cc:	88 36       	cpi	r24, 0x68	; 104
    33ce:	41 f4       	brne	.+16     	; 0x33e0 <vfprintf+0x11c>
    33d0:	f7 01       	movw	r30, r14
    33d2:	93 fd       	sbrc	r25, 3
    33d4:	85 91       	lpm	r24, Z+
    33d6:	93 ff       	sbrs	r25, 3
    33d8:	81 91       	ld	r24, Z+
    33da:	7f 01       	movw	r14, r30
    33dc:	81 11       	cpse	r24, r1
    33de:	b3 cf       	rjmp	.-154    	; 0x3346 <vfprintf+0x82>
    33e0:	98 2f       	mov	r25, r24
    33e2:	9f 7d       	andi	r25, 0xDF	; 223
    33e4:	95 54       	subi	r25, 0x45	; 69
    33e6:	93 30       	cpi	r25, 0x03	; 3
    33e8:	28 f4       	brcc	.+10     	; 0x33f4 <vfprintf+0x130>
    33ea:	0c 5f       	subi	r16, 0xFC	; 252
    33ec:	1f 4f       	sbci	r17, 0xFF	; 255
    33ee:	9f e3       	ldi	r25, 0x3F	; 63
    33f0:	99 83       	std	Y+1, r25	; 0x01
    33f2:	0d c0       	rjmp	.+26     	; 0x340e <vfprintf+0x14a>
    33f4:	83 36       	cpi	r24, 0x63	; 99
    33f6:	31 f0       	breq	.+12     	; 0x3404 <vfprintf+0x140>
    33f8:	83 37       	cpi	r24, 0x73	; 115
    33fa:	71 f0       	breq	.+28     	; 0x3418 <vfprintf+0x154>
    33fc:	83 35       	cpi	r24, 0x53	; 83
    33fe:	09 f0       	breq	.+2      	; 0x3402 <vfprintf+0x13e>
    3400:	55 c0       	rjmp	.+170    	; 0x34ac <vfprintf+0x1e8>
    3402:	20 c0       	rjmp	.+64     	; 0x3444 <vfprintf+0x180>
    3404:	f8 01       	movw	r30, r16
    3406:	80 81       	ld	r24, Z
    3408:	89 83       	std	Y+1, r24	; 0x01
    340a:	0e 5f       	subi	r16, 0xFE	; 254
    340c:	1f 4f       	sbci	r17, 0xFF	; 255
    340e:	88 24       	eor	r8, r8
    3410:	83 94       	inc	r8
    3412:	91 2c       	mov	r9, r1
    3414:	53 01       	movw	r10, r6
    3416:	12 c0       	rjmp	.+36     	; 0x343c <vfprintf+0x178>
    3418:	28 01       	movw	r4, r16
    341a:	f2 e0       	ldi	r31, 0x02	; 2
    341c:	4f 0e       	add	r4, r31
    341e:	51 1c       	adc	r5, r1
    3420:	f8 01       	movw	r30, r16
    3422:	a0 80       	ld	r10, Z
    3424:	b1 80       	ldd	r11, Z+1	; 0x01
    3426:	36 fe       	sbrs	r3, 6
    3428:	03 c0       	rjmp	.+6      	; 0x3430 <vfprintf+0x16c>
    342a:	69 2d       	mov	r22, r9
    342c:	70 e0       	ldi	r23, 0x00	; 0
    342e:	02 c0       	rjmp	.+4      	; 0x3434 <vfprintf+0x170>
    3430:	6f ef       	ldi	r22, 0xFF	; 255
    3432:	7f ef       	ldi	r23, 0xFF	; 255
    3434:	c5 01       	movw	r24, r10
    3436:	4e d1       	rcall	.+668    	; 0x36d4 <strnlen>
    3438:	4c 01       	movw	r8, r24
    343a:	82 01       	movw	r16, r4
    343c:	f3 2d       	mov	r31, r3
    343e:	ff 77       	andi	r31, 0x7F	; 127
    3440:	3f 2e       	mov	r3, r31
    3442:	15 c0       	rjmp	.+42     	; 0x346e <vfprintf+0x1aa>
    3444:	28 01       	movw	r4, r16
    3446:	22 e0       	ldi	r18, 0x02	; 2
    3448:	42 0e       	add	r4, r18
    344a:	51 1c       	adc	r5, r1
    344c:	f8 01       	movw	r30, r16
    344e:	a0 80       	ld	r10, Z
    3450:	b1 80       	ldd	r11, Z+1	; 0x01
    3452:	36 fe       	sbrs	r3, 6
    3454:	03 c0       	rjmp	.+6      	; 0x345c <vfprintf+0x198>
    3456:	69 2d       	mov	r22, r9
    3458:	70 e0       	ldi	r23, 0x00	; 0
    345a:	02 c0       	rjmp	.+4      	; 0x3460 <vfprintf+0x19c>
    345c:	6f ef       	ldi	r22, 0xFF	; 255
    345e:	7f ef       	ldi	r23, 0xFF	; 255
    3460:	c5 01       	movw	r24, r10
    3462:	2d d1       	rcall	.+602    	; 0x36be <strnlen_P>
    3464:	4c 01       	movw	r8, r24
    3466:	f3 2d       	mov	r31, r3
    3468:	f0 68       	ori	r31, 0x80	; 128
    346a:	3f 2e       	mov	r3, r31
    346c:	82 01       	movw	r16, r4
    346e:	33 fc       	sbrc	r3, 3
    3470:	19 c0       	rjmp	.+50     	; 0x34a4 <vfprintf+0x1e0>
    3472:	82 2d       	mov	r24, r2
    3474:	90 e0       	ldi	r25, 0x00	; 0
    3476:	88 16       	cp	r8, r24
    3478:	99 06       	cpc	r9, r25
    347a:	a0 f4       	brcc	.+40     	; 0x34a4 <vfprintf+0x1e0>
    347c:	b6 01       	movw	r22, r12
    347e:	80 e2       	ldi	r24, 0x20	; 32
    3480:	90 e0       	ldi	r25, 0x00	; 0
    3482:	33 d1       	rcall	.+614    	; 0x36ea <fputc>
    3484:	2a 94       	dec	r2
    3486:	f5 cf       	rjmp	.-22     	; 0x3472 <vfprintf+0x1ae>
    3488:	f5 01       	movw	r30, r10
    348a:	37 fc       	sbrc	r3, 7
    348c:	85 91       	lpm	r24, Z+
    348e:	37 fe       	sbrs	r3, 7
    3490:	81 91       	ld	r24, Z+
    3492:	5f 01       	movw	r10, r30
    3494:	b6 01       	movw	r22, r12
    3496:	90 e0       	ldi	r25, 0x00	; 0
    3498:	28 d1       	rcall	.+592    	; 0x36ea <fputc>
    349a:	21 10       	cpse	r2, r1
    349c:	2a 94       	dec	r2
    349e:	21 e0       	ldi	r18, 0x01	; 1
    34a0:	82 1a       	sub	r8, r18
    34a2:	91 08       	sbc	r9, r1
    34a4:	81 14       	cp	r8, r1
    34a6:	91 04       	cpc	r9, r1
    34a8:	79 f7       	brne	.-34     	; 0x3488 <vfprintf+0x1c4>
    34aa:	e1 c0       	rjmp	.+450    	; 0x366e <vfprintf+0x3aa>
    34ac:	84 36       	cpi	r24, 0x64	; 100
    34ae:	11 f0       	breq	.+4      	; 0x34b4 <vfprintf+0x1f0>
    34b0:	89 36       	cpi	r24, 0x69	; 105
    34b2:	39 f5       	brne	.+78     	; 0x3502 <vfprintf+0x23e>
    34b4:	f8 01       	movw	r30, r16
    34b6:	37 fe       	sbrs	r3, 7
    34b8:	07 c0       	rjmp	.+14     	; 0x34c8 <vfprintf+0x204>
    34ba:	60 81       	ld	r22, Z
    34bc:	71 81       	ldd	r23, Z+1	; 0x01
    34be:	82 81       	ldd	r24, Z+2	; 0x02
    34c0:	93 81       	ldd	r25, Z+3	; 0x03
    34c2:	0c 5f       	subi	r16, 0xFC	; 252
    34c4:	1f 4f       	sbci	r17, 0xFF	; 255
    34c6:	08 c0       	rjmp	.+16     	; 0x34d8 <vfprintf+0x214>
    34c8:	60 81       	ld	r22, Z
    34ca:	71 81       	ldd	r23, Z+1	; 0x01
    34cc:	07 2e       	mov	r0, r23
    34ce:	00 0c       	add	r0, r0
    34d0:	88 0b       	sbc	r24, r24
    34d2:	99 0b       	sbc	r25, r25
    34d4:	0e 5f       	subi	r16, 0xFE	; 254
    34d6:	1f 4f       	sbci	r17, 0xFF	; 255
    34d8:	f3 2d       	mov	r31, r3
    34da:	ff 76       	andi	r31, 0x6F	; 111
    34dc:	3f 2e       	mov	r3, r31
    34de:	97 ff       	sbrs	r25, 7
    34e0:	09 c0       	rjmp	.+18     	; 0x34f4 <vfprintf+0x230>
    34e2:	90 95       	com	r25
    34e4:	80 95       	com	r24
    34e6:	70 95       	com	r23
    34e8:	61 95       	neg	r22
    34ea:	7f 4f       	sbci	r23, 0xFF	; 255
    34ec:	8f 4f       	sbci	r24, 0xFF	; 255
    34ee:	9f 4f       	sbci	r25, 0xFF	; 255
    34f0:	f0 68       	ori	r31, 0x80	; 128
    34f2:	3f 2e       	mov	r3, r31
    34f4:	2a e0       	ldi	r18, 0x0A	; 10
    34f6:	30 e0       	ldi	r19, 0x00	; 0
    34f8:	a3 01       	movw	r20, r6
    34fa:	33 d1       	rcall	.+614    	; 0x3762 <__ultoa_invert>
    34fc:	88 2e       	mov	r8, r24
    34fe:	86 18       	sub	r8, r6
    3500:	44 c0       	rjmp	.+136    	; 0x358a <vfprintf+0x2c6>
    3502:	85 37       	cpi	r24, 0x75	; 117
    3504:	31 f4       	brne	.+12     	; 0x3512 <vfprintf+0x24e>
    3506:	23 2d       	mov	r18, r3
    3508:	2f 7e       	andi	r18, 0xEF	; 239
    350a:	b2 2e       	mov	r11, r18
    350c:	2a e0       	ldi	r18, 0x0A	; 10
    350e:	30 e0       	ldi	r19, 0x00	; 0
    3510:	25 c0       	rjmp	.+74     	; 0x355c <vfprintf+0x298>
    3512:	93 2d       	mov	r25, r3
    3514:	99 7f       	andi	r25, 0xF9	; 249
    3516:	b9 2e       	mov	r11, r25
    3518:	8f 36       	cpi	r24, 0x6F	; 111
    351a:	c1 f0       	breq	.+48     	; 0x354c <vfprintf+0x288>
    351c:	18 f4       	brcc	.+6      	; 0x3524 <vfprintf+0x260>
    351e:	88 35       	cpi	r24, 0x58	; 88
    3520:	79 f0       	breq	.+30     	; 0x3540 <vfprintf+0x27c>
    3522:	ae c0       	rjmp	.+348    	; 0x3680 <vfprintf+0x3bc>
    3524:	80 37       	cpi	r24, 0x70	; 112
    3526:	19 f0       	breq	.+6      	; 0x352e <vfprintf+0x26a>
    3528:	88 37       	cpi	r24, 0x78	; 120
    352a:	21 f0       	breq	.+8      	; 0x3534 <vfprintf+0x270>
    352c:	a9 c0       	rjmp	.+338    	; 0x3680 <vfprintf+0x3bc>
    352e:	e9 2f       	mov	r30, r25
    3530:	e0 61       	ori	r30, 0x10	; 16
    3532:	be 2e       	mov	r11, r30
    3534:	b4 fe       	sbrs	r11, 4
    3536:	0d c0       	rjmp	.+26     	; 0x3552 <vfprintf+0x28e>
    3538:	fb 2d       	mov	r31, r11
    353a:	f4 60       	ori	r31, 0x04	; 4
    353c:	bf 2e       	mov	r11, r31
    353e:	09 c0       	rjmp	.+18     	; 0x3552 <vfprintf+0x28e>
    3540:	34 fe       	sbrs	r3, 4
    3542:	0a c0       	rjmp	.+20     	; 0x3558 <vfprintf+0x294>
    3544:	29 2f       	mov	r18, r25
    3546:	26 60       	ori	r18, 0x06	; 6
    3548:	b2 2e       	mov	r11, r18
    354a:	06 c0       	rjmp	.+12     	; 0x3558 <vfprintf+0x294>
    354c:	28 e0       	ldi	r18, 0x08	; 8
    354e:	30 e0       	ldi	r19, 0x00	; 0
    3550:	05 c0       	rjmp	.+10     	; 0x355c <vfprintf+0x298>
    3552:	20 e1       	ldi	r18, 0x10	; 16
    3554:	30 e0       	ldi	r19, 0x00	; 0
    3556:	02 c0       	rjmp	.+4      	; 0x355c <vfprintf+0x298>
    3558:	20 e1       	ldi	r18, 0x10	; 16
    355a:	32 e0       	ldi	r19, 0x02	; 2
    355c:	f8 01       	movw	r30, r16
    355e:	b7 fe       	sbrs	r11, 7
    3560:	07 c0       	rjmp	.+14     	; 0x3570 <vfprintf+0x2ac>
    3562:	60 81       	ld	r22, Z
    3564:	71 81       	ldd	r23, Z+1	; 0x01
    3566:	82 81       	ldd	r24, Z+2	; 0x02
    3568:	93 81       	ldd	r25, Z+3	; 0x03
    356a:	0c 5f       	subi	r16, 0xFC	; 252
    356c:	1f 4f       	sbci	r17, 0xFF	; 255
    356e:	06 c0       	rjmp	.+12     	; 0x357c <vfprintf+0x2b8>
    3570:	60 81       	ld	r22, Z
    3572:	71 81       	ldd	r23, Z+1	; 0x01
    3574:	80 e0       	ldi	r24, 0x00	; 0
    3576:	90 e0       	ldi	r25, 0x00	; 0
    3578:	0e 5f       	subi	r16, 0xFE	; 254
    357a:	1f 4f       	sbci	r17, 0xFF	; 255
    357c:	a3 01       	movw	r20, r6
    357e:	f1 d0       	rcall	.+482    	; 0x3762 <__ultoa_invert>
    3580:	88 2e       	mov	r8, r24
    3582:	86 18       	sub	r8, r6
    3584:	fb 2d       	mov	r31, r11
    3586:	ff 77       	andi	r31, 0x7F	; 127
    3588:	3f 2e       	mov	r3, r31
    358a:	36 fe       	sbrs	r3, 6
    358c:	0d c0       	rjmp	.+26     	; 0x35a8 <vfprintf+0x2e4>
    358e:	23 2d       	mov	r18, r3
    3590:	2e 7f       	andi	r18, 0xFE	; 254
    3592:	a2 2e       	mov	r10, r18
    3594:	89 14       	cp	r8, r9
    3596:	58 f4       	brcc	.+22     	; 0x35ae <vfprintf+0x2ea>
    3598:	34 fe       	sbrs	r3, 4
    359a:	0b c0       	rjmp	.+22     	; 0x35b2 <vfprintf+0x2ee>
    359c:	32 fc       	sbrc	r3, 2
    359e:	09 c0       	rjmp	.+18     	; 0x35b2 <vfprintf+0x2ee>
    35a0:	83 2d       	mov	r24, r3
    35a2:	8e 7e       	andi	r24, 0xEE	; 238
    35a4:	a8 2e       	mov	r10, r24
    35a6:	05 c0       	rjmp	.+10     	; 0x35b2 <vfprintf+0x2ee>
    35a8:	b8 2c       	mov	r11, r8
    35aa:	a3 2c       	mov	r10, r3
    35ac:	03 c0       	rjmp	.+6      	; 0x35b4 <vfprintf+0x2f0>
    35ae:	b8 2c       	mov	r11, r8
    35b0:	01 c0       	rjmp	.+2      	; 0x35b4 <vfprintf+0x2f0>
    35b2:	b9 2c       	mov	r11, r9
    35b4:	a4 fe       	sbrs	r10, 4
    35b6:	0f c0       	rjmp	.+30     	; 0x35d6 <vfprintf+0x312>
    35b8:	fe 01       	movw	r30, r28
    35ba:	e8 0d       	add	r30, r8
    35bc:	f1 1d       	adc	r31, r1
    35be:	80 81       	ld	r24, Z
    35c0:	80 33       	cpi	r24, 0x30	; 48
    35c2:	21 f4       	brne	.+8      	; 0x35cc <vfprintf+0x308>
    35c4:	9a 2d       	mov	r25, r10
    35c6:	99 7e       	andi	r25, 0xE9	; 233
    35c8:	a9 2e       	mov	r10, r25
    35ca:	09 c0       	rjmp	.+18     	; 0x35de <vfprintf+0x31a>
    35cc:	a2 fe       	sbrs	r10, 2
    35ce:	06 c0       	rjmp	.+12     	; 0x35dc <vfprintf+0x318>
    35d0:	b3 94       	inc	r11
    35d2:	b3 94       	inc	r11
    35d4:	04 c0       	rjmp	.+8      	; 0x35de <vfprintf+0x31a>
    35d6:	8a 2d       	mov	r24, r10
    35d8:	86 78       	andi	r24, 0x86	; 134
    35da:	09 f0       	breq	.+2      	; 0x35de <vfprintf+0x31a>
    35dc:	b3 94       	inc	r11
    35de:	a3 fc       	sbrc	r10, 3
    35e0:	10 c0       	rjmp	.+32     	; 0x3602 <vfprintf+0x33e>
    35e2:	a0 fe       	sbrs	r10, 0
    35e4:	06 c0       	rjmp	.+12     	; 0x35f2 <vfprintf+0x32e>
    35e6:	b2 14       	cp	r11, r2
    35e8:	80 f4       	brcc	.+32     	; 0x360a <vfprintf+0x346>
    35ea:	28 0c       	add	r2, r8
    35ec:	92 2c       	mov	r9, r2
    35ee:	9b 18       	sub	r9, r11
    35f0:	0d c0       	rjmp	.+26     	; 0x360c <vfprintf+0x348>
    35f2:	b2 14       	cp	r11, r2
    35f4:	58 f4       	brcc	.+22     	; 0x360c <vfprintf+0x348>
    35f6:	b6 01       	movw	r22, r12
    35f8:	80 e2       	ldi	r24, 0x20	; 32
    35fa:	90 e0       	ldi	r25, 0x00	; 0
    35fc:	76 d0       	rcall	.+236    	; 0x36ea <fputc>
    35fe:	b3 94       	inc	r11
    3600:	f8 cf       	rjmp	.-16     	; 0x35f2 <vfprintf+0x32e>
    3602:	b2 14       	cp	r11, r2
    3604:	18 f4       	brcc	.+6      	; 0x360c <vfprintf+0x348>
    3606:	2b 18       	sub	r2, r11
    3608:	02 c0       	rjmp	.+4      	; 0x360e <vfprintf+0x34a>
    360a:	98 2c       	mov	r9, r8
    360c:	21 2c       	mov	r2, r1
    360e:	a4 fe       	sbrs	r10, 4
    3610:	0f c0       	rjmp	.+30     	; 0x3630 <vfprintf+0x36c>
    3612:	b6 01       	movw	r22, r12
    3614:	80 e3       	ldi	r24, 0x30	; 48
    3616:	90 e0       	ldi	r25, 0x00	; 0
    3618:	68 d0       	rcall	.+208    	; 0x36ea <fputc>
    361a:	a2 fe       	sbrs	r10, 2
    361c:	16 c0       	rjmp	.+44     	; 0x364a <vfprintf+0x386>
    361e:	a1 fc       	sbrc	r10, 1
    3620:	03 c0       	rjmp	.+6      	; 0x3628 <vfprintf+0x364>
    3622:	88 e7       	ldi	r24, 0x78	; 120
    3624:	90 e0       	ldi	r25, 0x00	; 0
    3626:	02 c0       	rjmp	.+4      	; 0x362c <vfprintf+0x368>
    3628:	88 e5       	ldi	r24, 0x58	; 88
    362a:	90 e0       	ldi	r25, 0x00	; 0
    362c:	b6 01       	movw	r22, r12
    362e:	0c c0       	rjmp	.+24     	; 0x3648 <vfprintf+0x384>
    3630:	8a 2d       	mov	r24, r10
    3632:	86 78       	andi	r24, 0x86	; 134
    3634:	51 f0       	breq	.+20     	; 0x364a <vfprintf+0x386>
    3636:	a1 fe       	sbrs	r10, 1
    3638:	02 c0       	rjmp	.+4      	; 0x363e <vfprintf+0x37a>
    363a:	8b e2       	ldi	r24, 0x2B	; 43
    363c:	01 c0       	rjmp	.+2      	; 0x3640 <vfprintf+0x37c>
    363e:	80 e2       	ldi	r24, 0x20	; 32
    3640:	a7 fc       	sbrc	r10, 7
    3642:	8d e2       	ldi	r24, 0x2D	; 45
    3644:	b6 01       	movw	r22, r12
    3646:	90 e0       	ldi	r25, 0x00	; 0
    3648:	50 d0       	rcall	.+160    	; 0x36ea <fputc>
    364a:	89 14       	cp	r8, r9
    364c:	30 f4       	brcc	.+12     	; 0x365a <vfprintf+0x396>
    364e:	b6 01       	movw	r22, r12
    3650:	80 e3       	ldi	r24, 0x30	; 48
    3652:	90 e0       	ldi	r25, 0x00	; 0
    3654:	4a d0       	rcall	.+148    	; 0x36ea <fputc>
    3656:	9a 94       	dec	r9
    3658:	f8 cf       	rjmp	.-16     	; 0x364a <vfprintf+0x386>
    365a:	8a 94       	dec	r8
    365c:	f3 01       	movw	r30, r6
    365e:	e8 0d       	add	r30, r8
    3660:	f1 1d       	adc	r31, r1
    3662:	80 81       	ld	r24, Z
    3664:	b6 01       	movw	r22, r12
    3666:	90 e0       	ldi	r25, 0x00	; 0
    3668:	40 d0       	rcall	.+128    	; 0x36ea <fputc>
    366a:	81 10       	cpse	r8, r1
    366c:	f6 cf       	rjmp	.-20     	; 0x365a <vfprintf+0x396>
    366e:	22 20       	and	r2, r2
    3670:	09 f4       	brne	.+2      	; 0x3674 <vfprintf+0x3b0>
    3672:	4e ce       	rjmp	.-868    	; 0x3310 <vfprintf+0x4c>
    3674:	b6 01       	movw	r22, r12
    3676:	80 e2       	ldi	r24, 0x20	; 32
    3678:	90 e0       	ldi	r25, 0x00	; 0
    367a:	37 d0       	rcall	.+110    	; 0x36ea <fputc>
    367c:	2a 94       	dec	r2
    367e:	f7 cf       	rjmp	.-18     	; 0x366e <vfprintf+0x3aa>
    3680:	f6 01       	movw	r30, r12
    3682:	86 81       	ldd	r24, Z+6	; 0x06
    3684:	97 81       	ldd	r25, Z+7	; 0x07
    3686:	02 c0       	rjmp	.+4      	; 0x368c <vfprintf+0x3c8>
    3688:	8f ef       	ldi	r24, 0xFF	; 255
    368a:	9f ef       	ldi	r25, 0xFF	; 255
    368c:	2b 96       	adiw	r28, 0x0b	; 11
    368e:	0f b6       	in	r0, 0x3f	; 63
    3690:	f8 94       	cli
    3692:	de bf       	out	0x3e, r29	; 62
    3694:	0f be       	out	0x3f, r0	; 63
    3696:	cd bf       	out	0x3d, r28	; 61
    3698:	df 91       	pop	r29
    369a:	cf 91       	pop	r28
    369c:	1f 91       	pop	r17
    369e:	0f 91       	pop	r16
    36a0:	ff 90       	pop	r15
    36a2:	ef 90       	pop	r14
    36a4:	df 90       	pop	r13
    36a6:	cf 90       	pop	r12
    36a8:	bf 90       	pop	r11
    36aa:	af 90       	pop	r10
    36ac:	9f 90       	pop	r9
    36ae:	8f 90       	pop	r8
    36b0:	7f 90       	pop	r7
    36b2:	6f 90       	pop	r6
    36b4:	5f 90       	pop	r5
    36b6:	4f 90       	pop	r4
    36b8:	3f 90       	pop	r3
    36ba:	2f 90       	pop	r2
    36bc:	08 95       	ret

000036be <strnlen_P>:
    36be:	fc 01       	movw	r30, r24
    36c0:	05 90       	lpm	r0, Z+
    36c2:	61 50       	subi	r22, 0x01	; 1
    36c4:	70 40       	sbci	r23, 0x00	; 0
    36c6:	01 10       	cpse	r0, r1
    36c8:	d8 f7       	brcc	.-10     	; 0x36c0 <strnlen_P+0x2>
    36ca:	80 95       	com	r24
    36cc:	90 95       	com	r25
    36ce:	8e 0f       	add	r24, r30
    36d0:	9f 1f       	adc	r25, r31
    36d2:	08 95       	ret

000036d4 <strnlen>:
    36d4:	fc 01       	movw	r30, r24
    36d6:	61 50       	subi	r22, 0x01	; 1
    36d8:	70 40       	sbci	r23, 0x00	; 0
    36da:	01 90       	ld	r0, Z+
    36dc:	01 10       	cpse	r0, r1
    36de:	d8 f7       	brcc	.-10     	; 0x36d6 <strnlen+0x2>
    36e0:	80 95       	com	r24
    36e2:	90 95       	com	r25
    36e4:	8e 0f       	add	r24, r30
    36e6:	9f 1f       	adc	r25, r31
    36e8:	08 95       	ret

000036ea <fputc>:
    36ea:	0f 93       	push	r16
    36ec:	1f 93       	push	r17
    36ee:	cf 93       	push	r28
    36f0:	df 93       	push	r29
    36f2:	fb 01       	movw	r30, r22
    36f4:	23 81       	ldd	r18, Z+3	; 0x03
    36f6:	21 fd       	sbrc	r18, 1
    36f8:	03 c0       	rjmp	.+6      	; 0x3700 <fputc+0x16>
    36fa:	8f ef       	ldi	r24, 0xFF	; 255
    36fc:	9f ef       	ldi	r25, 0xFF	; 255
    36fe:	2c c0       	rjmp	.+88     	; 0x3758 <fputc+0x6e>
    3700:	22 ff       	sbrs	r18, 2
    3702:	16 c0       	rjmp	.+44     	; 0x3730 <fputc+0x46>
    3704:	46 81       	ldd	r20, Z+6	; 0x06
    3706:	57 81       	ldd	r21, Z+7	; 0x07
    3708:	24 81       	ldd	r18, Z+4	; 0x04
    370a:	35 81       	ldd	r19, Z+5	; 0x05
    370c:	42 17       	cp	r20, r18
    370e:	53 07       	cpc	r21, r19
    3710:	44 f4       	brge	.+16     	; 0x3722 <fputc+0x38>
    3712:	a0 81       	ld	r26, Z
    3714:	b1 81       	ldd	r27, Z+1	; 0x01
    3716:	9d 01       	movw	r18, r26
    3718:	2f 5f       	subi	r18, 0xFF	; 255
    371a:	3f 4f       	sbci	r19, 0xFF	; 255
    371c:	31 83       	std	Z+1, r19	; 0x01
    371e:	20 83       	st	Z, r18
    3720:	8c 93       	st	X, r24
    3722:	26 81       	ldd	r18, Z+6	; 0x06
    3724:	37 81       	ldd	r19, Z+7	; 0x07
    3726:	2f 5f       	subi	r18, 0xFF	; 255
    3728:	3f 4f       	sbci	r19, 0xFF	; 255
    372a:	37 83       	std	Z+7, r19	; 0x07
    372c:	26 83       	std	Z+6, r18	; 0x06
    372e:	14 c0       	rjmp	.+40     	; 0x3758 <fputc+0x6e>
    3730:	8b 01       	movw	r16, r22
    3732:	ec 01       	movw	r28, r24
    3734:	fb 01       	movw	r30, r22
    3736:	00 84       	ldd	r0, Z+8	; 0x08
    3738:	f1 85       	ldd	r31, Z+9	; 0x09
    373a:	e0 2d       	mov	r30, r0
    373c:	09 95       	icall
    373e:	89 2b       	or	r24, r25
    3740:	e1 f6       	brne	.-72     	; 0x36fa <fputc+0x10>
    3742:	d8 01       	movw	r26, r16
    3744:	16 96       	adiw	r26, 0x06	; 6
    3746:	8d 91       	ld	r24, X+
    3748:	9c 91       	ld	r25, X
    374a:	17 97       	sbiw	r26, 0x07	; 7
    374c:	01 96       	adiw	r24, 0x01	; 1
    374e:	17 96       	adiw	r26, 0x07	; 7
    3750:	9c 93       	st	X, r25
    3752:	8e 93       	st	-X, r24
    3754:	16 97       	sbiw	r26, 0x06	; 6
    3756:	ce 01       	movw	r24, r28
    3758:	df 91       	pop	r29
    375a:	cf 91       	pop	r28
    375c:	1f 91       	pop	r17
    375e:	0f 91       	pop	r16
    3760:	08 95       	ret

00003762 <__ultoa_invert>:
    3762:	fa 01       	movw	r30, r20
    3764:	aa 27       	eor	r26, r26
    3766:	28 30       	cpi	r18, 0x08	; 8
    3768:	51 f1       	breq	.+84     	; 0x37be <__ultoa_invert+0x5c>
    376a:	20 31       	cpi	r18, 0x10	; 16
    376c:	81 f1       	breq	.+96     	; 0x37ce <__ultoa_invert+0x6c>
    376e:	e8 94       	clt
    3770:	6f 93       	push	r22
    3772:	6e 7f       	andi	r22, 0xFE	; 254
    3774:	6e 5f       	subi	r22, 0xFE	; 254
    3776:	7f 4f       	sbci	r23, 0xFF	; 255
    3778:	8f 4f       	sbci	r24, 0xFF	; 255
    377a:	9f 4f       	sbci	r25, 0xFF	; 255
    377c:	af 4f       	sbci	r26, 0xFF	; 255
    377e:	b1 e0       	ldi	r27, 0x01	; 1
    3780:	3e d0       	rcall	.+124    	; 0x37fe <__ultoa_invert+0x9c>
    3782:	b4 e0       	ldi	r27, 0x04	; 4
    3784:	3c d0       	rcall	.+120    	; 0x37fe <__ultoa_invert+0x9c>
    3786:	67 0f       	add	r22, r23
    3788:	78 1f       	adc	r23, r24
    378a:	89 1f       	adc	r24, r25
    378c:	9a 1f       	adc	r25, r26
    378e:	a1 1d       	adc	r26, r1
    3790:	68 0f       	add	r22, r24
    3792:	79 1f       	adc	r23, r25
    3794:	8a 1f       	adc	r24, r26
    3796:	91 1d       	adc	r25, r1
    3798:	a1 1d       	adc	r26, r1
    379a:	6a 0f       	add	r22, r26
    379c:	71 1d       	adc	r23, r1
    379e:	81 1d       	adc	r24, r1
    37a0:	91 1d       	adc	r25, r1
    37a2:	a1 1d       	adc	r26, r1
    37a4:	20 d0       	rcall	.+64     	; 0x37e6 <__ultoa_invert+0x84>
    37a6:	09 f4       	brne	.+2      	; 0x37aa <__ultoa_invert+0x48>
    37a8:	68 94       	set
    37aa:	3f 91       	pop	r19
    37ac:	2a e0       	ldi	r18, 0x0A	; 10
    37ae:	26 9f       	mul	r18, r22
    37b0:	11 24       	eor	r1, r1
    37b2:	30 19       	sub	r19, r0
    37b4:	30 5d       	subi	r19, 0xD0	; 208
    37b6:	31 93       	st	Z+, r19
    37b8:	de f6       	brtc	.-74     	; 0x3770 <__ultoa_invert+0xe>
    37ba:	cf 01       	movw	r24, r30
    37bc:	08 95       	ret
    37be:	46 2f       	mov	r20, r22
    37c0:	47 70       	andi	r20, 0x07	; 7
    37c2:	40 5d       	subi	r20, 0xD0	; 208
    37c4:	41 93       	st	Z+, r20
    37c6:	b3 e0       	ldi	r27, 0x03	; 3
    37c8:	0f d0       	rcall	.+30     	; 0x37e8 <__ultoa_invert+0x86>
    37ca:	c9 f7       	brne	.-14     	; 0x37be <__ultoa_invert+0x5c>
    37cc:	f6 cf       	rjmp	.-20     	; 0x37ba <__ultoa_invert+0x58>
    37ce:	46 2f       	mov	r20, r22
    37d0:	4f 70       	andi	r20, 0x0F	; 15
    37d2:	40 5d       	subi	r20, 0xD0	; 208
    37d4:	4a 33       	cpi	r20, 0x3A	; 58
    37d6:	18 f0       	brcs	.+6      	; 0x37de <__ultoa_invert+0x7c>
    37d8:	49 5d       	subi	r20, 0xD9	; 217
    37da:	31 fd       	sbrc	r19, 1
    37dc:	40 52       	subi	r20, 0x20	; 32
    37de:	41 93       	st	Z+, r20
    37e0:	02 d0       	rcall	.+4      	; 0x37e6 <__ultoa_invert+0x84>
    37e2:	a9 f7       	brne	.-22     	; 0x37ce <__ultoa_invert+0x6c>
    37e4:	ea cf       	rjmp	.-44     	; 0x37ba <__ultoa_invert+0x58>
    37e6:	b4 e0       	ldi	r27, 0x04	; 4
    37e8:	a6 95       	lsr	r26
    37ea:	97 95       	ror	r25
    37ec:	87 95       	ror	r24
    37ee:	77 95       	ror	r23
    37f0:	67 95       	ror	r22
    37f2:	ba 95       	dec	r27
    37f4:	c9 f7       	brne	.-14     	; 0x37e8 <__ultoa_invert+0x86>
    37f6:	00 97       	sbiw	r24, 0x00	; 0
    37f8:	61 05       	cpc	r22, r1
    37fa:	71 05       	cpc	r23, r1
    37fc:	08 95       	ret
    37fe:	9b 01       	movw	r18, r22
    3800:	ac 01       	movw	r20, r24
    3802:	0a 2e       	mov	r0, r26
    3804:	06 94       	lsr	r0
    3806:	57 95       	ror	r21
    3808:	47 95       	ror	r20
    380a:	37 95       	ror	r19
    380c:	27 95       	ror	r18
    380e:	ba 95       	dec	r27
    3810:	c9 f7       	brne	.-14     	; 0x3804 <__ultoa_invert+0xa2>
    3812:	62 0f       	add	r22, r18
    3814:	73 1f       	adc	r23, r19
    3816:	84 1f       	adc	r24, r20
    3818:	95 1f       	adc	r25, r21
    381a:	a0 1d       	adc	r26, r0
    381c:	08 95       	ret

0000381e <__do_global_dtors>:
    381e:	11 e0       	ldi	r17, 0x01	; 1
    3820:	cf ef       	ldi	r28, 0xFF	; 255
    3822:	d0 e0       	ldi	r29, 0x00	; 0
    3824:	03 c0       	rjmp	.+6      	; 0x382c <__do_global_dtors+0xe>
    3826:	fe 01       	movw	r30, r28
    3828:	dc db       	rcall	.-2120   	; 0x2fe2 <__tablejump2__>
    382a:	21 96       	adiw	r28, 0x01	; 1
    382c:	c0 30       	cpi	r28, 0x00	; 0
    382e:	d1 07       	cpc	r29, r17
    3830:	d1 f7       	brne	.-12     	; 0x3826 <__do_global_dtors+0x8>
    3832:	f8 94       	cli

00003834 <__stop_program>:
    3834:	ff cf       	rjmp	.-2      	; 0x3834 <__stop_program>

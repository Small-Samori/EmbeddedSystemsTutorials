
Blank.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000005e  00800100  00001e48  00001edc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001e48  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000019e  0080015e  0080015e  00001f3a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001f3a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001f6c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000008d8  00000000  00000000  00001fac  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000152b3  00000000  00000000  00002884  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00003acb  00000000  00000000  00017b37  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00004985  00000000  00000000  0001b602  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000019a8  00000000  00000000  0001ff88  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00004842  00000000  00000000  00021930  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00007b0f  00000000  00000000  00026172  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000830  00000000  00000000  0002dc81  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	b2 c0       	rjmp	.+356    	; 0x166 <__dtors_end>
       2:	00 00       	nop
       4:	da c0       	rjmp	.+436    	; 0x1ba <__bad_interrupt>
       6:	00 00       	nop
       8:	d8 c0       	rjmp	.+432    	; 0x1ba <__bad_interrupt>
       a:	00 00       	nop
       c:	d6 c0       	rjmp	.+428    	; 0x1ba <__bad_interrupt>
       e:	00 00       	nop
      10:	d4 c0       	rjmp	.+424    	; 0x1ba <__bad_interrupt>
      12:	00 00       	nop
      14:	d2 c0       	rjmp	.+420    	; 0x1ba <__bad_interrupt>
      16:	00 00       	nop
      18:	d0 c0       	rjmp	.+416    	; 0x1ba <__bad_interrupt>
      1a:	00 00       	nop
      1c:	ce c0       	rjmp	.+412    	; 0x1ba <__bad_interrupt>
      1e:	00 00       	nop
      20:	cc c0       	rjmp	.+408    	; 0x1ba <__bad_interrupt>
      22:	00 00       	nop
      24:	ca c0       	rjmp	.+404    	; 0x1ba <__bad_interrupt>
      26:	00 00       	nop
      28:	c8 c0       	rjmp	.+400    	; 0x1ba <__bad_interrupt>
      2a:	00 00       	nop
      2c:	c6 c0       	rjmp	.+396    	; 0x1ba <__bad_interrupt>
      2e:	00 00       	nop
      30:	c4 c0       	rjmp	.+392    	; 0x1ba <__bad_interrupt>
      32:	00 00       	nop
      34:	c2 c0       	rjmp	.+388    	; 0x1ba <__bad_interrupt>
      36:	00 00       	nop
      38:	c0 c0       	rjmp	.+384    	; 0x1ba <__bad_interrupt>
      3a:	00 00       	nop
      3c:	be c0       	rjmp	.+380    	; 0x1ba <__bad_interrupt>
      3e:	00 00       	nop
      40:	bc c0       	rjmp	.+376    	; 0x1ba <__bad_interrupt>
      42:	00 00       	nop
      44:	ba c0       	rjmp	.+372    	; 0x1ba <__bad_interrupt>
      46:	00 00       	nop
      48:	0c 94 42 0b 	jmp	0x1684	; 0x1684 <__vector_18>
      4c:	b6 c0       	rjmp	.+364    	; 0x1ba <__bad_interrupt>
      4e:	00 00       	nop
      50:	0c 94 3a 0a 	jmp	0x1474	; 0x1474 <__vector_20>
      54:	0c 94 70 0a 	jmp	0x14e0	; 0x14e0 <__vector_21>
      58:	b0 c0       	rjmp	.+352    	; 0x1ba <__bad_interrupt>
      5a:	00 00       	nop
      5c:	ae c0       	rjmp	.+348    	; 0x1ba <__bad_interrupt>
      5e:	00 00       	nop
      60:	ac c0       	rjmp	.+344    	; 0x1ba <__bad_interrupt>
      62:	00 00       	nop
      64:	aa c0       	rjmp	.+340    	; 0x1ba <__bad_interrupt>
      66:	00 00       	nop
      68:	85 c5       	rjmp	.+2826   	; 0xb74 <__vector_26>
      6a:	00 00       	nop
      6c:	a6 c0       	rjmp	.+332    	; 0x1ba <__bad_interrupt>
      6e:	00 00       	nop
      70:	a4 c0       	rjmp	.+328    	; 0x1ba <__bad_interrupt>
      72:	00 00       	nop
      74:	a2 c0       	rjmp	.+324    	; 0x1ba <__bad_interrupt>
      76:	00 00       	nop
      78:	a0 c0       	rjmp	.+320    	; 0x1ba <__bad_interrupt>
      7a:	00 00       	nop
      7c:	9e c0       	rjmp	.+316    	; 0x1ba <__bad_interrupt>
      7e:	00 00       	nop
      80:	9c c0       	rjmp	.+312    	; 0x1ba <__bad_interrupt>
      82:	00 00       	nop
      84:	9a c0       	rjmp	.+308    	; 0x1ba <__bad_interrupt>
      86:	00 00       	nop
      88:	98 c0       	rjmp	.+304    	; 0x1ba <__bad_interrupt>
      8a:	00 00       	nop
      8c:	84 0c       	add	r8, r4
      8e:	89 0c       	add	r8, r9
      90:	8e 0c       	add	r8, r14
      92:	98 0c       	add	r9, r8
      94:	c6 0c       	add	r12, r6
      96:	c6 0c       	add	r12, r6
      98:	a2 0c       	add	r10, r2
      9a:	aa 0c       	add	r10, r10
      9c:	b2 0c       	add	r11, r2
      9e:	bc 0c       	add	r11, r12
      a0:	e2 0c       	add	r14, r2
      a2:	e5 0c       	add	r14, r5
      a4:	d8 0c       	add	r13, r8
      a6:	dc 0c       	add	r13, r12
      a8:	fc 0c       	add	r15, r12
      aa:	fc 0c       	add	r15, r12
      ac:	e9 0c       	add	r14, r9
      ae:	ed 0c       	add	r14, r13
      b0:	f3 0c       	add	r15, r3
      b2:	f7 0c       	add	r15, r7

000000b4 <__trampolines_end>:
      b4:	49 6e       	ori	r20, 0xE9	; 233
      b6:	74 65       	ori	r23, 0x54	; 84
      b8:	72 72       	andi	r23, 0x22	; 34
      ba:	75 70       	andi	r23, 0x05	; 5
      bc:	74 73       	andi	r23, 0x34	; 52
      be:	20 6e       	ori	r18, 0xE0	; 224
      c0:	6f 74       	andi	r22, 0x4F	; 79
      c2:	20 73       	andi	r18, 0x30	; 48
      c4:	75 70       	andi	r23, 0x05	; 5
      c6:	70 6f       	ori	r23, 0xF0	; 240
      c8:	72 74       	andi	r23, 0x42	; 66
      ca:	65 64       	ori	r22, 0x45	; 69
      cc:	20 6f       	ori	r18, 0xF0	; 240
      ce:	6e 20       	and	r6, r14
      d0:	74 68       	ori	r23, 0x84	; 132
      d2:	69 73       	andi	r22, 0x39	; 57
      d4:	20 70       	andi	r18, 0x00	; 0
      d6:	6c 61       	ori	r22, 0x1C	; 28
      d8:	74 66       	ori	r23, 0x64	; 100
      da:	6f 72       	andi	r22, 0x2F	; 47
      dc:	6d 0a       	sbc	r6, r29
	...

000000df <digital_pin_to_timer_PGM>:
      df:	00 00 00 01 02 00 09 0a 00 00 00 00 04 03 08 07     ................
	...

000000ff <digital_pin_to_bit_mask_PGM>:
      ff:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 40 80     ..... @...... @.
     10f:	01 02 04 08 10 20 40 80 80 40 20 10 08 04 02 01     ..... @..@ .....

0000011f <digital_pin_to_port_PGM>:
     11f:	02 02 02 02 02 02 02 02 04 04 04 04 04 04 04 04     ................
     12f:	03 03 03 03 03 03 03 03 01 01 01 01 01 01 01 01     ................

0000013f <port_to_input_PGM>:
     13f:	00 00 20 00 23 00 26 00 29 00                       .. .#.&.).

00000149 <port_to_output_PGM>:
     149:	00 00 22 00 25 00 28 00 2b 00                       ..".%.(.+.

00000153 <port_to_mode_PGM>:
     153:	00 00 21 00 24 00 27 00 2a 00 00                    ..!.$.'.*..

0000015e <__ctors_start>:
     15e:	e9 01       	movw	r28, r18
     160:	a5 07       	cpc	r26, r21
     162:	a2 0a       	sbc	r10, r18

00000164 <__ctors_end>:
     164:	f7 01       	movw	r30, r14

00000166 <__dtors_end>:
     166:	11 24       	eor	r1, r1
     168:	1f be       	out	0x3f, r1	; 63
     16a:	cf ef       	ldi	r28, 0xFF	; 255
     16c:	d0 e4       	ldi	r29, 0x40	; 64
     16e:	de bf       	out	0x3e, r29	; 62
     170:	cd bf       	out	0x3d, r28	; 61

00000172 <__do_copy_data>:
     172:	11 e0       	ldi	r17, 0x01	; 1
     174:	a0 e0       	ldi	r26, 0x00	; 0
     176:	b1 e0       	ldi	r27, 0x01	; 1
     178:	e8 e4       	ldi	r30, 0x48	; 72
     17a:	fe e1       	ldi	r31, 0x1E	; 30
     17c:	00 e0       	ldi	r16, 0x00	; 0
     17e:	0b bf       	out	0x3b, r16	; 59
     180:	02 c0       	rjmp	.+4      	; 0x186 <__do_copy_data+0x14>
     182:	07 90       	elpm	r0, Z+
     184:	0d 92       	st	X+, r0
     186:	ae 35       	cpi	r26, 0x5E	; 94
     188:	b1 07       	cpc	r27, r17
     18a:	d9 f7       	brne	.-10     	; 0x182 <__do_copy_data+0x10>

0000018c <__do_clear_bss>:
     18c:	22 e0       	ldi	r18, 0x02	; 2
     18e:	ae e5       	ldi	r26, 0x5E	; 94
     190:	b1 e0       	ldi	r27, 0x01	; 1
     192:	01 c0       	rjmp	.+2      	; 0x196 <.do_clear_bss_start>

00000194 <.do_clear_bss_loop>:
     194:	1d 92       	st	X+, r1

00000196 <.do_clear_bss_start>:
     196:	ac 3f       	cpi	r26, 0xFC	; 252
     198:	b2 07       	cpc	r27, r18
     19a:	e1 f7       	brne	.-8      	; 0x194 <.do_clear_bss_loop>

0000019c <__do_global_ctors>:
     19c:	10 e0       	ldi	r17, 0x00	; 0
     19e:	c2 eb       	ldi	r28, 0xB2	; 178
     1a0:	d0 e0       	ldi	r29, 0x00	; 0
     1a2:	04 c0       	rjmp	.+8      	; 0x1ac <__do_global_ctors+0x10>
     1a4:	21 97       	sbiw	r28, 0x01	; 1
     1a6:	fe 01       	movw	r30, r28
     1a8:	0e 94 ee 0d 	call	0x1bdc	; 0x1bdc <__tablejump2__>
     1ac:	cf 3a       	cpi	r28, 0xAF	; 175
     1ae:	d1 07       	cpc	r29, r17
     1b0:	c9 f7       	brne	.-14     	; 0x1a4 <__do_global_ctors+0x8>
     1b2:	0e 94 d0 0a 	call	0x15a0	; 0x15a0 <main>
     1b6:	0c 94 18 0f 	jmp	0x1e30	; 0x1e30 <__do_global_dtors>

000001ba <__bad_interrupt>:
     1ba:	22 cf       	rjmp	.-444    	; 0x0 <__vectors>

000001bc <_Z35PulseSensorPlaygroundSetupInterruptv>:
     1bc:	80 e0       	ldi	r24, 0x00	; 0
     1be:	08 95       	ret

000001c0 <_Z23MQResistanceCalculationi>:
void monitorBloodPressure(HardwareSerial ser) {
	char InByte = 0x00;
	if(ser.available()) {
		InByte = ser.read();
	}
}
     1c0:	cf 92       	push	r12
     1c2:	df 92       	push	r13
     1c4:	ef 92       	push	r14
     1c6:	ff 92       	push	r15
     1c8:	bc 01       	movw	r22, r24
     1ca:	8f ef       	ldi	r24, 0xFF	; 255
     1cc:	93 e0       	ldi	r25, 0x03	; 3
     1ce:	0e 94 db 0d 	call	0x1bb6	; 0x1bb6 <__divmodhi4>
     1d2:	07 2e       	mov	r0, r23
     1d4:	00 0c       	add	r0, r0
     1d6:	88 0b       	sbc	r24, r24
     1d8:	99 0b       	sbc	r25, r25
     1da:	89 d7       	rcall	.+3858   	; 0x10ee <__floatsisf>
     1dc:	20 e0       	ldi	r18, 0x00	; 0
     1de:	30 e0       	ldi	r19, 0x00	; 0
     1e0:	40 e8       	ldi	r20, 0x80	; 128
     1e2:	5f e3       	ldi	r21, 0x3F	; 63
     1e4:	b5 d6       	rcall	.+3434   	; 0xf50 <__subsf3>
     1e6:	6b 01       	movw	r12, r22
     1e8:	7c 01       	movw	r14, r24
     1ea:	60 91 10 01 	lds	r22, 0x0110	; 0x800110 <RL_VALUE>
     1ee:	70 91 11 01 	lds	r23, 0x0111	; 0x800111 <RL_VALUE+0x1>
     1f2:	07 2e       	mov	r0, r23
     1f4:	00 0c       	add	r0, r0
     1f6:	88 0b       	sbc	r24, r24
     1f8:	99 0b       	sbc	r25, r25
     1fa:	79 d7       	rcall	.+3826   	; 0x10ee <__floatsisf>
     1fc:	a7 01       	movw	r20, r14
     1fe:	96 01       	movw	r18, r12
     200:	0e 94 03 09 	call	0x1206	; 0x1206 <__mulsf3>
     204:	ff 90       	pop	r15
     206:	ef 90       	pop	r14
     208:	df 90       	pop	r13
     20a:	cf 90       	pop	r12
     20c:	08 95       	ret

0000020e <_Z13MQCalibrationhh>:
     20e:	cf 92       	push	r12
     210:	df 92       	push	r13
     212:	ef 92       	push	r14
     214:	ff 92       	push	r15
     216:	0f 93       	push	r16
     218:	1f 93       	push	r17
     21a:	cf 93       	push	r28
     21c:	df 93       	push	r29
     21e:	d8 2f       	mov	r29, r24
     220:	c6 2f       	mov	r28, r22
     222:	00 e0       	ldi	r16, 0x00	; 0
     224:	10 e0       	ldi	r17, 0x00	; 0
     226:	c1 2c       	mov	r12, r1
     228:	d1 2c       	mov	r13, r1
     22a:	76 01       	movw	r14, r12
     22c:	60 91 08 01 	lds	r22, 0x0108	; 0x800108 <CALIBARAION_SAMPLE_TIMES>
     230:	70 91 09 01 	lds	r23, 0x0109	; 0x800109 <CALIBARAION_SAMPLE_TIMES+0x1>
     234:	06 17       	cp	r16, r22
     236:	17 07       	cpc	r17, r23
     238:	c4 f4       	brge	.+48     	; 0x26a <_Z13MQCalibrationhh+0x5c>
     23a:	8d 2f       	mov	r24, r29
     23c:	0e 94 3d 0c 	call	0x187a	; 0x187a <analogRead>
     240:	bf df       	rcall	.-130    	; 0x1c0 <_Z23MQResistanceCalculationi>
     242:	9b 01       	movw	r18, r22
     244:	ac 01       	movw	r20, r24
     246:	c7 01       	movw	r24, r14
     248:	b6 01       	movw	r22, r12
     24a:	83 d6       	rcall	.+3334   	; 0xf52 <__addsf3>
     24c:	6b 01       	movw	r12, r22
     24e:	7c 01       	movw	r14, r24
     250:	60 91 06 01 	lds	r22, 0x0106	; 0x800106 <CALIBRATION_SAMPLE_INTERVAL>
     254:	70 91 07 01 	lds	r23, 0x0107	; 0x800107 <CALIBRATION_SAMPLE_INTERVAL+0x1>
     258:	07 2e       	mov	r0, r23
     25a:	00 0c       	add	r0, r0
     25c:	88 0b       	sbc	r24, r24
     25e:	99 0b       	sbc	r25, r25
     260:	0e 94 b1 0b 	call	0x1762	; 0x1762 <delay>
     264:	0f 5f       	subi	r16, 0xFF	; 255
     266:	1f 4f       	sbci	r17, 0xFF	; 255
     268:	e1 cf       	rjmp	.-62     	; 0x22c <_Z13MQCalibrationhh+0x1e>
     26a:	07 2e       	mov	r0, r23
     26c:	00 0c       	add	r0, r0
     26e:	88 0b       	sbc	r24, r24
     270:	99 0b       	sbc	r25, r25
     272:	3d d7       	rcall	.+3706   	; 0x10ee <__floatsisf>
     274:	9b 01       	movw	r18, r22
     276:	ac 01       	movw	r20, r24
     278:	c7 01       	movw	r24, r14
     27a:	b6 01       	movw	r22, r12
     27c:	ce d6       	rcall	.+3484   	; 0x101a <__divsf3>
     27e:	6b 01       	movw	r12, r22
     280:	7c 01       	movw	r14, r24
     282:	c1 30       	cpi	r28, 0x01	; 1
     284:	69 f0       	breq	.+26     	; 0x2a0 <_Z13MQCalibrationhh+0x92>
     286:	38 f0       	brcs	.+14     	; 0x296 <_Z13MQCalibrationhh+0x88>
     288:	c2 30       	cpi	r28, 0x02	; 2
     28a:	d1 f4       	brne	.+52     	; 0x2c0 <_Z13MQCalibrationhh+0xb2>
     28c:	60 91 0a 01 	lds	r22, 0x010A	; 0x80010a <MQ135_RO_CLEAN_AIR_FACTOR>
     290:	70 91 0b 01 	lds	r23, 0x010B	; 0x80010b <MQ135_RO_CLEAN_AIR_FACTOR+0x1>
     294:	09 c0       	rjmp	.+18     	; 0x2a8 <_Z13MQCalibrationhh+0x9a>
     296:	60 91 0e 01 	lds	r22, 0x010E	; 0x80010e <MQ2_RO_CLEAN_AIR_FACTOR>
     29a:	70 91 0f 01 	lds	r23, 0x010F	; 0x80010f <MQ2_RO_CLEAN_AIR_FACTOR+0x1>
     29e:	04 c0       	rjmp	.+8      	; 0x2a8 <_Z13MQCalibrationhh+0x9a>
     2a0:	60 91 0c 01 	lds	r22, 0x010C	; 0x80010c <MQ131_RO_CLEAN_AIR_FACTOR>
     2a4:	70 91 0d 01 	lds	r23, 0x010D	; 0x80010d <MQ131_RO_CLEAN_AIR_FACTOR+0x1>
     2a8:	07 2e       	mov	r0, r23
     2aa:	00 0c       	add	r0, r0
     2ac:	88 0b       	sbc	r24, r24
     2ae:	99 0b       	sbc	r25, r25
     2b0:	1e d7       	rcall	.+3644   	; 0x10ee <__floatsisf>
     2b2:	9b 01       	movw	r18, r22
     2b4:	ac 01       	movw	r20, r24
     2b6:	c7 01       	movw	r24, r14
     2b8:	b6 01       	movw	r22, r12
     2ba:	af d6       	rcall	.+3422   	; 0x101a <__divsf3>
     2bc:	6b 01       	movw	r12, r22
     2be:	7c 01       	movw	r14, r24
     2c0:	c7 01       	movw	r24, r14
     2c2:	b6 01       	movw	r22, r12
     2c4:	df 91       	pop	r29
     2c6:	cf 91       	pop	r28
     2c8:	1f 91       	pop	r17
     2ca:	0f 91       	pop	r16
     2cc:	ff 90       	pop	r15
     2ce:	ef 90       	pop	r14
     2d0:	df 90       	pop	r13
     2d2:	cf 90       	pop	r12
     2d4:	08 95       	ret

000002d6 <setup>:
     2d6:	cf 93       	push	r28
     2d8:	df 93       	push	r29
     2da:	20 e8       	ldi	r18, 0x80	; 128
     2dc:	43 e0       	ldi	r20, 0x03	; 3
     2de:	62 e0       	ldi	r22, 0x02	; 2
     2e0:	83 e8       	ldi	r24, 0x83	; 131
     2e2:	91 e0       	ldi	r25, 0x01	; 1
     2e4:	32 d1       	rcall	.+612    	; 0x54a <_ZN5HX7115beginEhhh>
     2e6:	60 e0       	ldi	r22, 0x00	; 0
     2e8:	80 e0       	ldi	r24, 0x00	; 0
     2ea:	91 df       	rcall	.-222    	; 0x20e <_Z13MQCalibrationhh>
     2ec:	60 93 77 01 	sts	0x0177, r22	; 0x800177 <Ro>
     2f0:	70 93 78 01 	sts	0x0178, r23	; 0x800178 <Ro+0x1>
     2f4:	80 93 79 01 	sts	0x0179, r24	; 0x800179 <Ro+0x2>
     2f8:	90 93 7a 01 	sts	0x017A, r25	; 0x80017a <Ro+0x3>
     2fc:	40 e0       	ldi	r20, 0x00	; 0
     2fe:	50 e0       	ldi	r21, 0x00	; 0
     300:	6f e1       	ldi	r22, 0x1F	; 31
     302:	70 e0       	ldi	r23, 0x00	; 0
     304:	8a e6       	ldi	r24, 0x6A	; 106
     306:	91 e0       	ldi	r25, 0x01	; 1
     308:	ab d2       	rcall	.+1366   	; 0x860 <_ZN21PulseSensorPlayground11analogInputEii>
     30a:	40 e0       	ldi	r20, 0x00	; 0
     30c:	50 e0       	ldi	r21, 0x00	; 0
     30e:	6d e0       	ldi	r22, 0x0D	; 13
     310:	70 e0       	ldi	r23, 0x00	; 0
     312:	8a e6       	ldi	r24, 0x6A	; 106
     314:	91 e0       	ldi	r25, 0x01	; 1
     316:	bc d2       	rcall	.+1400   	; 0x890 <_ZN21PulseSensorPlayground12blinkOnPulseEii>
     318:	40 e0       	ldi	r20, 0x00	; 0
     31a:	50 e0       	ldi	r21, 0x00	; 0
     31c:	65 e0       	ldi	r22, 0x05	; 5
     31e:	70 e0       	ldi	r23, 0x00	; 0
     320:	8a e6       	ldi	r24, 0x6A	; 106
     322:	91 e0       	ldi	r25, 0x01	; 1
     324:	cd d2       	rcall	.+1434   	; 0x8c0 <_ZN21PulseSensorPlayground11fadeOnPulseEii>
     326:	62 e5       	ldi	r22, 0x52	; 82
     328:	72 e0       	ldi	r23, 0x02	; 2
     32a:	8a e6       	ldi	r24, 0x6A	; 106
     32c:	91 e0       	ldi	r25, 0x01	; 1
     32e:	e0 d2       	rcall	.+1472   	; 0x8f0 <_ZN21PulseSensorPlayground9setSerialER6Stream>
     330:	62 e0       	ldi	r22, 0x02	; 2
     332:	8a e6       	ldi	r24, 0x6A	; 106
     334:	91 e0       	ldi	r25, 0x01	; 1
     336:	de d2       	rcall	.+1468   	; 0x8f4 <_ZN21PulseSensorPlayground13setOutputTypeEh>
     338:	40 e0       	ldi	r20, 0x00	; 0
     33a:	50 e0       	ldi	r21, 0x00	; 0
     33c:	66 e2       	ldi	r22, 0x26	; 38
     33e:	72 e0       	ldi	r23, 0x02	; 2
     340:	8a e6       	ldi	r24, 0x6A	; 106
     342:	91 e0       	ldi	r25, 0x01	; 1
     344:	d9 d2       	rcall	.+1458   	; 0x8f8 <_ZN21PulseSensorPlayground12setThresholdEii>
     346:	8a e6       	ldi	r24, 0x6A	; 106
     348:	91 e0       	ldi	r25, 0x01	; 1
     34a:	46 d2       	rcall	.+1164   	; 0x7d8 <_ZN21PulseSensorPlayground5beginEv>
     34c:	81 11       	cpse	r24, r1
     34e:	1c c0       	rjmp	.+56     	; 0x388 <setup+0xb2>
     350:	c4 e1       	ldi	r28, 0x14	; 20
     352:	d0 e0       	ldi	r29, 0x00	; 0
     354:	60 e0       	ldi	r22, 0x00	; 0
     356:	8d e0       	ldi	r24, 0x0D	; 13
     358:	0e 94 39 0d 	call	0x1a72	; 0x1a72 <digitalWrite>
     35c:	64 e6       	ldi	r22, 0x64	; 100
     35e:	70 e0       	ldi	r23, 0x00	; 0
     360:	80 e0       	ldi	r24, 0x00	; 0
     362:	90 e0       	ldi	r25, 0x00	; 0
     364:	0e 94 b1 0b 	call	0x1762	; 0x1762 <delay>
     368:	61 e0       	ldi	r22, 0x01	; 1
     36a:	8d e0       	ldi	r24, 0x0D	; 13
     36c:	0e 94 39 0d 	call	0x1a72	; 0x1a72 <digitalWrite>
     370:	64 e6       	ldi	r22, 0x64	; 100
     372:	70 e0       	ldi	r23, 0x00	; 0
     374:	80 e0       	ldi	r24, 0x00	; 0
     376:	90 e0       	ldi	r25, 0x00	; 0
     378:	0e 94 b1 0b 	call	0x1762	; 0x1762 <delay>
     37c:	21 97       	sbiw	r28, 0x01	; 1
     37e:	51 f7       	brne	.-44     	; 0x354 <setup+0x7e>
     380:	61 e0       	ldi	r22, 0x01	; 1
     382:	8d e0       	ldi	r24, 0x0D	; 13
     384:	0e 94 39 0d 	call	0x1a72	; 0x1a72 <digitalWrite>
     388:	8e e5       	ldi	r24, 0x5E	; 94
     38a:	91 e0       	ldi	r25, 0x01	; 1
     38c:	ee d1       	rcall	.+988    	; 0x76a <_ZN17LiquidCrystal_I2C4initEv>
     38e:	8e e5       	ldi	r24, 0x5E	; 94
     390:	91 e0       	ldi	r25, 0x01	; 1
     392:	10 d1       	rcall	.+544    	; 0x5b4 <_ZN17LiquidCrystal_I2C9backlightEv>
     394:	8e e5       	ldi	r24, 0x5E	; 94
     396:	91 e0       	ldi	r25, 0x01	; 1
     398:	4b d1       	rcall	.+662    	; 0x630 <_ZN17LiquidCrystal_I2C5clearEv>
     39a:	40 e0       	ldi	r20, 0x00	; 0
     39c:	60 e0       	ldi	r22, 0x00	; 0
     39e:	8e e5       	ldi	r24, 0x5E	; 94
     3a0:	91 e0       	ldi	r25, 0x01	; 1
     3a2:	52 d1       	rcall	.+676    	; 0x648 <_ZN17LiquidCrystal_I2C9setCursorEhh>
     3a4:	6c e1       	ldi	r22, 0x1C	; 28
     3a6:	71 e0       	ldi	r23, 0x01	; 1
     3a8:	8e e5       	ldi	r24, 0x5E	; 94
     3aa:	91 e0       	ldi	r25, 0x01	; 1
     3ac:	0e 94 41 0b 	call	0x1682	; 0x1682 <_ZN5Print5printEPKc>
     3b0:	68 eb       	ldi	r22, 0xB8	; 184
     3b2:	7b e0       	ldi	r23, 0x0B	; 11
     3b4:	80 e0       	ldi	r24, 0x00	; 0
     3b6:	90 e0       	ldi	r25, 0x00	; 0
     3b8:	0e 94 b1 0b 	call	0x1762	; 0x1762 <delay>
     3bc:	8e e5       	ldi	r24, 0x5E	; 94
     3be:	91 e0       	ldi	r25, 0x01	; 1
     3c0:	37 d1       	rcall	.+622    	; 0x630 <_ZN17LiquidCrystal_I2C5clearEv>
     3c2:	40 e0       	ldi	r20, 0x00	; 0
     3c4:	60 e0       	ldi	r22, 0x00	; 0
     3c6:	8e e5       	ldi	r24, 0x5E	; 94
     3c8:	91 e0       	ldi	r25, 0x01	; 1
     3ca:	df 91       	pop	r29
     3cc:	cf 91       	pop	r28
     3ce:	3c c1       	rjmp	.+632    	; 0x648 <_ZN17LiquidCrystal_I2C9setCursorEhh>

000003d0 <loop>:
     3d0:	08 95       	ret

000003d2 <_GLOBAL__sub_I__ZN21PulseSensorPlayground15UsingInterruptsE>:
     3d2:	83 e8       	ldi	r24, 0x83	; 131
     3d4:	91 e0       	ldi	r25, 0x01	; 1
     3d6:	11 d0       	rcall	.+34     	; 0x3fa <_ZN5HX711C1Ev>
     3d8:	61 e0       	ldi	r22, 0x01	; 1
     3da:	70 e0       	ldi	r23, 0x00	; 0
     3dc:	8a e6       	ldi	r24, 0x6A	; 106
     3de:	91 e0       	ldi	r25, 0x01	; 1
     3e0:	c5 d1       	rcall	.+906    	; 0x76c <_ZN21PulseSensorPlaygroundC1Ei>
     3e2:	22 e0       	ldi	r18, 0x02	; 2
     3e4:	40 e1       	ldi	r20, 0x10	; 16
     3e6:	67 e2       	ldi	r22, 0x27	; 39
     3e8:	8e e5       	ldi	r24, 0x5E	; 94
     3ea:	91 e0       	ldi	r25, 0x01	; 1
     3ec:	c3 c0       	rjmp	.+390    	; 0x574 <_ZN17LiquidCrystal_I2CC1Ehhh>

000003ee <_GLOBAL__sub_D__ZN21PulseSensorPlayground15UsingInterruptsE>:
//      GND: GND
//      DATA: 2
int pinDHT11 = 2;

SimpleDHT11 myDHT;
HX711 scale;
     3ee:	83 e8       	ldi	r24, 0x83	; 131
     3f0:	91 e0       	ldi	r25, 0x01	; 1
     3f2:	00 c0       	rjmp	.+0      	; 0x3f4 <_ZN5HX711D1Ev>

000003f4 <_ZN5HX711D1Ev>:


HX711::HX711() {
}

HX711::~HX711() {
     3f4:	08 95       	ret

000003f6 <_ZN5HX711D0Ev>:
}
     3f6:	0c 94 dd 0a 	jmp	0x15ba	; 0x15ba <_ZdlPv>

000003fa <_ZN5HX711C1Ev>:
#else
#define SHIFTIN_WITH_SPEED_SUPPORT(data,clock,order) shiftIn(data,clock,order)
#endif


HX711::HX711() {
     3fa:	fc 01       	movw	r30, r24
     3fc:	81 e3       	ldi	r24, 0x31	; 49
     3fe:	91 e0       	ldi	r25, 0x01	; 1
     400:	91 83       	std	Z+1, r25	; 0x01
     402:	80 83       	st	Z, r24
     404:	15 82       	std	Z+5, r1	; 0x05
     406:	16 82       	std	Z+6, r1	; 0x06
     408:	17 82       	std	Z+7, r1	; 0x07
     40a:	10 86       	std	Z+8, r1	; 0x08
     40c:	80 e0       	ldi	r24, 0x00	; 0
     40e:	90 e0       	ldi	r25, 0x00	; 0
     410:	a0 e8       	ldi	r26, 0x80	; 128
     412:	bf e3       	ldi	r27, 0x3F	; 63
     414:	81 87       	std	Z+9, r24	; 0x09
     416:	92 87       	std	Z+10, r25	; 0x0a
     418:	a3 87       	std	Z+11, r26	; 0x0b
     41a:	b4 87       	std	Z+12, r27	; 0x0c
     41c:	08 95       	ret

0000041e <_ZN5HX7118is_readyEv>:

	set_gain(gain);
}

bool HX711::is_ready() {
	return digitalRead(DOUT) == LOW;
     41e:	fc 01       	movw	r30, r24
     420:	83 81       	ldd	r24, Z+3	; 0x03
     422:	0e 94 67 0d 	call	0x1ace	; 0x1ace <digitalRead>
     426:	21 e0       	ldi	r18, 0x01	; 1
     428:	89 2b       	or	r24, r25
     42a:	09 f0       	breq	.+2      	; 0x42e <_ZN5HX7118is_readyEv+0x10>
     42c:	20 e0       	ldi	r18, 0x00	; 0
}
     42e:	82 2f       	mov	r24, r18
     430:	08 95       	ret

00000432 <_ZN5HX71110wait_readyEm>:
			| static_cast<unsigned long>(data[0]) );

	return static_cast<long>(value);
}

void HX711::wait_ready(unsigned long delay_ms) {
     432:	cf 92       	push	r12
     434:	df 92       	push	r13
     436:	ef 92       	push	r14
     438:	ff 92       	push	r15
     43a:	cf 93       	push	r28
     43c:	df 93       	push	r29
     43e:	ec 01       	movw	r28, r24
     440:	6a 01       	movw	r12, r20
     442:	7b 01       	movw	r14, r22
	// Wait for the chip to become ready.
	// This is a blocking implementation and will
	// halt the sketch until a load cell is connected.
	while (!is_ready()) {
     444:	ce 01       	movw	r24, r28
     446:	eb df       	rcall	.-42     	; 0x41e <_ZN5HX7118is_readyEv>
     448:	81 11       	cpse	r24, r1
     44a:	05 c0       	rjmp	.+10     	; 0x456 <_ZN5HX71110wait_readyEm+0x24>
		// Probably will do no harm on AVR but will feed the Watchdog Timer (WDT) on ESP.
		// https://github.com/bogde/HX711/issues/73
		delay(delay_ms);
     44c:	c7 01       	movw	r24, r14
     44e:	b6 01       	movw	r22, r12
     450:	0e 94 b1 0b 	call	0x1762	; 0x1762 <delay>

void HX711::wait_ready(unsigned long delay_ms) {
	// Wait for the chip to become ready.
	// This is a blocking implementation and will
	// halt the sketch until a load cell is connected.
	while (!is_ready()) {
     454:	f7 cf       	rjmp	.-18     	; 0x444 <_ZN5HX71110wait_readyEm+0x12>
		// Probably will do no harm on AVR but will feed the Watchdog Timer (WDT) on ESP.
		// https://github.com/bogde/HX711/issues/73
		delay(delay_ms);
	}
}
     456:	df 91       	pop	r29
     458:	cf 91       	pop	r28
     45a:	ff 90       	pop	r15
     45c:	ef 90       	pop	r14
     45e:	df 90       	pop	r13
     460:	cf 90       	pop	r12
     462:	08 95       	ret

00000464 <_ZN5HX7114readEv>:

	digitalWrite(PD_SCK, LOW);
	read();
}

long HX711::read() {
     464:	cf 92       	push	r12
     466:	df 92       	push	r13
     468:	ef 92       	push	r14
     46a:	ff 92       	push	r15
     46c:	0f 93       	push	r16
     46e:	1f 93       	push	r17
     470:	cf 93       	push	r28
     472:	df 93       	push	r29
     474:	ec 01       	movw	r28, r24

	// Wait for the chip to become ready.
	wait_ready();
     476:	40 e0       	ldi	r20, 0x00	; 0
     478:	50 e0       	ldi	r21, 0x00	; 0
     47a:	ba 01       	movw	r22, r20
     47c:	da df       	rcall	.-76     	; 0x432 <_ZN5HX71110wait_readyEm>
	// interrupts during the sequence and then restores the interrupt mask to its previous
	// state after the sequence completes, insuring that the entire read-and-gain-set
	// sequence is not interrupted.  The macro has a few minor advantages over bracketing
	// the sequence between `noInterrupts()` and `interrupts()` calls.
	#if HAS_ATOMIC_BLOCK
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
     47e:	ef b6       	in	r14, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     480:	f8 94       	cli
	// Disable interrupts.
	noInterrupts();
	#endif

	// Pulse the clock pin 24 times to read the data.
	data[2] = SHIFTIN_WITH_SPEED_SUPPORT(DOUT, PD_SCK, MSBFIRST);
     482:	41 e0       	ldi	r20, 0x01	; 1
     484:	6a 81       	ldd	r22, Y+2	; 0x02
     486:	8b 81       	ldd	r24, Y+3	; 0x03
     488:	0e 94 8f 0d 	call	0x1b1e	; 0x1b1e <shiftIn>
     48c:	08 2f       	mov	r16, r24
	data[1] = SHIFTIN_WITH_SPEED_SUPPORT(DOUT, PD_SCK, MSBFIRST);
     48e:	41 e0       	ldi	r20, 0x01	; 1
     490:	6a 81       	ldd	r22, Y+2	; 0x02
     492:	8b 81       	ldd	r24, Y+3	; 0x03
     494:	0e 94 8f 0d 	call	0x1b1e	; 0x1b1e <shiftIn>
     498:	18 2f       	mov	r17, r24
	data[0] = SHIFTIN_WITH_SPEED_SUPPORT(DOUT, PD_SCK, MSBFIRST);
     49a:	41 e0       	ldi	r20, 0x01	; 1
     49c:	6a 81       	ldd	r22, Y+2	; 0x02
     49e:	8b 81       	ldd	r24, Y+3	; 0x03
     4a0:	0e 94 8f 0d 	call	0x1b1e	; 0x1b1e <shiftIn>
     4a4:	f8 2e       	mov	r15, r24

	// Set the channel and the gain factor for the next reading using the clock pin.
	for (unsigned int i = 0; i < GAIN; i++) {
     4a6:	c1 2c       	mov	r12, r1
     4a8:	d1 2c       	mov	r13, r1
     4aa:	8c 81       	ldd	r24, Y+4	; 0x04
     4ac:	90 e0       	ldi	r25, 0x00	; 0
     4ae:	c8 16       	cp	r12, r24
     4b0:	d9 06       	cpc	r13, r25
     4b2:	60 f4       	brcc	.+24     	; 0x4cc <_ZN5HX7114readEv+0x68>
		digitalWrite(PD_SCK, HIGH);
     4b4:	61 e0       	ldi	r22, 0x01	; 1
     4b6:	8a 81       	ldd	r24, Y+2	; 0x02
     4b8:	0e 94 39 0d 	call	0x1a72	; 0x1a72 <digitalWrite>
		#if ARCH_ESPRESSIF
		delayMicroseconds(1);
		#endif
		digitalWrite(PD_SCK, LOW);
     4bc:	60 e0       	ldi	r22, 0x00	; 0
     4be:	8a 81       	ldd	r24, Y+2	; 0x02
     4c0:	0e 94 39 0d 	call	0x1a72	; 0x1a72 <digitalWrite>
	data[2] = SHIFTIN_WITH_SPEED_SUPPORT(DOUT, PD_SCK, MSBFIRST);
	data[1] = SHIFTIN_WITH_SPEED_SUPPORT(DOUT, PD_SCK, MSBFIRST);
	data[0] = SHIFTIN_WITH_SPEED_SUPPORT(DOUT, PD_SCK, MSBFIRST);

	// Set the channel and the gain factor for the next reading using the clock pin.
	for (unsigned int i = 0; i < GAIN; i++) {
     4c4:	2f ef       	ldi	r18, 0xFF	; 255
     4c6:	c2 1a       	sub	r12, r18
     4c8:	d2 0a       	sbc	r13, r18
     4ca:	ef cf       	rjmp	.-34     	; 0x4aa <_ZN5HX7114readEv+0x46>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     4cc:	ef be       	out	0x3f, r14	; 63
	value = ( static_cast<unsigned long>(filler) << 24
			| static_cast<unsigned long>(data[2]) << 16
			| static_cast<unsigned long>(data[1]) << 8
			| static_cast<unsigned long>(data[0]) );

	return static_cast<long>(value);
     4ce:	81 2f       	mov	r24, r17
     4d0:	90 e0       	ldi	r25, 0x00	; 0
     4d2:	a0 e0       	ldi	r26, 0x00	; 0
     4d4:	b0 e0       	ldi	r27, 0x00	; 0
     4d6:	ba 2f       	mov	r27, r26
     4d8:	a9 2f       	mov	r26, r25
     4da:	98 2f       	mov	r25, r24
     4dc:	88 27       	eor	r24, r24
     4de:	a0 2b       	or	r26, r16
     4e0:	ac 01       	movw	r20, r24
     4e2:	bd 01       	movw	r22, r26
     4e4:	4f 29       	or	r20, r15
     4e6:	80 2f       	mov	r24, r16
     4e8:	88 0f       	add	r24, r24
     4ea:	88 0b       	sbc	r24, r24
     4ec:	90 e0       	ldi	r25, 0x00	; 0
     4ee:	a0 e0       	ldi	r26, 0x00	; 0
     4f0:	b0 e0       	ldi	r27, 0x00	; 0
     4f2:	b8 2f       	mov	r27, r24
     4f4:	aa 27       	eor	r26, r26
     4f6:	99 27       	eor	r25, r25
     4f8:	88 27       	eor	r24, r24
     4fa:	8a 01       	movw	r16, r20
     4fc:	9b 01       	movw	r18, r22
     4fe:	08 2b       	or	r16, r24
     500:	19 2b       	or	r17, r25
     502:	2a 2b       	or	r18, r26
     504:	3b 2b       	or	r19, r27
     506:	c9 01       	movw	r24, r18
     508:	b8 01       	movw	r22, r16
}
     50a:	df 91       	pop	r29
     50c:	cf 91       	pop	r28
     50e:	1f 91       	pop	r17
     510:	0f 91       	pop	r16
     512:	ff 90       	pop	r15
     514:	ef 90       	pop	r14
     516:	df 90       	pop	r13
     518:	cf 90       	pop	r12
     51a:	08 95       	ret

0000051c <_ZN5HX7118set_gainEh>:

bool HX711::is_ready() {
	return digitalRead(DOUT) == LOW;
}

void HX711::set_gain(byte gain) {
     51c:	cf 93       	push	r28
     51e:	df 93       	push	r29
     520:	ec 01       	movw	r28, r24
	switch (gain) {
     522:	60 34       	cpi	r22, 0x40	; 64
     524:	41 f0       	breq	.+16     	; 0x536 <_ZN5HX7118set_gainEh+0x1a>
     526:	60 38       	cpi	r22, 0x80	; 128
     528:	21 f0       	breq	.+8      	; 0x532 <_ZN5HX7118set_gainEh+0x16>
     52a:	60 32       	cpi	r22, 0x20	; 32
     52c:	31 f4       	brne	.+12     	; 0x53a <_ZN5HX7118set_gainEh+0x1e>
			break;
		case 64:		// channel A, gain factor 64
			GAIN = 3;
			break;
		case 32:		// channel B, gain factor 32
			GAIN = 2;
     52e:	82 e0       	ldi	r24, 0x02	; 2
     530:	03 c0       	rjmp	.+6      	; 0x538 <_ZN5HX7118set_gainEh+0x1c>
}

void HX711::set_gain(byte gain) {
	switch (gain) {
		case 128:		// channel A, gain factor 128
			GAIN = 1;
     532:	81 e0       	ldi	r24, 0x01	; 1
     534:	01 c0       	rjmp	.+2      	; 0x538 <_ZN5HX7118set_gainEh+0x1c>
			break;
		case 64:		// channel A, gain factor 64
			GAIN = 3;
     536:	83 e0       	ldi	r24, 0x03	; 3
			break;
		case 32:		// channel B, gain factor 32
			GAIN = 2;
     538:	8c 83       	std	Y+4, r24	; 0x04
			break;
	}

	digitalWrite(PD_SCK, LOW);
     53a:	60 e0       	ldi	r22, 0x00	; 0
     53c:	8a 81       	ldd	r24, Y+2	; 0x02
     53e:	0e 94 39 0d 	call	0x1a72	; 0x1a72 <digitalWrite>
	read();
     542:	ce 01       	movw	r24, r28
}
     544:	df 91       	pop	r29
     546:	cf 91       	pop	r28
			GAIN = 2;
			break;
	}

	digitalWrite(PD_SCK, LOW);
	read();
     548:	8d cf       	rjmp	.-230    	; 0x464 <_ZN5HX7114readEv>

0000054a <_ZN5HX7115beginEhhh>:
}

HX711::~HX711() {
}

void HX711::begin(byte dout, byte pd_sck, byte gain) {
     54a:	1f 93       	push	r17
     54c:	cf 93       	push	r28
     54e:	df 93       	push	r29
     550:	ec 01       	movw	r28, r24
     552:	84 2f       	mov	r24, r20
     554:	12 2f       	mov	r17, r18
	PD_SCK = pd_sck;
     556:	4a 83       	std	Y+2, r20	; 0x02
	DOUT = dout;
     558:	6b 83       	std	Y+3, r22	; 0x03

	pinMode(PD_SCK, OUTPUT);
     55a:	61 e0       	ldi	r22, 0x01	; 1
     55c:	0e 94 fd 0c 	call	0x19fa	; 0x19fa <pinMode>
	pinMode(DOUT, INPUT);
     560:	60 e0       	ldi	r22, 0x00	; 0
     562:	8b 81       	ldd	r24, Y+3	; 0x03
     564:	0e 94 fd 0c 	call	0x19fa	; 0x19fa <pinMode>

	set_gain(gain);
     568:	61 2f       	mov	r22, r17
     56a:	ce 01       	movw	r24, r28
}
     56c:	df 91       	pop	r29
     56e:	cf 91       	pop	r28
     570:	1f 91       	pop	r17
	DOUT = dout;

	pinMode(PD_SCK, OUTPUT);
	pinMode(DOUT, INPUT);

	set_gain(gain);
     572:	d4 cf       	rjmp	.-88     	; 0x51c <_ZN5HX7118set_gainEh>

00000574 <_ZN17LiquidCrystal_I2CC1Ehhh>:
void LiquidCrystal_I2C::blink_off(){
	noBlink();
}

void LiquidCrystal_I2C::load_custom_character(uint8_t char_num, uint8_t *rows){
		createChar(char_num, rows);
     574:	fc 01       	movw	r30, r24
     576:	13 82       	std	Z+3, r1	; 0x03
     578:	12 82       	std	Z+2, r1	; 0x02
     57a:	89 e3       	ldi	r24, 0x39	; 57
     57c:	91 e0       	ldi	r25, 0x01	; 1
     57e:	91 83       	std	Z+1, r25	; 0x01
     580:	80 83       	st	Z, r24
     582:	64 83       	std	Z+4, r22	; 0x04
     584:	41 87       	std	Z+9, r20	; 0x09
     586:	22 87       	std	Z+10, r18	; 0x0a
     588:	13 86       	std	Z+11, r1	; 0x0b
     58a:	08 95       	ret

0000058c <_ZN17LiquidCrystal_I2C13expanderWriteEh>:
     58c:	1f 93       	push	r17
     58e:	cf 93       	push	r28
     590:	df 93       	push	r29
     592:	ec 01       	movw	r28, r24
     594:	16 2f       	mov	r17, r22
     596:	6c 81       	ldd	r22, Y+4	; 0x04
     598:	80 e0       	ldi	r24, 0x00	; 0
     59a:	92 e0       	ldi	r25, 0x02	; 2
     59c:	b8 d4       	rcall	.+2416   	; 0xf0e <_ZN7TwoWire17beginTransmissionEh>
     59e:	6b 85       	ldd	r22, Y+11	; 0x0b
     5a0:	61 2b       	or	r22, r17
     5a2:	80 e0       	ldi	r24, 0x00	; 0
     5a4:	92 e0       	ldi	r25, 0x02	; 2
     5a6:	6c d4       	rcall	.+2264   	; 0xe80 <_ZN7TwoWire5writeEh>
     5a8:	80 e0       	ldi	r24, 0x00	; 0
     5aa:	92 e0       	ldi	r25, 0x02	; 2
     5ac:	df 91       	pop	r29
     5ae:	cf 91       	pop	r28
     5b0:	1f 91       	pop	r17
     5b2:	c9 c4       	rjmp	.+2450   	; 0xf46 <_ZN7TwoWire15endTransmissionEv>

000005b4 <_ZN17LiquidCrystal_I2C9backlightEv>:
     5b4:	28 e0       	ldi	r18, 0x08	; 8
     5b6:	fc 01       	movw	r30, r24
     5b8:	23 87       	std	Z+11, r18	; 0x0b
     5ba:	60 e0       	ldi	r22, 0x00	; 0
     5bc:	e7 cf       	rjmp	.-50     	; 0x58c <_ZN17LiquidCrystal_I2C13expanderWriteEh>

000005be <_ZN17LiquidCrystal_I2C11pulseEnableEh>:
     5be:	0f 93       	push	r16
     5c0:	1f 93       	push	r17
     5c2:	cf 93       	push	r28
     5c4:	8c 01       	movw	r16, r24
     5c6:	c6 2f       	mov	r28, r22
     5c8:	64 60       	ori	r22, 0x04	; 4
     5ca:	e0 df       	rcall	.-64     	; 0x58c <_ZN17LiquidCrystal_I2C13expanderWriteEh>
     5cc:	81 e0       	ldi	r24, 0x01	; 1
     5ce:	90 e0       	ldi	r25, 0x00	; 0
     5d0:	0e 94 ea 0b 	call	0x17d4	; 0x17d4 <delayMicroseconds>
     5d4:	6c 2f       	mov	r22, r28
     5d6:	6b 7f       	andi	r22, 0xFB	; 251
     5d8:	c8 01       	movw	r24, r16
     5da:	d8 df       	rcall	.-80     	; 0x58c <_ZN17LiquidCrystal_I2C13expanderWriteEh>
     5dc:	82 e3       	ldi	r24, 0x32	; 50
     5de:	90 e0       	ldi	r25, 0x00	; 0
     5e0:	cf 91       	pop	r28
     5e2:	1f 91       	pop	r17
     5e4:	0f 91       	pop	r16
     5e6:	0c 94 ea 0b 	jmp	0x17d4	; 0x17d4 <delayMicroseconds>

000005ea <_ZN17LiquidCrystal_I2C10write4bitsEh>:
     5ea:	1f 93       	push	r17
     5ec:	cf 93       	push	r28
     5ee:	df 93       	push	r29
     5f0:	ec 01       	movw	r28, r24
     5f2:	16 2f       	mov	r17, r22
     5f4:	cb df       	rcall	.-106    	; 0x58c <_ZN17LiquidCrystal_I2C13expanderWriteEh>
     5f6:	61 2f       	mov	r22, r17
     5f8:	ce 01       	movw	r24, r28
     5fa:	df 91       	pop	r29
     5fc:	cf 91       	pop	r28
     5fe:	1f 91       	pop	r17
     600:	de cf       	rjmp	.-68     	; 0x5be <_ZN17LiquidCrystal_I2C11pulseEnableEh>

00000602 <_ZN17LiquidCrystal_I2C4sendEhh>:
     602:	0f 93       	push	r16
     604:	1f 93       	push	r17
     606:	cf 93       	push	r28
     608:	df 93       	push	r29
     60a:	8c 01       	movw	r16, r24
     60c:	c6 2f       	mov	r28, r22
     60e:	d4 2f       	mov	r29, r20
     610:	60 7f       	andi	r22, 0xF0	; 240
     612:	64 2b       	or	r22, r20
     614:	ea df       	rcall	.-44     	; 0x5ea <_ZN17LiquidCrystal_I2C10write4bitsEh>
     616:	80 e1       	ldi	r24, 0x10	; 16
     618:	c8 9f       	mul	r28, r24
     61a:	b0 01       	movw	r22, r0
     61c:	11 24       	eor	r1, r1
     61e:	6d 2b       	or	r22, r29
     620:	c8 01       	movw	r24, r16
     622:	df 91       	pop	r29
     624:	cf 91       	pop	r28
     626:	1f 91       	pop	r17
     628:	0f 91       	pop	r16
     62a:	df cf       	rjmp	.-66     	; 0x5ea <_ZN17LiquidCrystal_I2C10write4bitsEh>

0000062c <_ZN17LiquidCrystal_I2C7commandEh>:
     62c:	40 e0       	ldi	r20, 0x00	; 0
     62e:	e9 cf       	rjmp	.-46     	; 0x602 <_ZN17LiquidCrystal_I2C4sendEhh>

00000630 <_ZN17LiquidCrystal_I2C5clearEv>:
     630:	61 e0       	ldi	r22, 0x01	; 1
     632:	fc df       	rcall	.-8      	; 0x62c <_ZN17LiquidCrystal_I2C7commandEh>
     634:	80 ed       	ldi	r24, 0xD0	; 208
     636:	97 e0       	ldi	r25, 0x07	; 7
     638:	0c 94 ea 0b 	jmp	0x17d4	; 0x17d4 <delayMicroseconds>

0000063c <_ZN17LiquidCrystal_I2C4homeEv>:
     63c:	62 e0       	ldi	r22, 0x02	; 2
     63e:	f6 df       	rcall	.-20     	; 0x62c <_ZN17LiquidCrystal_I2C7commandEh>
     640:	80 ed       	ldi	r24, 0xD0	; 208
     642:	97 e0       	ldi	r25, 0x07	; 7
     644:	0c 94 ea 0b 	jmp	0x17d4	; 0x17d4 <delayMicroseconds>

00000648 <_ZN17LiquidCrystal_I2C9setCursorEhh>:
     648:	cf 93       	push	r28
     64a:	df 93       	push	r29
     64c:	cd b7       	in	r28, 0x3d	; 61
     64e:	de b7       	in	r29, 0x3e	; 62
     650:	28 97       	sbiw	r28, 0x08	; 8
     652:	0f b6       	in	r0, 0x3f	; 63
     654:	f8 94       	cli
     656:	de bf       	out	0x3e, r29	; 62
     658:	0f be       	out	0x3f, r0	; 63
     65a:	cd bf       	out	0x3d, r28	; 61
     65c:	9c 01       	movw	r18, r24
     65e:	88 e0       	ldi	r24, 0x08	; 8
     660:	e4 e1       	ldi	r30, 0x14	; 20
     662:	f1 e0       	ldi	r31, 0x01	; 1
     664:	de 01       	movw	r26, r28
     666:	11 96       	adiw	r26, 0x01	; 1
     668:	01 90       	ld	r0, Z+
     66a:	0d 92       	st	X+, r0
     66c:	8a 95       	dec	r24
     66e:	e1 f7       	brne	.-8      	; 0x668 <_ZN17LiquidCrystal_I2C9setCursorEhh+0x20>
     670:	f9 01       	movw	r30, r18
     672:	80 85       	ldd	r24, Z+8	; 0x08
     674:	84 17       	cp	r24, r20
     676:	10 f4       	brcc	.+4      	; 0x67c <_ZN17LiquidCrystal_I2C9setCursorEhh+0x34>
     678:	4f ef       	ldi	r20, 0xFF	; 255
     67a:	48 0f       	add	r20, r24
     67c:	fe 01       	movw	r30, r28
     67e:	31 96       	adiw	r30, 0x01	; 1
     680:	e4 0f       	add	r30, r20
     682:	f1 1d       	adc	r31, r1
     684:	e4 0f       	add	r30, r20
     686:	f1 1d       	adc	r31, r1
     688:	90 81       	ld	r25, Z
     68a:	69 0f       	add	r22, r25
     68c:	60 68       	ori	r22, 0x80	; 128
     68e:	c9 01       	movw	r24, r18
     690:	28 96       	adiw	r28, 0x08	; 8
     692:	0f b6       	in	r0, 0x3f	; 63
     694:	f8 94       	cli
     696:	de bf       	out	0x3e, r29	; 62
     698:	0f be       	out	0x3f, r0	; 63
     69a:	cd bf       	out	0x3d, r28	; 61
     69c:	df 91       	pop	r29
     69e:	cf 91       	pop	r28
     6a0:	c5 cf       	rjmp	.-118    	; 0x62c <_ZN17LiquidCrystal_I2C7commandEh>

000006a2 <_ZN17LiquidCrystal_I2C7displayEv>:
     6a2:	fc 01       	movw	r30, r24
     6a4:	66 81       	ldd	r22, Z+6	; 0x06
     6a6:	26 2f       	mov	r18, r22
     6a8:	24 60       	ori	r18, 0x04	; 4
     6aa:	26 83       	std	Z+6, r18	; 0x06
     6ac:	6c 60       	ori	r22, 0x0C	; 12
     6ae:	be cf       	rjmp	.-132    	; 0x62c <_ZN17LiquidCrystal_I2C7commandEh>

000006b0 <_ZN17LiquidCrystal_I2C5writeEh>:

#include "Arduino.h"

#define printIIC(args)	Wire.write(args)
inline size_t LiquidCrystal_I2C::write(uint8_t value) {
	send(value, Rs);
     6b0:	41 e0       	ldi	r20, 0x01	; 1
     6b2:	a7 df       	rcall	.-178    	; 0x602 <_ZN17LiquidCrystal_I2C4sendEhh>
	return 1;
}
     6b4:	81 e0       	ldi	r24, 0x01	; 1
     6b6:	90 e0       	ldi	r25, 0x00	; 0
     6b8:	08 95       	ret

000006ba <_ZN17LiquidCrystal_I2C5beginEhhh>:
	Wire.begin();
	_displayfunction = LCD_4BITMODE | LCD_1LINE | LCD_5x8DOTS;
	begin(_cols, _rows);  
}

void LiquidCrystal_I2C::begin(uint8_t cols, uint8_t lines, uint8_t dotsize) {
     6ba:	cf 93       	push	r28
     6bc:	df 93       	push	r29
     6be:	ec 01       	movw	r28, r24
	if (lines > 1) {
     6c0:	42 30       	cpi	r20, 0x02	; 2
     6c2:	18 f0       	brcs	.+6      	; 0x6ca <_ZN17LiquidCrystal_I2C5beginEhhh+0x10>
		_displayfunction |= LCD_2LINE;
     6c4:	8d 81       	ldd	r24, Y+5	; 0x05
     6c6:	88 60       	ori	r24, 0x08	; 8
     6c8:	8d 83       	std	Y+5, r24	; 0x05
	}
	_numlines = lines;
     6ca:	48 87       	std	Y+8, r20	; 0x08

	// for some 1 line displays you can select a 10 pixel high font
	if ((dotsize != 0) && (lines == 1)) {
     6cc:	22 23       	and	r18, r18
     6ce:	29 f0       	breq	.+10     	; 0x6da <_ZN17LiquidCrystal_I2C5beginEhhh+0x20>
     6d0:	41 30       	cpi	r20, 0x01	; 1
     6d2:	19 f4       	brne	.+6      	; 0x6da <_ZN17LiquidCrystal_I2C5beginEhhh+0x20>
		_displayfunction |= LCD_5x10DOTS;
     6d4:	8d 81       	ldd	r24, Y+5	; 0x05
     6d6:	84 60       	ori	r24, 0x04	; 4
     6d8:	8d 83       	std	Y+5, r24	; 0x05
	}

	// SEE PAGE 45/46 FOR INITIALIZATION SPECIFICATION!
	// according to datasheet, we need at least 40ms after power rises above 2.7V
	// before sending commands. Arduino can turn on way befer 4.5V so we'll wait 50
	delay(50); 
     6da:	62 e3       	ldi	r22, 0x32	; 50
     6dc:	70 e0       	ldi	r23, 0x00	; 0
     6de:	80 e0       	ldi	r24, 0x00	; 0
     6e0:	90 e0       	ldi	r25, 0x00	; 0
     6e2:	0e 94 b1 0b 	call	0x1762	; 0x1762 <delay>
  
	// Now we pull both RS and R/W low to begin commands
	expanderWrite(_backlightval);	// reset expanderand turn backlight off (Bit 8 =1)
     6e6:	6b 85       	ldd	r22, Y+11	; 0x0b
     6e8:	ce 01       	movw	r24, r28
     6ea:	50 df       	rcall	.-352    	; 0x58c <_ZN17LiquidCrystal_I2C13expanderWriteEh>
	delay(1000);
     6ec:	68 ee       	ldi	r22, 0xE8	; 232
     6ee:	73 e0       	ldi	r23, 0x03	; 3
     6f0:	80 e0       	ldi	r24, 0x00	; 0
     6f2:	90 e0       	ldi	r25, 0x00	; 0
     6f4:	0e 94 b1 0b 	call	0x1762	; 0x1762 <delay>
  	//put the LCD into 4 bit mode
	// this is according to the hitachi HD44780 datasheet
	// figure 24, pg 46
	
	  // we start in 8bit mode, try to set 4 bit mode
   write4bits(0x03 << 4);
     6f8:	60 e3       	ldi	r22, 0x30	; 48
     6fa:	ce 01       	movw	r24, r28
     6fc:	76 df       	rcall	.-276    	; 0x5ea <_ZN17LiquidCrystal_I2C10write4bitsEh>
   delayMicroseconds(4500); // wait min 4.1ms
     6fe:	84 e9       	ldi	r24, 0x94	; 148
     700:	91 e1       	ldi	r25, 0x11	; 17
     702:	0e 94 ea 0b 	call	0x17d4	; 0x17d4 <delayMicroseconds>
   
   // second try
   write4bits(0x03 << 4);
     706:	60 e3       	ldi	r22, 0x30	; 48
     708:	ce 01       	movw	r24, r28
     70a:	6f df       	rcall	.-290    	; 0x5ea <_ZN17LiquidCrystal_I2C10write4bitsEh>
   delayMicroseconds(4500); // wait min 4.1ms
     70c:	84 e9       	ldi	r24, 0x94	; 148
     70e:	91 e1       	ldi	r25, 0x11	; 17
     710:	0e 94 ea 0b 	call	0x17d4	; 0x17d4 <delayMicroseconds>
   
   // third go!
   write4bits(0x03 << 4); 
     714:	60 e3       	ldi	r22, 0x30	; 48
     716:	ce 01       	movw	r24, r28
     718:	68 df       	rcall	.-304    	; 0x5ea <_ZN17LiquidCrystal_I2C10write4bitsEh>
   delayMicroseconds(150);
     71a:	86 e9       	ldi	r24, 0x96	; 150
     71c:	90 e0       	ldi	r25, 0x00	; 0
     71e:	0e 94 ea 0b 	call	0x17d4	; 0x17d4 <delayMicroseconds>
   
   // finally, set to 4-bit interface
   write4bits(0x02 << 4); 
     722:	60 e2       	ldi	r22, 0x20	; 32
     724:	ce 01       	movw	r24, r28


	// set # lines, font size, etc.
	command(LCD_FUNCTIONSET | _displayfunction);  
     726:	61 df       	rcall	.-318    	; 0x5ea <_ZN17LiquidCrystal_I2C10write4bitsEh>
     728:	6d 81       	ldd	r22, Y+5	; 0x05
     72a:	60 62       	ori	r22, 0x20	; 32
     72c:	ce 01       	movw	r24, r28
	
	// turn the display on with no cursor or blinking default
	_displaycontrol = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;
     72e:	7e df       	rcall	.-260    	; 0x62c <_ZN17LiquidCrystal_I2C7commandEh>
     730:	84 e0       	ldi	r24, 0x04	; 4
	display();
     732:	8e 83       	std	Y+6, r24	; 0x06
     734:	ce 01       	movw	r24, r28
	
	// clear it off
	clear();
     736:	b5 df       	rcall	.-150    	; 0x6a2 <_ZN17LiquidCrystal_I2C7displayEv>
     738:	ce 01       	movw	r24, r28
     73a:	7a df       	rcall	.-268    	; 0x630 <_ZN17LiquidCrystal_I2C5clearEv>
	
	// Initialize to default text direction (for roman languages)
	_displaymode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
     73c:	82 e0       	ldi	r24, 0x02	; 2
	
	// set the entry mode
	command(LCD_ENTRYMODESET | _displaymode);
     73e:	8f 83       	std	Y+7, r24	; 0x07
     740:	66 e0       	ldi	r22, 0x06	; 6
     742:	ce 01       	movw	r24, r28
     744:	73 df       	rcall	.-282    	; 0x62c <_ZN17LiquidCrystal_I2C7commandEh>
	
	home();
     746:	ce 01       	movw	r24, r28
  
}
     748:	df 91       	pop	r29
     74a:	cf 91       	pop	r28
	_displaymode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
	
	// set the entry mode
	command(LCD_ENTRYMODESET | _displaymode);
	
	home();
     74c:	77 cf       	rjmp	.-274    	; 0x63c <_ZN17LiquidCrystal_I2C4homeEv>

0000074e <_ZN17LiquidCrystal_I2C9init_privEv>:
     74e:	cf 93       	push	r28
void LiquidCrystal_I2C::init(){
	init_priv();
}

void LiquidCrystal_I2C::init_priv()
{
     750:	df 93       	push	r29
     752:	ec 01       	movw	r28, r24
	Wire.begin();
     754:	80 e0       	ldi	r24, 0x00	; 0
     756:	92 e0       	ldi	r25, 0x02	; 2
     758:	d1 d3       	rcall	.+1954   	; 0xefc <_ZN7TwoWire5beginEv>
	_displayfunction = LCD_4BITMODE | LCD_1LINE | LCD_5x8DOTS;
     75a:	1d 82       	std	Y+5, r1	; 0x05
	begin(_cols, _rows);  
     75c:	20 e0       	ldi	r18, 0x00	; 0
     75e:	4a 85       	ldd	r20, Y+10	; 0x0a
     760:	69 85       	ldd	r22, Y+9	; 0x09
     762:	ce 01       	movw	r24, r28
}
     764:	df 91       	pop	r29

void LiquidCrystal_I2C::init_priv()
{
	Wire.begin();
	_displayfunction = LCD_4BITMODE | LCD_1LINE | LCD_5x8DOTS;
	begin(_cols, _rows);  
     766:	cf 91       	pop	r28
     768:	a8 cf       	rjmp	.-176    	; 0x6ba <_ZN17LiquidCrystal_I2C5beginEhhh>

0000076a <_ZN17LiquidCrystal_I2C4initEv>:
  _rows = lcd_rows;
  _backlightval = LCD_NOBACKLIGHT;
}

void LiquidCrystal_I2C::init(){
	init_priv();
     76a:	f1 cf       	rjmp	.-30     	; 0x74e <_ZN17LiquidCrystal_I2C9init_privEv>

0000076c <_ZN21PulseSensorPlaygroundC1Ei>:
boolean PulseSensorPlayground::isInsideBeat(int sensorIndex) {
  if (sensorIndex != constrain(sensorIndex, 0, SensorCount)) {
    return false; // out of range.
  }
  return Sensors[sensorIndex].isInsideBeat();
}
     76c:	af 92       	push	r10
     76e:	bf 92       	push	r11
     770:	cf 92       	push	r12
     772:	df 92       	push	r13
     774:	ef 92       	push	r14
     776:	ff 92       	push	r15
     778:	0f 93       	push	r16
     77a:	1f 93       	push	r17
     77c:	cf 93       	push	r28
     77e:	df 93       	push	r29
     780:	ec 01       	movw	r28, r24
     782:	8b 01       	movw	r16, r22
     784:	09 96       	adiw	r24, 0x09	; 9
     786:	44 d1       	rcall	.+648    	; 0xa10 <_ZN23PulseSensorSerialOutputC1Ev>
     788:	d0 93 91 01 	sts	0x0191, r29	; 0x800191 <_ZN21PulseSensorPlayground7OurThisE+0x1>
     78c:	c0 93 90 01 	sts	0x0190, r28	; 0x800190 <_ZN21PulseSensorPlayground7OurThisE>
     790:	09 83       	std	Y+1, r16	; 0x01
     792:	58 01       	movw	r10, r16
     794:	bb 24       	eor	r11, r11
     796:	2c e3       	ldi	r18, 0x3C	; 60
     798:	02 9f       	mul	r16, r18
     79a:	c0 01       	movw	r24, r0
     79c:	11 24       	eor	r1, r1
     79e:	0c d7       	rcall	.+3608   	; 0x15b8 <_Znaj>
     7a0:	6c 01       	movw	r12, r24
     7a2:	8c 01       	movw	r16, r24
     7a4:	e1 2c       	mov	r14, r1
     7a6:	f1 2c       	mov	r15, r1
     7a8:	ea 14       	cp	r14, r10
     7aa:	fb 04       	cpc	r15, r11
     7ac:	41 f0       	breq	.+16     	; 0x7be <_ZN21PulseSensorPlaygroundC1Ei+0x52>
     7ae:	c8 01       	movw	r24, r16
     7b0:	ea d0       	rcall	.+468    	; 0x986 <_ZN11PulseSensorC1Ev>
     7b2:	04 5c       	subi	r16, 0xC4	; 196
     7b4:	1f 4f       	sbci	r17, 0xFF	; 255
     7b6:	8f ef       	ldi	r24, 0xFF	; 255
     7b8:	e8 1a       	sub	r14, r24
     7ba:	f8 0a       	sbc	r15, r24
     7bc:	f5 cf       	rjmp	.-22     	; 0x7a8 <_ZN21PulseSensorPlaygroundC1Ei+0x3c>
     7be:	ca 82       	std	Y+2, r12	; 0x02
     7c0:	db 82       	std	Y+3, r13	; 0x03
     7c2:	df 91       	pop	r29
     7c4:	cf 91       	pop	r28
     7c6:	1f 91       	pop	r17
     7c8:	0f 91       	pop	r16
     7ca:	ff 90       	pop	r15
     7cc:	ef 90       	pop	r14
     7ce:	df 90       	pop	r13
     7d0:	cf 90       	pop	r12
     7d2:	bf 90       	pop	r11
     7d4:	af 90       	pop	r10
     7d6:	08 95       	ret

000007d8 <_ZN21PulseSensorPlayground5beginEv>:
     7d8:	ef 92       	push	r14
     7da:	ff 92       	push	r15
     7dc:	0f 93       	push	r16
     7de:	1f 93       	push	r17
     7e0:	cf 93       	push	r28
     7e2:	df 93       	push	r29
     7e4:	ec 01       	movw	r28, r24
     7e6:	00 e0       	ldi	r16, 0x00	; 0
     7e8:	10 e0       	ldi	r17, 0x00	; 0
     7ea:	e1 2c       	mov	r14, r1
     7ec:	f1 2c       	mov	r15, r1
     7ee:	89 81       	ldd	r24, Y+1	; 0x01
     7f0:	90 e0       	ldi	r25, 0x00	; 0
     7f2:	e8 16       	cp	r14, r24
     7f4:	f9 06       	cpc	r15, r25
     7f6:	5c f4       	brge	.+22     	; 0x80e <_ZN21PulseSensorPlayground5beginEv+0x36>
     7f8:	8a 81       	ldd	r24, Y+2	; 0x02
     7fa:	9b 81       	ldd	r25, Y+3	; 0x03
     7fc:	80 0f       	add	r24, r16
     7fe:	91 1f       	adc	r25, r17
     800:	ea d0       	rcall	.+468    	; 0x9d6 <_ZN11PulseSensor14initializeLEDsEv>
     802:	8f ef       	ldi	r24, 0xFF	; 255
     804:	e8 1a       	sub	r14, r24
     806:	f8 0a       	sbc	r15, r24
     808:	04 5c       	subi	r16, 0xC4	; 196
     80a:	1f 4f       	sbci	r17, 0xFF	; 255
     80c:	f0 cf       	rjmp	.-32     	; 0x7ee <_ZN21PulseSensorPlayground5beginEv+0x16>
     80e:	84 d7       	rcall	.+3848   	; 0x1718 <micros>
     810:	dc 01       	movw	r26, r24
     812:	cb 01       	movw	r24, r22
     814:	80 53       	subi	r24, 0x30	; 48
     816:	98 4f       	sbci	r25, 0xF8	; 248
     818:	af 4f       	sbci	r26, 0xFF	; 255
     81a:	bf 4f       	sbci	r27, 0xFF	; 255
     81c:	8c 83       	std	Y+4, r24	; 0x04
     81e:	9d 83       	std	Y+5, r25	; 0x05
     820:	ae 83       	std	Y+6, r26	; 0x06
     822:	bf 83       	std	Y+7, r27	; 0x07
     824:	18 86       	std	Y+8, r1	; 0x08
     826:	18 82       	st	Y, r1
     828:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <_ZN21PulseSensorPlayground15UsingInterruptsE>
     82c:	81 11       	cpse	r24, r1
     82e:	02 c0       	rjmp	.+4      	; 0x834 <_ZN21PulseSensorPlayground5beginEv+0x5c>
     830:	11 e0       	ldi	r17, 0x01	; 1
     832:	0e c0       	rjmp	.+28     	; 0x850 <_ZN21PulseSensorPlayground5beginEv+0x78>
     834:	c3 dc       	rcall	.-1658   	; 0x1bc <_Z35PulseSensorPlaygroundSetupInterruptv>
     836:	18 2f       	mov	r17, r24
     838:	81 11       	cpse	r24, r1
     83a:	fa cf       	rjmp	.-12     	; 0x830 <_ZN21PulseSensorPlayground5beginEv+0x58>
     83c:	ce 01       	movw	r24, r28
     83e:	09 96       	adiw	r24, 0x09	; 9
     840:	f3 d0       	rcall	.+486    	; 0xa28 <_ZN23PulseSensorSerialOutput9getSerialEv>
     842:	00 97       	sbiw	r24, 0x00	; 0
     844:	19 f0       	breq	.+6      	; 0x84c <_ZN21PulseSensorPlayground5beginEv+0x74>
     846:	64 eb       	ldi	r22, 0xB4	; 180
     848:	70 e0       	ldi	r23, 0x00	; 0
     84a:	f7 d6       	rcall	.+3566   	; 0x163a <_ZN5Print5printEPK19__FlashStringHelper>
     84c:	81 e0       	ldi	r24, 0x01	; 1
     84e:	88 83       	st	Y, r24
     850:	81 2f       	mov	r24, r17
     852:	df 91       	pop	r29
     854:	cf 91       	pop	r28
     856:	1f 91       	pop	r17
     858:	0f 91       	pop	r16
     85a:	ff 90       	pop	r15
     85c:	ef 90       	pop	r14
     85e:	08 95       	ret

00000860 <_ZN21PulseSensorPlayground11analogInputEii>:
     860:	fc 01       	movw	r30, r24
     862:	57 fd       	sbrc	r21, 7
     864:	14 c0       	rjmp	.+40     	; 0x88e <_ZN21PulseSensorPlayground11analogInputEii+0x2e>
     866:	21 81       	ldd	r18, Z+1	; 0x01
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	42 17       	cp	r20, r18
     86c:	53 07       	cpc	r21, r19
     86e:	0c f4       	brge	.+2      	; 0x872 <_ZN21PulseSensorPlayground11analogInputEii+0x12>
     870:	9a 01       	movw	r18, r20
     872:	42 17       	cp	r20, r18
     874:	53 07       	cpc	r21, r19
     876:	59 f4       	brne	.+22     	; 0x88e <_ZN21PulseSensorPlayground11analogInputEii+0x2e>
     878:	2c e3       	ldi	r18, 0x3C	; 60
     87a:	24 9f       	mul	r18, r20
     87c:	c0 01       	movw	r24, r0
     87e:	25 9f       	mul	r18, r21
     880:	90 0d       	add	r25, r0
     882:	11 24       	eor	r1, r1
     884:	22 81       	ldd	r18, Z+2	; 0x02
     886:	33 81       	ldd	r19, Z+3	; 0x03
     888:	82 0f       	add	r24, r18
     88a:	93 1f       	adc	r25, r19
     88c:	90 c0       	rjmp	.+288    	; 0x9ae <_ZN11PulseSensor11analogInputEi>
     88e:	08 95       	ret

00000890 <_ZN21PulseSensorPlayground12blinkOnPulseEii>:
     890:	fc 01       	movw	r30, r24
     892:	57 fd       	sbrc	r21, 7
     894:	14 c0       	rjmp	.+40     	; 0x8be <_ZN21PulseSensorPlayground12blinkOnPulseEii+0x2e>
     896:	21 81       	ldd	r18, Z+1	; 0x01
     898:	30 e0       	ldi	r19, 0x00	; 0
     89a:	42 17       	cp	r20, r18
     89c:	53 07       	cpc	r21, r19
     89e:	0c f4       	brge	.+2      	; 0x8a2 <_ZN21PulseSensorPlayground12blinkOnPulseEii+0x12>
     8a0:	9a 01       	movw	r18, r20
     8a2:	42 17       	cp	r20, r18
     8a4:	53 07       	cpc	r21, r19
     8a6:	59 f4       	brne	.+22     	; 0x8be <_ZN21PulseSensorPlayground12blinkOnPulseEii+0x2e>
     8a8:	2c e3       	ldi	r18, 0x3C	; 60
     8aa:	24 9f       	mul	r18, r20
     8ac:	c0 01       	movw	r24, r0
     8ae:	25 9f       	mul	r18, r21
     8b0:	90 0d       	add	r25, r0
     8b2:	11 24       	eor	r1, r1
     8b4:	22 81       	ldd	r18, Z+2	; 0x02
     8b6:	33 81       	ldd	r19, Z+3	; 0x03
     8b8:	82 0f       	add	r24, r18
     8ba:	93 1f       	adc	r25, r19
     8bc:	7c c0       	rjmp	.+248    	; 0x9b6 <_ZN11PulseSensor12blinkOnPulseEi>
     8be:	08 95       	ret

000008c0 <_ZN21PulseSensorPlayground11fadeOnPulseEii>:
     8c0:	fc 01       	movw	r30, r24
     8c2:	57 fd       	sbrc	r21, 7
     8c4:	14 c0       	rjmp	.+40     	; 0x8ee <_ZN21PulseSensorPlayground11fadeOnPulseEii+0x2e>
     8c6:	21 81       	ldd	r18, Z+1	; 0x01
     8c8:	30 e0       	ldi	r19, 0x00	; 0
     8ca:	42 17       	cp	r20, r18
     8cc:	53 07       	cpc	r21, r19
     8ce:	0c f4       	brge	.+2      	; 0x8d2 <_ZN21PulseSensorPlayground11fadeOnPulseEii+0x12>
     8d0:	9a 01       	movw	r18, r20
     8d2:	42 17       	cp	r20, r18
     8d4:	53 07       	cpc	r21, r19
     8d6:	59 f4       	brne	.+22     	; 0x8ee <_ZN21PulseSensorPlayground11fadeOnPulseEii+0x2e>
     8d8:	2c e3       	ldi	r18, 0x3C	; 60
     8da:	24 9f       	mul	r18, r20
     8dc:	c0 01       	movw	r24, r0
     8de:	25 9f       	mul	r18, r21
     8e0:	90 0d       	add	r25, r0
     8e2:	11 24       	eor	r1, r1
     8e4:	22 81       	ldd	r18, Z+2	; 0x02
     8e6:	33 81       	ldd	r19, Z+3	; 0x03
     8e8:	82 0f       	add	r24, r18
     8ea:	93 1f       	adc	r25, r19
     8ec:	68 c0       	rjmp	.+208    	; 0x9be <_ZN11PulseSensor11fadeOnPulseEi>
     8ee:	08 95       	ret

000008f0 <_ZN21PulseSensorPlayground9setSerialER6Stream>:

void PulseSensorPlayground::setSerial(Stream &output) {
  SerialOutput.setSerial(output);
     8f0:	09 96       	adiw	r24, 0x09	; 9
     8f2:	96 c0       	rjmp	.+300    	; 0xa20 <_ZN23PulseSensorSerialOutput9setSerialER6Stream>

000008f4 <_ZN21PulseSensorPlayground13setOutputTypeEh>:
}

void PulseSensorPlayground::setOutputType(byte outputType) {
  SerialOutput.setOutputType(outputType);
     8f4:	09 96       	adiw	r24, 0x09	; 9
     8f6:	9c c0       	rjmp	.+312    	; 0xa30 <_ZN23PulseSensorSerialOutput13setOutputTypeEh>

000008f8 <_ZN21PulseSensorPlayground12setThresholdEii>:
}

void PulseSensorPlayground::setThreshold(int threshold, int sensorIndex) {
     8f8:	fc 01       	movw	r30, r24
  if (sensorIndex != constrain(sensorIndex, 0, SensorCount)) {
     8fa:	57 fd       	sbrc	r21, 7
     8fc:	14 c0       	rjmp	.+40     	; 0x926 <_ZN21PulseSensorPlayground12setThresholdEii+0x2e>
     8fe:	21 81       	ldd	r18, Z+1	; 0x01
     900:	30 e0       	ldi	r19, 0x00	; 0
     902:	42 17       	cp	r20, r18
     904:	53 07       	cpc	r21, r19
     906:	0c f4       	brge	.+2      	; 0x90a <_ZN21PulseSensorPlayground12setThresholdEii+0x12>
     908:	9a 01       	movw	r18, r20
     90a:	42 17       	cp	r20, r18
     90c:	53 07       	cpc	r21, r19
     90e:	59 f4       	brne	.+22     	; 0x926 <_ZN21PulseSensorPlayground12setThresholdEii+0x2e>
    return; // out of range.
  }
  Sensors[sensorIndex].setThreshold(threshold);
     910:	2c e3       	ldi	r18, 0x3C	; 60
     912:	24 9f       	mul	r18, r20
     914:	c0 01       	movw	r24, r0
     916:	25 9f       	mul	r18, r21
     918:	90 0d       	add	r25, r0
     91a:	11 24       	eor	r1, r1
     91c:	22 81       	ldd	r18, Z+2	; 0x02
     91e:	33 81       	ldd	r19, Z+3	; 0x03
     920:	82 0f       	add	r24, r18
     922:	93 1f       	adc	r25, r19
     924:	50 c0       	rjmp	.+160    	; 0x9c6 <_ZN11PulseSensor12setThresholdEi>
     926:	08 95       	ret

00000928 <_ZN11PulseSensor14resetVariablesEv>:
    IBI = 600;                  // 600ms per beat = 100 Beats Per Minute (BPM)
    Pulse = false;
    amp = 100;                  // beat amplitude 1/10 of input range.

  }
}
     928:	fc 01       	movw	r30, r24
     92a:	dc 01       	movw	r26, r24
     92c:	5c 96       	adiw	r26, 0x1c	; 28
     92e:	c0 96       	adiw	r24, 0x30	; 48
     930:	1d 92       	st	X+, r1
     932:	1d 92       	st	X+, r1
     934:	a8 17       	cp	r26, r24
     936:	b9 07       	cpc	r27, r25
     938:	d9 f7       	brne	.-10     	; 0x930 <_ZN11PulseSensor14resetVariablesEv+0x8>
     93a:	15 86       	std	Z+13, r1	; 0x0d
     93c:	17 82       	std	Z+7, r1	; 0x07
     93e:	16 82       	std	Z+6, r1	; 0x06
     940:	8e ee       	ldi	r24, 0xEE	; 238
     942:	92 e0       	ldi	r25, 0x02	; 2
     944:	93 87       	std	Z+11, r25	; 0x0b
     946:	82 87       	std	Z+10, r24	; 0x0a
     948:	14 86       	std	Z+12, r1	; 0x0c
     94a:	10 aa       	std	Z+48, r1	; 0x30
     94c:	11 aa       	std	Z+49, r1	; 0x31
     94e:	12 aa       	std	Z+50, r1	; 0x32
     950:	13 aa       	std	Z+51, r1	; 0x33
     952:	14 8a       	std	Z+20, r1	; 0x14
     954:	15 8a       	std	Z+21, r1	; 0x15
     956:	16 8a       	std	Z+22, r1	; 0x16
     958:	17 8a       	std	Z+23, r1	; 0x17
     95a:	80 e0       	ldi	r24, 0x00	; 0
     95c:	92 e0       	ldi	r25, 0x02	; 2
     95e:	95 ab       	std	Z+53, r25	; 0x35
     960:	84 ab       	std	Z+52, r24	; 0x34
     962:	97 ab       	std	Z+55, r25	; 0x37
     964:	86 ab       	std	Z+54, r24	; 0x36
     966:	86 e2       	ldi	r24, 0x26	; 38
     968:	92 e0       	ldi	r25, 0x02	; 2
     96a:	91 8b       	std	Z+17, r25	; 0x11
     96c:	80 8b       	std	Z+16, r24	; 0x10
     96e:	91 af       	std	Z+57, r25	; 0x39
     970:	80 af       	std	Z+56, r24	; 0x38
     972:	84 e6       	ldi	r24, 0x64	; 100
     974:	90 e0       	ldi	r25, 0x00	; 0
     976:	93 8b       	std	Z+19, r25	; 0x13
     978:	82 8b       	std	Z+18, r24	; 0x12
     97a:	81 e0       	ldi	r24, 0x01	; 1
     97c:	82 af       	std	Z+58, r24	; 0x3a
     97e:	13 ae       	std	Z+59, r1	; 0x3b
     980:	17 86       	std	Z+15, r1	; 0x0f
     982:	16 86       	std	Z+14, r1	; 0x0e
     984:	08 95       	ret

00000986 <_ZN11PulseSensorC1Ev>:
     986:	2f e1       	ldi	r18, 0x1F	; 31
     988:	30 e0       	ldi	r19, 0x00	; 0
     98a:	fc 01       	movw	r30, r24
     98c:	31 83       	std	Z+1, r19	; 0x01
     98e:	20 83       	st	Z, r18
     990:	2f ef       	ldi	r18, 0xFF	; 255
     992:	3f ef       	ldi	r19, 0xFF	; 255
     994:	33 83       	std	Z+3, r19	; 0x03
     996:	22 83       	std	Z+2, r18	; 0x02
     998:	35 83       	std	Z+5, r19	; 0x05
     99a:	24 83       	std	Z+4, r18	; 0x04
     99c:	42 e0       	ldi	r20, 0x02	; 2
     99e:	50 e0       	ldi	r21, 0x00	; 0
     9a0:	60 e0       	ldi	r22, 0x00	; 0
     9a2:	70 e0       	ldi	r23, 0x00	; 0
     9a4:	40 8f       	std	Z+24, r20	; 0x18
     9a6:	51 8f       	std	Z+25, r21	; 0x19
     9a8:	62 8f       	std	Z+26, r22	; 0x1a
     9aa:	73 8f       	std	Z+27, r23	; 0x1b
     9ac:	bd cf       	rjmp	.-134    	; 0x928 <_ZN11PulseSensor14resetVariablesEv>

000009ae <_ZN11PulseSensor11analogInputEi>:
     9ae:	fc 01       	movw	r30, r24
     9b0:	71 83       	std	Z+1, r23	; 0x01
     9b2:	60 83       	st	Z, r22
     9b4:	08 95       	ret

000009b6 <_ZN11PulseSensor12blinkOnPulseEi>:
     9b6:	fc 01       	movw	r30, r24
     9b8:	73 83       	std	Z+3, r23	; 0x03
     9ba:	62 83       	std	Z+2, r22	; 0x02
     9bc:	08 95       	ret

000009be <_ZN11PulseSensor11fadeOnPulseEi>:
     9be:	fc 01       	movw	r30, r24
     9c0:	75 83       	std	Z+5, r23	; 0x05
     9c2:	64 83       	std	Z+4, r22	; 0x04
     9c4:	08 95       	ret

000009c6 <_ZN11PulseSensor12setThresholdEi>:
     9c6:	f8 94       	cli
     9c8:	fc 01       	movw	r30, r24
     9ca:	71 8b       	std	Z+17, r23	; 0x11
     9cc:	60 8b       	std	Z+16, r22	; 0x10
     9ce:	71 af       	std	Z+57, r23	; 0x39
     9d0:	60 af       	std	Z+56, r22	; 0x38
     9d2:	78 94       	sei
     9d4:	08 95       	ret

000009d6 <_ZN11PulseSensor14initializeLEDsEv>:

void PulseSensor::initializeLEDs() {
     9d6:	cf 93       	push	r28
     9d8:	df 93       	push	r29
     9da:	ec 01       	movw	r28, r24
  if (BlinkPin >= 0) {
     9dc:	8a 81       	ldd	r24, Y+2	; 0x02
     9de:	9b 81       	ldd	r25, Y+3	; 0x03
     9e0:	97 fd       	sbrc	r25, 7
     9e2:	07 c0       	rjmp	.+14     	; 0x9f2 <_ZN11PulseSensor14initializeLEDsEv+0x1c>
    pinMode(BlinkPin, OUTPUT);
     9e4:	61 e0       	ldi	r22, 0x01	; 1
     9e6:	0e 94 fd 0c 	call	0x19fa	; 0x19fa <pinMode>
    digitalWrite(BlinkPin, LOW);
     9ea:	60 e0       	ldi	r22, 0x00	; 0
     9ec:	8a 81       	ldd	r24, Y+2	; 0x02
     9ee:	0e 94 39 0d 	call	0x1a72	; 0x1a72 <digitalWrite>
  }
  if (FadePin >= 0) {
     9f2:	8c 81       	ldd	r24, Y+4	; 0x04
     9f4:	9d 81       	ldd	r25, Y+5	; 0x05
     9f6:	97 fd       	sbrc	r25, 7
     9f8:	08 c0       	rjmp	.+16     	; 0xa0a <_ZN11PulseSensor14initializeLEDsEv+0x34>
	#ifndef NO_ANALOG_WRITE
    pinMode(FadePin, OUTPUT);
     9fa:	61 e0       	ldi	r22, 0x01	; 1
     9fc:	fe d7       	rcall	.+4092   	; 0x19fa <pinMode>
    analogWrite(FadePin, 0); // turn off the LED.
     9fe:	60 e0       	ldi	r22, 0x00	; 0
     a00:	70 e0       	ldi	r23, 0x00	; 0
     a02:	8c 81       	ldd	r24, Y+4	; 0x04
	#endif
  }
}
     a04:	df 91       	pop	r29
     a06:	cf 91       	pop	r28
    digitalWrite(BlinkPin, LOW);
  }
  if (FadePin >= 0) {
	#ifndef NO_ANALOG_WRITE
    pinMode(FadePin, OUTPUT);
    analogWrite(FadePin, 0); // turn off the LED.
     a08:	5b c7       	rjmp	.+3766   	; 0x18c0 <analogWrite>
	#endif
  }
}
     a0a:	df 91       	pop	r29
     a0c:	cf 91       	pop	r28
     a0e:	08 95       	ret

00000a10 <_ZN23PulseSensorSerialOutputC1Ev>:
   This software is not intended for medical use.
*/
#include "PulseSensorSerialOutput.h"

PulseSensorSerialOutput::PulseSensorSerialOutput() {
  pOutput = NULL;
     a10:	fc 01       	movw	r30, r24
     a12:	11 82       	std	Z+1, r1	; 0x01
     a14:	10 82       	st	Z, r1
  OutputType = SERIAL_PLOTTER;
     a16:	22 e0       	ldi	r18, 0x02	; 2
     a18:	30 e0       	ldi	r19, 0x00	; 0
     a1a:	33 83       	std	Z+3, r19	; 0x03
     a1c:	22 83       	std	Z+2, r18	; 0x02
     a1e:	08 95       	ret

00000a20 <_ZN23PulseSensorSerialOutput9setSerialER6Stream>:
}

void PulseSensorSerialOutput::setSerial(Stream &output) {
  pOutput = &output;
     a20:	fc 01       	movw	r30, r24
     a22:	71 83       	std	Z+1, r23	; 0x01
     a24:	60 83       	st	Z, r22
     a26:	08 95       	ret

00000a28 <_ZN23PulseSensorSerialOutput9getSerialEv>:
}

Stream *PulseSensorSerialOutput::getSerial() {
  return pOutput;
}
     a28:	fc 01       	movw	r30, r24
     a2a:	80 81       	ld	r24, Z
     a2c:	91 81       	ldd	r25, Z+1	; 0x01
     a2e:	08 95       	ret

00000a30 <_ZN23PulseSensorSerialOutput13setOutputTypeEh>:

void PulseSensorSerialOutput::setOutputType(byte outputType) {
  OutputType = outputType;
     a30:	70 e0       	ldi	r23, 0x00	; 0
     a32:	fc 01       	movw	r30, r24
     a34:	73 83       	std	Z+3, r23	; 0x03
     a36:	62 83       	std	Z+2, r22	; 0x02
     a38:	08 95       	ret

00000a3a <twi_init>:
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
     a3a:	10 92 ff 01 	sts	0x01FF, r1	; 0x8001ff <twi_state>
     a3e:	81 e0       	ldi	r24, 0x01	; 1
     a40:	80 93 fd 01 	sts	0x01FD, r24	; 0x8001fd <twi_sendStop>
     a44:	10 92 fc 01 	sts	0x01FC, r1	; 0x8001fc <twi_inRepStart>
     a48:	61 e0       	ldi	r22, 0x01	; 1
     a4a:	81 e1       	ldi	r24, 0x11	; 17
     a4c:	0e 94 39 0d 	call	0x1a72	; 0x1a72 <digitalWrite>
     a50:	61 e0       	ldi	r22, 0x01	; 1
     a52:	80 e1       	ldi	r24, 0x10	; 16
     a54:	0e 94 39 0d 	call	0x1a72	; 0x1a72 <digitalWrite>
     a58:	e9 eb       	ldi	r30, 0xB9	; 185
     a5a:	f0 e0       	ldi	r31, 0x00	; 0
     a5c:	80 81       	ld	r24, Z
     a5e:	8e 7f       	andi	r24, 0xFE	; 254
     a60:	80 83       	st	Z, r24
     a62:	80 81       	ld	r24, Z
     a64:	8d 7f       	andi	r24, 0xFD	; 253
     a66:	80 83       	st	Z, r24
     a68:	88 e4       	ldi	r24, 0x48	; 72
     a6a:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>
     a6e:	85 e4       	ldi	r24, 0x45	; 69
     a70:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
     a74:	08 95       	ret

00000a76 <twi_writeTo>:
     a76:	0f 93       	push	r16
     a78:	41 32       	cpi	r20, 0x21	; 33
     a7a:	08 f0       	brcs	.+2      	; 0xa7e <twi_writeTo+0x8>
     a7c:	4a c0       	rjmp	.+148    	; 0xb12 <twi_writeTo+0x9c>
     a7e:	90 91 ff 01 	lds	r25, 0x01FF	; 0x8001ff <twi_state>
     a82:	91 11       	cpse	r25, r1
     a84:	fc cf       	rjmp	.-8      	; 0xa7e <twi_writeTo+0x8>
     a86:	32 e0       	ldi	r19, 0x02	; 2
     a88:	30 93 ff 01 	sts	0x01FF, r19	; 0x8001ff <twi_state>
     a8c:	00 93 fd 01 	sts	0x01FD, r16	; 0x8001fd <twi_sendStop>
     a90:	3f ef       	ldi	r19, 0xFF	; 255
     a92:	30 93 92 01 	sts	0x0192, r19	; 0x800192 <twi_error>
     a96:	10 92 d7 01 	sts	0x01D7, r1	; 0x8001d7 <twi_masterBufferIndex>
     a9a:	40 93 d6 01 	sts	0x01D6, r20	; 0x8001d6 <twi_masterBufferLength>
     a9e:	56 2f       	mov	r21, r22
     aa0:	a8 ed       	ldi	r26, 0xD8	; 216
     aa2:	b1 e0       	ldi	r27, 0x01	; 1
     aa4:	fb 01       	movw	r30, r22
     aa6:	3e 2f       	mov	r19, r30
     aa8:	35 1b       	sub	r19, r21
     aaa:	34 17       	cp	r19, r20
     aac:	18 f4       	brcc	.+6      	; 0xab4 <twi_writeTo+0x3e>
     aae:	31 91       	ld	r19, Z+
     ab0:	3d 93       	st	X+, r19
     ab2:	f9 cf       	rjmp	.-14     	; 0xaa6 <twi_writeTo+0x30>
     ab4:	10 92 fe 01 	sts	0x01FE, r1	; 0x8001fe <twi_slarw>
     ab8:	30 91 fe 01 	lds	r19, 0x01FE	; 0x8001fe <twi_slarw>
     abc:	88 0f       	add	r24, r24
     abe:	83 2b       	or	r24, r19
     ac0:	80 93 fe 01 	sts	0x01FE, r24	; 0x8001fe <twi_slarw>
     ac4:	80 91 fc 01 	lds	r24, 0x01FC	; 0x8001fc <twi_inRepStart>
     ac8:	81 30       	cpi	r24, 0x01	; 1
     aca:	61 f4       	brne	.+24     	; 0xae4 <twi_writeTo+0x6e>
     acc:	10 92 fc 01 	sts	0x01FC, r1	; 0x8001fc <twi_inRepStart>
     ad0:	80 91 fe 01 	lds	r24, 0x01FE	; 0x8001fe <twi_slarw>
     ad4:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
     ad8:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
     adc:	83 fd       	sbrc	r24, 3
     ade:	f8 cf       	rjmp	.-16     	; 0xad0 <twi_writeTo+0x5a>
     ae0:	85 ec       	ldi	r24, 0xC5	; 197
     ae2:	01 c0       	rjmp	.+2      	; 0xae6 <twi_writeTo+0x70>
     ae4:	85 ee       	ldi	r24, 0xE5	; 229
     ae6:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
     aea:	22 23       	and	r18, r18
     aec:	21 f0       	breq	.+8      	; 0xaf6 <twi_writeTo+0x80>
     aee:	80 91 ff 01 	lds	r24, 0x01FF	; 0x8001ff <twi_state>
     af2:	82 30       	cpi	r24, 0x02	; 2
     af4:	d1 f3       	breq	.-12     	; 0xaea <twi_writeTo+0x74>
     af6:	80 91 92 01 	lds	r24, 0x0192	; 0x800192 <twi_error>
     afa:	8f 3f       	cpi	r24, 0xFF	; 255
     afc:	79 f0       	breq	.+30     	; 0xb1c <twi_writeTo+0xa6>
     afe:	80 91 92 01 	lds	r24, 0x0192	; 0x800192 <twi_error>
     b02:	80 32       	cpi	r24, 0x20	; 32
     b04:	41 f0       	breq	.+16     	; 0xb16 <twi_writeTo+0xa0>
     b06:	80 91 92 01 	lds	r24, 0x0192	; 0x800192 <twi_error>
     b0a:	80 33       	cpi	r24, 0x30	; 48
     b0c:	31 f0       	breq	.+12     	; 0xb1a <twi_writeTo+0xa4>
     b0e:	94 e0       	ldi	r25, 0x04	; 4
     b10:	05 c0       	rjmp	.+10     	; 0xb1c <twi_writeTo+0xa6>
     b12:	91 e0       	ldi	r25, 0x01	; 1
     b14:	03 c0       	rjmp	.+6      	; 0xb1c <twi_writeTo+0xa6>
     b16:	92 e0       	ldi	r25, 0x02	; 2
     b18:	01 c0       	rjmp	.+2      	; 0xb1c <twi_writeTo+0xa6>
     b1a:	93 e0       	ldi	r25, 0x03	; 3
     b1c:	89 2f       	mov	r24, r25
     b1e:	0f 91       	pop	r16
     b20:	08 95       	ret

00000b22 <twi_transmit>:
     b22:	61 32       	cpi	r22, 0x21	; 33
     b24:	98 f4       	brcc	.+38     	; 0xb4c <twi_transmit+0x2a>
     b26:	20 91 ff 01 	lds	r18, 0x01FF	; 0x8001ff <twi_state>
     b2a:	24 30       	cpi	r18, 0x04	; 4
     b2c:	89 f4       	brne	.+34     	; 0xb50 <twi_transmit+0x2e>
     b2e:	60 93 b4 01 	sts	0x01B4, r22	; 0x8001b4 <twi_txBufferLength>
     b32:	28 2f       	mov	r18, r24
     b34:	a6 eb       	ldi	r26, 0xB6	; 182
     b36:	b1 e0       	ldi	r27, 0x01	; 1
     b38:	fc 01       	movw	r30, r24
     b3a:	8e 2f       	mov	r24, r30
     b3c:	82 1b       	sub	r24, r18
     b3e:	86 17       	cp	r24, r22
     b40:	18 f4       	brcc	.+6      	; 0xb48 <twi_transmit+0x26>
     b42:	81 91       	ld	r24, Z+
     b44:	8d 93       	st	X+, r24
     b46:	f9 cf       	rjmp	.-14     	; 0xb3a <twi_transmit+0x18>
     b48:	80 e0       	ldi	r24, 0x00	; 0
     b4a:	08 95       	ret
     b4c:	81 e0       	ldi	r24, 0x01	; 1
     b4e:	08 95       	ret
     b50:	82 e0       	ldi	r24, 0x02	; 2
     b52:	08 95       	ret

00000b54 <twi_stop>:
 * Output   none
 */
void twi_stop(void)
{
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
     b54:	85 ed       	ldi	r24, 0xD5	; 213
     b56:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>

  // wait for stop condition to be exectued on bus
  // TWINT is not set after a stop condition!
  while(TWCR & _BV(TWSTO)){
     b5a:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
     b5e:	84 fd       	sbrc	r24, 4
     b60:	fc cf       	rjmp	.-8      	; 0xb5a <twi_stop+0x6>
    continue;
  }

  // update twi state
  twi_state = TWI_READY;
     b62:	10 92 ff 01 	sts	0x01FF, r1	; 0x8001ff <twi_state>
     b66:	08 95       	ret

00000b68 <twi_releaseBus>:
 * Output   none
 */
void twi_releaseBus(void)
{
  // release bus
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT);
     b68:	85 ec       	ldi	r24, 0xC5	; 197
     b6a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>

  // update twi state
  twi_state = TWI_READY;
     b6e:	10 92 ff 01 	sts	0x01FF, r1	; 0x8001ff <twi_state>
     b72:	08 95       	ret

00000b74 <__vector_26>:
}

ISR(TWI_vect)
{
     b74:	1f 92       	push	r1
     b76:	0f 92       	push	r0
     b78:	0f b6       	in	r0, 0x3f	; 63
     b7a:	0f 92       	push	r0
     b7c:	11 24       	eor	r1, r1
     b7e:	0b b6       	in	r0, 0x3b	; 59
     b80:	0f 92       	push	r0
     b82:	2f 93       	push	r18
     b84:	3f 93       	push	r19
     b86:	4f 93       	push	r20
     b88:	5f 93       	push	r21
     b8a:	6f 93       	push	r22
     b8c:	7f 93       	push	r23
     b8e:	8f 93       	push	r24
     b90:	9f 93       	push	r25
     b92:	af 93       	push	r26
     b94:	bf 93       	push	r27
     b96:	ef 93       	push	r30
     b98:	ff 93       	push	r31
  switch(TW_STATUS){
     b9a:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
     b9e:	88 7f       	andi	r24, 0xF8	; 248
     ba0:	80 36       	cpi	r24, 0x60	; 96
     ba2:	09 f4       	brne	.+2      	; 0xba6 <__vector_26+0x32>
     ba4:	9d c0       	rjmp	.+314    	; 0xce0 <__vector_26+0x16c>
     ba6:	70 f5       	brcc	.+92     	; 0xc04 <__vector_26+0x90>
     ba8:	88 32       	cpi	r24, 0x28	; 40
     baa:	09 f4       	brne	.+2      	; 0xbae <__vector_26+0x3a>
     bac:	5c c0       	rjmp	.+184    	; 0xc66 <__vector_26+0xf2>
     bae:	90 f4       	brcc	.+36     	; 0xbd4 <__vector_26+0x60>
     bb0:	80 31       	cpi	r24, 0x10	; 16
     bb2:	09 f4       	brne	.+2      	; 0xbb6 <__vector_26+0x42>
     bb4:	55 c0       	rjmp	.+170    	; 0xc60 <__vector_26+0xec>
     bb6:	38 f4       	brcc	.+14     	; 0xbc6 <__vector_26+0x52>
     bb8:	88 23       	and	r24, r24
     bba:	09 f4       	brne	.+2      	; 0xbbe <__vector_26+0x4a>
     bbc:	f3 c0       	rjmp	.+486    	; 0xda4 <__vector_26+0x230>
     bbe:	88 30       	cpi	r24, 0x08	; 8
     bc0:	09 f4       	brne	.+2      	; 0xbc4 <__vector_26+0x50>
     bc2:	4e c0       	rjmp	.+156    	; 0xc60 <__vector_26+0xec>
     bc4:	f2 c0       	rjmp	.+484    	; 0xdaa <__vector_26+0x236>
     bc6:	88 31       	cpi	r24, 0x18	; 24
     bc8:	09 f4       	brne	.+2      	; 0xbcc <__vector_26+0x58>
     bca:	4d c0       	rjmp	.+154    	; 0xc66 <__vector_26+0xf2>
     bcc:	80 32       	cpi	r24, 0x20	; 32
     bce:	09 f4       	brne	.+2      	; 0xbd2 <__vector_26+0x5e>
     bd0:	5e c0       	rjmp	.+188    	; 0xc8e <__vector_26+0x11a>
     bd2:	eb c0       	rjmp	.+470    	; 0xdaa <__vector_26+0x236>
     bd4:	80 34       	cpi	r24, 0x40	; 64
     bd6:	09 f4       	brne	.+2      	; 0xbda <__vector_26+0x66>
     bd8:	69 c0       	rjmp	.+210    	; 0xcac <__vector_26+0x138>
     bda:	50 f4       	brcc	.+20     	; 0xbf0 <__vector_26+0x7c>
     bdc:	80 33       	cpi	r24, 0x30	; 48
     bde:	09 f4       	brne	.+2      	; 0xbe2 <__vector_26+0x6e>
     be0:	56 c0       	rjmp	.+172    	; 0xc8e <__vector_26+0x11a>
     be2:	88 33       	cpi	r24, 0x38	; 56
     be4:	09 f0       	breq	.+2      	; 0xbe8 <__vector_26+0x74>
     be6:	e1 c0       	rjmp	.+450    	; 0xdaa <__vector_26+0x236>
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
      twi_stop();
      break;
    case TW_MT_ARB_LOST: // lost bus arbitration
      twi_error = TW_MT_ARB_LOST;
     be8:	80 93 92 01 	sts	0x0192, r24	; 0x800192 <twi_error>
      twi_releaseBus();
     bec:	bd df       	rcall	.-134    	; 0xb68 <twi_releaseBus>
      break;
     bee:	dd c0       	rjmp	.+442    	; 0xdaa <__vector_26+0x236>
  twi_state = TWI_READY;
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
     bf0:	80 35       	cpi	r24, 0x50	; 80
     bf2:	09 f4       	brne	.+2      	; 0xbf6 <__vector_26+0x82>
     bf4:	4f c0       	rjmp	.+158    	; 0xc94 <__vector_26+0x120>
     bf6:	88 35       	cpi	r24, 0x58	; 88
     bf8:	09 f4       	brne	.+2      	; 0xbfc <__vector_26+0x88>
     bfa:	5d c0       	rjmp	.+186    	; 0xcb6 <__vector_26+0x142>
     bfc:	88 34       	cpi	r24, 0x48	; 72
     bfe:	09 f0       	breq	.+2      	; 0xc02 <__vector_26+0x8e>
     c00:	d4 c0       	rjmp	.+424    	; 0xdaa <__vector_26+0x236>
     c02:	d2 c0       	rjmp	.+420    	; 0xda8 <__vector_26+0x234>
     c04:	88 39       	cpi	r24, 0x98	; 152
     c06:	09 f4       	brne	.+2      	; 0xc0a <__vector_26+0x96>
     c08:	c3 c0       	rjmp	.+390    	; 0xd90 <__vector_26+0x21c>
     c0a:	a8 f4       	brcc	.+42     	; 0xc36 <__vector_26+0xc2>
     c0c:	88 37       	cpi	r24, 0x78	; 120
     c0e:	09 f4       	brne	.+2      	; 0xc12 <__vector_26+0x9e>
     c10:	67 c0       	rjmp	.+206    	; 0xce0 <__vector_26+0x16c>
     c12:	38 f4       	brcc	.+14     	; 0xc22 <__vector_26+0xae>
     c14:	88 36       	cpi	r24, 0x68	; 104
     c16:	09 f4       	brne	.+2      	; 0xc1a <__vector_26+0xa6>
     c18:	63 c0       	rjmp	.+198    	; 0xce0 <__vector_26+0x16c>
     c1a:	80 37       	cpi	r24, 0x70	; 112
     c1c:	09 f4       	brne	.+2      	; 0xc20 <__vector_26+0xac>
     c1e:	60 c0       	rjmp	.+192    	; 0xce0 <__vector_26+0x16c>
     c20:	c4 c0       	rjmp	.+392    	; 0xdaa <__vector_26+0x236>
     c22:	88 38       	cpi	r24, 0x88	; 136
     c24:	09 f4       	brne	.+2      	; 0xc28 <__vector_26+0xb4>
     c26:	b4 c0       	rjmp	.+360    	; 0xd90 <__vector_26+0x21c>
     c28:	80 39       	cpi	r24, 0x90	; 144
     c2a:	09 f4       	brne	.+2      	; 0xc2e <__vector_26+0xba>
     c2c:	5f c0       	rjmp	.+190    	; 0xcec <__vector_26+0x178>
     c2e:	80 38       	cpi	r24, 0x80	; 128
     c30:	09 f0       	breq	.+2      	; 0xc34 <__vector_26+0xc0>
     c32:	bb c0       	rjmp	.+374    	; 0xdaa <__vector_26+0x236>
     c34:	5b c0       	rjmp	.+182    	; 0xcec <__vector_26+0x178>
     c36:	80 3b       	cpi	r24, 0xB0	; 176
     c38:	09 f4       	brne	.+2      	; 0xc3c <__vector_26+0xc8>
     c3a:	82 c0       	rjmp	.+260    	; 0xd40 <__vector_26+0x1cc>
     c3c:	38 f4       	brcc	.+14     	; 0xc4c <__vector_26+0xd8>
     c3e:	80 3a       	cpi	r24, 0xA0	; 160
     c40:	09 f4       	brne	.+2      	; 0xc44 <__vector_26+0xd0>
     c42:	66 c0       	rjmp	.+204    	; 0xd10 <__vector_26+0x19c>
     c44:	88 3a       	cpi	r24, 0xA8	; 168
     c46:	09 f4       	brne	.+2      	; 0xc4a <__vector_26+0xd6>
     c48:	7b c0       	rjmp	.+246    	; 0xd40 <__vector_26+0x1cc>
     c4a:	af c0       	rjmp	.+350    	; 0xdaa <__vector_26+0x236>
     c4c:	80 3c       	cpi	r24, 0xC0	; 192
     c4e:	09 f4       	brne	.+2      	; 0xc52 <__vector_26+0xde>
     c50:	a3 c0       	rjmp	.+326    	; 0xd98 <__vector_26+0x224>
     c52:	88 3c       	cpi	r24, 0xC8	; 200
     c54:	09 f4       	brne	.+2      	; 0xc58 <__vector_26+0xe4>
     c56:	a0 c0       	rjmp	.+320    	; 0xd98 <__vector_26+0x224>
     c58:	88 3b       	cpi	r24, 0xB8	; 184
     c5a:	09 f4       	brne	.+2      	; 0xc5e <__vector_26+0xea>
     c5c:	86 c0       	rjmp	.+268    	; 0xd6a <__vector_26+0x1f6>
     c5e:	a5 c0       	rjmp	.+330    	; 0xdaa <__vector_26+0x236>
    // All Master
    case TW_START:     // sent start condition
    case TW_REP_START: // sent repeated start condition
      // copy device address and r/w bit to output register and ack
      TWDR = twi_slarw;
     c60:	80 91 fe 01 	lds	r24, 0x01FE	; 0x8001fe <twi_slarw>
     c64:	10 c0       	rjmp	.+32     	; 0xc86 <__vector_26+0x112>

    // Master Transmitter
    case TW_MT_SLA_ACK:  // slave receiver acked address
    case TW_MT_DATA_ACK: // slave receiver acked data
      // if there is data to send, send it, otherwise stop 
      if(twi_masterBufferIndex < twi_masterBufferLength){
     c66:	90 91 d7 01 	lds	r25, 0x01D7	; 0x8001d7 <twi_masterBufferIndex>
     c6a:	80 91 d6 01 	lds	r24, 0x01D6	; 0x8001d6 <twi_masterBufferLength>
     c6e:	98 17       	cp	r25, r24
     c70:	70 f5       	brcc	.+92     	; 0xcce <__vector_26+0x15a>
        // copy data to output register and ack
        TWDR = twi_masterBuffer[twi_masterBufferIndex++];
     c72:	e0 91 d7 01 	lds	r30, 0x01D7	; 0x8001d7 <twi_masterBufferIndex>
     c76:	81 e0       	ldi	r24, 0x01	; 1
     c78:	8e 0f       	add	r24, r30
     c7a:	80 93 d7 01 	sts	0x01D7, r24	; 0x8001d7 <twi_masterBufferIndex>
     c7e:	f0 e0       	ldi	r31, 0x00	; 0
     c80:	e8 52       	subi	r30, 0x28	; 40
     c82:	fe 4f       	sbci	r31, 0xFE	; 254
     c84:	80 81       	ld	r24, Z
     c86:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
     c8a:	85 ec       	ldi	r24, 0xC5	; 197
     c8c:	82 c0       	rjmp	.+260    	; 0xd92 <__vector_26+0x21e>
    case TW_MT_SLA_NACK:  // address sent, nack received
      twi_error = TW_MT_SLA_NACK;
      twi_stop();
      break;
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
     c8e:	80 93 92 01 	sts	0x0192, r24	; 0x800192 <twi_error>
     c92:	8a c0       	rjmp	.+276    	; 0xda8 <__vector_26+0x234>
      break;

    // Master Receiver
    case TW_MR_DATA_ACK: // data received, ack sent
      // put byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
     c94:	e0 91 d7 01 	lds	r30, 0x01D7	; 0x8001d7 <twi_masterBufferIndex>
     c98:	81 e0       	ldi	r24, 0x01	; 1
     c9a:	8e 0f       	add	r24, r30
     c9c:	80 93 d7 01 	sts	0x01D7, r24	; 0x8001d7 <twi_masterBufferIndex>
     ca0:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
     ca4:	f0 e0       	ldi	r31, 0x00	; 0
     ca6:	e8 52       	subi	r30, 0x28	; 40
     ca8:	fe 4f       	sbci	r31, 0xFE	; 254
     caa:	80 83       	st	Z, r24
    case TW_MR_SLA_ACK:  // address sent, ack received
      // ack if more bytes are expected, otherwise nack
      if(twi_masterBufferIndex < twi_masterBufferLength){
     cac:	90 91 d7 01 	lds	r25, 0x01D7	; 0x8001d7 <twi_masterBufferIndex>
     cb0:	80 91 d6 01 	lds	r24, 0x01D6	; 0x8001d6 <twi_masterBufferLength>
     cb4:	6a c0       	rjmp	.+212    	; 0xd8a <__vector_26+0x216>
        twi_reply(0);
      }
      break;
    case TW_MR_DATA_NACK: // data received, nack sent
      // put final byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
     cb6:	e0 91 d7 01 	lds	r30, 0x01D7	; 0x8001d7 <twi_masterBufferIndex>
     cba:	81 e0       	ldi	r24, 0x01	; 1
     cbc:	8e 0f       	add	r24, r30
     cbe:	80 93 d7 01 	sts	0x01D7, r24	; 0x8001d7 <twi_masterBufferIndex>
     cc2:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
     cc6:	f0 e0       	ldi	r31, 0x00	; 0
     cc8:	e8 52       	subi	r30, 0x28	; 40
     cca:	fe 4f       	sbci	r31, 0xFE	; 254
     ccc:	80 83       	st	Z, r24
	if (twi_sendStop)
     cce:	80 91 fd 01 	lds	r24, 0x01FD	; 0x8001fd <twi_sendStop>
     cd2:	81 11       	cpse	r24, r1
     cd4:	69 c0       	rjmp	.+210    	; 0xda8 <__vector_26+0x234>
          twi_stop();
	else {
	  twi_inRepStart = true;	// we're gonna send the START
     cd6:	81 e0       	ldi	r24, 0x01	; 1
     cd8:	80 93 fc 01 	sts	0x01FC, r24	; 0x8001fc <twi_inRepStart>
	  // don't enable the interrupt. We'll generate the start, but we 
	  // avoid handling the interrupt until we're in the next transaction,
	  // at the point where we would normally issue the start.
	  TWCR = _BV(TWINT) | _BV(TWSTA)| _BV(TWEN) ;
     cdc:	84 ea       	ldi	r24, 0xA4	; 164
     cde:	5d c0       	rjmp	.+186    	; 0xd9a <__vector_26+0x226>
    case TW_SR_SLA_ACK:   // addressed, returned ack
    case TW_SR_GCALL_ACK: // addressed generally, returned ack
    case TW_SR_ARB_LOST_SLA_ACK:   // lost arbitration, returned ack
    case TW_SR_ARB_LOST_GCALL_ACK: // lost arbitration, returned ack
      // enter slave receiver mode
      twi_state = TWI_SRX;
     ce0:	83 e0       	ldi	r24, 0x03	; 3
     ce2:	80 93 ff 01 	sts	0x01FF, r24	; 0x8001ff <twi_state>
      // indicate that rx buffer can be overwritten and ack
      twi_rxBufferIndex = 0;
     ce6:	10 92 93 01 	sts	0x0193, r1	; 0x800193 <twi_rxBufferIndex>
     cea:	cf cf       	rjmp	.-98     	; 0xc8a <__vector_26+0x116>
      twi_reply(1);
      break;
    case TW_SR_DATA_ACK:       // data received, returned ack
    case TW_SR_GCALL_DATA_ACK: // data received generally, returned ack
      // if there is still room in the rx buffer
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
     cec:	80 91 93 01 	lds	r24, 0x0193	; 0x800193 <twi_rxBufferIndex>
     cf0:	80 32       	cpi	r24, 0x20	; 32
     cf2:	08 f0       	brcs	.+2      	; 0xcf6 <__vector_26+0x182>
     cf4:	4d c0       	rjmp	.+154    	; 0xd90 <__vector_26+0x21c>
        // put byte in buffer and ack
        twi_rxBuffer[twi_rxBufferIndex++] = TWDR;
     cf6:	e0 91 93 01 	lds	r30, 0x0193	; 0x800193 <twi_rxBufferIndex>
     cfa:	81 e0       	ldi	r24, 0x01	; 1
     cfc:	8e 0f       	add	r24, r30
     cfe:	80 93 93 01 	sts	0x0193, r24	; 0x800193 <twi_rxBufferIndex>
     d02:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
     d06:	f0 e0       	ldi	r31, 0x00	; 0
     d08:	ec 56       	subi	r30, 0x6C	; 108
     d0a:	fe 4f       	sbci	r31, 0xFE	; 254
     d0c:	80 83       	st	Z, r24
        twi_reply(0);
      }
      break;
    case TW_SR_STOP: // stop or repeated start condition received
      // ack future responses and leave slave receiver state
      twi_releaseBus();
     d0e:	bd cf       	rjmp	.-134    	; 0xc8a <__vector_26+0x116>
     d10:	2b df       	rcall	.-426    	; 0xb68 <twi_releaseBus>
      // put a null char after data if there's room
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
     d12:	80 91 93 01 	lds	r24, 0x0193	; 0x800193 <twi_rxBufferIndex>
     d16:	80 32       	cpi	r24, 0x20	; 32
     d18:	30 f4       	brcc	.+12     	; 0xd26 <__vector_26+0x1b2>
        twi_rxBuffer[twi_rxBufferIndex] = '\0';
     d1a:	e0 91 93 01 	lds	r30, 0x0193	; 0x800193 <twi_rxBufferIndex>
     d1e:	f0 e0       	ldi	r31, 0x00	; 0
     d20:	ec 56       	subi	r30, 0x6C	; 108
     d22:	fe 4f       	sbci	r31, 0xFE	; 254
     d24:	10 82       	st	Z, r1
      }
      // callback to user defined callback
      twi_onSlaveReceive(twi_rxBuffer, twi_rxBufferIndex);
     d26:	60 91 93 01 	lds	r22, 0x0193	; 0x800193 <twi_rxBufferIndex>
     d2a:	70 e0       	ldi	r23, 0x00	; 0
     d2c:	e0 91 f8 01 	lds	r30, 0x01F8	; 0x8001f8 <twi_onSlaveReceive>
     d30:	f0 91 f9 01 	lds	r31, 0x01F9	; 0x8001f9 <twi_onSlaveReceive+0x1>
     d34:	84 e9       	ldi	r24, 0x94	; 148
     d36:	91 e0       	ldi	r25, 0x01	; 1
     d38:	09 95       	icall
      // since we submit rx buffer to "wire" library, we can reset it
      twi_rxBufferIndex = 0;
     d3a:	10 92 93 01 	sts	0x0193, r1	; 0x800193 <twi_rxBufferIndex>
      break;
     d3e:	35 c0       	rjmp	.+106    	; 0xdaa <__vector_26+0x236>
    
    // Slave Transmitter
    case TW_ST_SLA_ACK:          // addressed, returned ack
    case TW_ST_ARB_LOST_SLA_ACK: // arbitration lost, returned ack
      // enter slave transmitter mode
      twi_state = TWI_STX;
     d40:	84 e0       	ldi	r24, 0x04	; 4
     d42:	80 93 ff 01 	sts	0x01FF, r24	; 0x8001ff <twi_state>
      // ready the tx buffer index for iteration
      twi_txBufferIndex = 0;
     d46:	10 92 b5 01 	sts	0x01B5, r1	; 0x8001b5 <twi_txBufferIndex>
      // set tx buffer length to be zero, to verify if user changes it
      twi_txBufferLength = 0;
     d4a:	10 92 b4 01 	sts	0x01B4, r1	; 0x8001b4 <twi_txBufferLength>
      // request for txBuffer to be filled and length to be set
      // note: user must call twi_transmit(bytes, length) to do this
      twi_onSlaveTransmit();
     d4e:	e0 91 fa 01 	lds	r30, 0x01FA	; 0x8001fa <twi_onSlaveTransmit>
     d52:	f0 91 fb 01 	lds	r31, 0x01FB	; 0x8001fb <twi_onSlaveTransmit+0x1>
     d56:	09 95       	icall
      // if they didn't change buffer & length, initialize it
      if(0 == twi_txBufferLength){
     d58:	80 91 b4 01 	lds	r24, 0x01B4	; 0x8001b4 <twi_txBufferLength>
     d5c:	81 11       	cpse	r24, r1
     d5e:	05 c0       	rjmp	.+10     	; 0xd6a <__vector_26+0x1f6>
        twi_txBufferLength = 1;
     d60:	81 e0       	ldi	r24, 0x01	; 1
     d62:	80 93 b4 01 	sts	0x01B4, r24	; 0x8001b4 <twi_txBufferLength>
        twi_txBuffer[0] = 0x00;
     d66:	10 92 b6 01 	sts	0x01B6, r1	; 0x8001b6 <twi_txBuffer>
      }
      // transmit first byte from buffer, fall
    case TW_ST_DATA_ACK: // byte sent, ack returned
      // copy data to output register
      TWDR = twi_txBuffer[twi_txBufferIndex++];
     d6a:	e0 91 b5 01 	lds	r30, 0x01B5	; 0x8001b5 <twi_txBufferIndex>
     d6e:	81 e0       	ldi	r24, 0x01	; 1
     d70:	8e 0f       	add	r24, r30
     d72:	80 93 b5 01 	sts	0x01B5, r24	; 0x8001b5 <twi_txBufferIndex>
     d76:	f0 e0       	ldi	r31, 0x00	; 0
     d78:	ea 54       	subi	r30, 0x4A	; 74
     d7a:	fe 4f       	sbci	r31, 0xFE	; 254
     d7c:	80 81       	ld	r24, Z
     d7e:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
      // if there is more to send, ack, otherwise nack
      if(twi_txBufferIndex < twi_txBufferLength){
     d82:	90 91 b5 01 	lds	r25, 0x01B5	; 0x8001b5 <twi_txBufferIndex>
     d86:	80 91 b4 01 	lds	r24, 0x01B4	; 0x8001b4 <twi_txBufferLength>
     d8a:	98 17       	cp	r25, r24
     d8c:	08 f4       	brcc	.+2      	; 0xd90 <__vector_26+0x21c>
     d8e:	7d cf       	rjmp	.-262    	; 0xc8a <__vector_26+0x116>
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
     d90:	85 e8       	ldi	r24, 0x85	; 133
     d92:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
     d96:	09 c0       	rjmp	.+18     	; 0xdaa <__vector_26+0x236>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
     d98:	85 ec       	ldi	r24, 0xC5	; 197
     d9a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    case TW_ST_DATA_NACK: // received nack, we are done 
    case TW_ST_LAST_DATA: // received ack, but we are done already!
      // ack future responses
      twi_reply(1);
      // leave slave receiver state
      twi_state = TWI_READY;
     d9e:	10 92 ff 01 	sts	0x01FF, r1	; 0x8001ff <twi_state>
      break;
     da2:	03 c0       	rjmp	.+6      	; 0xdaa <__vector_26+0x236>

    // All
    case TW_NO_INFO:   // no state information
      break;
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
     da4:	10 92 92 01 	sts	0x0192, r1	; 0x800192 <twi_error>
      twi_stop();
     da8:	d5 de       	rcall	.-598    	; 0xb54 <twi_stop>
      break;
  }
}
     daa:	ff 91       	pop	r31
     dac:	ef 91       	pop	r30
     dae:	bf 91       	pop	r27
     db0:	af 91       	pop	r26
     db2:	9f 91       	pop	r25
     db4:	8f 91       	pop	r24
     db6:	7f 91       	pop	r23
     db8:	6f 91       	pop	r22
     dba:	5f 91       	pop	r21
     dbc:	4f 91       	pop	r20
     dbe:	3f 91       	pop	r19
     dc0:	2f 91       	pop	r18
     dc2:	0f 90       	pop	r0
     dc4:	0b be       	out	0x3b, r0	; 59
     dc6:	0f 90       	pop	r0
     dc8:	0f be       	out	0x3f, r0	; 63
     dca:	0f 90       	pop	r0
     dcc:	1f 90       	pop	r1
     dce:	18 95       	reti

00000dd0 <_ZN7TwoWire9availableEv>:
}

// sets function called on slave read
void TwoWire::onRequest( void (*function)(void) )
{
  user_onRequest = function;
     dd0:	80 91 30 02 	lds	r24, 0x0230	; 0x800230 <_ZN7TwoWire14rxBufferLengthE>
     dd4:	90 e0       	ldi	r25, 0x00	; 0
     dd6:	20 91 31 02 	lds	r18, 0x0231	; 0x800231 <_ZN7TwoWire13rxBufferIndexE>
     dda:	82 1b       	sub	r24, r18
     ddc:	91 09       	sbc	r25, r1
     dde:	08 95       	ret

00000de0 <_ZN7TwoWire4readEv>:
     de0:	90 91 31 02 	lds	r25, 0x0231	; 0x800231 <_ZN7TwoWire13rxBufferIndexE>
     de4:	80 91 30 02 	lds	r24, 0x0230	; 0x800230 <_ZN7TwoWire14rxBufferLengthE>
     de8:	98 17       	cp	r25, r24
     dea:	50 f4       	brcc	.+20     	; 0xe00 <_ZN7TwoWire4readEv+0x20>
     dec:	e9 2f       	mov	r30, r25
     dee:	f0 e0       	ldi	r31, 0x00	; 0
     df0:	ee 5c       	subi	r30, 0xCE	; 206
     df2:	fd 4f       	sbci	r31, 0xFD	; 253
     df4:	20 81       	ld	r18, Z
     df6:	30 e0       	ldi	r19, 0x00	; 0
     df8:	9f 5f       	subi	r25, 0xFF	; 255
     dfa:	90 93 31 02 	sts	0x0231, r25	; 0x800231 <_ZN7TwoWire13rxBufferIndexE>
     dfe:	02 c0       	rjmp	.+4      	; 0xe04 <_ZN7TwoWire4readEv+0x24>
     e00:	2f ef       	ldi	r18, 0xFF	; 255
     e02:	3f ef       	ldi	r19, 0xFF	; 255
     e04:	c9 01       	movw	r24, r18
     e06:	08 95       	ret

00000e08 <_ZN7TwoWire4peekEv>:
     e08:	e0 91 31 02 	lds	r30, 0x0231	; 0x800231 <_ZN7TwoWire13rxBufferIndexE>
     e0c:	80 91 30 02 	lds	r24, 0x0230	; 0x800230 <_ZN7TwoWire14rxBufferLengthE>
     e10:	e8 17       	cp	r30, r24
     e12:	30 f4       	brcc	.+12     	; 0xe20 <_ZN7TwoWire4peekEv+0x18>
     e14:	f0 e0       	ldi	r31, 0x00	; 0
     e16:	ee 5c       	subi	r30, 0xCE	; 206
     e18:	fd 4f       	sbci	r31, 0xFD	; 253
     e1a:	80 81       	ld	r24, Z
     e1c:	90 e0       	ldi	r25, 0x00	; 0
     e1e:	08 95       	ret
     e20:	8f ef       	ldi	r24, 0xFF	; 255
     e22:	9f ef       	ldi	r25, 0xFF	; 255
     e24:	08 95       	ret

00000e26 <_ZN7TwoWire5flushEv>:
     e26:	08 95       	ret

00000e28 <_ZN7TwoWire5writeEPKhj>:
     e28:	cf 92       	push	r12
     e2a:	df 92       	push	r13
     e2c:	ef 92       	push	r14
     e2e:	ff 92       	push	r15
     e30:	0f 93       	push	r16
     e32:	1f 93       	push	r17
     e34:	cf 93       	push	r28
     e36:	df 93       	push	r29
     e38:	7c 01       	movw	r14, r24
     e3a:	cb 01       	movw	r24, r22
     e3c:	8a 01       	movw	r16, r20
     e3e:	20 91 0c 02 	lds	r18, 0x020C	; 0x80020c <_ZN7TwoWire12transmittingE>
     e42:	22 23       	and	r18, r18
     e44:	89 f0       	breq	.+34     	; 0xe68 <_ZN7TwoWire5writeEPKhj+0x40>
     e46:	eb 01       	movw	r28, r22
     e48:	6b 01       	movw	r12, r22
     e4a:	c4 0e       	add	r12, r20
     e4c:	d5 1e       	adc	r13, r21
     e4e:	cc 15       	cp	r28, r12
     e50:	dd 05       	cpc	r29, r13
     e52:	61 f0       	breq	.+24     	; 0xe6c <_ZN7TwoWire5writeEPKhj+0x44>
     e54:	69 91       	ld	r22, Y+
     e56:	d7 01       	movw	r26, r14
     e58:	ed 91       	ld	r30, X+
     e5a:	fc 91       	ld	r31, X
     e5c:	01 90       	ld	r0, Z+
     e5e:	f0 81       	ld	r31, Z
     e60:	e0 2d       	mov	r30, r0
     e62:	c7 01       	movw	r24, r14
     e64:	09 95       	icall
     e66:	f3 cf       	rjmp	.-26     	; 0xe4e <_ZN7TwoWire5writeEPKhj+0x26>
     e68:	64 2f       	mov	r22, r20
     e6a:	5b de       	rcall	.-842    	; 0xb22 <twi_transmit>
     e6c:	c8 01       	movw	r24, r16
     e6e:	df 91       	pop	r29
     e70:	cf 91       	pop	r28
     e72:	1f 91       	pop	r17
     e74:	0f 91       	pop	r16
     e76:	ff 90       	pop	r15
     e78:	ef 90       	pop	r14
     e7a:	df 90       	pop	r13
     e7c:	cf 90       	pop	r12
     e7e:	08 95       	ret

00000e80 <_ZN7TwoWire5writeEh>:
     e80:	cf 93       	push	r28
     e82:	df 93       	push	r29
     e84:	1f 92       	push	r1
     e86:	cd b7       	in	r28, 0x3d	; 61
     e88:	de b7       	in	r29, 0x3e	; 62
     e8a:	69 83       	std	Y+1, r22	; 0x01
     e8c:	20 91 0c 02 	lds	r18, 0x020C	; 0x80020c <_ZN7TwoWire12transmittingE>
     e90:	22 23       	and	r18, r18
     e92:	d1 f0       	breq	.+52     	; 0xec8 <_ZN7TwoWire5writeEh+0x48>
     e94:	20 91 0d 02 	lds	r18, 0x020D	; 0x80020d <_ZN7TwoWire14txBufferLengthE>
     e98:	20 32       	cpi	r18, 0x20	; 32
     e9a:	40 f0       	brcs	.+16     	; 0xeac <_ZN7TwoWire5writeEh+0x2c>
     e9c:	21 e0       	ldi	r18, 0x01	; 1
     e9e:	30 e0       	ldi	r19, 0x00	; 0
     ea0:	fc 01       	movw	r30, r24
     ea2:	33 83       	std	Z+3, r19	; 0x03
     ea4:	22 83       	std	Z+2, r18	; 0x02
     ea6:	80 e0       	ldi	r24, 0x00	; 0
     ea8:	90 e0       	ldi	r25, 0x00	; 0
     eaa:	14 c0       	rjmp	.+40     	; 0xed4 <_ZN7TwoWire5writeEh+0x54>
     eac:	80 91 0e 02 	lds	r24, 0x020E	; 0x80020e <_ZN7TwoWire13txBufferIndexE>
     eb0:	e8 2f       	mov	r30, r24
     eb2:	f0 e0       	ldi	r31, 0x00	; 0
     eb4:	e1 5f       	subi	r30, 0xF1	; 241
     eb6:	fd 4f       	sbci	r31, 0xFD	; 253
     eb8:	99 81       	ldd	r25, Y+1	; 0x01
     eba:	90 83       	st	Z, r25
     ebc:	8f 5f       	subi	r24, 0xFF	; 255
     ebe:	80 93 0e 02 	sts	0x020E, r24	; 0x80020e <_ZN7TwoWire13txBufferIndexE>
     ec2:	80 93 0d 02 	sts	0x020D, r24	; 0x80020d <_ZN7TwoWire14txBufferLengthE>
     ec6:	04 c0       	rjmp	.+8      	; 0xed0 <_ZN7TwoWire5writeEh+0x50>
     ec8:	61 e0       	ldi	r22, 0x01	; 1
     eca:	ce 01       	movw	r24, r28
     ecc:	01 96       	adiw	r24, 0x01	; 1
     ece:	29 de       	rcall	.-942    	; 0xb22 <twi_transmit>
     ed0:	81 e0       	ldi	r24, 0x01	; 1
     ed2:	90 e0       	ldi	r25, 0x00	; 0
     ed4:	0f 90       	pop	r0
     ed6:	df 91       	pop	r29
     ed8:	cf 91       	pop	r28
     eda:	08 95       	ret

00000edc <_ZN7TwoWireC1Ev>:
     edc:	fc 01       	movw	r30, r24
     ede:	13 82       	std	Z+3, r1	; 0x03
     ee0:	12 82       	std	Z+2, r1	; 0x02
     ee2:	88 ee       	ldi	r24, 0xE8	; 232
     ee4:	93 e0       	ldi	r25, 0x03	; 3
     ee6:	a0 e0       	ldi	r26, 0x00	; 0
     ee8:	b0 e0       	ldi	r27, 0x00	; 0
     eea:	84 83       	std	Z+4, r24	; 0x04
     eec:	95 83       	std	Z+5, r25	; 0x05
     eee:	a6 83       	std	Z+6, r26	; 0x06
     ef0:	b7 83       	std	Z+7, r27	; 0x07
     ef2:	81 e4       	ldi	r24, 0x41	; 65
     ef4:	91 e0       	ldi	r25, 0x01	; 1
     ef6:	91 83       	std	Z+1, r25	; 0x01
     ef8:	80 83       	st	Z, r24
     efa:	08 95       	ret

00000efc <_ZN7TwoWire5beginEv>:
     efc:	10 92 31 02 	sts	0x0231, r1	; 0x800231 <_ZN7TwoWire13rxBufferIndexE>
     f00:	10 92 30 02 	sts	0x0230, r1	; 0x800230 <_ZN7TwoWire14rxBufferLengthE>
     f04:	10 92 0e 02 	sts	0x020E, r1	; 0x80020e <_ZN7TwoWire13txBufferIndexE>
     f08:	10 92 0d 02 	sts	0x020D, r1	; 0x80020d <_ZN7TwoWire14txBufferLengthE>
     f0c:	96 cd       	rjmp	.-1236   	; 0xa3a <twi_init>

00000f0e <_ZN7TwoWire17beginTransmissionEh>:
     f0e:	81 e0       	ldi	r24, 0x01	; 1
     f10:	80 93 0c 02 	sts	0x020C, r24	; 0x80020c <_ZN7TwoWire12transmittingE>
     f14:	60 93 2f 02 	sts	0x022F, r22	; 0x80022f <_ZN7TwoWire9txAddressE>
     f18:	10 92 0e 02 	sts	0x020E, r1	; 0x80020e <_ZN7TwoWire13txBufferIndexE>
     f1c:	10 92 0d 02 	sts	0x020D, r1	; 0x80020d <_ZN7TwoWire14txBufferLengthE>
     f20:	08 95       	ret

00000f22 <_ZN7TwoWire15endTransmissionEh>:
     f22:	0f 93       	push	r16
     f24:	06 2f       	mov	r16, r22
     f26:	21 e0       	ldi	r18, 0x01	; 1
     f28:	40 91 0d 02 	lds	r20, 0x020D	; 0x80020d <_ZN7TwoWire14txBufferLengthE>
     f2c:	6f e0       	ldi	r22, 0x0F	; 15
     f2e:	72 e0       	ldi	r23, 0x02	; 2
     f30:	80 91 2f 02 	lds	r24, 0x022F	; 0x80022f <_ZN7TwoWire9txAddressE>
     f34:	a0 dd       	rcall	.-1216   	; 0xa76 <twi_writeTo>
     f36:	10 92 0e 02 	sts	0x020E, r1	; 0x80020e <_ZN7TwoWire13txBufferIndexE>
     f3a:	10 92 0d 02 	sts	0x020D, r1	; 0x80020d <_ZN7TwoWire14txBufferLengthE>
     f3e:	10 92 0c 02 	sts	0x020C, r1	; 0x80020c <_ZN7TwoWire12transmittingE>
     f42:	0f 91       	pop	r16
     f44:	08 95       	ret

00000f46 <_ZN7TwoWire15endTransmissionEv>:
     f46:	61 e0       	ldi	r22, 0x01	; 1
     f48:	ec cf       	rjmp	.-40     	; 0xf22 <_ZN7TwoWire15endTransmissionEh>

00000f4a <_GLOBAL__sub_I__ZN7TwoWire8rxBufferE>:
}

// Preinstantiate Objects //////////////////////////////////////////////////////

TwoWire Wire = TwoWire();
     f4a:	80 e0       	ldi	r24, 0x00	; 0
     f4c:	92 e0       	ldi	r25, 0x02	; 2
     f4e:	c6 cf       	rjmp	.-116    	; 0xedc <_ZN7TwoWireC1Ev>

00000f50 <__subsf3>:
     f50:	50 58       	subi	r21, 0x80	; 128

00000f52 <__addsf3>:
     f52:	bb 27       	eor	r27, r27
     f54:	aa 27       	eor	r26, r26
     f56:	0e d0       	rcall	.+28     	; 0xf74 <__addsf3x>
     f58:	1c c1       	rjmp	.+568    	; 0x1192 <__fp_round>
     f5a:	0d d1       	rcall	.+538    	; 0x1176 <__fp_pscA>
     f5c:	30 f0       	brcs	.+12     	; 0xf6a <__addsf3+0x18>
     f5e:	12 d1       	rcall	.+548    	; 0x1184 <__fp_pscB>
     f60:	20 f0       	brcs	.+8      	; 0xf6a <__addsf3+0x18>
     f62:	31 f4       	brne	.+12     	; 0xf70 <__addsf3+0x1e>
     f64:	9f 3f       	cpi	r25, 0xFF	; 255
     f66:	11 f4       	brne	.+4      	; 0xf6c <__addsf3+0x1a>
     f68:	1e f4       	brtc	.+6      	; 0xf70 <__addsf3+0x1e>
     f6a:	02 c1       	rjmp	.+516    	; 0x1170 <__fp_nan>
     f6c:	0e f4       	brtc	.+2      	; 0xf70 <__addsf3+0x1e>
     f6e:	e0 95       	com	r30
     f70:	e7 fb       	bst	r30, 7
     f72:	f8 c0       	rjmp	.+496    	; 0x1164 <__fp_inf>

00000f74 <__addsf3x>:
     f74:	e9 2f       	mov	r30, r25
     f76:	1e d1       	rcall	.+572    	; 0x11b4 <__fp_split3>
     f78:	80 f3       	brcs	.-32     	; 0xf5a <__addsf3+0x8>
     f7a:	ba 17       	cp	r27, r26
     f7c:	62 07       	cpc	r22, r18
     f7e:	73 07       	cpc	r23, r19
     f80:	84 07       	cpc	r24, r20
     f82:	95 07       	cpc	r25, r21
     f84:	18 f0       	brcs	.+6      	; 0xf8c <__addsf3x+0x18>
     f86:	71 f4       	brne	.+28     	; 0xfa4 <__addsf3x+0x30>
     f88:	9e f5       	brtc	.+102    	; 0xff0 <__addsf3x+0x7c>
     f8a:	36 c1       	rjmp	.+620    	; 0x11f8 <__fp_zero>
     f8c:	0e f4       	brtc	.+2      	; 0xf90 <__addsf3x+0x1c>
     f8e:	e0 95       	com	r30
     f90:	0b 2e       	mov	r0, r27
     f92:	ba 2f       	mov	r27, r26
     f94:	a0 2d       	mov	r26, r0
     f96:	0b 01       	movw	r0, r22
     f98:	b9 01       	movw	r22, r18
     f9a:	90 01       	movw	r18, r0
     f9c:	0c 01       	movw	r0, r24
     f9e:	ca 01       	movw	r24, r20
     fa0:	a0 01       	movw	r20, r0
     fa2:	11 24       	eor	r1, r1
     fa4:	ff 27       	eor	r31, r31
     fa6:	59 1b       	sub	r21, r25
     fa8:	99 f0       	breq	.+38     	; 0xfd0 <__addsf3x+0x5c>
     faa:	59 3f       	cpi	r21, 0xF9	; 249
     fac:	50 f4       	brcc	.+20     	; 0xfc2 <__addsf3x+0x4e>
     fae:	50 3e       	cpi	r21, 0xE0	; 224
     fb0:	68 f1       	brcs	.+90     	; 0x100c <__addsf3x+0x98>
     fb2:	1a 16       	cp	r1, r26
     fb4:	f0 40       	sbci	r31, 0x00	; 0
     fb6:	a2 2f       	mov	r26, r18
     fb8:	23 2f       	mov	r18, r19
     fba:	34 2f       	mov	r19, r20
     fbc:	44 27       	eor	r20, r20
     fbe:	58 5f       	subi	r21, 0xF8	; 248
     fc0:	f3 cf       	rjmp	.-26     	; 0xfa8 <__addsf3x+0x34>
     fc2:	46 95       	lsr	r20
     fc4:	37 95       	ror	r19
     fc6:	27 95       	ror	r18
     fc8:	a7 95       	ror	r26
     fca:	f0 40       	sbci	r31, 0x00	; 0
     fcc:	53 95       	inc	r21
     fce:	c9 f7       	brne	.-14     	; 0xfc2 <__addsf3x+0x4e>
     fd0:	7e f4       	brtc	.+30     	; 0xff0 <__addsf3x+0x7c>
     fd2:	1f 16       	cp	r1, r31
     fd4:	ba 0b       	sbc	r27, r26
     fd6:	62 0b       	sbc	r22, r18
     fd8:	73 0b       	sbc	r23, r19
     fda:	84 0b       	sbc	r24, r20
     fdc:	ba f0       	brmi	.+46     	; 0x100c <__addsf3x+0x98>
     fde:	91 50       	subi	r25, 0x01	; 1
     fe0:	a1 f0       	breq	.+40     	; 0x100a <__addsf3x+0x96>
     fe2:	ff 0f       	add	r31, r31
     fe4:	bb 1f       	adc	r27, r27
     fe6:	66 1f       	adc	r22, r22
     fe8:	77 1f       	adc	r23, r23
     fea:	88 1f       	adc	r24, r24
     fec:	c2 f7       	brpl	.-16     	; 0xfde <__addsf3x+0x6a>
     fee:	0e c0       	rjmp	.+28     	; 0x100c <__addsf3x+0x98>
     ff0:	ba 0f       	add	r27, r26
     ff2:	62 1f       	adc	r22, r18
     ff4:	73 1f       	adc	r23, r19
     ff6:	84 1f       	adc	r24, r20
     ff8:	48 f4       	brcc	.+18     	; 0x100c <__addsf3x+0x98>
     ffa:	87 95       	ror	r24
     ffc:	77 95       	ror	r23
     ffe:	67 95       	ror	r22
    1000:	b7 95       	ror	r27
    1002:	f7 95       	ror	r31
    1004:	9e 3f       	cpi	r25, 0xFE	; 254
    1006:	08 f0       	brcs	.+2      	; 0x100a <__addsf3x+0x96>
    1008:	b3 cf       	rjmp	.-154    	; 0xf70 <__addsf3+0x1e>
    100a:	93 95       	inc	r25
    100c:	88 0f       	add	r24, r24
    100e:	08 f0       	brcs	.+2      	; 0x1012 <__addsf3x+0x9e>
    1010:	99 27       	eor	r25, r25
    1012:	ee 0f       	add	r30, r30
    1014:	97 95       	ror	r25
    1016:	87 95       	ror	r24
    1018:	08 95       	ret

0000101a <__divsf3>:
    101a:	0c d0       	rcall	.+24     	; 0x1034 <__divsf3x>
    101c:	ba c0       	rjmp	.+372    	; 0x1192 <__fp_round>
    101e:	b2 d0       	rcall	.+356    	; 0x1184 <__fp_pscB>
    1020:	40 f0       	brcs	.+16     	; 0x1032 <__divsf3+0x18>
    1022:	a9 d0       	rcall	.+338    	; 0x1176 <__fp_pscA>
    1024:	30 f0       	brcs	.+12     	; 0x1032 <__divsf3+0x18>
    1026:	21 f4       	brne	.+8      	; 0x1030 <__divsf3+0x16>
    1028:	5f 3f       	cpi	r21, 0xFF	; 255
    102a:	19 f0       	breq	.+6      	; 0x1032 <__divsf3+0x18>
    102c:	9b c0       	rjmp	.+310    	; 0x1164 <__fp_inf>
    102e:	51 11       	cpse	r21, r1
    1030:	e4 c0       	rjmp	.+456    	; 0x11fa <__fp_szero>
    1032:	9e c0       	rjmp	.+316    	; 0x1170 <__fp_nan>

00001034 <__divsf3x>:
    1034:	bf d0       	rcall	.+382    	; 0x11b4 <__fp_split3>
    1036:	98 f3       	brcs	.-26     	; 0x101e <__divsf3+0x4>

00001038 <__divsf3_pse>:
    1038:	99 23       	and	r25, r25
    103a:	c9 f3       	breq	.-14     	; 0x102e <__divsf3+0x14>
    103c:	55 23       	and	r21, r21
    103e:	b1 f3       	breq	.-20     	; 0x102c <__divsf3+0x12>
    1040:	95 1b       	sub	r25, r21
    1042:	55 0b       	sbc	r21, r21
    1044:	bb 27       	eor	r27, r27
    1046:	aa 27       	eor	r26, r26
    1048:	62 17       	cp	r22, r18
    104a:	73 07       	cpc	r23, r19
    104c:	84 07       	cpc	r24, r20
    104e:	38 f0       	brcs	.+14     	; 0x105e <__divsf3_pse+0x26>
    1050:	9f 5f       	subi	r25, 0xFF	; 255
    1052:	5f 4f       	sbci	r21, 0xFF	; 255
    1054:	22 0f       	add	r18, r18
    1056:	33 1f       	adc	r19, r19
    1058:	44 1f       	adc	r20, r20
    105a:	aa 1f       	adc	r26, r26
    105c:	a9 f3       	breq	.-22     	; 0x1048 <__divsf3_pse+0x10>
    105e:	33 d0       	rcall	.+102    	; 0x10c6 <__divsf3_pse+0x8e>
    1060:	0e 2e       	mov	r0, r30
    1062:	3a f0       	brmi	.+14     	; 0x1072 <__divsf3_pse+0x3a>
    1064:	e0 e8       	ldi	r30, 0x80	; 128
    1066:	30 d0       	rcall	.+96     	; 0x10c8 <__divsf3_pse+0x90>
    1068:	91 50       	subi	r25, 0x01	; 1
    106a:	50 40       	sbci	r21, 0x00	; 0
    106c:	e6 95       	lsr	r30
    106e:	00 1c       	adc	r0, r0
    1070:	ca f7       	brpl	.-14     	; 0x1064 <__divsf3_pse+0x2c>
    1072:	29 d0       	rcall	.+82     	; 0x10c6 <__divsf3_pse+0x8e>
    1074:	fe 2f       	mov	r31, r30
    1076:	27 d0       	rcall	.+78     	; 0x10c6 <__divsf3_pse+0x8e>
    1078:	66 0f       	add	r22, r22
    107a:	77 1f       	adc	r23, r23
    107c:	88 1f       	adc	r24, r24
    107e:	bb 1f       	adc	r27, r27
    1080:	26 17       	cp	r18, r22
    1082:	37 07       	cpc	r19, r23
    1084:	48 07       	cpc	r20, r24
    1086:	ab 07       	cpc	r26, r27
    1088:	b0 e8       	ldi	r27, 0x80	; 128
    108a:	09 f0       	breq	.+2      	; 0x108e <__divsf3_pse+0x56>
    108c:	bb 0b       	sbc	r27, r27
    108e:	80 2d       	mov	r24, r0
    1090:	bf 01       	movw	r22, r30
    1092:	ff 27       	eor	r31, r31
    1094:	93 58       	subi	r25, 0x83	; 131
    1096:	5f 4f       	sbci	r21, 0xFF	; 255
    1098:	2a f0       	brmi	.+10     	; 0x10a4 <__divsf3_pse+0x6c>
    109a:	9e 3f       	cpi	r25, 0xFE	; 254
    109c:	51 05       	cpc	r21, r1
    109e:	68 f0       	brcs	.+26     	; 0x10ba <__divsf3_pse+0x82>
    10a0:	61 c0       	rjmp	.+194    	; 0x1164 <__fp_inf>
    10a2:	ab c0       	rjmp	.+342    	; 0x11fa <__fp_szero>
    10a4:	5f 3f       	cpi	r21, 0xFF	; 255
    10a6:	ec f3       	brlt	.-6      	; 0x10a2 <__divsf3_pse+0x6a>
    10a8:	98 3e       	cpi	r25, 0xE8	; 232
    10aa:	dc f3       	brlt	.-10     	; 0x10a2 <__divsf3_pse+0x6a>
    10ac:	86 95       	lsr	r24
    10ae:	77 95       	ror	r23
    10b0:	67 95       	ror	r22
    10b2:	b7 95       	ror	r27
    10b4:	f7 95       	ror	r31
    10b6:	9f 5f       	subi	r25, 0xFF	; 255
    10b8:	c9 f7       	brne	.-14     	; 0x10ac <__divsf3_pse+0x74>
    10ba:	88 0f       	add	r24, r24
    10bc:	91 1d       	adc	r25, r1
    10be:	96 95       	lsr	r25
    10c0:	87 95       	ror	r24
    10c2:	97 f9       	bld	r25, 7
    10c4:	08 95       	ret
    10c6:	e1 e0       	ldi	r30, 0x01	; 1
    10c8:	66 0f       	add	r22, r22
    10ca:	77 1f       	adc	r23, r23
    10cc:	88 1f       	adc	r24, r24
    10ce:	bb 1f       	adc	r27, r27
    10d0:	62 17       	cp	r22, r18
    10d2:	73 07       	cpc	r23, r19
    10d4:	84 07       	cpc	r24, r20
    10d6:	ba 07       	cpc	r27, r26
    10d8:	20 f0       	brcs	.+8      	; 0x10e2 <__divsf3_pse+0xaa>
    10da:	62 1b       	sub	r22, r18
    10dc:	73 0b       	sbc	r23, r19
    10de:	84 0b       	sbc	r24, r20
    10e0:	ba 0b       	sbc	r27, r26
    10e2:	ee 1f       	adc	r30, r30
    10e4:	88 f7       	brcc	.-30     	; 0x10c8 <__divsf3_pse+0x90>
    10e6:	e0 95       	com	r30
    10e8:	08 95       	ret

000010ea <__floatunsisf>:
    10ea:	e8 94       	clt
    10ec:	09 c0       	rjmp	.+18     	; 0x1100 <__floatsisf+0x12>

000010ee <__floatsisf>:
    10ee:	97 fb       	bst	r25, 7
    10f0:	3e f4       	brtc	.+14     	; 0x1100 <__floatsisf+0x12>
    10f2:	90 95       	com	r25
    10f4:	80 95       	com	r24
    10f6:	70 95       	com	r23
    10f8:	61 95       	neg	r22
    10fa:	7f 4f       	sbci	r23, 0xFF	; 255
    10fc:	8f 4f       	sbci	r24, 0xFF	; 255
    10fe:	9f 4f       	sbci	r25, 0xFF	; 255
    1100:	99 23       	and	r25, r25
    1102:	a9 f0       	breq	.+42     	; 0x112e <__floatsisf+0x40>
    1104:	f9 2f       	mov	r31, r25
    1106:	96 e9       	ldi	r25, 0x96	; 150
    1108:	bb 27       	eor	r27, r27
    110a:	93 95       	inc	r25
    110c:	f6 95       	lsr	r31
    110e:	87 95       	ror	r24
    1110:	77 95       	ror	r23
    1112:	67 95       	ror	r22
    1114:	b7 95       	ror	r27
    1116:	f1 11       	cpse	r31, r1
    1118:	f8 cf       	rjmp	.-16     	; 0x110a <__floatsisf+0x1c>
    111a:	fa f4       	brpl	.+62     	; 0x115a <__floatsisf+0x6c>
    111c:	bb 0f       	add	r27, r27
    111e:	11 f4       	brne	.+4      	; 0x1124 <__floatsisf+0x36>
    1120:	60 ff       	sbrs	r22, 0
    1122:	1b c0       	rjmp	.+54     	; 0x115a <__floatsisf+0x6c>
    1124:	6f 5f       	subi	r22, 0xFF	; 255
    1126:	7f 4f       	sbci	r23, 0xFF	; 255
    1128:	8f 4f       	sbci	r24, 0xFF	; 255
    112a:	9f 4f       	sbci	r25, 0xFF	; 255
    112c:	16 c0       	rjmp	.+44     	; 0x115a <__floatsisf+0x6c>
    112e:	88 23       	and	r24, r24
    1130:	11 f0       	breq	.+4      	; 0x1136 <__floatsisf+0x48>
    1132:	96 e9       	ldi	r25, 0x96	; 150
    1134:	11 c0       	rjmp	.+34     	; 0x1158 <__floatsisf+0x6a>
    1136:	77 23       	and	r23, r23
    1138:	21 f0       	breq	.+8      	; 0x1142 <__floatsisf+0x54>
    113a:	9e e8       	ldi	r25, 0x8E	; 142
    113c:	87 2f       	mov	r24, r23
    113e:	76 2f       	mov	r23, r22
    1140:	05 c0       	rjmp	.+10     	; 0x114c <__floatsisf+0x5e>
    1142:	66 23       	and	r22, r22
    1144:	71 f0       	breq	.+28     	; 0x1162 <__floatsisf+0x74>
    1146:	96 e8       	ldi	r25, 0x86	; 134
    1148:	86 2f       	mov	r24, r22
    114a:	70 e0       	ldi	r23, 0x00	; 0
    114c:	60 e0       	ldi	r22, 0x00	; 0
    114e:	2a f0       	brmi	.+10     	; 0x115a <__floatsisf+0x6c>
    1150:	9a 95       	dec	r25
    1152:	66 0f       	add	r22, r22
    1154:	77 1f       	adc	r23, r23
    1156:	88 1f       	adc	r24, r24
    1158:	da f7       	brpl	.-10     	; 0x1150 <__floatsisf+0x62>
    115a:	88 0f       	add	r24, r24
    115c:	96 95       	lsr	r25
    115e:	87 95       	ror	r24
    1160:	97 f9       	bld	r25, 7
    1162:	08 95       	ret

00001164 <__fp_inf>:
    1164:	97 f9       	bld	r25, 7
    1166:	9f 67       	ori	r25, 0x7F	; 127
    1168:	80 e8       	ldi	r24, 0x80	; 128
    116a:	70 e0       	ldi	r23, 0x00	; 0
    116c:	60 e0       	ldi	r22, 0x00	; 0
    116e:	08 95       	ret

00001170 <__fp_nan>:
    1170:	9f ef       	ldi	r25, 0xFF	; 255
    1172:	80 ec       	ldi	r24, 0xC0	; 192
    1174:	08 95       	ret

00001176 <__fp_pscA>:
    1176:	00 24       	eor	r0, r0
    1178:	0a 94       	dec	r0
    117a:	16 16       	cp	r1, r22
    117c:	17 06       	cpc	r1, r23
    117e:	18 06       	cpc	r1, r24
    1180:	09 06       	cpc	r0, r25
    1182:	08 95       	ret

00001184 <__fp_pscB>:
    1184:	00 24       	eor	r0, r0
    1186:	0a 94       	dec	r0
    1188:	12 16       	cp	r1, r18
    118a:	13 06       	cpc	r1, r19
    118c:	14 06       	cpc	r1, r20
    118e:	05 06       	cpc	r0, r21
    1190:	08 95       	ret

00001192 <__fp_round>:
    1192:	09 2e       	mov	r0, r25
    1194:	03 94       	inc	r0
    1196:	00 0c       	add	r0, r0
    1198:	11 f4       	brne	.+4      	; 0x119e <__fp_round+0xc>
    119a:	88 23       	and	r24, r24
    119c:	52 f0       	brmi	.+20     	; 0x11b2 <__fp_round+0x20>
    119e:	bb 0f       	add	r27, r27
    11a0:	40 f4       	brcc	.+16     	; 0x11b2 <__fp_round+0x20>
    11a2:	bf 2b       	or	r27, r31
    11a4:	11 f4       	brne	.+4      	; 0x11aa <__fp_round+0x18>
    11a6:	60 ff       	sbrs	r22, 0
    11a8:	04 c0       	rjmp	.+8      	; 0x11b2 <__fp_round+0x20>
    11aa:	6f 5f       	subi	r22, 0xFF	; 255
    11ac:	7f 4f       	sbci	r23, 0xFF	; 255
    11ae:	8f 4f       	sbci	r24, 0xFF	; 255
    11b0:	9f 4f       	sbci	r25, 0xFF	; 255
    11b2:	08 95       	ret

000011b4 <__fp_split3>:
    11b4:	57 fd       	sbrc	r21, 7
    11b6:	90 58       	subi	r25, 0x80	; 128
    11b8:	44 0f       	add	r20, r20
    11ba:	55 1f       	adc	r21, r21
    11bc:	59 f0       	breq	.+22     	; 0x11d4 <__fp_splitA+0x10>
    11be:	5f 3f       	cpi	r21, 0xFF	; 255
    11c0:	71 f0       	breq	.+28     	; 0x11de <__fp_splitA+0x1a>
    11c2:	47 95       	ror	r20

000011c4 <__fp_splitA>:
    11c4:	88 0f       	add	r24, r24
    11c6:	97 fb       	bst	r25, 7
    11c8:	99 1f       	adc	r25, r25
    11ca:	61 f0       	breq	.+24     	; 0x11e4 <__fp_splitA+0x20>
    11cc:	9f 3f       	cpi	r25, 0xFF	; 255
    11ce:	79 f0       	breq	.+30     	; 0x11ee <__fp_splitA+0x2a>
    11d0:	87 95       	ror	r24
    11d2:	08 95       	ret
    11d4:	12 16       	cp	r1, r18
    11d6:	13 06       	cpc	r1, r19
    11d8:	14 06       	cpc	r1, r20
    11da:	55 1f       	adc	r21, r21
    11dc:	f2 cf       	rjmp	.-28     	; 0x11c2 <__fp_split3+0xe>
    11de:	46 95       	lsr	r20
    11e0:	f1 df       	rcall	.-30     	; 0x11c4 <__fp_splitA>
    11e2:	08 c0       	rjmp	.+16     	; 0x11f4 <__fp_splitA+0x30>
    11e4:	16 16       	cp	r1, r22
    11e6:	17 06       	cpc	r1, r23
    11e8:	18 06       	cpc	r1, r24
    11ea:	99 1f       	adc	r25, r25
    11ec:	f1 cf       	rjmp	.-30     	; 0x11d0 <__fp_splitA+0xc>
    11ee:	86 95       	lsr	r24
    11f0:	71 05       	cpc	r23, r1
    11f2:	61 05       	cpc	r22, r1
    11f4:	08 94       	sec
    11f6:	08 95       	ret

000011f8 <__fp_zero>:
    11f8:	e8 94       	clt

000011fa <__fp_szero>:
    11fa:	bb 27       	eor	r27, r27
    11fc:	66 27       	eor	r22, r22
    11fe:	77 27       	eor	r23, r23
    1200:	cb 01       	movw	r24, r22
    1202:	97 f9       	bld	r25, 7
    1204:	08 95       	ret

00001206 <__mulsf3>:
    1206:	0b d0       	rcall	.+22     	; 0x121e <__mulsf3x>
    1208:	c4 cf       	rjmp	.-120    	; 0x1192 <__fp_round>
    120a:	b5 df       	rcall	.-150    	; 0x1176 <__fp_pscA>
    120c:	28 f0       	brcs	.+10     	; 0x1218 <__mulsf3+0x12>
    120e:	ba df       	rcall	.-140    	; 0x1184 <__fp_pscB>
    1210:	18 f0       	brcs	.+6      	; 0x1218 <__mulsf3+0x12>
    1212:	95 23       	and	r25, r21
    1214:	09 f0       	breq	.+2      	; 0x1218 <__mulsf3+0x12>
    1216:	a6 cf       	rjmp	.-180    	; 0x1164 <__fp_inf>
    1218:	ab cf       	rjmp	.-170    	; 0x1170 <__fp_nan>
    121a:	11 24       	eor	r1, r1
    121c:	ee cf       	rjmp	.-36     	; 0x11fa <__fp_szero>

0000121e <__mulsf3x>:
    121e:	ca df       	rcall	.-108    	; 0x11b4 <__fp_split3>
    1220:	a0 f3       	brcs	.-24     	; 0x120a <__mulsf3+0x4>

00001222 <__mulsf3_pse>:
    1222:	95 9f       	mul	r25, r21
    1224:	d1 f3       	breq	.-12     	; 0x121a <__mulsf3+0x14>
    1226:	95 0f       	add	r25, r21
    1228:	50 e0       	ldi	r21, 0x00	; 0
    122a:	55 1f       	adc	r21, r21
    122c:	62 9f       	mul	r22, r18
    122e:	f0 01       	movw	r30, r0
    1230:	72 9f       	mul	r23, r18
    1232:	bb 27       	eor	r27, r27
    1234:	f0 0d       	add	r31, r0
    1236:	b1 1d       	adc	r27, r1
    1238:	63 9f       	mul	r22, r19
    123a:	aa 27       	eor	r26, r26
    123c:	f0 0d       	add	r31, r0
    123e:	b1 1d       	adc	r27, r1
    1240:	aa 1f       	adc	r26, r26
    1242:	64 9f       	mul	r22, r20
    1244:	66 27       	eor	r22, r22
    1246:	b0 0d       	add	r27, r0
    1248:	a1 1d       	adc	r26, r1
    124a:	66 1f       	adc	r22, r22
    124c:	82 9f       	mul	r24, r18
    124e:	22 27       	eor	r18, r18
    1250:	b0 0d       	add	r27, r0
    1252:	a1 1d       	adc	r26, r1
    1254:	62 1f       	adc	r22, r18
    1256:	73 9f       	mul	r23, r19
    1258:	b0 0d       	add	r27, r0
    125a:	a1 1d       	adc	r26, r1
    125c:	62 1f       	adc	r22, r18
    125e:	83 9f       	mul	r24, r19
    1260:	a0 0d       	add	r26, r0
    1262:	61 1d       	adc	r22, r1
    1264:	22 1f       	adc	r18, r18
    1266:	74 9f       	mul	r23, r20
    1268:	33 27       	eor	r19, r19
    126a:	a0 0d       	add	r26, r0
    126c:	61 1d       	adc	r22, r1
    126e:	23 1f       	adc	r18, r19
    1270:	84 9f       	mul	r24, r20
    1272:	60 0d       	add	r22, r0
    1274:	21 1d       	adc	r18, r1
    1276:	82 2f       	mov	r24, r18
    1278:	76 2f       	mov	r23, r22
    127a:	6a 2f       	mov	r22, r26
    127c:	11 24       	eor	r1, r1
    127e:	9f 57       	subi	r25, 0x7F	; 127
    1280:	50 40       	sbci	r21, 0x00	; 0
    1282:	8a f0       	brmi	.+34     	; 0x12a6 <__mulsf3_pse+0x84>
    1284:	e1 f0       	breq	.+56     	; 0x12be <__mulsf3_pse+0x9c>
    1286:	88 23       	and	r24, r24
    1288:	4a f0       	brmi	.+18     	; 0x129c <__mulsf3_pse+0x7a>
    128a:	ee 0f       	add	r30, r30
    128c:	ff 1f       	adc	r31, r31
    128e:	bb 1f       	adc	r27, r27
    1290:	66 1f       	adc	r22, r22
    1292:	77 1f       	adc	r23, r23
    1294:	88 1f       	adc	r24, r24
    1296:	91 50       	subi	r25, 0x01	; 1
    1298:	50 40       	sbci	r21, 0x00	; 0
    129a:	a9 f7       	brne	.-22     	; 0x1286 <__mulsf3_pse+0x64>
    129c:	9e 3f       	cpi	r25, 0xFE	; 254
    129e:	51 05       	cpc	r21, r1
    12a0:	70 f0       	brcs	.+28     	; 0x12be <__mulsf3_pse+0x9c>
    12a2:	60 cf       	rjmp	.-320    	; 0x1164 <__fp_inf>
    12a4:	aa cf       	rjmp	.-172    	; 0x11fa <__fp_szero>
    12a6:	5f 3f       	cpi	r21, 0xFF	; 255
    12a8:	ec f3       	brlt	.-6      	; 0x12a4 <__mulsf3_pse+0x82>
    12aa:	98 3e       	cpi	r25, 0xE8	; 232
    12ac:	dc f3       	brlt	.-10     	; 0x12a4 <__mulsf3_pse+0x82>
    12ae:	86 95       	lsr	r24
    12b0:	77 95       	ror	r23
    12b2:	67 95       	ror	r22
    12b4:	b7 95       	ror	r27
    12b6:	f7 95       	ror	r31
    12b8:	e7 95       	ror	r30
    12ba:	9f 5f       	subi	r25, 0xFF	; 255
    12bc:	c1 f7       	brne	.-16     	; 0x12ae <__mulsf3_pse+0x8c>
    12be:	fe 2b       	or	r31, r30
    12c0:	88 0f       	add	r24, r24
    12c2:	91 1d       	adc	r25, r1
    12c4:	96 95       	lsr	r25
    12c6:	87 95       	ror	r24
    12c8:	97 f9       	bld	r25, 7
    12ca:	08 95       	ret

000012cc <_ZN14HardwareSerial9availableEv>:
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
}

int HardwareSerial::available(void)
{
    12cc:	fc 01       	movw	r30, r24
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
    12ce:	91 8d       	ldd	r25, Z+25	; 0x19
    12d0:	22 8d       	ldd	r18, Z+26	; 0x1a
    12d2:	89 2f       	mov	r24, r25
    12d4:	90 e0       	ldi	r25, 0x00	; 0
    12d6:	80 5c       	subi	r24, 0xC0	; 192
    12d8:	9f 4f       	sbci	r25, 0xFF	; 255
    12da:	82 1b       	sub	r24, r18
    12dc:	91 09       	sbc	r25, r1
}
    12de:	8f 73       	andi	r24, 0x3F	; 63
    12e0:	99 27       	eor	r25, r25
    12e2:	08 95       	ret

000012e4 <_ZN14HardwareSerial4peekEv>:

int HardwareSerial::peek(void)
{
    12e4:	fc 01       	movw	r30, r24
  if (_rx_buffer_head == _rx_buffer_tail) {
    12e6:	91 8d       	ldd	r25, Z+25	; 0x19
    12e8:	82 8d       	ldd	r24, Z+26	; 0x1a
    12ea:	98 17       	cp	r25, r24
    12ec:	31 f0       	breq	.+12     	; 0x12fa <_ZN14HardwareSerial4peekEv+0x16>
    return -1;
  } else {
    return _rx_buffer[_rx_buffer_tail];
    12ee:	82 8d       	ldd	r24, Z+26	; 0x1a
    12f0:	e8 0f       	add	r30, r24
    12f2:	f1 1d       	adc	r31, r1
    12f4:	85 8d       	ldd	r24, Z+29	; 0x1d
    12f6:	90 e0       	ldi	r25, 0x00	; 0
    12f8:	08 95       	ret
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    12fa:	8f ef       	ldi	r24, 0xFF	; 255
    12fc:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    return _rx_buffer[_rx_buffer_tail];
  }
}
    12fe:	08 95       	ret

00001300 <_ZN14HardwareSerial4readEv>:

int HardwareSerial::read(void)
{
    1300:	fc 01       	movw	r30, r24
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    1302:	91 8d       	ldd	r25, Z+25	; 0x19
    1304:	82 8d       	ldd	r24, Z+26	; 0x1a
    1306:	98 17       	cp	r25, r24
    1308:	61 f0       	breq	.+24     	; 0x1322 <_ZN14HardwareSerial4readEv+0x22>
    return -1;
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    130a:	82 8d       	ldd	r24, Z+26	; 0x1a
    130c:	df 01       	movw	r26, r30
    130e:	a8 0f       	add	r26, r24
    1310:	b1 1d       	adc	r27, r1
    1312:	5d 96       	adiw	r26, 0x1d	; 29
    1314:	8c 91       	ld	r24, X
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    1316:	92 8d       	ldd	r25, Z+26	; 0x1a
    1318:	9f 5f       	subi	r25, 0xFF	; 255
    131a:	9f 73       	andi	r25, 0x3F	; 63
    131c:	92 8f       	std	Z+26, r25	; 0x1a
    return c;
    131e:	90 e0       	ldi	r25, 0x00	; 0
    1320:	08 95       	ret

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    1322:	8f ef       	ldi	r24, 0xFF	; 255
    1324:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    return c;
  }
}
    1326:	08 95       	ret

00001328 <_Z14serialEventRunv>:
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
    1328:	89 e9       	ldi	r24, 0x99	; 153
    132a:	9a e0       	ldi	r25, 0x0A	; 10
    132c:	89 2b       	or	r24, r25
    132e:	39 f0       	breq	.+14     	; 0x133e <_Z14serialEventRunv+0x16>
    1330:	80 e0       	ldi	r24, 0x00	; 0
    1332:	90 e0       	ldi	r25, 0x00	; 0
    1334:	89 2b       	or	r24, r25
    1336:	19 f0       	breq	.+6      	; 0x133e <_Z14serialEventRunv+0x16>
    1338:	fc d0       	rcall	.+504    	; 0x1532 <_Z17Serial0_availablev>
    133a:	81 11       	cpse	r24, r1
    133c:	0d c0       	rjmp	.+26     	; 0x1358 <_Z14serialEventRunv+0x30>
#endif
#if defined(HAVE_HWSERIAL1)
  if (Serial1_available && serialEvent1 && Serial1_available()) serialEvent1();
    133e:	80 e0       	ldi	r24, 0x00	; 0
    1340:	90 e0       	ldi	r25, 0x00	; 0
    1342:	89 2b       	or	r24, r25
    1344:	71 f0       	breq	.+28     	; 0x1362 <_Z14serialEventRunv+0x3a>
    1346:	80 e0       	ldi	r24, 0x00	; 0
    1348:	90 e0       	ldi	r25, 0x00	; 0
    134a:	89 2b       	or	r24, r25
    134c:	51 f0       	breq	.+20     	; 0x1362 <_Z14serialEventRunv+0x3a>
    134e:	0e 94 00 00 	call	0	; 0x0 <__vectors>
    1352:	81 11       	cpse	r24, r1
    1354:	04 c0       	rjmp	.+8      	; 0x135e <_Z14serialEventRunv+0x36>
    1356:	08 95       	ret
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
    1358:	0e 94 00 00 	call	0	; 0x0 <__vectors>
    135c:	f0 cf       	rjmp	.-32     	; 0x133e <_Z14serialEventRunv+0x16>
#endif
#if defined(HAVE_HWSERIAL1)
  if (Serial1_available && serialEvent1 && Serial1_available()) serialEvent1();
    135e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
    1362:	08 95       	ret

00001364 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>:
}

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
    1364:	fc 01       	movw	r30, r24
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
    1366:	84 8d       	ldd	r24, Z+28	; 0x1c
    1368:	df 01       	movw	r26, r30
    136a:	a8 0f       	add	r26, r24
    136c:	b1 1d       	adc	r27, r1
    136e:	a3 5a       	subi	r26, 0xA3	; 163
    1370:	bf 4f       	sbci	r27, 0xFF	; 255
    1372:	2c 91       	ld	r18, X
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
    1374:	84 8d       	ldd	r24, Z+28	; 0x1c
    1376:	90 e0       	ldi	r25, 0x00	; 0
    1378:	01 96       	adiw	r24, 0x01	; 1
    137a:	8f 73       	andi	r24, 0x3F	; 63
    137c:	99 27       	eor	r25, r25
    137e:	84 8f       	std	Z+28, r24	; 0x1c

  *_udr = c;
    1380:	a6 89       	ldd	r26, Z+22	; 0x16
    1382:	b7 89       	ldd	r27, Z+23	; 0x17
    1384:	2c 93       	st	X, r18

  // clear the TXC bit -- "can be cleared by writing a one to its bit
  // location". This makes sure flush() won't return until the bytes
  // actually got written
  sbi(*_ucsra, TXC0);
    1386:	a0 89       	ldd	r26, Z+16	; 0x10
    1388:	b1 89       	ldd	r27, Z+17	; 0x11
    138a:	8c 91       	ld	r24, X
    138c:	80 64       	ori	r24, 0x40	; 64
    138e:	8c 93       	st	X, r24

  if (_tx_buffer_head == _tx_buffer_tail) {
    1390:	93 8d       	ldd	r25, Z+27	; 0x1b
    1392:	84 8d       	ldd	r24, Z+28	; 0x1c
    1394:	98 13       	cpse	r25, r24
    1396:	06 c0       	rjmp	.+12     	; 0x13a4 <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x40>
    // Buffer empty, so disable interrupts
    cbi(*_ucsrb, UDRIE0);
    1398:	02 88       	ldd	r0, Z+18	; 0x12
    139a:	f3 89       	ldd	r31, Z+19	; 0x13
    139c:	e0 2d       	mov	r30, r0
    139e:	80 81       	ld	r24, Z
    13a0:	8f 7d       	andi	r24, 0xDF	; 223
    13a2:	80 83       	st	Z, r24
    13a4:	08 95       	ret

000013a6 <_ZN14HardwareSerial5writeEh>:
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}

size_t HardwareSerial::write(uint8_t c)
{
    13a6:	ef 92       	push	r14
    13a8:	ff 92       	push	r15
    13aa:	0f 93       	push	r16
    13ac:	1f 93       	push	r17
    13ae:	cf 93       	push	r28
    13b0:	df 93       	push	r29
    13b2:	ec 01       	movw	r28, r24
  _written = true;
    13b4:	81 e0       	ldi	r24, 0x01	; 1
    13b6:	88 8f       	std	Y+24, r24	; 0x18
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    13b8:	9b 8d       	ldd	r25, Y+27	; 0x1b
    13ba:	8c 8d       	ldd	r24, Y+28	; 0x1c
    13bc:	98 13       	cpse	r25, r24
    13be:	05 c0       	rjmp	.+10     	; 0x13ca <_ZN14HardwareSerial5writeEh+0x24>
    13c0:	e8 89       	ldd	r30, Y+16	; 0x10
    13c2:	f9 89       	ldd	r31, Y+17	; 0x11
    13c4:	80 81       	ld	r24, Z
    13c6:	85 fd       	sbrc	r24, 5
    13c8:	23 c0       	rjmp	.+70     	; 0x1410 <_ZN14HardwareSerial5writeEh+0x6a>
    13ca:	f6 2e       	mov	r15, r22
    *_udr = c;
    sbi(*_ucsra, TXC0);
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
    13cc:	0b 8d       	ldd	r16, Y+27	; 0x1b
    13ce:	10 e0       	ldi	r17, 0x00	; 0
    13d0:	0f 5f       	subi	r16, 0xFF	; 255
    13d2:	1f 4f       	sbci	r17, 0xFF	; 255
    13d4:	0f 73       	andi	r16, 0x3F	; 63
    13d6:	11 27       	eor	r17, r17
    13d8:	e0 2e       	mov	r14, r16
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
    13da:	8c 8d       	ldd	r24, Y+28	; 0x1c
    13dc:	e8 12       	cpse	r14, r24
    13de:	0b c0       	rjmp	.+22     	; 0x13f6 <_ZN14HardwareSerial5writeEh+0x50>
    if (bit_is_clear(SREG, SREG_I)) {
    13e0:	0f b6       	in	r0, 0x3f	; 63
    13e2:	07 fc       	sbrc	r0, 7
    13e4:	fa cf       	rjmp	.-12     	; 0x13da <_ZN14HardwareSerial5writeEh+0x34>
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
    13e6:	e8 89       	ldd	r30, Y+16	; 0x10
    13e8:	f9 89       	ldd	r31, Y+17	; 0x11
    13ea:	80 81       	ld	r24, Z
    13ec:	85 ff       	sbrs	r24, 5
    13ee:	f5 cf       	rjmp	.-22     	; 0x13da <_ZN14HardwareSerial5writeEh+0x34>
	_tx_udr_empty_irq();
    13f0:	ce 01       	movw	r24, r28
    13f2:	b8 df       	rcall	.-144    	; 0x1364 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    13f4:	f2 cf       	rjmp	.-28     	; 0x13da <_ZN14HardwareSerial5writeEh+0x34>
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
    13f6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    13f8:	fe 01       	movw	r30, r28
    13fa:	e8 0f       	add	r30, r24
    13fc:	f1 1d       	adc	r31, r1
    13fe:	e3 5a       	subi	r30, 0xA3	; 163
    1400:	ff 4f       	sbci	r31, 0xFF	; 255
    1402:	f0 82       	st	Z, r15
  _tx_buffer_head = i;
    1404:	0b 8f       	std	Y+27, r16	; 0x1b
	
  sbi(*_ucsrb, UDRIE0);
    1406:	ea 89       	ldd	r30, Y+18	; 0x12
    1408:	fb 89       	ldd	r31, Y+19	; 0x13
    140a:	80 81       	ld	r24, Z
    140c:	80 62       	ori	r24, 0x20	; 32
    140e:	07 c0       	rjmp	.+14     	; 0x141e <_ZN14HardwareSerial5writeEh+0x78>
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    *_udr = c;
    1410:	ee 89       	ldd	r30, Y+22	; 0x16
    1412:	ff 89       	ldd	r31, Y+23	; 0x17
    1414:	60 83       	st	Z, r22
    sbi(*_ucsra, TXC0);
    1416:	e8 89       	ldd	r30, Y+16	; 0x10
    1418:	f9 89       	ldd	r31, Y+17	; 0x11
    141a:	80 81       	ld	r24, Z
    141c:	80 64       	ori	r24, 0x40	; 64
    141e:	80 83       	st	Z, r24
  _tx_buffer_head = i;
	
  sbi(*_ucsrb, UDRIE0);
  
  return 1;
}
    1420:	81 e0       	ldi	r24, 0x01	; 1
    1422:	90 e0       	ldi	r25, 0x00	; 0
    1424:	df 91       	pop	r29
    1426:	cf 91       	pop	r28
    1428:	1f 91       	pop	r17
    142a:	0f 91       	pop	r16
    142c:	ff 90       	pop	r15
    142e:	ef 90       	pop	r14
    1430:	08 95       	ret

00001432 <_ZN14HardwareSerial5flushEv>:
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
    1432:	cf 93       	push	r28
    1434:	df 93       	push	r29
    1436:	ec 01       	movw	r28, r24
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
    1438:	88 8d       	ldd	r24, Y+24	; 0x18
    143a:	88 23       	and	r24, r24
    143c:	c1 f0       	breq	.+48     	; 0x146e <_ZN14HardwareSerial5flushEv+0x3c>
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
    143e:	ea 89       	ldd	r30, Y+18	; 0x12
    1440:	fb 89       	ldd	r31, Y+19	; 0x13
    1442:	80 81       	ld	r24, Z
    1444:	85 fd       	sbrc	r24, 5
    1446:	05 c0       	rjmp	.+10     	; 0x1452 <_ZN14HardwareSerial5flushEv+0x20>
    1448:	a8 89       	ldd	r26, Y+16	; 0x10
    144a:	b9 89       	ldd	r27, Y+17	; 0x11
    144c:	8c 91       	ld	r24, X
    144e:	86 fd       	sbrc	r24, 6
    1450:	0e c0       	rjmp	.+28     	; 0x146e <_ZN14HardwareSerial5flushEv+0x3c>
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
    1452:	0f b6       	in	r0, 0x3f	; 63
    1454:	07 fc       	sbrc	r0, 7
    1456:	f5 cf       	rjmp	.-22     	; 0x1442 <_ZN14HardwareSerial5flushEv+0x10>
    1458:	80 81       	ld	r24, Z
    145a:	85 ff       	sbrs	r24, 5
    145c:	f2 cf       	rjmp	.-28     	; 0x1442 <_ZN14HardwareSerial5flushEv+0x10>
	// Interrupts are globally disabled, but the DR empty
	// interrupt should be enabled, so poll the DR empty flag to
	// prevent deadlock
	if (bit_is_set(*_ucsra, UDRE0))
    145e:	a8 89       	ldd	r26, Y+16	; 0x10
    1460:	b9 89       	ldd	r27, Y+17	; 0x11
    1462:	8c 91       	ld	r24, X
    1464:	85 ff       	sbrs	r24, 5
    1466:	ed cf       	rjmp	.-38     	; 0x1442 <_ZN14HardwareSerial5flushEv+0x10>
	  _tx_udr_empty_irq();
    1468:	ce 01       	movw	r24, r28
    146a:	7c df       	rcall	.-264    	; 0x1364 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    146c:	e8 cf       	rjmp	.-48     	; 0x143e <_ZN14HardwareSerial5flushEv+0xc>
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
    146e:	df 91       	pop	r29
    1470:	cf 91       	pop	r28
    1472:	08 95       	ret

00001474 <__vector_20>:
#elif defined(USART_RXC_vect)
  ISR(USART_RXC_vect) // ATmega8
#else
  #error "Don't know what the Data Received vector is called for Serial"
#endif
  {
    1474:	1f 92       	push	r1
    1476:	0f 92       	push	r0
    1478:	0f b6       	in	r0, 0x3f	; 63
    147a:	0f 92       	push	r0
    147c:	11 24       	eor	r1, r1
    147e:	0b b6       	in	r0, 0x3b	; 59
    1480:	0f 92       	push	r0
    1482:	2f 93       	push	r18
    1484:	8f 93       	push	r24
    1486:	9f 93       	push	r25
    1488:	ef 93       	push	r30
    148a:	ff 93       	push	r31

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
    148c:	e0 91 62 02 	lds	r30, 0x0262	; 0x800262 <Serial+0x10>
    1490:	f0 91 63 02 	lds	r31, 0x0263	; 0x800263 <Serial+0x11>
    1494:	80 81       	ld	r24, Z
    1496:	e0 91 68 02 	lds	r30, 0x0268	; 0x800268 <Serial+0x16>
    149a:	f0 91 69 02 	lds	r31, 0x0269	; 0x800269 <Serial+0x17>
    149e:	82 fd       	sbrc	r24, 2
    14a0:	12 c0       	rjmp	.+36     	; 0x14c6 <__vector_20+0x52>
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
    14a2:	90 81       	ld	r25, Z
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
    14a4:	80 91 6b 02 	lds	r24, 0x026B	; 0x80026b <Serial+0x19>
    14a8:	8f 5f       	subi	r24, 0xFF	; 255
    14aa:	8f 73       	andi	r24, 0x3F	; 63

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
    14ac:	20 91 6c 02 	lds	r18, 0x026C	; 0x80026c <Serial+0x1a>
    14b0:	82 17       	cp	r24, r18
    14b2:	51 f0       	breq	.+20     	; 0x14c8 <__vector_20+0x54>
      _rx_buffer[_rx_buffer_head] = c;
    14b4:	e0 91 6b 02 	lds	r30, 0x026B	; 0x80026b <Serial+0x19>
    14b8:	f0 e0       	ldi	r31, 0x00	; 0
    14ba:	ee 5a       	subi	r30, 0xAE	; 174
    14bc:	fd 4f       	sbci	r31, 0xFD	; 253
    14be:	95 8f       	std	Z+29, r25	; 0x1d
      _rx_buffer_head = i;
    14c0:	80 93 6b 02 	sts	0x026B, r24	; 0x80026b <Serial+0x19>
    14c4:	01 c0       	rjmp	.+2      	; 0x14c8 <__vector_20+0x54>
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
    14c6:	80 81       	ld	r24, Z
    Serial._rx_complete_irq();
  }
    14c8:	ff 91       	pop	r31
    14ca:	ef 91       	pop	r30
    14cc:	9f 91       	pop	r25
    14ce:	8f 91       	pop	r24
    14d0:	2f 91       	pop	r18
    14d2:	0f 90       	pop	r0
    14d4:	0b be       	out	0x3b, r0	; 59
    14d6:	0f 90       	pop	r0
    14d8:	0f be       	out	0x3f, r0	; 63
    14da:	0f 90       	pop	r0
    14dc:	1f 90       	pop	r1
    14de:	18 95       	reti

000014e0 <__vector_21>:
#elif defined(USART_UDRE_vect)
ISR(USART_UDRE_vect)
#else
  #error "Don't know what the Data Register Empty vector is called for Serial"
#endif
{
    14e0:	1f 92       	push	r1
    14e2:	0f 92       	push	r0
    14e4:	0f b6       	in	r0, 0x3f	; 63
    14e6:	0f 92       	push	r0
    14e8:	11 24       	eor	r1, r1
    14ea:	0b b6       	in	r0, 0x3b	; 59
    14ec:	0f 92       	push	r0
    14ee:	2f 93       	push	r18
    14f0:	3f 93       	push	r19
    14f2:	4f 93       	push	r20
    14f4:	5f 93       	push	r21
    14f6:	6f 93       	push	r22
    14f8:	7f 93       	push	r23
    14fa:	8f 93       	push	r24
    14fc:	9f 93       	push	r25
    14fe:	af 93       	push	r26
    1500:	bf 93       	push	r27
    1502:	ef 93       	push	r30
    1504:	ff 93       	push	r31
  Serial._tx_udr_empty_irq();
    1506:	82 e5       	ldi	r24, 0x52	; 82
    1508:	92 e0       	ldi	r25, 0x02	; 2
    150a:	2c df       	rcall	.-424    	; 0x1364 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
}
    150c:	ff 91       	pop	r31
    150e:	ef 91       	pop	r30
    1510:	bf 91       	pop	r27
    1512:	af 91       	pop	r26
    1514:	9f 91       	pop	r25
    1516:	8f 91       	pop	r24
    1518:	7f 91       	pop	r23
    151a:	6f 91       	pop	r22
    151c:	5f 91       	pop	r21
    151e:	4f 91       	pop	r20
    1520:	3f 91       	pop	r19
    1522:	2f 91       	pop	r18
    1524:	0f 90       	pop	r0
    1526:	0b be       	out	0x3b, r0	; 59
    1528:	0f 90       	pop	r0
    152a:	0f be       	out	0x3f, r0	; 63
    152c:	0f 90       	pop	r0
    152e:	1f 90       	pop	r1
    1530:	18 95       	reti

00001532 <_Z17Serial0_availablev>:
#endif

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
    1532:	82 e5       	ldi	r24, 0x52	; 82
    1534:	92 e0       	ldi	r25, 0x02	; 2
    1536:	ca de       	rcall	.-620    	; 0x12cc <_ZN14HardwareSerial9availableEv>
    1538:	21 e0       	ldi	r18, 0x01	; 1
    153a:	89 2b       	or	r24, r25
    153c:	09 f4       	brne	.+2      	; 0x1540 <_Z17Serial0_availablev+0xe>
    153e:	20 e0       	ldi	r18, 0x00	; 0
}
    1540:	82 2f       	mov	r24, r18
    1542:	08 95       	ret

00001544 <_GLOBAL__sub_I___vector_20>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
    1544:	e2 e5       	ldi	r30, 0x52	; 82
    1546:	f2 e0       	ldi	r31, 0x02	; 2
    1548:	13 82       	std	Z+3, r1	; 0x03
    154a:	12 82       	std	Z+2, r1	; 0x02
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
    154c:	88 ee       	ldi	r24, 0xE8	; 232
    154e:	93 e0       	ldi	r25, 0x03	; 3
    1550:	a0 e0       	ldi	r26, 0x00	; 0
    1552:	b0 e0       	ldi	r27, 0x00	; 0
    1554:	84 83       	std	Z+4, r24	; 0x04
    1556:	95 83       	std	Z+5, r25	; 0x05
    1558:	a6 83       	std	Z+6, r26	; 0x06
    155a:	b7 83       	std	Z+7, r27	; 0x07
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
    155c:	81 e5       	ldi	r24, 0x51	; 81
    155e:	91 e0       	ldi	r25, 0x01	; 1
    1560:	91 83       	std	Z+1, r25	; 0x01
    1562:	80 83       	st	Z, r24
    1564:	85 ec       	ldi	r24, 0xC5	; 197
    1566:	90 e0       	ldi	r25, 0x00	; 0
    1568:	95 87       	std	Z+13, r25	; 0x0d
    156a:	84 87       	std	Z+12, r24	; 0x0c
    156c:	84 ec       	ldi	r24, 0xC4	; 196
    156e:	90 e0       	ldi	r25, 0x00	; 0
    1570:	97 87       	std	Z+15, r25	; 0x0f
    1572:	86 87       	std	Z+14, r24	; 0x0e
    1574:	80 ec       	ldi	r24, 0xC0	; 192
    1576:	90 e0       	ldi	r25, 0x00	; 0
    1578:	91 8b       	std	Z+17, r25	; 0x11
    157a:	80 8b       	std	Z+16, r24	; 0x10
    157c:	81 ec       	ldi	r24, 0xC1	; 193
    157e:	90 e0       	ldi	r25, 0x00	; 0
    1580:	93 8b       	std	Z+19, r25	; 0x13
    1582:	82 8b       	std	Z+18, r24	; 0x12
    1584:	82 ec       	ldi	r24, 0xC2	; 194
    1586:	90 e0       	ldi	r25, 0x00	; 0
    1588:	95 8b       	std	Z+21, r25	; 0x15
    158a:	84 8b       	std	Z+20, r24	; 0x14
    158c:	86 ec       	ldi	r24, 0xC6	; 198
    158e:	90 e0       	ldi	r25, 0x00	; 0
    1590:	97 8b       	std	Z+23, r25	; 0x17
    1592:	86 8b       	std	Z+22, r24	; 0x16
    1594:	11 8e       	std	Z+25, r1	; 0x19
    1596:	12 8e       	std	Z+26, r1	; 0x1a
    1598:	13 8e       	std	Z+27, r1	; 0x1b
    159a:	14 8e       	std	Z+28, r1	; 0x1c
    159c:	08 95       	ret

0000159e <initVariant>:
    159e:	08 95       	ret

000015a0 <main>:
void setupUSB() __attribute__((weak));
void setupUSB() { }

int main(void)
{
	init();
    15a0:	24 d1       	rcall	.+584    	; 0x17ea <init>

	initVariant();
    15a2:	fd df       	rcall	.-6      	; 0x159e <initVariant>
    15a4:	0e 94 6b 01 	call	0x2d6	; 0x2d6 <setup>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
    15a8:	c4 e9       	ldi	r28, 0x94	; 148
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
    15aa:	d9 e0       	ldi	r29, 0x09	; 9
    15ac:	0e 94 e8 01 	call	0x3d0	; 0x3d0 <loop>
#endif
	
	setup();
    
	for (;;) {
		loop();
    15b0:	20 97       	sbiw	r28, 0x00	; 0
		if (serialEventRun) serialEventRun();
    15b2:	e1 f3       	breq	.-8      	; 0x15ac <main+0xc>
    15b4:	b9 de       	rcall	.-654    	; 0x1328 <_Z14serialEventRunv>
    15b6:	fa cf       	rjmp	.-12     	; 0x15ac <main+0xc>

000015b8 <_Znaj>:
void *operator new(size_t size) {
  return malloc(size);
}

void *operator new[](size_t size) {
  return malloc(size);
    15b8:	1a c3       	rjmp	.+1588   	; 0x1bee <malloc>

000015ba <_ZdlPv>:
    15ba:	b1 c3       	rjmp	.+1890   	; 0x1d1e <free>

000015bc <_ZN5Print5writeEPKhj>:
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
    }
    virtual size_t write(const uint8_t *buffer, size_t size);
    size_t write(const char *buffer, size_t size) {
      return write((const uint8_t *)buffer, size);
    15bc:	cf 92       	push	r12
    15be:	df 92       	push	r13
    15c0:	ef 92       	push	r14
    15c2:	ff 92       	push	r15
    15c4:	0f 93       	push	r16
    15c6:	1f 93       	push	r17
    15c8:	cf 93       	push	r28
    15ca:	df 93       	push	r29
    15cc:	6c 01       	movw	r12, r24
    15ce:	7a 01       	movw	r14, r20
    15d0:	8b 01       	movw	r16, r22
    15d2:	c0 e0       	ldi	r28, 0x00	; 0
    15d4:	d0 e0       	ldi	r29, 0x00	; 0
    15d6:	ce 15       	cp	r28, r14
    15d8:	df 05       	cpc	r29, r15
    15da:	81 f0       	breq	.+32     	; 0x15fc <_ZN5Print5writeEPKhj+0x40>
    15dc:	d8 01       	movw	r26, r16
    15de:	6d 91       	ld	r22, X+
    15e0:	8d 01       	movw	r16, r26
    15e2:	d6 01       	movw	r26, r12
    15e4:	ed 91       	ld	r30, X+
    15e6:	fc 91       	ld	r31, X
    15e8:	01 90       	ld	r0, Z+
    15ea:	f0 81       	ld	r31, Z
    15ec:	e0 2d       	mov	r30, r0
    15ee:	c6 01       	movw	r24, r12
    15f0:	09 95       	icall
    15f2:	89 2b       	or	r24, r25
    15f4:	11 f0       	breq	.+4      	; 0x15fa <_ZN5Print5writeEPKhj+0x3e>
    15f6:	21 96       	adiw	r28, 0x01	; 1
    15f8:	ee cf       	rjmp	.-36     	; 0x15d6 <_ZN5Print5writeEPKhj+0x1a>
    15fa:	7e 01       	movw	r14, r28
    15fc:	c7 01       	movw	r24, r14
    15fe:	df 91       	pop	r29
    1600:	cf 91       	pop	r28
    1602:	1f 91       	pop	r17
    1604:	0f 91       	pop	r16
    1606:	ff 90       	pop	r15
    1608:	ef 90       	pop	r14
    160a:	df 90       	pop	r13
    160c:	cf 90       	pop	r12
    160e:	08 95       	ret

00001610 <_ZN5Print5writeEPKc>:
    1610:	61 15       	cp	r22, r1
    1612:	71 05       	cpc	r23, r1
    1614:	79 f0       	breq	.+30     	; 0x1634 <_ZN5Print5writeEPKc+0x24>
    1616:	fb 01       	movw	r30, r22
    1618:	01 90       	ld	r0, Z+
    161a:	00 20       	and	r0, r0
    161c:	e9 f7       	brne	.-6      	; 0x1618 <_ZN5Print5writeEPKc+0x8>
    161e:	31 97       	sbiw	r30, 0x01	; 1
    1620:	af 01       	movw	r20, r30
    1622:	46 1b       	sub	r20, r22
    1624:	57 0b       	sbc	r21, r23
    1626:	dc 01       	movw	r26, r24
    1628:	ed 91       	ld	r30, X+
    162a:	fc 91       	ld	r31, X
    162c:	02 80       	ldd	r0, Z+2	; 0x02
    162e:	f3 81       	ldd	r31, Z+3	; 0x03
    1630:	e0 2d       	mov	r30, r0
    1632:	09 94       	ijmp
    1634:	80 e0       	ldi	r24, 0x00	; 0
    1636:	90 e0       	ldi	r25, 0x00	; 0
    1638:	08 95       	ret

0000163a <_ZN5Print5printEPK19__FlashStringHelper>:
    163a:	ef 92       	push	r14
    163c:	ff 92       	push	r15
    163e:	0f 93       	push	r16
    1640:	1f 93       	push	r17
    1642:	cf 93       	push	r28
    1644:	df 93       	push	r29
    1646:	8c 01       	movw	r16, r24
    1648:	7b 01       	movw	r14, r22
    164a:	c0 e0       	ldi	r28, 0x00	; 0
    164c:	d0 e0       	ldi	r29, 0x00	; 0
    164e:	f7 01       	movw	r30, r14
    1650:	ec 0f       	add	r30, r28
    1652:	fd 1f       	adc	r31, r29
    1654:	64 91       	lpm	r22, Z
    1656:	66 23       	and	r22, r22
    1658:	61 f0       	breq	.+24     	; 0x1672 <_ZN5Print5printEPK19__FlashStringHelper+0x38>
    165a:	d8 01       	movw	r26, r16
    165c:	ed 91       	ld	r30, X+
    165e:	fc 91       	ld	r31, X
    1660:	01 90       	ld	r0, Z+
    1662:	f0 81       	ld	r31, Z
    1664:	e0 2d       	mov	r30, r0
    1666:	c8 01       	movw	r24, r16
    1668:	09 95       	icall
    166a:	89 2b       	or	r24, r25
    166c:	11 f0       	breq	.+4      	; 0x1672 <_ZN5Print5printEPK19__FlashStringHelper+0x38>
    166e:	21 96       	adiw	r28, 0x01	; 1
    1670:	ee cf       	rjmp	.-36     	; 0x164e <_ZN5Print5printEPK19__FlashStringHelper+0x14>
    1672:	ce 01       	movw	r24, r28
    1674:	df 91       	pop	r29
    1676:	cf 91       	pop	r28
    1678:	1f 91       	pop	r17
    167a:	0f 91       	pop	r16
    167c:	ff 90       	pop	r15
    167e:	ef 90       	pop	r14
    1680:	08 95       	ret

00001682 <_ZN5Print5printEPKc>:
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
  return write(str);
    1682:	c6 cf       	rjmp	.-116    	; 0x1610 <_ZN5Print5writeEPKc>

00001684 <__vector_18>:
	cli();
	m = timer0_millis;
	SREG = oldSREG;

	return m;
}
    1684:	1f 92       	push	r1
    1686:	0f 92       	push	r0
    1688:	0f b6       	in	r0, 0x3f	; 63
    168a:	0f 92       	push	r0
    168c:	11 24       	eor	r1, r1
    168e:	2f 93       	push	r18
    1690:	3f 93       	push	r19
    1692:	8f 93       	push	r24
    1694:	9f 93       	push	r25
    1696:	af 93       	push	r26
    1698:	bf 93       	push	r27
    169a:	80 91 f0 02 	lds	r24, 0x02F0	; 0x8002f0 <timer0_millis>
    169e:	90 91 f1 02 	lds	r25, 0x02F1	; 0x8002f1 <timer0_millis+0x1>
    16a2:	a0 91 f2 02 	lds	r26, 0x02F2	; 0x8002f2 <timer0_millis+0x2>
    16a6:	b0 91 f3 02 	lds	r27, 0x02F3	; 0x8002f3 <timer0_millis+0x3>
    16aa:	30 91 ef 02 	lds	r19, 0x02EF	; 0x8002ef <timer0_fract>
    16ae:	23 e0       	ldi	r18, 0x03	; 3
    16b0:	23 0f       	add	r18, r19
    16b2:	2d 37       	cpi	r18, 0x7D	; 125
    16b4:	20 f4       	brcc	.+8      	; 0x16be <__vector_18+0x3a>
    16b6:	01 96       	adiw	r24, 0x01	; 1
    16b8:	a1 1d       	adc	r26, r1
    16ba:	b1 1d       	adc	r27, r1
    16bc:	05 c0       	rjmp	.+10     	; 0x16c8 <__vector_18+0x44>
    16be:	26 e8       	ldi	r18, 0x86	; 134
    16c0:	23 0f       	add	r18, r19
    16c2:	02 96       	adiw	r24, 0x02	; 2
    16c4:	a1 1d       	adc	r26, r1
    16c6:	b1 1d       	adc	r27, r1
    16c8:	20 93 ef 02 	sts	0x02EF, r18	; 0x8002ef <timer0_fract>
    16cc:	80 93 f0 02 	sts	0x02F0, r24	; 0x8002f0 <timer0_millis>
    16d0:	90 93 f1 02 	sts	0x02F1, r25	; 0x8002f1 <timer0_millis+0x1>
    16d4:	a0 93 f2 02 	sts	0x02F2, r26	; 0x8002f2 <timer0_millis+0x2>
    16d8:	b0 93 f3 02 	sts	0x02F3, r27	; 0x8002f3 <timer0_millis+0x3>
    16dc:	80 91 f4 02 	lds	r24, 0x02F4	; 0x8002f4 <timer0_overflow_count>
    16e0:	90 91 f5 02 	lds	r25, 0x02F5	; 0x8002f5 <timer0_overflow_count+0x1>
    16e4:	a0 91 f6 02 	lds	r26, 0x02F6	; 0x8002f6 <timer0_overflow_count+0x2>
    16e8:	b0 91 f7 02 	lds	r27, 0x02F7	; 0x8002f7 <timer0_overflow_count+0x3>
    16ec:	01 96       	adiw	r24, 0x01	; 1
    16ee:	a1 1d       	adc	r26, r1
    16f0:	b1 1d       	adc	r27, r1
    16f2:	80 93 f4 02 	sts	0x02F4, r24	; 0x8002f4 <timer0_overflow_count>
    16f6:	90 93 f5 02 	sts	0x02F5, r25	; 0x8002f5 <timer0_overflow_count+0x1>
    16fa:	a0 93 f6 02 	sts	0x02F6, r26	; 0x8002f6 <timer0_overflow_count+0x2>
    16fe:	b0 93 f7 02 	sts	0x02F7, r27	; 0x8002f7 <timer0_overflow_count+0x3>
    1702:	bf 91       	pop	r27
    1704:	af 91       	pop	r26
    1706:	9f 91       	pop	r25
    1708:	8f 91       	pop	r24
    170a:	3f 91       	pop	r19
    170c:	2f 91       	pop	r18
    170e:	0f 90       	pop	r0
    1710:	0f be       	out	0x3f, r0	; 63
    1712:	0f 90       	pop	r0
    1714:	1f 90       	pop	r1
    1716:	18 95       	reti

00001718 <micros>:

unsigned long micros() {
	unsigned long m;
	uint8_t oldSREG = SREG, t;
    1718:	3f b7       	in	r19, 0x3f	; 63
	
	cli();
    171a:	f8 94       	cli
	m = timer0_overflow_count;
    171c:	80 91 f4 02 	lds	r24, 0x02F4	; 0x8002f4 <timer0_overflow_count>
    1720:	90 91 f5 02 	lds	r25, 0x02F5	; 0x8002f5 <timer0_overflow_count+0x1>
    1724:	a0 91 f6 02 	lds	r26, 0x02F6	; 0x8002f6 <timer0_overflow_count+0x2>
    1728:	b0 91 f7 02 	lds	r27, 0x02F7	; 0x8002f7 <timer0_overflow_count+0x3>
#if defined(TCNT0)
	t = TCNT0;
    172c:	26 b5       	in	r18, 0x26	; 38
#else
	#error TIMER 0 not defined
#endif

#ifdef TIFR0
	if ((TIFR0 & _BV(TOV0)) && (t < 255))
    172e:	a8 9b       	sbis	0x15, 0	; 21
    1730:	05 c0       	rjmp	.+10     	; 0x173c <micros+0x24>
    1732:	2f 3f       	cpi	r18, 0xFF	; 255
    1734:	19 f0       	breq	.+6      	; 0x173c <micros+0x24>
		m++;
    1736:	01 96       	adiw	r24, 0x01	; 1
    1738:	a1 1d       	adc	r26, r1
    173a:	b1 1d       	adc	r27, r1
#else
	if ((TIFR & _BV(TOV0)) && (t < 255))
		m++;
#endif

	SREG = oldSREG;
    173c:	3f bf       	out	0x3f, r19	; 63
	
	return ((m << 8) + t) * (64 / clockCyclesPerMicrosecond());
    173e:	ba 2f       	mov	r27, r26
    1740:	a9 2f       	mov	r26, r25
    1742:	98 2f       	mov	r25, r24
    1744:	88 27       	eor	r24, r24
    1746:	82 0f       	add	r24, r18
    1748:	91 1d       	adc	r25, r1
    174a:	a1 1d       	adc	r26, r1
    174c:	b1 1d       	adc	r27, r1
    174e:	bc 01       	movw	r22, r24
    1750:	cd 01       	movw	r24, r26
    1752:	42 e0       	ldi	r20, 0x02	; 2
    1754:	66 0f       	add	r22, r22
    1756:	77 1f       	adc	r23, r23
    1758:	88 1f       	adc	r24, r24
    175a:	99 1f       	adc	r25, r25
    175c:	4a 95       	dec	r20
    175e:	d1 f7       	brne	.-12     	; 0x1754 <micros+0x3c>
}
    1760:	08 95       	ret

00001762 <delay>:

void delay(unsigned long ms)
{
    1762:	8f 92       	push	r8
    1764:	9f 92       	push	r9
    1766:	af 92       	push	r10
    1768:	bf 92       	push	r11
    176a:	cf 92       	push	r12
    176c:	df 92       	push	r13
    176e:	ef 92       	push	r14
    1770:	ff 92       	push	r15
    1772:	6b 01       	movw	r12, r22
    1774:	7c 01       	movw	r14, r24
	uint32_t start = micros();
    1776:	d0 df       	rcall	.-96     	; 0x1718 <micros>
    1778:	4b 01       	movw	r8, r22
    177a:	5c 01       	movw	r10, r24

	while (ms > 0) {
    177c:	c1 14       	cp	r12, r1
    177e:	d1 04       	cpc	r13, r1
    1780:	e1 04       	cpc	r14, r1
    1782:	f1 04       	cpc	r15, r1
		yield();
    1784:	f1 f0       	breq	.+60     	; 0x17c2 <delay+0x60>
		while ( ms > 0 && (micros() - start) >= 1000) {
    1786:	02 d2       	rcall	.+1028   	; 0x1b8c <yield>
    1788:	c7 df       	rcall	.-114    	; 0x1718 <micros>
    178a:	dc 01       	movw	r26, r24
    178c:	cb 01       	movw	r24, r22
    178e:	88 19       	sub	r24, r8
    1790:	99 09       	sbc	r25, r9
    1792:	aa 09       	sbc	r26, r10
    1794:	bb 09       	sbc	r27, r11
    1796:	88 3e       	cpi	r24, 0xE8	; 232
    1798:	93 40       	sbci	r25, 0x03	; 3
    179a:	a1 05       	cpc	r26, r1
    179c:	b1 05       	cpc	r27, r1
    179e:	70 f3       	brcs	.-36     	; 0x177c <delay+0x1a>
			ms--;
    17a0:	21 e0       	ldi	r18, 0x01	; 1
    17a2:	c2 1a       	sub	r12, r18
    17a4:	d1 08       	sbc	r13, r1
    17a6:	e1 08       	sbc	r14, r1
    17a8:	f1 08       	sbc	r15, r1
			start += 1000;
    17aa:	88 ee       	ldi	r24, 0xE8	; 232
    17ac:	88 0e       	add	r8, r24
    17ae:	83 e0       	ldi	r24, 0x03	; 3
    17b0:	98 1e       	adc	r9, r24
    17b2:	a1 1c       	adc	r10, r1
    17b4:	b1 1c       	adc	r11, r1
{
	uint32_t start = micros();

	while (ms > 0) {
		yield();
		while ( ms > 0 && (micros() - start) >= 1000) {
    17b6:	c1 14       	cp	r12, r1
    17b8:	d1 04       	cpc	r13, r1
    17ba:	e1 04       	cpc	r14, r1
    17bc:	f1 04       	cpc	r15, r1
    17be:	21 f7       	brne	.-56     	; 0x1788 <delay+0x26>
    17c0:	dd cf       	rjmp	.-70     	; 0x177c <delay+0x1a>
			ms--;
			start += 1000;
		}
	}
}
    17c2:	ff 90       	pop	r15
    17c4:	ef 90       	pop	r14
    17c6:	df 90       	pop	r13
    17c8:	cf 90       	pop	r12
    17ca:	bf 90       	pop	r11
    17cc:	af 90       	pop	r10
    17ce:	9f 90       	pop	r9
    17d0:	8f 90       	pop	r8
    17d2:	08 95       	ret

000017d4 <delayMicroseconds>:
#elif F_CPU >= 16000000L
	// for the 16 MHz clock on most Arduino boards

	// for a one-microsecond delay, simply return.  the overhead
	// of the function call takes 14 (16) cycles, which is 1us
	if (us <= 1) return; //  = 3 cycles, (4 when true)
    17d4:	82 30       	cpi	r24, 0x02	; 2
    17d6:	91 05       	cpc	r25, r1
    17d8:	38 f0       	brcs	.+14     	; 0x17e8 <delayMicroseconds+0x14>

	// the following loop takes 1/4 of a microsecond (4 cycles)
	// per iteration, so execute it four times for each microsecond of
	// delay requested.
	us <<= 2; // x4 us, = 4 cycles
    17da:	88 0f       	add	r24, r24
    17dc:	99 1f       	adc	r25, r25
    17de:	88 0f       	add	r24, r24
    17e0:	99 1f       	adc	r25, r25

	// account for the time taken in the preceeding commands.
	// we just burned 19 (21) cycles above, remove 5, (5*4=20)
	// us is at least 8 so we can substract 5
	us -= 5; // = 2 cycles,
    17e2:	05 97       	sbiw	r24, 0x05	; 5
	

#endif

	// busy wait
	__asm__ __volatile__ (
    17e4:	01 97       	sbiw	r24, 0x01	; 1
    17e6:	f1 f7       	brne	.-4      	; 0x17e4 <delayMicroseconds+0x10>
    17e8:	08 95       	ret

000017ea <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
    17ea:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
    17ec:	84 b5       	in	r24, 0x24	; 36
    17ee:	82 60       	ori	r24, 0x02	; 2
    17f0:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
    17f2:	84 b5       	in	r24, 0x24	; 36
    17f4:	81 60       	ori	r24, 0x01	; 1
    17f6:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
    17f8:	85 b5       	in	r24, 0x25	; 37
    17fa:	82 60       	ori	r24, 0x02	; 2
    17fc:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
    17fe:	85 b5       	in	r24, 0x25	; 37
    1800:	81 60       	ori	r24, 0x01	; 1
    1802:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
    1804:	ee e6       	ldi	r30, 0x6E	; 110
    1806:	f0 e0       	ldi	r31, 0x00	; 0
    1808:	80 81       	ld	r24, Z
    180a:	81 60       	ori	r24, 0x01	; 1
    180c:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
    180e:	e1 e8       	ldi	r30, 0x81	; 129
    1810:	f0 e0       	ldi	r31, 0x00	; 0
    1812:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
    1814:	80 81       	ld	r24, Z
    1816:	82 60       	ori	r24, 0x02	; 2
    1818:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
    181a:	80 81       	ld	r24, Z
    181c:	81 60       	ori	r24, 0x01	; 1
    181e:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
    1820:	e0 e8       	ldi	r30, 0x80	; 128
    1822:	f0 e0       	ldi	r31, 0x00	; 0
    1824:	80 81       	ld	r24, Z
    1826:	81 60       	ori	r24, 0x01	; 1
    1828:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
    182a:	e1 eb       	ldi	r30, 0xB1	; 177
    182c:	f0 e0       	ldi	r31, 0x00	; 0
    182e:	80 81       	ld	r24, Z
    1830:	84 60       	ori	r24, 0x04	; 4
    1832:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
    1834:	e0 eb       	ldi	r30, 0xB0	; 176
    1836:	f0 e0       	ldi	r31, 0x00	; 0
    1838:	80 81       	ld	r24, Z
    183a:	81 60       	ori	r24, 0x01	; 1
    183c:	80 83       	st	Z, r24
//#else
	// Timer 2 not finished (may not be present on this CPU)
#endif

#if defined(TCCR3B) && defined(CS31) && defined(WGM30)
	sbi(TCCR3B, CS31);		// set timer 3 prescale factor to 64
    183e:	e1 e9       	ldi	r30, 0x91	; 145
    1840:	f0 e0       	ldi	r31, 0x00	; 0
    1842:	80 81       	ld	r24, Z
    1844:	82 60       	ori	r24, 0x02	; 2
    1846:	80 83       	st	Z, r24
	sbi(TCCR3B, CS30);
    1848:	80 81       	ld	r24, Z
    184a:	81 60       	ori	r24, 0x01	; 1
    184c:	80 83       	st	Z, r24
	sbi(TCCR3A, WGM30);		// put timer 3 in 8-bit phase correct pwm mode
    184e:	e0 e9       	ldi	r30, 0x90	; 144
    1850:	f0 e0       	ldi	r31, 0x00	; 0
    1852:	80 81       	ld	r24, Z
    1854:	81 60       	ori	r24, 0x01	; 1
    1856:	80 83       	st	Z, r24
#endif

#if defined(ADCSRA)
	// set a2d prescaler so we are inside the desired 50-200 KHz range.
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
    1858:	ea e7       	ldi	r30, 0x7A	; 122
    185a:	f0 e0       	ldi	r31, 0x00	; 0
    185c:	80 81       	ld	r24, Z
    185e:	84 60       	ori	r24, 0x04	; 4
    1860:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS1);
    1862:	80 81       	ld	r24, Z
    1864:	82 60       	ori	r24, 0x02	; 2
    1866:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS0);
    1868:	80 81       	ld	r24, Z
    186a:	81 60       	ori	r24, 0x01	; 1
    186c:	80 83       	st	Z, r24
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
    186e:	80 81       	ld	r24, Z
    1870:	80 68       	ori	r24, 0x80	; 128
    1872:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
    1874:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
    1878:	08 95       	ret

0000187a <analogRead>:

#if defined(analogPinToChannel)
#if defined(__AVR_ATmega32U4__)
	if (pin >= 18) pin -= 18; // allow for channel or pin numbers
#endif
	pin = analogPinToChannel(pin);
    187a:	88 30       	cpi	r24, 0x08	; 8
    187c:	38 f0       	brcs	.+14     	; 0x188c <analogRead+0x12>
    187e:	88 31       	cpi	r24, 0x18	; 24
    1880:	20 f0       	brcs	.+8      	; 0x188a <analogRead+0x10>
    1882:	9f e1       	ldi	r25, 0x1F	; 31
    1884:	98 1b       	sub	r25, r24
    1886:	89 2f       	mov	r24, r25
    1888:	01 c0       	rjmp	.+2      	; 0x188c <analogRead+0x12>
    188a:	8f ef       	ldi	r24, 0xFF	; 255
	// to 0 (the default).
#if defined(ADMUX)
#if defined(__AVR_ATtiny25__) || defined(__AVR_ATtiny45__) || defined(__AVR_ATtiny85__)
	ADMUX = (analog_reference << 4) | (pin & 0x07);
#else
	ADMUX = (analog_reference << 6) | (pin & 0x07);
    188c:	20 91 13 01 	lds	r18, 0x0113	; 0x800113 <analog_reference>
    1890:	90 e4       	ldi	r25, 0x40	; 64
    1892:	29 9f       	mul	r18, r25
    1894:	90 01       	movw	r18, r0
    1896:	11 24       	eor	r1, r1
    1898:	87 70       	andi	r24, 0x07	; 7
    189a:	82 2b       	or	r24, r18
    189c:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
	// without a delay, we seem to read from the wrong channel
	//delay(1);

#if defined(ADCSRA) && defined(ADCL)
	// start the conversion
	sbi(ADCSRA, ADSC);
    18a0:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    18a4:	80 64       	ori	r24, 0x40	; 64
    18a6:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>

	// ADSC is cleared when the conversion finishes
	while (bit_is_set(ADCSRA, ADSC));
    18aa:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    18ae:	86 fd       	sbrc	r24, 6
    18b0:	fc cf       	rjmp	.-8      	; 0x18aa <analogRead+0x30>

	// we have to read ADCL first; doing so locks both ADCL
	// and ADCH until ADCH is read.  reading ADCL second would
	// cause the results of each conversion to be discarded,
	// as ADCL and ADCH would be locked when it completed.
	low  = ADCL;
    18b2:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
	high = ADCH;
    18b6:	20 91 79 00 	lds	r18, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
	low  = 0;
	high = 0;
#endif

	// combine the two bytes
	return (high << 8) | low;
    18ba:	90 e0       	ldi	r25, 0x00	; 0
}
    18bc:	92 2b       	or	r25, r18
    18be:	08 95       	ret

000018c0 <analogWrite>:
// Right now, PWM output only works on the pins with
// hardware support.  These are defined in the appropriate
// pins_*.c file.  For the rest of the pins, we default
// to digital output.
void analogWrite(uint8_t pin, int val)
{
    18c0:	1f 93       	push	r17
    18c2:	cf 93       	push	r28
    18c4:	df 93       	push	r29
    18c6:	18 2f       	mov	r17, r24
    18c8:	eb 01       	movw	r28, r22
	// We need to make sure the PWM output is enabled for those pins
	// that support it, as we turn it off when digitally reading or
	// writing with them.  Also, make sure the pin is in output mode
	// for consistenty with Wiring, which doesn't require a pinMode
	// call for the analog output pins.
	pinMode(pin, OUTPUT);
    18ca:	61 e0       	ldi	r22, 0x01	; 1
    18cc:	96 d0       	rcall	.+300    	; 0x19fa <pinMode>
	if (val == 0)
    18ce:	20 97       	sbiw	r28, 0x00	; 0
    18d0:	11 f4       	brne	.+4      	; 0x18d6 <analogWrite+0x16>
	{
		digitalWrite(pin, LOW);
    18d2:	60 e0       	ldi	r22, 0x00	; 0
    18d4:	04 c0       	rjmp	.+8      	; 0x18de <analogWrite+0x1e>
	}
	else if (val == 255)
    18d6:	cf 3f       	cpi	r28, 0xFF	; 255
    18d8:	d1 05       	cpc	r29, r1
    18da:	31 f4       	brne	.+12     	; 0x18e8 <analogWrite+0x28>
	{
		digitalWrite(pin, HIGH);
    18dc:	61 e0       	ldi	r22, 0x01	; 1
    18de:	81 2f       	mov	r24, r17
				} else {
					digitalWrite(pin, HIGH);
				}
		}
	}
}
    18e0:	df 91       	pop	r29
    18e2:	cf 91       	pop	r28
	{
		digitalWrite(pin, LOW);
	}
	else if (val == 255)
	{
		digitalWrite(pin, HIGH);
    18e4:	1f 91       	pop	r17
    18e6:	c5 c0       	rjmp	.+394    	; 0x1a72 <digitalWrite>
	}
	else
	{
		switch(digitalPinToTimer(pin))
    18e8:	e1 2f       	mov	r30, r17
    18ea:	f0 e0       	ldi	r31, 0x00	; 0
    18ec:	e1 52       	subi	r30, 0x21	; 33
    18ee:	ff 4f       	sbci	r31, 0xFF	; 255
    18f0:	e4 91       	lpm	r30, Z
    18f2:	8e 2f       	mov	r24, r30
    18f4:	90 e0       	ldi	r25, 0x00	; 0
    18f6:	fc 01       	movw	r30, r24
    18f8:	31 97       	sbiw	r30, 0x01	; 1
    18fa:	ea 30       	cpi	r30, 0x0A	; 10
    18fc:	f1 05       	cpc	r31, r1
    18fe:	08 f0       	brcs	.+2      	; 0x1902 <analogWrite+0x42>
    1900:	45 c0       	rjmp	.+138    	; 0x198c <analogWrite+0xcc>
    1902:	ea 5b       	subi	r30, 0xBA	; 186
    1904:	ff 4f       	sbci	r31, 0xFF	; 255
    1906:	6a c1       	rjmp	.+724    	; 0x1bdc <__tablejump2__>
			#endif

			#if defined(TCCR0A) && defined(COM0A1)
			case TIMER0A:
				// connect pwm to pin on timer 0, channel A
				sbi(TCCR0A, COM0A1);
    1908:	84 b5       	in	r24, 0x24	; 36
    190a:	80 68       	ori	r24, 0x80	; 128
    190c:	84 bd       	out	0x24, r24	; 36
				OCR0A = val; // set pwm duty
    190e:	c7 bd       	out	0x27, r28	; 39
				break;
    1910:	42 c0       	rjmp	.+132    	; 0x1996 <analogWrite+0xd6>
			#endif

			#if defined(TCCR0A) && defined(COM0B1)
			case TIMER0B:
				// connect pwm to pin on timer 0, channel B
				sbi(TCCR0A, COM0B1);
    1912:	84 b5       	in	r24, 0x24	; 36
    1914:	80 62       	ori	r24, 0x20	; 32
    1916:	84 bd       	out	0x24, r24	; 36
				OCR0B = val; // set pwm duty
    1918:	c8 bd       	out	0x28, r28	; 40
				break;
    191a:	3d c0       	rjmp	.+122    	; 0x1996 <analogWrite+0xd6>
			#endif

			#if defined(TCCR1A) && defined(COM1A1)
			case TIMER1A:
				// connect pwm to pin on timer 1, channel A
				sbi(TCCR1A, COM1A1);
    191c:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    1920:	80 68       	ori	r24, 0x80	; 128
    1922:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
				OCR1A = val; // set pwm duty
    1926:	d0 93 89 00 	sts	0x0089, r29	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
    192a:	c0 93 88 00 	sts	0x0088, r28	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
				break;
    192e:	33 c0       	rjmp	.+102    	; 0x1996 <analogWrite+0xd6>
			#endif

			#if defined(TCCR1A) && defined(COM1B1)
			case TIMER1B:
				// connect pwm to pin on timer 1, channel B
				sbi(TCCR1A, COM1B1);
    1930:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    1934:	80 62       	ori	r24, 0x20	; 32
    1936:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
				OCR1B = val; // set pwm duty
    193a:	d0 93 8b 00 	sts	0x008B, r29	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
    193e:	c0 93 8a 00 	sts	0x008A, r28	; 0x80008a <__TEXT_REGION_LENGTH__+0x7e008a>
				break;
    1942:	29 c0       	rjmp	.+82     	; 0x1996 <analogWrite+0xd6>
			#endif

			#if defined(TCCR2A) && defined(COM2A1)
			case TIMER2A:
				// connect pwm to pin on timer 2, channel A
				sbi(TCCR2A, COM2A1);
    1944:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    1948:	80 68       	ori	r24, 0x80	; 128
    194a:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
				OCR2A = val; // set pwm duty
    194e:	c0 93 b3 00 	sts	0x00B3, r28	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
				break;
    1952:	21 c0       	rjmp	.+66     	; 0x1996 <analogWrite+0xd6>
			#endif

			#if defined(TCCR2A) && defined(COM2B1)
			case TIMER2B:
				// connect pwm to pin on timer 2, channel B
				sbi(TCCR2A, COM2B1);
    1954:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    1958:	80 62       	ori	r24, 0x20	; 32
    195a:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
				OCR2B = val; // set pwm duty
    195e:	c0 93 b4 00 	sts	0x00B4, r28	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7e00b4>
				break;
    1962:	19 c0       	rjmp	.+50     	; 0x1996 <analogWrite+0xd6>
			#endif

			#if defined(TCCR3A) && defined(COM3A1)
			case TIMER3A:
				// connect pwm to pin on timer 3, channel A
				sbi(TCCR3A, COM3A1);
    1964:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
    1968:	80 68       	ori	r24, 0x80	; 128
    196a:	80 93 90 00 	sts	0x0090, r24	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
				OCR3A = val; // set pwm duty
    196e:	d0 93 99 00 	sts	0x0099, r29	; 0x800099 <__TEXT_REGION_LENGTH__+0x7e0099>
    1972:	c0 93 98 00 	sts	0x0098, r28	; 0x800098 <__TEXT_REGION_LENGTH__+0x7e0098>
				break;
    1976:	0f c0       	rjmp	.+30     	; 0x1996 <analogWrite+0xd6>
			#endif

			#if defined(TCCR3A) && defined(COM3B1)
			case TIMER3B:
				// connect pwm to pin on timer 3, channel B
				sbi(TCCR3A, COM3B1);
    1978:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
    197c:	80 62       	ori	r24, 0x20	; 32
    197e:	80 93 90 00 	sts	0x0090, r24	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
				OCR3B = val; // set pwm duty
    1982:	d0 93 9b 00 	sts	0x009B, r29	; 0x80009b <__TEXT_REGION_LENGTH__+0x7e009b>
    1986:	c0 93 9a 00 	sts	0x009A, r28	; 0x80009a <__TEXT_REGION_LENGTH__+0x7e009a>
				break;
    198a:	05 c0       	rjmp	.+10     	; 0x1996 <analogWrite+0xd6>
				break;
			#endif

			case NOT_ON_TIMER:
			default:
				if (val < 128) {
    198c:	c0 38       	cpi	r28, 0x80	; 128
    198e:	d1 05       	cpc	r29, r1
    1990:	0c f0       	brlt	.+2      	; 0x1994 <analogWrite+0xd4>
    1992:	a4 cf       	rjmp	.-184    	; 0x18dc <analogWrite+0x1c>
    1994:	9e cf       	rjmp	.-196    	; 0x18d2 <analogWrite+0x12>
				} else {
					digitalWrite(pin, HIGH);
				}
		}
	}
}
    1996:	df 91       	pop	r29
    1998:	cf 91       	pop	r28
    199a:	1f 91       	pop	r17
    199c:	08 95       	ret

0000199e <turnOffPWM>:
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
    199e:	90 e0       	ldi	r25, 0x00	; 0
    19a0:	fc 01       	movw	r30, r24
    19a2:	31 97       	sbiw	r30, 0x01	; 1
    19a4:	ea 30       	cpi	r30, 0x0A	; 10
    19a6:	f1 05       	cpc	r31, r1
    19a8:	38 f5       	brcc	.+78     	; 0x19f8 <turnOffPWM+0x5a>
    19aa:	e0 5b       	subi	r30, 0xB0	; 176
    19ac:	ff 4f       	sbci	r31, 0xFF	; 255
    19ae:	16 c1       	rjmp	.+556    	; 0x1bdc <__tablejump2__>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
    19b0:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    19b4:	8f 77       	andi	r24, 0x7F	; 127
    19b6:	03 c0       	rjmp	.+6      	; 0x19be <turnOffPWM+0x20>
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    19b8:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    19bc:	8f 7d       	andi	r24, 0xDF	; 223
    19be:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    19c2:	08 95       	ret
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
    19c4:	84 b5       	in	r24, 0x24	; 36
    19c6:	8f 77       	andi	r24, 0x7F	; 127
    19c8:	02 c0       	rjmp	.+4      	; 0x19ce <turnOffPWM+0x30>
		#endif
		
		#if defined(TCCR0A) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
    19ca:	84 b5       	in	r24, 0x24	; 36
    19cc:	8f 7d       	andi	r24, 0xDF	; 223
    19ce:	84 bd       	out	0x24, r24	; 36
    19d0:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
    19d2:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    19d6:	8f 77       	andi	r24, 0x7F	; 127
    19d8:	03 c0       	rjmp	.+6      	; 0x19e0 <turnOffPWM+0x42>
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
    19da:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    19de:	8f 7d       	andi	r24, 0xDF	; 223
    19e0:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    19e4:	08 95       	ret
		#endif
		
		#if defined(TCCR3A) && defined(COM3A1)
		case  TIMER3A:  cbi(TCCR3A, COM3A1);    break;
    19e6:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
    19ea:	8f 77       	andi	r24, 0x7F	; 127
    19ec:	03 c0       	rjmp	.+6      	; 0x19f4 <turnOffPWM+0x56>
		#endif
		#if defined(TCCR3A) && defined(COM3B1)
		case  TIMER3B:  cbi(TCCR3A, COM3B1);    break;
    19ee:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
    19f2:	8f 7d       	andi	r24, 0xDF	; 223
    19f4:	80 93 90 00 	sts	0x0090, r24	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
    19f8:	08 95       	ret

000019fa <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
    19fa:	cf 93       	push	r28
    19fc:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
    19fe:	90 e0       	ldi	r25, 0x00	; 0
    1a00:	fc 01       	movw	r30, r24
    1a02:	e1 50       	subi	r30, 0x01	; 1
    1a04:	ff 4f       	sbci	r31, 0xFF	; 255
    1a06:	24 91       	lpm	r18, Z
	uint8_t port = digitalPinToPort(pin);
    1a08:	fc 01       	movw	r30, r24
    1a0a:	e1 5e       	subi	r30, 0xE1	; 225
    1a0c:	fe 4f       	sbci	r31, 0xFE	; 254
    1a0e:	84 91       	lpm	r24, Z
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
    1a10:	88 23       	and	r24, r24
    1a12:	61 f1       	breq	.+88     	; 0x1a6c <pinMode+0x72>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
    1a14:	90 e0       	ldi	r25, 0x00	; 0
    1a16:	88 0f       	add	r24, r24
    1a18:	99 1f       	adc	r25, r25
    1a1a:	fc 01       	movw	r30, r24
    1a1c:	ed 5a       	subi	r30, 0xAD	; 173
    1a1e:	fe 4f       	sbci	r31, 0xFE	; 254
    1a20:	c5 91       	lpm	r28, Z+
    1a22:	d4 91       	lpm	r29, Z
	out = portOutputRegister(port);
    1a24:	fc 01       	movw	r30, r24
    1a26:	e7 5b       	subi	r30, 0xB7	; 183
    1a28:	fe 4f       	sbci	r31, 0xFE	; 254
    1a2a:	a5 91       	lpm	r26, Z+
    1a2c:	b4 91       	lpm	r27, Z

	if (mode == INPUT) { 
    1a2e:	61 11       	cpse	r22, r1
    1a30:	09 c0       	rjmp	.+18     	; 0x1a44 <pinMode+0x4a>
		uint8_t oldSREG = SREG;
    1a32:	9f b7       	in	r25, 0x3f	; 63
                cli();
    1a34:	f8 94       	cli
		*reg &= ~bit;
    1a36:	88 81       	ld	r24, Y
    1a38:	20 95       	com	r18
    1a3a:	82 23       	and	r24, r18
    1a3c:	88 83       	st	Y, r24
		*out &= ~bit;
    1a3e:	ec 91       	ld	r30, X
    1a40:	2e 23       	and	r18, r30
    1a42:	0b c0       	rjmp	.+22     	; 0x1a5a <pinMode+0x60>
		SREG = oldSREG;
	} else if (mode == INPUT_PULLUP) {
    1a44:	62 30       	cpi	r22, 0x02	; 2
    1a46:	61 f4       	brne	.+24     	; 0x1a60 <pinMode+0x66>
		uint8_t oldSREG = SREG;
    1a48:	9f b7       	in	r25, 0x3f	; 63
                cli();
    1a4a:	f8 94       	cli
		*reg &= ~bit;
    1a4c:	88 81       	ld	r24, Y
    1a4e:	32 2f       	mov	r19, r18
    1a50:	30 95       	com	r19
    1a52:	83 23       	and	r24, r19
    1a54:	88 83       	st	Y, r24
		*out |= bit;
    1a56:	ec 91       	ld	r30, X
    1a58:	2e 2b       	or	r18, r30
    1a5a:	2c 93       	st	X, r18
		SREG = oldSREG;
    1a5c:	9f bf       	out	0x3f, r25	; 63
    1a5e:	06 c0       	rjmp	.+12     	; 0x1a6c <pinMode+0x72>
	} else {
		uint8_t oldSREG = SREG;
    1a60:	8f b7       	in	r24, 0x3f	; 63
                cli();
    1a62:	f8 94       	cli
		*reg |= bit;
    1a64:	e8 81       	ld	r30, Y
    1a66:	2e 2b       	or	r18, r30
    1a68:	28 83       	st	Y, r18
		SREG = oldSREG;
    1a6a:	8f bf       	out	0x3f, r24	; 63
	}
}
    1a6c:	df 91       	pop	r29
    1a6e:	cf 91       	pop	r28
    1a70:	08 95       	ret

00001a72 <digitalWrite>:
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
    1a72:	1f 93       	push	r17
    1a74:	cf 93       	push	r28
    1a76:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
    1a78:	28 2f       	mov	r18, r24
    1a7a:	30 e0       	ldi	r19, 0x00	; 0
    1a7c:	f9 01       	movw	r30, r18
    1a7e:	e1 52       	subi	r30, 0x21	; 33
    1a80:	ff 4f       	sbci	r31, 0xFF	; 255
    1a82:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
    1a84:	f9 01       	movw	r30, r18
    1a86:	e1 50       	subi	r30, 0x01	; 1
    1a88:	ff 4f       	sbci	r31, 0xFF	; 255
    1a8a:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
    1a8c:	f9 01       	movw	r30, r18
    1a8e:	e1 5e       	subi	r30, 0xE1	; 225
    1a90:	fe 4f       	sbci	r31, 0xFE	; 254
    1a92:	c4 91       	lpm	r28, Z
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
    1a94:	cc 23       	and	r28, r28
    1a96:	b9 f0       	breq	.+46     	; 0x1ac6 <digitalWrite+0x54>
    1a98:	16 2f       	mov	r17, r22

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    1a9a:	81 11       	cpse	r24, r1
    1a9c:	80 df       	rcall	.-256    	; 0x199e <turnOffPWM>

	out = portOutputRegister(port);
    1a9e:	ec 2f       	mov	r30, r28
    1aa0:	f0 e0       	ldi	r31, 0x00	; 0
    1aa2:	ee 0f       	add	r30, r30
    1aa4:	ff 1f       	adc	r31, r31
    1aa6:	e7 5b       	subi	r30, 0xB7	; 183
    1aa8:	fe 4f       	sbci	r31, 0xFE	; 254
    1aaa:	a5 91       	lpm	r26, Z+
    1aac:	b4 91       	lpm	r27, Z

	uint8_t oldSREG = SREG;
    1aae:	9f b7       	in	r25, 0x3f	; 63
	cli();
    1ab0:	f8 94       	cli

	if (val == LOW) {
    1ab2:	11 11       	cpse	r17, r1
    1ab4:	04 c0       	rjmp	.+8      	; 0x1abe <digitalWrite+0x4c>
		*out &= ~bit;
    1ab6:	8c 91       	ld	r24, X
    1ab8:	d0 95       	com	r29
    1aba:	d8 23       	and	r29, r24
    1abc:	02 c0       	rjmp	.+4      	; 0x1ac2 <digitalWrite+0x50>
	} else {
		*out |= bit;
    1abe:	ec 91       	ld	r30, X
    1ac0:	de 2b       	or	r29, r30
    1ac2:	dc 93       	st	X, r29
	}

	SREG = oldSREG;
    1ac4:	9f bf       	out	0x3f, r25	; 63
}
    1ac6:	df 91       	pop	r29
    1ac8:	cf 91       	pop	r28
    1aca:	1f 91       	pop	r17
    1acc:	08 95       	ret

00001ace <digitalRead>:

int digitalRead(uint8_t pin)
{
    1ace:	cf 93       	push	r28
    1ad0:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
    1ad2:	28 2f       	mov	r18, r24
    1ad4:	30 e0       	ldi	r19, 0x00	; 0
    1ad6:	f9 01       	movw	r30, r18
    1ad8:	e1 52       	subi	r30, 0x21	; 33
    1ada:	ff 4f       	sbci	r31, 0xFF	; 255
    1adc:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
    1ade:	f9 01       	movw	r30, r18
    1ae0:	e1 50       	subi	r30, 0x01	; 1
    1ae2:	ff 4f       	sbci	r31, 0xFF	; 255
    1ae4:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
    1ae6:	f9 01       	movw	r30, r18
    1ae8:	e1 5e       	subi	r30, 0xE1	; 225
    1aea:	fe 4f       	sbci	r31, 0xFE	; 254
    1aec:	c4 91       	lpm	r28, Z

	if (port == NOT_A_PIN) return LOW;
    1aee:	cc 23       	and	r28, r28
    1af0:	89 f0       	breq	.+34     	; 0x1b14 <digitalRead+0x46>

	// If the pin that support PWM output, we need to turn it off
	// before getting a digital reading.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    1af2:	81 11       	cpse	r24, r1
    1af4:	54 df       	rcall	.-344    	; 0x199e <turnOffPWM>

	if (*portInputRegister(port) & bit) return HIGH;
    1af6:	ec 2f       	mov	r30, r28
    1af8:	f0 e0       	ldi	r31, 0x00	; 0
    1afa:	ee 0f       	add	r30, r30
    1afc:	ff 1f       	adc	r31, r31
    1afe:	e1 5c       	subi	r30, 0xC1	; 193
    1b00:	fe 4f       	sbci	r31, 0xFE	; 254
    1b02:	a5 91       	lpm	r26, Z+
    1b04:	b4 91       	lpm	r27, Z
    1b06:	ec 91       	ld	r30, X
{
	uint8_t timer = digitalPinToTimer(pin);
	uint8_t bit = digitalPinToBitMask(pin);
	uint8_t port = digitalPinToPort(pin);

	if (port == NOT_A_PIN) return LOW;
    1b08:	ed 23       	and	r30, r29
    1b0a:	81 e0       	ldi	r24, 0x01	; 1
    1b0c:	90 e0       	ldi	r25, 0x00	; 0
    1b0e:	21 f4       	brne	.+8      	; 0x1b18 <digitalRead+0x4a>
    1b10:	80 e0       	ldi	r24, 0x00	; 0
    1b12:	02 c0       	rjmp	.+4      	; 0x1b18 <digitalRead+0x4a>
    1b14:	80 e0       	ldi	r24, 0x00	; 0
    1b16:	90 e0       	ldi	r25, 0x00	; 0
	// before getting a digital reading.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);

	if (*portInputRegister(port) & bit) return HIGH;
	return LOW;
}
    1b18:	df 91       	pop	r29
    1b1a:	cf 91       	pop	r28
    1b1c:	08 95       	ret

00001b1e <shiftIn>:
  Boston, MA  02111-1307  USA
*/

#include "wiring_private.h"

uint8_t shiftIn(uint8_t dataPin, uint8_t clockPin, uint8_t bitOrder) {
    1b1e:	cf 92       	push	r12
    1b20:	df 92       	push	r13
    1b22:	ef 92       	push	r14
    1b24:	ff 92       	push	r15
    1b26:	0f 93       	push	r16
    1b28:	1f 93       	push	r17
    1b2a:	cf 93       	push	r28
    1b2c:	df 93       	push	r29
    1b2e:	f8 2e       	mov	r15, r24
    1b30:	d6 2f       	mov	r29, r22
    1b32:	e4 2e       	mov	r14, r20
    1b34:	07 e0       	ldi	r16, 0x07	; 7
    1b36:	10 e0       	ldi	r17, 0x00	; 0
	uint8_t value = 0;
    1b38:	c0 e0       	ldi	r28, 0x00	; 0
	uint8_t i;

	for (i = 0; i < 8; ++i) {
		digitalWrite(clockPin, HIGH);
		if (bitOrder == LSBFIRST)
			value |= digitalRead(dataPin) << i;
    1b3a:	87 e0       	ldi	r24, 0x07	; 7
    1b3c:	c8 2e       	mov	r12, r24
    1b3e:	d1 2c       	mov	r13, r1
uint8_t shiftIn(uint8_t dataPin, uint8_t clockPin, uint8_t bitOrder) {
	uint8_t value = 0;
	uint8_t i;

	for (i = 0; i < 8; ++i) {
		digitalWrite(clockPin, HIGH);
    1b40:	61 e0       	ldi	r22, 0x01	; 1
    1b42:	8d 2f       	mov	r24, r29
    1b44:	96 df       	rcall	.-212    	; 0x1a72 <digitalWrite>
		if (bitOrder == LSBFIRST)
			value |= digitalRead(dataPin) << i;
    1b46:	8f 2d       	mov	r24, r15
	uint8_t value = 0;
	uint8_t i;

	for (i = 0; i < 8; ++i) {
		digitalWrite(clockPin, HIGH);
		if (bitOrder == LSBFIRST)
    1b48:	e1 10       	cpse	r14, r1
			value |= digitalRead(dataPin) << i;
    1b4a:	09 c0       	rjmp	.+18     	; 0x1b5e <shiftIn+0x40>
    1b4c:	c0 df       	rcall	.-128    	; 0x1ace <digitalRead>
    1b4e:	96 01       	movw	r18, r12
    1b50:	20 1b       	sub	r18, r16
    1b52:	31 0b       	sbc	r19, r17
    1b54:	01 c0       	rjmp	.+2      	; 0x1b58 <shiftIn+0x3a>
    1b56:	88 0f       	add	r24, r24
    1b58:	2a 95       	dec	r18
    1b5a:	ea f7       	brpl	.-6      	; 0x1b56 <shiftIn+0x38>
		else
			value |= digitalRead(dataPin) << (7 - i);
    1b5c:	06 c0       	rjmp	.+12     	; 0x1b6a <shiftIn+0x4c>
    1b5e:	b7 df       	rcall	.-146    	; 0x1ace <digitalRead>
    1b60:	00 2e       	mov	r0, r16
    1b62:	01 c0       	rjmp	.+2      	; 0x1b66 <shiftIn+0x48>
    1b64:	88 0f       	add	r24, r24
    1b66:	0a 94       	dec	r0
    1b68:	ea f7       	brpl	.-6      	; 0x1b64 <shiftIn+0x46>
		digitalWrite(clockPin, LOW);
    1b6a:	c8 2b       	or	r28, r24
    1b6c:	60 e0       	ldi	r22, 0x00	; 0
    1b6e:	8d 2f       	mov	r24, r29
    1b70:	80 df       	rcall	.-256    	; 0x1a72 <digitalWrite>
    1b72:	01 50       	subi	r16, 0x01	; 1
    1b74:	11 09       	sbc	r17, r1
    1b76:	20 f7       	brcc	.-56     	; 0x1b40 <shiftIn+0x22>
	}
	return value;
}
    1b78:	8c 2f       	mov	r24, r28
    1b7a:	df 91       	pop	r29
    1b7c:	cf 91       	pop	r28
    1b7e:	1f 91       	pop	r17
    1b80:	0f 91       	pop	r16
    1b82:	ff 90       	pop	r15
    1b84:	ef 90       	pop	r14
    1b86:	df 90       	pop	r13
    1b88:	cf 90       	pop	r12
    1b8a:	08 95       	ret

00001b8c <yield>:
 * libraries or sketches that supports cooperative threads.
 *
 * Its defined as a weak symbol and it can be redefined to implement a
 * real cooperative scheduler.
 */
static void __empty() {
    1b8c:	08 95       	ret

00001b8e <__udivmodhi4>:
    1b8e:	aa 1b       	sub	r26, r26
    1b90:	bb 1b       	sub	r27, r27
    1b92:	51 e1       	ldi	r21, 0x11	; 17
    1b94:	07 c0       	rjmp	.+14     	; 0x1ba4 <__udivmodhi4_ep>

00001b96 <__udivmodhi4_loop>:
    1b96:	aa 1f       	adc	r26, r26
    1b98:	bb 1f       	adc	r27, r27
    1b9a:	a6 17       	cp	r26, r22
    1b9c:	b7 07       	cpc	r27, r23
    1b9e:	10 f0       	brcs	.+4      	; 0x1ba4 <__udivmodhi4_ep>
    1ba0:	a6 1b       	sub	r26, r22
    1ba2:	b7 0b       	sbc	r27, r23

00001ba4 <__udivmodhi4_ep>:
    1ba4:	88 1f       	adc	r24, r24
    1ba6:	99 1f       	adc	r25, r25
    1ba8:	5a 95       	dec	r21
    1baa:	a9 f7       	brne	.-22     	; 0x1b96 <__udivmodhi4_loop>
    1bac:	80 95       	com	r24
    1bae:	90 95       	com	r25
    1bb0:	bc 01       	movw	r22, r24
    1bb2:	cd 01       	movw	r24, r26
    1bb4:	08 95       	ret

00001bb6 <__divmodhi4>:
    1bb6:	97 fb       	bst	r25, 7
    1bb8:	07 2e       	mov	r0, r23
    1bba:	16 f4       	brtc	.+4      	; 0x1bc0 <__divmodhi4+0xa>
    1bbc:	00 94       	com	r0
    1bbe:	06 d0       	rcall	.+12     	; 0x1bcc <__divmodhi4_neg1>
    1bc0:	77 fd       	sbrc	r23, 7
    1bc2:	08 d0       	rcall	.+16     	; 0x1bd4 <__divmodhi4_neg2>
    1bc4:	e4 df       	rcall	.-56     	; 0x1b8e <__udivmodhi4>
    1bc6:	07 fc       	sbrc	r0, 7
    1bc8:	05 d0       	rcall	.+10     	; 0x1bd4 <__divmodhi4_neg2>
    1bca:	3e f4       	brtc	.+14     	; 0x1bda <__divmodhi4_exit>

00001bcc <__divmodhi4_neg1>:
    1bcc:	90 95       	com	r25
    1bce:	81 95       	neg	r24
    1bd0:	9f 4f       	sbci	r25, 0xFF	; 255
    1bd2:	08 95       	ret

00001bd4 <__divmodhi4_neg2>:
    1bd4:	70 95       	com	r23
    1bd6:	61 95       	neg	r22
    1bd8:	7f 4f       	sbci	r23, 0xFF	; 255

00001bda <__divmodhi4_exit>:
    1bda:	08 95       	ret

00001bdc <__tablejump2__>:
    1bdc:	ee 0f       	add	r30, r30
    1bde:	ff 1f       	adc	r31, r31
    1be0:	00 24       	eor	r0, r0
    1be2:	00 1c       	adc	r0, r0
    1be4:	0b be       	out	0x3b, r0	; 59
    1be6:	07 90       	elpm	r0, Z+
    1be8:	f6 91       	elpm	r31, Z
    1bea:	e0 2d       	mov	r30, r0
    1bec:	09 94       	ijmp

00001bee <malloc>:
    1bee:	0f 93       	push	r16
    1bf0:	1f 93       	push	r17
    1bf2:	cf 93       	push	r28
    1bf4:	df 93       	push	r29
    1bf6:	82 30       	cpi	r24, 0x02	; 2
    1bf8:	91 05       	cpc	r25, r1
    1bfa:	10 f4       	brcc	.+4      	; 0x1c00 <malloc+0x12>
    1bfc:	82 e0       	ldi	r24, 0x02	; 2
    1bfe:	90 e0       	ldi	r25, 0x00	; 0
    1c00:	e0 91 fa 02 	lds	r30, 0x02FA	; 0x8002fa <__flp>
    1c04:	f0 91 fb 02 	lds	r31, 0x02FB	; 0x8002fb <__flp+0x1>
    1c08:	20 e0       	ldi	r18, 0x00	; 0
    1c0a:	30 e0       	ldi	r19, 0x00	; 0
    1c0c:	a0 e0       	ldi	r26, 0x00	; 0
    1c0e:	b0 e0       	ldi	r27, 0x00	; 0
    1c10:	30 97       	sbiw	r30, 0x00	; 0
    1c12:	19 f1       	breq	.+70     	; 0x1c5a <malloc+0x6c>
    1c14:	40 81       	ld	r20, Z
    1c16:	51 81       	ldd	r21, Z+1	; 0x01
    1c18:	02 81       	ldd	r16, Z+2	; 0x02
    1c1a:	13 81       	ldd	r17, Z+3	; 0x03
    1c1c:	48 17       	cp	r20, r24
    1c1e:	59 07       	cpc	r21, r25
    1c20:	c8 f0       	brcs	.+50     	; 0x1c54 <malloc+0x66>
    1c22:	84 17       	cp	r24, r20
    1c24:	95 07       	cpc	r25, r21
    1c26:	69 f4       	brne	.+26     	; 0x1c42 <malloc+0x54>
    1c28:	10 97       	sbiw	r26, 0x00	; 0
    1c2a:	31 f0       	breq	.+12     	; 0x1c38 <malloc+0x4a>
    1c2c:	12 96       	adiw	r26, 0x02	; 2
    1c2e:	0c 93       	st	X, r16
    1c30:	12 97       	sbiw	r26, 0x02	; 2
    1c32:	13 96       	adiw	r26, 0x03	; 3
    1c34:	1c 93       	st	X, r17
    1c36:	27 c0       	rjmp	.+78     	; 0x1c86 <malloc+0x98>
    1c38:	00 93 fa 02 	sts	0x02FA, r16	; 0x8002fa <__flp>
    1c3c:	10 93 fb 02 	sts	0x02FB, r17	; 0x8002fb <__flp+0x1>
    1c40:	22 c0       	rjmp	.+68     	; 0x1c86 <malloc+0x98>
    1c42:	21 15       	cp	r18, r1
    1c44:	31 05       	cpc	r19, r1
    1c46:	19 f0       	breq	.+6      	; 0x1c4e <malloc+0x60>
    1c48:	42 17       	cp	r20, r18
    1c4a:	53 07       	cpc	r21, r19
    1c4c:	18 f4       	brcc	.+6      	; 0x1c54 <malloc+0x66>
    1c4e:	9a 01       	movw	r18, r20
    1c50:	bd 01       	movw	r22, r26
    1c52:	ef 01       	movw	r28, r30
    1c54:	df 01       	movw	r26, r30
    1c56:	f8 01       	movw	r30, r16
    1c58:	db cf       	rjmp	.-74     	; 0x1c10 <malloc+0x22>
    1c5a:	21 15       	cp	r18, r1
    1c5c:	31 05       	cpc	r19, r1
    1c5e:	f9 f0       	breq	.+62     	; 0x1c9e <malloc+0xb0>
    1c60:	28 1b       	sub	r18, r24
    1c62:	39 0b       	sbc	r19, r25
    1c64:	24 30       	cpi	r18, 0x04	; 4
    1c66:	31 05       	cpc	r19, r1
    1c68:	80 f4       	brcc	.+32     	; 0x1c8a <malloc+0x9c>
    1c6a:	8a 81       	ldd	r24, Y+2	; 0x02
    1c6c:	9b 81       	ldd	r25, Y+3	; 0x03
    1c6e:	61 15       	cp	r22, r1
    1c70:	71 05       	cpc	r23, r1
    1c72:	21 f0       	breq	.+8      	; 0x1c7c <malloc+0x8e>
    1c74:	fb 01       	movw	r30, r22
    1c76:	93 83       	std	Z+3, r25	; 0x03
    1c78:	82 83       	std	Z+2, r24	; 0x02
    1c7a:	04 c0       	rjmp	.+8      	; 0x1c84 <malloc+0x96>
    1c7c:	90 93 fb 02 	sts	0x02FB, r25	; 0x8002fb <__flp+0x1>
    1c80:	80 93 fa 02 	sts	0x02FA, r24	; 0x8002fa <__flp>
    1c84:	fe 01       	movw	r30, r28
    1c86:	32 96       	adiw	r30, 0x02	; 2
    1c88:	44 c0       	rjmp	.+136    	; 0x1d12 <malloc+0x124>
    1c8a:	fe 01       	movw	r30, r28
    1c8c:	e2 0f       	add	r30, r18
    1c8e:	f3 1f       	adc	r31, r19
    1c90:	81 93       	st	Z+, r24
    1c92:	91 93       	st	Z+, r25
    1c94:	22 50       	subi	r18, 0x02	; 2
    1c96:	31 09       	sbc	r19, r1
    1c98:	39 83       	std	Y+1, r19	; 0x01
    1c9a:	28 83       	st	Y, r18
    1c9c:	3a c0       	rjmp	.+116    	; 0x1d12 <malloc+0x124>
    1c9e:	20 91 f8 02 	lds	r18, 0x02F8	; 0x8002f8 <__brkval>
    1ca2:	30 91 f9 02 	lds	r19, 0x02F9	; 0x8002f9 <__brkval+0x1>
    1ca6:	23 2b       	or	r18, r19
    1ca8:	41 f4       	brne	.+16     	; 0x1cba <malloc+0xcc>
    1caa:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
    1cae:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
    1cb2:	30 93 f9 02 	sts	0x02F9, r19	; 0x8002f9 <__brkval+0x1>
    1cb6:	20 93 f8 02 	sts	0x02F8, r18	; 0x8002f8 <__brkval>
    1cba:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
    1cbe:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
    1cc2:	21 15       	cp	r18, r1
    1cc4:	31 05       	cpc	r19, r1
    1cc6:	41 f4       	brne	.+16     	; 0x1cd8 <malloc+0xea>
    1cc8:	2d b7       	in	r18, 0x3d	; 61
    1cca:	3e b7       	in	r19, 0x3e	; 62
    1ccc:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    1cd0:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    1cd4:	24 1b       	sub	r18, r20
    1cd6:	35 0b       	sbc	r19, r21
    1cd8:	e0 91 f8 02 	lds	r30, 0x02F8	; 0x8002f8 <__brkval>
    1cdc:	f0 91 f9 02 	lds	r31, 0x02F9	; 0x8002f9 <__brkval+0x1>
    1ce0:	e2 17       	cp	r30, r18
    1ce2:	f3 07       	cpc	r31, r19
    1ce4:	a0 f4       	brcc	.+40     	; 0x1d0e <malloc+0x120>
    1ce6:	2e 1b       	sub	r18, r30
    1ce8:	3f 0b       	sbc	r19, r31
    1cea:	28 17       	cp	r18, r24
    1cec:	39 07       	cpc	r19, r25
    1cee:	78 f0       	brcs	.+30     	; 0x1d0e <malloc+0x120>
    1cf0:	ac 01       	movw	r20, r24
    1cf2:	4e 5f       	subi	r20, 0xFE	; 254
    1cf4:	5f 4f       	sbci	r21, 0xFF	; 255
    1cf6:	24 17       	cp	r18, r20
    1cf8:	35 07       	cpc	r19, r21
    1cfa:	48 f0       	brcs	.+18     	; 0x1d0e <malloc+0x120>
    1cfc:	4e 0f       	add	r20, r30
    1cfe:	5f 1f       	adc	r21, r31
    1d00:	50 93 f9 02 	sts	0x02F9, r21	; 0x8002f9 <__brkval+0x1>
    1d04:	40 93 f8 02 	sts	0x02F8, r20	; 0x8002f8 <__brkval>
    1d08:	81 93       	st	Z+, r24
    1d0a:	91 93       	st	Z+, r25
    1d0c:	02 c0       	rjmp	.+4      	; 0x1d12 <malloc+0x124>
    1d0e:	e0 e0       	ldi	r30, 0x00	; 0
    1d10:	f0 e0       	ldi	r31, 0x00	; 0
    1d12:	cf 01       	movw	r24, r30
    1d14:	df 91       	pop	r29
    1d16:	cf 91       	pop	r28
    1d18:	1f 91       	pop	r17
    1d1a:	0f 91       	pop	r16
    1d1c:	08 95       	ret

00001d1e <free>:
    1d1e:	cf 93       	push	r28
    1d20:	df 93       	push	r29
    1d22:	00 97       	sbiw	r24, 0x00	; 0
    1d24:	09 f4       	brne	.+2      	; 0x1d28 <free+0xa>
    1d26:	81 c0       	rjmp	.+258    	; 0x1e2a <free+0x10c>
    1d28:	fc 01       	movw	r30, r24
    1d2a:	32 97       	sbiw	r30, 0x02	; 2
    1d2c:	13 82       	std	Z+3, r1	; 0x03
    1d2e:	12 82       	std	Z+2, r1	; 0x02
    1d30:	a0 91 fa 02 	lds	r26, 0x02FA	; 0x8002fa <__flp>
    1d34:	b0 91 fb 02 	lds	r27, 0x02FB	; 0x8002fb <__flp+0x1>
    1d38:	10 97       	sbiw	r26, 0x00	; 0
    1d3a:	81 f4       	brne	.+32     	; 0x1d5c <free+0x3e>
    1d3c:	20 81       	ld	r18, Z
    1d3e:	31 81       	ldd	r19, Z+1	; 0x01
    1d40:	82 0f       	add	r24, r18
    1d42:	93 1f       	adc	r25, r19
    1d44:	20 91 f8 02 	lds	r18, 0x02F8	; 0x8002f8 <__brkval>
    1d48:	30 91 f9 02 	lds	r19, 0x02F9	; 0x8002f9 <__brkval+0x1>
    1d4c:	28 17       	cp	r18, r24
    1d4e:	39 07       	cpc	r19, r25
    1d50:	51 f5       	brne	.+84     	; 0x1da6 <free+0x88>
    1d52:	f0 93 f9 02 	sts	0x02F9, r31	; 0x8002f9 <__brkval+0x1>
    1d56:	e0 93 f8 02 	sts	0x02F8, r30	; 0x8002f8 <__brkval>
    1d5a:	67 c0       	rjmp	.+206    	; 0x1e2a <free+0x10c>
    1d5c:	ed 01       	movw	r28, r26
    1d5e:	20 e0       	ldi	r18, 0x00	; 0
    1d60:	30 e0       	ldi	r19, 0x00	; 0
    1d62:	ce 17       	cp	r28, r30
    1d64:	df 07       	cpc	r29, r31
    1d66:	40 f4       	brcc	.+16     	; 0x1d78 <free+0x5a>
    1d68:	4a 81       	ldd	r20, Y+2	; 0x02
    1d6a:	5b 81       	ldd	r21, Y+3	; 0x03
    1d6c:	9e 01       	movw	r18, r28
    1d6e:	41 15       	cp	r20, r1
    1d70:	51 05       	cpc	r21, r1
    1d72:	f1 f0       	breq	.+60     	; 0x1db0 <free+0x92>
    1d74:	ea 01       	movw	r28, r20
    1d76:	f5 cf       	rjmp	.-22     	; 0x1d62 <free+0x44>
    1d78:	d3 83       	std	Z+3, r29	; 0x03
    1d7a:	c2 83       	std	Z+2, r28	; 0x02
    1d7c:	40 81       	ld	r20, Z
    1d7e:	51 81       	ldd	r21, Z+1	; 0x01
    1d80:	84 0f       	add	r24, r20
    1d82:	95 1f       	adc	r25, r21
    1d84:	c8 17       	cp	r28, r24
    1d86:	d9 07       	cpc	r29, r25
    1d88:	59 f4       	brne	.+22     	; 0x1da0 <free+0x82>
    1d8a:	88 81       	ld	r24, Y
    1d8c:	99 81       	ldd	r25, Y+1	; 0x01
    1d8e:	84 0f       	add	r24, r20
    1d90:	95 1f       	adc	r25, r21
    1d92:	02 96       	adiw	r24, 0x02	; 2
    1d94:	91 83       	std	Z+1, r25	; 0x01
    1d96:	80 83       	st	Z, r24
    1d98:	8a 81       	ldd	r24, Y+2	; 0x02
    1d9a:	9b 81       	ldd	r25, Y+3	; 0x03
    1d9c:	93 83       	std	Z+3, r25	; 0x03
    1d9e:	82 83       	std	Z+2, r24	; 0x02
    1da0:	21 15       	cp	r18, r1
    1da2:	31 05       	cpc	r19, r1
    1da4:	29 f4       	brne	.+10     	; 0x1db0 <free+0x92>
    1da6:	f0 93 fb 02 	sts	0x02FB, r31	; 0x8002fb <__flp+0x1>
    1daa:	e0 93 fa 02 	sts	0x02FA, r30	; 0x8002fa <__flp>
    1dae:	3d c0       	rjmp	.+122    	; 0x1e2a <free+0x10c>
    1db0:	e9 01       	movw	r28, r18
    1db2:	fb 83       	std	Y+3, r31	; 0x03
    1db4:	ea 83       	std	Y+2, r30	; 0x02
    1db6:	49 91       	ld	r20, Y+
    1db8:	59 91       	ld	r21, Y+
    1dba:	c4 0f       	add	r28, r20
    1dbc:	d5 1f       	adc	r29, r21
    1dbe:	ec 17       	cp	r30, r28
    1dc0:	fd 07       	cpc	r31, r29
    1dc2:	61 f4       	brne	.+24     	; 0x1ddc <free+0xbe>
    1dc4:	80 81       	ld	r24, Z
    1dc6:	91 81       	ldd	r25, Z+1	; 0x01
    1dc8:	84 0f       	add	r24, r20
    1dca:	95 1f       	adc	r25, r21
    1dcc:	02 96       	adiw	r24, 0x02	; 2
    1dce:	e9 01       	movw	r28, r18
    1dd0:	99 83       	std	Y+1, r25	; 0x01
    1dd2:	88 83       	st	Y, r24
    1dd4:	82 81       	ldd	r24, Z+2	; 0x02
    1dd6:	93 81       	ldd	r25, Z+3	; 0x03
    1dd8:	9b 83       	std	Y+3, r25	; 0x03
    1dda:	8a 83       	std	Y+2, r24	; 0x02
    1ddc:	e0 e0       	ldi	r30, 0x00	; 0
    1dde:	f0 e0       	ldi	r31, 0x00	; 0
    1de0:	12 96       	adiw	r26, 0x02	; 2
    1de2:	8d 91       	ld	r24, X+
    1de4:	9c 91       	ld	r25, X
    1de6:	13 97       	sbiw	r26, 0x03	; 3
    1de8:	00 97       	sbiw	r24, 0x00	; 0
    1dea:	19 f0       	breq	.+6      	; 0x1df2 <free+0xd4>
    1dec:	fd 01       	movw	r30, r26
    1dee:	dc 01       	movw	r26, r24
    1df0:	f7 cf       	rjmp	.-18     	; 0x1de0 <free+0xc2>
    1df2:	8d 91       	ld	r24, X+
    1df4:	9c 91       	ld	r25, X
    1df6:	11 97       	sbiw	r26, 0x01	; 1
    1df8:	9d 01       	movw	r18, r26
    1dfa:	2e 5f       	subi	r18, 0xFE	; 254
    1dfc:	3f 4f       	sbci	r19, 0xFF	; 255
    1dfe:	82 0f       	add	r24, r18
    1e00:	93 1f       	adc	r25, r19
    1e02:	20 91 f8 02 	lds	r18, 0x02F8	; 0x8002f8 <__brkval>
    1e06:	30 91 f9 02 	lds	r19, 0x02F9	; 0x8002f9 <__brkval+0x1>
    1e0a:	28 17       	cp	r18, r24
    1e0c:	39 07       	cpc	r19, r25
    1e0e:	69 f4       	brne	.+26     	; 0x1e2a <free+0x10c>
    1e10:	30 97       	sbiw	r30, 0x00	; 0
    1e12:	29 f4       	brne	.+10     	; 0x1e1e <free+0x100>
    1e14:	10 92 fb 02 	sts	0x02FB, r1	; 0x8002fb <__flp+0x1>
    1e18:	10 92 fa 02 	sts	0x02FA, r1	; 0x8002fa <__flp>
    1e1c:	02 c0       	rjmp	.+4      	; 0x1e22 <free+0x104>
    1e1e:	13 82       	std	Z+3, r1	; 0x03
    1e20:	12 82       	std	Z+2, r1	; 0x02
    1e22:	b0 93 f9 02 	sts	0x02F9, r27	; 0x8002f9 <__brkval+0x1>
    1e26:	a0 93 f8 02 	sts	0x02F8, r26	; 0x8002f8 <__brkval>
    1e2a:	df 91       	pop	r29
    1e2c:	cf 91       	pop	r28
    1e2e:	08 95       	ret

00001e30 <__do_global_dtors>:
    1e30:	10 e0       	ldi	r17, 0x00	; 0
    1e32:	c2 eb       	ldi	r28, 0xB2	; 178
    1e34:	d0 e0       	ldi	r29, 0x00	; 0
    1e36:	03 c0       	rjmp	.+6      	; 0x1e3e <__do_global_dtors+0xe>
    1e38:	fe 01       	movw	r30, r28
    1e3a:	d0 de       	rcall	.-608    	; 0x1bdc <__tablejump2__>
    1e3c:	21 96       	adiw	r28, 0x01	; 1
    1e3e:	c3 3b       	cpi	r28, 0xB3	; 179
    1e40:	d1 07       	cpc	r29, r17
    1e42:	d1 f7       	brne	.-12     	; 0x1e38 <__do_global_dtors+0x8>
    1e44:	f8 94       	cli

00001e46 <__stop_program>:
    1e46:	ff cf       	rjmp	.-2      	; 0x1e46 <__stop_program>
